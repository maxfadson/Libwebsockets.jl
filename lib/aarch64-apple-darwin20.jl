to_c_type(t::Type) = t
to_c_type_pairs(va_list) = map(enumerate(to_c_type.(va_list))) do (ind, type)
    :(va_list[$ind]::$type)
end

# prologue.jl

function OSSL_provider_init(handle::Ptr{Cvoid}, in::Ptr{Cvoid}, out::Ptr{Ptr{Cvoid}}, provctx::Ptr{Ptr{Cvoid}})
    ccall((:OSSL_provider_init, "libssl"), Cint,
          (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}),
          handle, in, out, provctx)
end

const __darwin_socklen_t = UInt32

const __darwin_time_t = Clong

const __darwin_gid_t = UInt32

const __darwin_off_t = Int64

const __darwin_uid_t = UInt32

struct __darwin_pthread_handler_rec
    __routine::Ptr{Cvoid}
    __arg::Ptr{Cvoid}
    __next::Ptr{__darwin_pthread_handler_rec}
end

mutable struct _opaque_pthread_once_t
    __sig::Clong
    __opaque::NTuple{8, Cchar}
    _opaque_pthread_once_t() = new()
end

mutable struct _opaque_pthread_t
    __sig::Clong
    __cleanup_stack::Ptr{__darwin_pthread_handler_rec}
    __opaque::NTuple{8176, Cchar}
    _opaque_pthread_t() = new()
end

const __darwin_pthread_key_t = Culong

const __darwin_pthread_once_t = _opaque_pthread_once_t

const __darwin_pthread_t = Ptr{_opaque_pthread_t}

const uid_t = __darwin_uid_t

const intmax_t = Clong

const uintmax_t = Culong

const gid_t = __darwin_gid_t

const off_t = __darwin_off_t

const time_t = __darwin_time_t

const socklen_t = __darwin_socklen_t

const in_addr_t = UInt32

const in_port_t = UInt16

const pthread_once_t = __darwin_pthread_once_t

const pthread_t = __darwin_pthread_t

const pthread_key_t = __darwin_pthread_key_t

const sa_family_t = UInt8

struct sockaddr
    sa_len::UInt8
    sa_family::sa_family_t
    sa_data::NTuple{14, Cchar}
end

struct sockaddr_storage
    ss_len::UInt8
    ss_family::sa_family_t
    __ss_pad1::NTuple{6, Cchar}
    __ss_align::Int64
    __ss_pad2::NTuple{112, Cchar}
end

struct in_addr
    s_addr::in_addr_t
end

struct sockaddr_in
    sin_len::UInt8
    sin_family::sa_family_t
    sin_port::in_port_t
    sin_addr::in_addr
    sin_zero::NTuple{8, Cchar}
end

struct addrinfo
    ai_flags::Cint
    ai_family::Cint
    ai_socktype::Cint
    ai_protocol::Cint
    ai_addrlen::socklen_t
    ai_canonname::Ptr{Cchar}
    ai_addr::Ptr{sockaddr}
    ai_next::Ptr{addrinfo}
end

const lws_usec_t = Int64

mutable struct stack_st end

const OPENSSL_STACK = stack_st

function OPENSSL_sk_num(arg1)
    @ccall libwebsockets.OPENSSL_sk_num(arg1::Ptr{OPENSSL_STACK})::Cint
end

function OPENSSL_sk_value(arg1, arg2)
    @ccall libwebsockets.OPENSSL_sk_value(arg1::Ptr{OPENSSL_STACK}, arg2::Cint)::Ptr{Cvoid}
end

function OPENSSL_sk_set(st, i, data)
    @ccall libwebsockets.OPENSSL_sk_set(st::Ptr{OPENSSL_STACK}, i::Cint, data::Ptr{Cvoid})::Ptr{Cvoid}
end

# typedef int ( * OPENSSL_sk_compfunc ) ( const void * , const void * )
const OPENSSL_sk_compfunc = Ptr{Cvoid}

function OPENSSL_sk_new(cmp)
    @ccall libwebsockets.OPENSSL_sk_new(cmp::OPENSSL_sk_compfunc)::Ptr{OPENSSL_STACK}
end

function OPENSSL_sk_new_null()
    @ccall libwebsockets.OPENSSL_sk_new_null()::Ptr{OPENSSL_STACK}
end

function OPENSSL_sk_free(arg1)
    @ccall libwebsockets.OPENSSL_sk_free(arg1::Ptr{OPENSSL_STACK})::Cvoid
end

function OPENSSL_sk_pop_free(st, func)
    @ccall libwebsockets.OPENSSL_sk_pop_free(st::Ptr{OPENSSL_STACK}, func::Ptr{Cvoid})::Cvoid
end

# typedef void * ( * OPENSSL_sk_copyfunc ) ( const void * )
const OPENSSL_sk_copyfunc = Ptr{Cvoid}

# typedef void ( * OPENSSL_sk_freefunc ) ( void * )
const OPENSSL_sk_freefunc = Ptr{Cvoid}

function OPENSSL_sk_deep_copy(arg1, c, f)
    @ccall libwebsockets.OPENSSL_sk_deep_copy(arg1::Ptr{OPENSSL_STACK}, c::OPENSSL_sk_copyfunc, f::OPENSSL_sk_freefunc)::Ptr{OPENSSL_STACK}
end

function OPENSSL_sk_insert(sk, data, where)
    @ccall libwebsockets.OPENSSL_sk_insert(sk::Ptr{OPENSSL_STACK}, data::Ptr{Cvoid}, where::Cint)::Cint
end

function OPENSSL_sk_delete(st, loc)
    @ccall libwebsockets.OPENSSL_sk_delete(st::Ptr{OPENSSL_STACK}, loc::Cint)::Ptr{Cvoid}
end

function OPENSSL_sk_delete_ptr(st, p)
    @ccall libwebsockets.OPENSSL_sk_delete_ptr(st::Ptr{OPENSSL_STACK}, p::Ptr{Cvoid})::Ptr{Cvoid}
end

function OPENSSL_sk_find(st, data)
    @ccall libwebsockets.OPENSSL_sk_find(st::Ptr{OPENSSL_STACK}, data::Ptr{Cvoid})::Cint
end

function OPENSSL_sk_find_ex(st, data)
    @ccall libwebsockets.OPENSSL_sk_find_ex(st::Ptr{OPENSSL_STACK}, data::Ptr{Cvoid})::Cint
end

function OPENSSL_sk_push(st, data)
    @ccall libwebsockets.OPENSSL_sk_push(st::Ptr{OPENSSL_STACK}, data::Ptr{Cvoid})::Cint
end

function OPENSSL_sk_unshift(st, data)
    @ccall libwebsockets.OPENSSL_sk_unshift(st::Ptr{OPENSSL_STACK}, data::Ptr{Cvoid})::Cint
end

function OPENSSL_sk_shift(st)
    @ccall libwebsockets.OPENSSL_sk_shift(st::Ptr{OPENSSL_STACK})::Ptr{Cvoid}
end

function OPENSSL_sk_pop(st)
    @ccall libwebsockets.OPENSSL_sk_pop(st::Ptr{OPENSSL_STACK})::Ptr{Cvoid}
end

function OPENSSL_sk_zero(st)
    @ccall libwebsockets.OPENSSL_sk_zero(st::Ptr{OPENSSL_STACK})::Cvoid
end

function OPENSSL_sk_set_cmp_func(sk, cmp)
    @ccall libwebsockets.OPENSSL_sk_set_cmp_func(sk::Ptr{OPENSSL_STACK}, cmp::OPENSSL_sk_compfunc)::OPENSSL_sk_compfunc
end

function OPENSSL_sk_dup(st)
    @ccall libwebsockets.OPENSSL_sk_dup(st::Ptr{OPENSSL_STACK})::Ptr{OPENSSL_STACK}
end

function OPENSSL_sk_sort(st)
    @ccall libwebsockets.OPENSSL_sk_sort(st::Ptr{OPENSSL_STACK})::Cvoid
end

function OPENSSL_sk_is_sorted(st)
    @ccall libwebsockets.OPENSSL_sk_is_sorted(st::Ptr{OPENSSL_STACK})::Cint
end

function OPENSSL_sk_new_reserve(c, n)
    @ccall libwebsockets.OPENSSL_sk_new_reserve(c::OPENSSL_sk_compfunc, n::Cint)::Ptr{OPENSSL_STACK}
end

function OPENSSL_sk_reserve(st, n)
    @ccall libwebsockets.OPENSSL_sk_reserve(st::Ptr{OPENSSL_STACK}, n::Cint)::Cint
end

function OPENSSL_sk_find_all(st, data, pnum)
    @ccall libwebsockets.OPENSSL_sk_find_all(st::Ptr{OPENSSL_STACK}, data::Ptr{Cvoid}, pnum::Ptr{Cint})::Cint
end

mutable struct stack_st_OPENSSL_STRING end

function ossl_check_const_OPENSSL_STRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_OPENSSL_STRING_sk_type(sk::Ptr{stack_st_OPENSSL_STRING})::Ptr{OPENSSL_STACK}
end

const OPENSSL_STRING = Ptr{Cchar}

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_STRING , char , char )
const sk_OPENSSL_STRING_compfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_STRING_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_compfunc_type(cmp::sk_OPENSSL_STRING_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_OPENSSL_STRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_sk_type(sk::Ptr{stack_st_OPENSSL_STRING})::Ptr{OPENSSL_STACK}
end

function ossl_check_OPENSSL_STRING_type(ptr)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_type(ptr::Ptr{Cchar})::Ptr{Cchar}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_STRING , char , char )
const sk_OPENSSL_STRING_freefunc = Ptr{Cvoid}

function ossl_check_OPENSSL_STRING_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_freefunc_type(fr::sk_OPENSSL_STRING_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_STRING , char , char )
const sk_OPENSSL_STRING_copyfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_STRING_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_copyfunc_type(cpy::sk_OPENSSL_STRING_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_OPENSSL_CSTRING end

function ossl_check_const_OPENSSL_CSTRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_OPENSSL_CSTRING_sk_type(sk::Ptr{stack_st_OPENSSL_CSTRING})::Ptr{OPENSSL_STACK}
end

const OPENSSL_CSTRING = Ptr{Cchar}

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_CSTRING , const char , char )
const sk_OPENSSL_CSTRING_compfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_CSTRING_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_compfunc_type(cmp::sk_OPENSSL_CSTRING_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_OPENSSL_CSTRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_sk_type(sk::Ptr{stack_st_OPENSSL_CSTRING})::Ptr{OPENSSL_STACK}
end

function ossl_check_OPENSSL_CSTRING_type(ptr)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_type(ptr::Ptr{Cchar})::Ptr{Cchar}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_CSTRING , const char , char )
const sk_OPENSSL_CSTRING_freefunc = Ptr{Cvoid}

function ossl_check_OPENSSL_CSTRING_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_freefunc_type(fr::sk_OPENSSL_CSTRING_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_CSTRING , const char , char )
const sk_OPENSSL_CSTRING_copyfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_CSTRING_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_copyfunc_type(cpy::sk_OPENSSL_CSTRING_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_OPENSSL_BLOCK end

function ossl_check_const_OPENSSL_BLOCK_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_OPENSSL_BLOCK_sk_type(sk::Ptr{stack_st_OPENSSL_BLOCK})::Ptr{OPENSSL_STACK}
end

const OPENSSL_BLOCK = Ptr{Cvoid}

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_BLOCK , void , void )
const sk_OPENSSL_BLOCK_compfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_BLOCK_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_OPENSSL_BLOCK_compfunc_type(cmp::sk_OPENSSL_BLOCK_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_OPENSSL_BLOCK_sk_type(sk)
    @ccall libwebsockets.ossl_check_OPENSSL_BLOCK_sk_type(sk::Ptr{stack_st_OPENSSL_BLOCK})::Ptr{OPENSSL_STACK}
end

function ossl_check_OPENSSL_BLOCK_type(ptr)
    @ccall libwebsockets.ossl_check_OPENSSL_BLOCK_type(ptr::Ptr{Cvoid})::Ptr{Cvoid}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_BLOCK , void , void )
const sk_OPENSSL_BLOCK_freefunc = Ptr{Cvoid}

function ossl_check_OPENSSL_BLOCK_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_OPENSSL_BLOCK_freefunc_type(fr::sk_OPENSSL_BLOCK_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( OPENSSL_BLOCK , void , void )
const sk_OPENSSL_BLOCK_copyfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_BLOCK_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_OPENSSL_BLOCK_copyfunc_type(cpy::sk_OPENSSL_BLOCK_copyfunc)::OPENSSL_sk_copyfunc
end

function OpenSSL_version_num()
    @ccall libwebsockets.OpenSSL_version_num()::Culong
end

function OpenSSL_version(type)
    @ccall libwebsockets.OpenSSL_version(type::Cint)::Ptr{Cchar}
end

function CRYPTO_malloc(num, file, line)
    @ccall libwebsockets.CRYPTO_malloc(num::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_zalloc(num, file, line)
    @ccall libwebsockets.CRYPTO_zalloc(num::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_realloc(addr, num, file, line)
    @ccall libwebsockets.CRYPTO_realloc(addr::Ptr{Cvoid}, num::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_clear_realloc(addr, old_num, num, file, line)
    @ccall libwebsockets.CRYPTO_clear_realloc(addr::Ptr{Cvoid}, old_num::Csize_t, num::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_clear_free(ptr, num, file, line)
    @ccall libwebsockets.CRYPTO_clear_free(ptr::Ptr{Cvoid}, num::Csize_t, file::Ptr{Cchar}, line::Cint)::Cvoid
end

function CRYPTO_free(ptr, file, line)
    @ccall libwebsockets.CRYPTO_free(ptr::Ptr{Cvoid}, file::Ptr{Cchar}, line::Cint)::Cvoid
end

function CRYPTO_memdup(str, siz, file, line)
    @ccall libwebsockets.CRYPTO_memdup(str::Ptr{Cvoid}, siz::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_strdup(str, file, line)
    @ccall libwebsockets.CRYPTO_strdup(str::Ptr{Cchar}, file::Ptr{Cchar}, line::Cint)::Ptr{Cchar}
end

function CRYPTO_strndup(str, s, file, line)
    @ccall libwebsockets.CRYPTO_strndup(str::Ptr{Cchar}, s::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cchar}
end

function CRYPTO_secure_malloc(num, file, line)
    @ccall libwebsockets.CRYPTO_secure_malloc(num::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_secure_zalloc(num, file, line)
    @ccall libwebsockets.CRYPTO_secure_zalloc(num::Csize_t, file::Ptr{Cchar}, line::Cint)::Ptr{Cvoid}
end

function CRYPTO_secure_free(ptr, file, line)
    @ccall libwebsockets.CRYPTO_secure_free(ptr::Ptr{Cvoid}, file::Ptr{Cchar}, line::Cint)::Cvoid
end

function CRYPTO_secure_clear_free(ptr, num, file, line)
    @ccall libwebsockets.CRYPTO_secure_clear_free(ptr::Ptr{Cvoid}, num::Csize_t, file::Ptr{Cchar}, line::Cint)::Cvoid
end

function CRYPTO_secure_actual_size(ptr)
    @ccall libwebsockets.CRYPTO_secure_actual_size(ptr::Ptr{Cvoid})::Csize_t
end

mutable struct stack_st_void end

function ossl_check_const_void_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_void_sk_type(sk::Ptr{stack_st_void})::Ptr{OPENSSL_STACK}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( void , void , void )
const sk_void_compfunc = Ptr{Cvoid}

function ossl_check_void_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_void_compfunc_type(cmp::sk_void_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_void_sk_type(sk)
    @ccall libwebsockets.ossl_check_void_sk_type(sk::Ptr{stack_st_void})::Ptr{OPENSSL_STACK}
end

function ossl_check_void_type(ptr)
    @ccall libwebsockets.ossl_check_void_type(ptr::Ptr{Cvoid})::Ptr{Cvoid}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( void , void , void )
const sk_void_freefunc = Ptr{Cvoid}

function ossl_check_void_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_void_freefunc_type(fr::sk_void_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( void , void , void )
const sk_void_copyfunc = Ptr{Cvoid}

function ossl_check_void_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_void_copyfunc_type(cpy::sk_void_copyfunc)::OPENSSL_sk_copyfunc
end

function OPENSSL_die(assertion, file, line)
    @ccall libwebsockets.OPENSSL_die(assertion::Ptr{Cchar}, file::Ptr{Cchar}, line::Cint)::Cvoid
end

mutable struct bio_st end

const BIO = bio_st

function BIO_test_flags(b, flags)
    @ccall libwebsockets.BIO_test_flags(b::Ptr{BIO}, flags::Cint)::Cint
end

function BIO_set_flags(b, flags)
    @ccall libwebsockets.BIO_set_flags(b::Ptr{BIO}, flags::Cint)::Cvoid
end

function BIO_clear_flags(b, flags)
    @ccall libwebsockets.BIO_clear_flags(b::Ptr{BIO}, flags::Cint)::Cvoid
end

mutable struct stack_st_BIO end

function ossl_check_const_BIO_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_BIO_sk_type(sk::Ptr{stack_st_BIO})::Ptr{OPENSSL_STACK}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( BIO , BIO , BIO )
const sk_BIO_compfunc = Ptr{Cvoid}

function ossl_check_BIO_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_BIO_compfunc_type(cmp::sk_BIO_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_BIO_sk_type(sk)
    @ccall libwebsockets.ossl_check_BIO_sk_type(sk::Ptr{stack_st_BIO})::Ptr{OPENSSL_STACK}
end

function ossl_check_BIO_type(ptr)
    @ccall libwebsockets.ossl_check_BIO_type(ptr::Ptr{BIO})::Ptr{BIO}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( BIO , BIO , BIO )
const sk_BIO_freefunc = Ptr{Cvoid}

function ossl_check_BIO_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_BIO_freefunc_type(fr::sk_BIO_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( BIO , BIO , BIO )
const sk_BIO_copyfunc = Ptr{Cvoid}

function ossl_check_BIO_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_BIO_copyfunc_type(cpy::sk_BIO_copyfunc)::OPENSSL_sk_copyfunc
end

function BIO_set_ex_data(bio, idx, data)
    @ccall libwebsockets.BIO_set_ex_data(bio::Ptr{BIO}, idx::Cint, data::Ptr{Cvoid})::Cint
end

function BIO_get_ex_data(bio, idx)
    @ccall libwebsockets.BIO_get_ex_data(bio::Ptr{BIO}, idx::Cint)::Ptr{Cvoid}
end

function BIO_ctrl(bp, cmd, larg, parg)
    @ccall libwebsockets.BIO_ctrl(bp::Ptr{BIO}, cmd::Cint, larg::Clong, parg::Ptr{Cvoid})::Clong
end

function BIO_int_ctrl(bp, cmd, larg, iarg)
    @ccall libwebsockets.BIO_int_ctrl(bp::Ptr{BIO}, cmd::Cint, larg::Clong, iarg::Cint)::Clong
end

function BIO_ptr_ctrl(bp, cmd, larg)
    @ccall libwebsockets.BIO_ptr_ctrl(bp::Ptr{BIO}, cmd::Cint, larg::Clong)::Ptr{Cvoid}
end

mutable struct bio_addr_st end

const BIO_ADDR = bio_addr_st

# typedef int BIO_info_cb ( BIO * , int , int )
const BIO_info_cb = Cvoid

function BIO_callback_ctrl(b, cmd, fp)
    @ccall libwebsockets.BIO_callback_ctrl(b::Ptr{BIO}, cmd::Cint, fp::Ptr{BIO_info_cb})::Clong
end

# typedef void CRYPTO_EX_new ( void * parent , void * ptr , CRYPTO_EX_DATA * ad , int idx , long argl , void * argp )
const CRYPTO_EX_new = Cvoid

# typedef int CRYPTO_EX_dup ( CRYPTO_EX_DATA * to , const CRYPTO_EX_DATA * from , void * * from_d , int idx , long argl , void * argp )
const CRYPTO_EX_dup = Cvoid

# typedef void CRYPTO_EX_free ( void * parent , void * ptr , CRYPTO_EX_DATA * ad , int idx , long argl , void * argp )
const CRYPTO_EX_free = Cvoid

function CRYPTO_get_ex_new_index(class_index, argl, argp, new_func, dup_func, free_func)
    @ccall libwebsockets.CRYPTO_get_ex_new_index(class_index::Cint, argl::Clong, argp::Ptr{Cvoid}, new_func::Ptr{CRYPTO_EX_new}, dup_func::Ptr{CRYPTO_EX_dup}, free_func::Ptr{CRYPTO_EX_free})::Cint
end

function OPENSSL_strlcpy(dst, src, siz)
    @ccall libwebsockets.OPENSSL_strlcpy(dst::Ptr{Cchar}, src::Ptr{Cchar}, siz::Csize_t)::Csize_t
end

function OPENSSL_strlcat(dst, src, siz)
    @ccall libwebsockets.OPENSSL_strlcat(dst::Ptr{Cchar}, src::Ptr{Cchar}, siz::Csize_t)::Csize_t
end

function OPENSSL_strnlen(str, maxlen)
    @ccall libwebsockets.OPENSSL_strnlen(str::Ptr{Cchar}, maxlen::Csize_t)::Csize_t
end

struct ossl_dispatch_st
    function_id::Cint
    _function::Ptr{Cvoid}
end

const OSSL_DISPATCH = ossl_dispatch_st

mutable struct bignum_st end

const BIGNUM = bignum_st

function BN_num_bits(a)
    @ccall libwebsockets.BN_num_bits(a::Ptr{BIGNUM})::Cint
end

function BN_set_word(a, w)
    @ccall libwebsockets.BN_set_word(a::Ptr{BIGNUM}, w::Culong)::Cint
end

function BN_zero_ex(a)
    @ccall libwebsockets.BN_zero_ex(a::Ptr{BIGNUM})::Cvoid
end

mutable struct bignum_ctx end

const BN_CTX = bignum_ctx

function BN_div(dv, rem, m, d, ctx)
    @ccall libwebsockets.BN_div(dv::Ptr{BIGNUM}, rem::Ptr{BIGNUM}, m::Ptr{BIGNUM}, d::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_add(r, a, b)
    @ccall libwebsockets.BN_GF2m_add(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_ucmp(a, b)
    @ccall libwebsockets.BN_ucmp(a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_get_rfc2409_prime_768(bn)
    @ccall libwebsockets.BN_get_rfc2409_prime_768(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc2409_prime_1024(bn)
    @ccall libwebsockets.BN_get_rfc2409_prime_1024(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc3526_prime_1536(bn)
    @ccall libwebsockets.BN_get_rfc3526_prime_1536(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc3526_prime_2048(bn)
    @ccall libwebsockets.BN_get_rfc3526_prime_2048(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc3526_prime_3072(bn)
    @ccall libwebsockets.BN_get_rfc3526_prime_3072(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc3526_prime_4096(bn)
    @ccall libwebsockets.BN_get_rfc3526_prime_4096(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc3526_prime_6144(bn)
    @ccall libwebsockets.BN_get_rfc3526_prime_6144(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_get_rfc3526_prime_8192(bn)
    @ccall libwebsockets.BN_get_rfc3526_prime_8192(bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

mutable struct stack_st_X509_ALGOR end

function ossl_check_const_X509_ALGOR_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_ALGOR_sk_type(sk::Ptr{stack_st_X509_ALGOR})::Ptr{OPENSSL_STACK}
end

mutable struct asn1_object_st end

const ASN1_OBJECT = asn1_object_st

struct __JL_Ctag_81
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_81}, f::Symbol)
    f === :ptr && return Ptr{Ptr{Cchar}}(x + 0)
    f === :boolean && return Ptr{ASN1_BOOLEAN}(x + 0)
    f === :asn1_string && return Ptr{Ptr{ASN1_STRING}}(x + 0)
    f === :object && return Ptr{Ptr{ASN1_OBJECT}}(x + 0)
    f === :integer && return Ptr{Ptr{ASN1_INTEGER}}(x + 0)
    f === :enumerated && return Ptr{Ptr{ASN1_ENUMERATED}}(x + 0)
    f === :bit_string && return Ptr{Ptr{ASN1_BIT_STRING}}(x + 0)
    f === :octet_string && return Ptr{Ptr{ASN1_OCTET_STRING}}(x + 0)
    f === :printablestring && return Ptr{Ptr{ASN1_PRINTABLESTRING}}(x + 0)
    f === :t61string && return Ptr{Ptr{ASN1_T61STRING}}(x + 0)
    f === :ia5string && return Ptr{Ptr{ASN1_IA5STRING}}(x + 0)
    f === :generalstring && return Ptr{Ptr{ASN1_GENERALSTRING}}(x + 0)
    f === :bmpstring && return Ptr{Ptr{ASN1_BMPSTRING}}(x + 0)
    f === :universalstring && return Ptr{Ptr{ASN1_UNIVERSALSTRING}}(x + 0)
    f === :utctime && return Ptr{Ptr{ASN1_UTCTIME}}(x + 0)
    f === :generalizedtime && return Ptr{Ptr{ASN1_GENERALIZEDTIME}}(x + 0)
    f === :visiblestring && return Ptr{Ptr{ASN1_VISIBLESTRING}}(x + 0)
    f === :utf8string && return Ptr{Ptr{ASN1_UTF8STRING}}(x + 0)
    f === :set && return Ptr{Ptr{ASN1_STRING}}(x + 0)
    f === :sequence && return Ptr{Ptr{ASN1_STRING}}(x + 0)
    f === :asn1_value && return Ptr{Ptr{ASN1_VALUE}}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_81, f::Symbol)
    r = Ref{__JL_Ctag_81}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_81}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_81}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct asn1_type_st
    data::NTuple{16, UInt8}
end

function Base.getproperty(x::Ptr{asn1_type_st}, f::Symbol)
    f === :type && return Ptr{Cint}(x + 0)
    f === :value && return Ptr{__JL_Ctag_81}(x + 8)
    return getfield(x, f)
end

function Base.getproperty(x::asn1_type_st, f::Symbol)
    r = Ref{asn1_type_st}(x)
    ptr = Base.unsafe_convert(Ptr{asn1_type_st}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{asn1_type_st}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const ASN1_TYPE = asn1_type_st

struct X509_algor_st
    algorithm::Ptr{ASN1_OBJECT}
    parameter::Ptr{ASN1_TYPE}
end

const X509_ALGOR = X509_algor_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_ALGOR , X509_ALGOR , X509_ALGOR )
const sk_X509_ALGOR_compfunc = Ptr{Cvoid}

function ossl_check_X509_ALGOR_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_ALGOR_compfunc_type(cmp::sk_X509_ALGOR_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_ALGOR_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_ALGOR_sk_type(sk::Ptr{stack_st_X509_ALGOR})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_ALGOR_type(ptr)
    @ccall libwebsockets.ossl_check_X509_ALGOR_type(ptr::Ptr{X509_ALGOR})::Ptr{X509_ALGOR}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_ALGOR , X509_ALGOR , X509_ALGOR )
const sk_X509_ALGOR_freefunc = Ptr{Cvoid}

function ossl_check_X509_ALGOR_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_ALGOR_freefunc_type(fr::sk_X509_ALGOR_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_ALGOR , X509_ALGOR , X509_ALGOR )
const sk_X509_ALGOR_copyfunc = Ptr{Cvoid}

function ossl_check_X509_ALGOR_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_ALGOR_copyfunc_type(cpy::sk_X509_ALGOR_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_ASN1_STRING_TABLE end

function ossl_check_const_ASN1_STRING_TABLE_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_ASN1_STRING_TABLE_sk_type(sk::Ptr{stack_st_ASN1_STRING_TABLE})::Ptr{OPENSSL_STACK}
end

mutable struct asn1_string_table_st
    nid::Cint
    minsize::Clong
    maxsize::Clong
    mask::Culong
    flags::Culong
    asn1_string_table_st() = new()
end

const ASN1_STRING_TABLE = asn1_string_table_st

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_STRING_TABLE , ASN1_STRING_TABLE , ASN1_STRING_TABLE )
const sk_ASN1_STRING_TABLE_compfunc = Ptr{Cvoid}

function ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp::sk_ASN1_STRING_TABLE_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_ASN1_STRING_TABLE_sk_type(sk)
    @ccall libwebsockets.ossl_check_ASN1_STRING_TABLE_sk_type(sk::Ptr{stack_st_ASN1_STRING_TABLE})::Ptr{OPENSSL_STACK}
end

function ossl_check_ASN1_STRING_TABLE_type(ptr)
    @ccall libwebsockets.ossl_check_ASN1_STRING_TABLE_type(ptr::Ptr{ASN1_STRING_TABLE})::Ptr{ASN1_STRING_TABLE}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_STRING_TABLE , ASN1_STRING_TABLE , ASN1_STRING_TABLE )
const sk_ASN1_STRING_TABLE_freefunc = Ptr{Cvoid}

function ossl_check_ASN1_STRING_TABLE_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_ASN1_STRING_TABLE_freefunc_type(fr::sk_ASN1_STRING_TABLE_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_STRING_TABLE , ASN1_STRING_TABLE , ASN1_STRING_TABLE )
const sk_ASN1_STRING_TABLE_copyfunc = Ptr{Cvoid}

function ossl_check_ASN1_STRING_TABLE_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_ASN1_STRING_TABLE_copyfunc_type(cpy::sk_ASN1_STRING_TABLE_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct ASN1_ITEM_st end

const ASN1_ITEM = ASN1_ITEM_st

mutable struct asn1_pctx_st end

const ASN1_PCTX = asn1_pctx_st

# typedef void * d2i_of_void ( void * * , const unsigned char * * , long )
const d2i_of_void = Cvoid

# typedef int i2d_of_void ( const void * , unsigned char * * )
const i2d_of_void = Cvoid

mutable struct stack_st_ASN1_TYPE end

function ossl_check_const_ASN1_TYPE_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_ASN1_TYPE_sk_type(sk::Ptr{stack_st_ASN1_TYPE})::Ptr{OPENSSL_STACK}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_TYPE , ASN1_TYPE , ASN1_TYPE )
const sk_ASN1_TYPE_compfunc = Ptr{Cvoid}

function ossl_check_ASN1_TYPE_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ASN1_TYPE_compfunc_type(cmp::sk_ASN1_TYPE_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_ASN1_TYPE_sk_type(sk)
    @ccall libwebsockets.ossl_check_ASN1_TYPE_sk_type(sk::Ptr{stack_st_ASN1_TYPE})::Ptr{OPENSSL_STACK}
end

function ossl_check_ASN1_TYPE_type(ptr)
    @ccall libwebsockets.ossl_check_ASN1_TYPE_type(ptr::Ptr{ASN1_TYPE})::Ptr{ASN1_TYPE}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_TYPE , ASN1_TYPE , ASN1_TYPE )
const sk_ASN1_TYPE_freefunc = Ptr{Cvoid}

function ossl_check_ASN1_TYPE_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_ASN1_TYPE_freefunc_type(fr::sk_ASN1_TYPE_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_TYPE , ASN1_TYPE , ASN1_TYPE )
const sk_ASN1_TYPE_copyfunc = Ptr{Cvoid}

function ossl_check_ASN1_TYPE_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_ASN1_TYPE_copyfunc_type(cpy::sk_ASN1_TYPE_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_ASN1_OBJECT end

function ossl_check_const_ASN1_OBJECT_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_ASN1_OBJECT_sk_type(sk::Ptr{stack_st_ASN1_OBJECT})::Ptr{OPENSSL_STACK}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_OBJECT , ASN1_OBJECT , ASN1_OBJECT )
const sk_ASN1_OBJECT_compfunc = Ptr{Cvoid}

function ossl_check_ASN1_OBJECT_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ASN1_OBJECT_compfunc_type(cmp::sk_ASN1_OBJECT_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_ASN1_OBJECT_sk_type(sk)
    @ccall libwebsockets.ossl_check_ASN1_OBJECT_sk_type(sk::Ptr{stack_st_ASN1_OBJECT})::Ptr{OPENSSL_STACK}
end

function ossl_check_ASN1_OBJECT_type(ptr)
    @ccall libwebsockets.ossl_check_ASN1_OBJECT_type(ptr::Ptr{ASN1_OBJECT})::Ptr{ASN1_OBJECT}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_OBJECT , ASN1_OBJECT , ASN1_OBJECT )
const sk_ASN1_OBJECT_freefunc = Ptr{Cvoid}

function ossl_check_ASN1_OBJECT_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_ASN1_OBJECT_freefunc_type(fr::sk_ASN1_OBJECT_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_OBJECT , ASN1_OBJECT , ASN1_OBJECT )
const sk_ASN1_OBJECT_copyfunc = Ptr{Cvoid}

function ossl_check_ASN1_OBJECT_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_ASN1_OBJECT_copyfunc_type(cpy::sk_ASN1_OBJECT_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_ASN1_INTEGER end

function ossl_check_const_ASN1_INTEGER_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_ASN1_INTEGER_sk_type(sk::Ptr{stack_st_ASN1_INTEGER})::Ptr{OPENSSL_STACK}
end

struct asn1_string_st
    length::Cint
    type::Cint
    data::Ptr{Cuchar}
    flags::Clong
end

const ASN1_INTEGER = asn1_string_st

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_INTEGER , ASN1_INTEGER , ASN1_INTEGER )
const sk_ASN1_INTEGER_compfunc = Ptr{Cvoid}

function ossl_check_ASN1_INTEGER_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ASN1_INTEGER_compfunc_type(cmp::sk_ASN1_INTEGER_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_ASN1_INTEGER_sk_type(sk)
    @ccall libwebsockets.ossl_check_ASN1_INTEGER_sk_type(sk::Ptr{stack_st_ASN1_INTEGER})::Ptr{OPENSSL_STACK}
end

function ossl_check_ASN1_INTEGER_type(ptr)
    @ccall libwebsockets.ossl_check_ASN1_INTEGER_type(ptr::Ptr{ASN1_INTEGER})::Ptr{ASN1_INTEGER}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_INTEGER , ASN1_INTEGER , ASN1_INTEGER )
const sk_ASN1_INTEGER_freefunc = Ptr{Cvoid}

function ossl_check_ASN1_INTEGER_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_ASN1_INTEGER_freefunc_type(fr::sk_ASN1_INTEGER_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_INTEGER , ASN1_INTEGER , ASN1_INTEGER )
const sk_ASN1_INTEGER_copyfunc = Ptr{Cvoid}

function ossl_check_ASN1_INTEGER_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_ASN1_INTEGER_copyfunc_type(cpy::sk_ASN1_INTEGER_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_ASN1_UTF8STRING end

function ossl_check_const_ASN1_UTF8STRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_ASN1_UTF8STRING_sk_type(sk::Ptr{stack_st_ASN1_UTF8STRING})::Ptr{OPENSSL_STACK}
end

const ASN1_UTF8STRING = asn1_string_st

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_UTF8STRING , ASN1_UTF8STRING , ASN1_UTF8STRING )
const sk_ASN1_UTF8STRING_compfunc = Ptr{Cvoid}

function ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ASN1_UTF8STRING_compfunc_type(cmp::sk_ASN1_UTF8STRING_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_ASN1_UTF8STRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_ASN1_UTF8STRING_sk_type(sk::Ptr{stack_st_ASN1_UTF8STRING})::Ptr{OPENSSL_STACK}
end

function ossl_check_ASN1_UTF8STRING_type(ptr)
    @ccall libwebsockets.ossl_check_ASN1_UTF8STRING_type(ptr::Ptr{ASN1_UTF8STRING})::Ptr{ASN1_UTF8STRING}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_UTF8STRING , ASN1_UTF8STRING , ASN1_UTF8STRING )
const sk_ASN1_UTF8STRING_freefunc = Ptr{Cvoid}

function ossl_check_ASN1_UTF8STRING_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_ASN1_UTF8STRING_freefunc_type(fr::sk_ASN1_UTF8STRING_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_UTF8STRING , ASN1_UTF8STRING , ASN1_UTF8STRING )
const sk_ASN1_UTF8STRING_copyfunc = Ptr{Cvoid}

function ossl_check_ASN1_UTF8STRING_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_ASN1_UTF8STRING_copyfunc_type(cpy::sk_ASN1_UTF8STRING_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_ASN1_GENERALSTRING end

function ossl_check_const_ASN1_GENERALSTRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_ASN1_GENERALSTRING_sk_type(sk::Ptr{stack_st_ASN1_GENERALSTRING})::Ptr{OPENSSL_STACK}
end

const ASN1_GENERALSTRING = asn1_string_st

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_GENERALSTRING , ASN1_GENERALSTRING , ASN1_GENERALSTRING )
const sk_ASN1_GENERALSTRING_compfunc = Ptr{Cvoid}

function ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp::sk_ASN1_GENERALSTRING_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_ASN1_GENERALSTRING_sk_type(sk)
    @ccall libwebsockets.ossl_check_ASN1_GENERALSTRING_sk_type(sk::Ptr{stack_st_ASN1_GENERALSTRING})::Ptr{OPENSSL_STACK}
end

function ossl_check_ASN1_GENERALSTRING_type(ptr)
    @ccall libwebsockets.ossl_check_ASN1_GENERALSTRING_type(ptr::Ptr{ASN1_GENERALSTRING})::Ptr{ASN1_GENERALSTRING}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_GENERALSTRING , ASN1_GENERALSTRING , ASN1_GENERALSTRING )
const sk_ASN1_GENERALSTRING_freefunc = Ptr{Cvoid}

function ossl_check_ASN1_GENERALSTRING_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_ASN1_GENERALSTRING_freefunc_type(fr::sk_ASN1_GENERALSTRING_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( ASN1_GENERALSTRING , ASN1_GENERALSTRING , ASN1_GENERALSTRING )
const sk_ASN1_GENERALSTRING_copyfunc = Ptr{Cvoid}

function ossl_check_ASN1_GENERALSTRING_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_ASN1_GENERALSTRING_copyfunc_type(cpy::sk_ASN1_GENERALSTRING_copyfunc)::OPENSSL_sk_copyfunc
end

function ASN1_dup(i2d, d2i, x)
    @ccall libwebsockets.ASN1_dup(i2d::Ptr{i2d_of_void}, d2i::Ptr{d2i_of_void}, x::Ptr{Cvoid})::Ptr{Cvoid}
end

mutable struct ASN1_VALUE_st end

const ASN1_VALUE = ASN1_VALUE_st

function ASN1_item_new(it)
    @ccall libwebsockets.ASN1_item_new(it::Ptr{ASN1_ITEM})::Ptr{ASN1_VALUE}
end

function ASN1_item_free(val, it)
    @ccall libwebsockets.ASN1_item_free(val::Ptr{ASN1_VALUE}, it::Ptr{ASN1_ITEM})::Cvoid
end

function ASN1_d2i_fp(xnew, d2i, in, x)
    @ccall libwebsockets.ASN1_d2i_fp(xnew::Ptr{Cvoid}, d2i::Ptr{d2i_of_void}, in::Ptr{Libc.FILE}, x::Ptr{Ptr{Cvoid}})::Ptr{Cvoid}
end

function ASN1_i2d_fp(i2d, out, x)
    @ccall libwebsockets.ASN1_i2d_fp(i2d::Ptr{i2d_of_void}, out::Ptr{Libc.FILE}, x::Ptr{Cvoid})::Cint
end

function ASN1_d2i_bio(xnew, d2i, in, x)
    @ccall libwebsockets.ASN1_d2i_bio(xnew::Ptr{Cvoid}, d2i::Ptr{d2i_of_void}, in::Ptr{BIO}, x::Ptr{Ptr{Cvoid}})::Ptr{Cvoid}
end

function ASN1_i2d_bio(i2d, out, x)
    @ccall libwebsockets.ASN1_i2d_bio(i2d::Ptr{i2d_of_void}, out::Ptr{BIO}, x::Ptr{Cvoid})::Cint
end

function OBJ_create(oid, sn, ln)
    @ccall libwebsockets.OBJ_create(oid::Ptr{Cchar}, sn::Ptr{Cchar}, ln::Ptr{Cchar})::Cint
end

function OBJ_bsearch_(key, base, num, size, cmp)
    @ccall libwebsockets.OBJ_bsearch_(key::Ptr{Cvoid}, base::Ptr{Cvoid}, num::Cint, size::Cint, cmp::Ptr{Cvoid})::Ptr{Cvoid}
end

function OBJ_bsearch_ex_(key, base, num, size, cmp, flags)
    @ccall libwebsockets.OBJ_bsearch_ex_(key::Ptr{Cvoid}, base::Ptr{Cvoid}, num::Cint, size::Cint, cmp::Ptr{Cvoid}, flags::Cint)::Ptr{Cvoid}
end

mutable struct evp_pkey_st end

const EVP_PKEY = evp_pkey_st

function EVP_PKEY_assign(pkey, type, key)
    @ccall libwebsockets.EVP_PKEY_assign(pkey::Ptr{EVP_PKEY}, type::Cint, key::Ptr{Cvoid})::Cint
end

mutable struct evp_md_st end

const EVP_MD = evp_md_st

function EVP_get_digestbyname(name)
    @ccall libwebsockets.EVP_get_digestbyname(name::Ptr{Cchar})::Ptr{EVP_MD}
end

function OBJ_nid2sn(n)
    @ccall libwebsockets.OBJ_nid2sn(n::Cint)::Ptr{Cchar}
end

function OBJ_obj2nid(o)
    @ccall libwebsockets.OBJ_obj2nid(o::Ptr{ASN1_OBJECT})::Cint
end

mutable struct evp_cipher_st end

const EVP_CIPHER = evp_cipher_st

function EVP_get_cipherbyname(name)
    @ccall libwebsockets.EVP_get_cipherbyname(name::Ptr{Cchar})::Ptr{EVP_CIPHER}
end

function EVP_MD_get_type(md)
    @ccall libwebsockets.EVP_MD_get_type(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_get0_name(md)
    @ccall libwebsockets.EVP_MD_get0_name(md::Ptr{EVP_MD})::Ptr{Cchar}
end

function EVP_MD_get_pkey_type(md)
    @ccall libwebsockets.EVP_MD_get_pkey_type(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_get_size(md)
    @ccall libwebsockets.EVP_MD_get_size(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_get_block_size(md)
    @ccall libwebsockets.EVP_MD_get_block_size(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_get_flags(md)
    @ccall libwebsockets.EVP_MD_get_flags(md::Ptr{EVP_MD})::Culong
end

mutable struct evp_md_ctx_st end

const EVP_MD_CTX = evp_md_ctx_st

function EVP_MD_CTX_get0_md(ctx)
    @ccall libwebsockets.EVP_MD_CTX_get0_md(ctx::Ptr{EVP_MD_CTX})::Ptr{EVP_MD}
end

mutable struct evp_pkey_ctx_st end

const EVP_PKEY_CTX = evp_pkey_ctx_st

function EVP_MD_CTX_get_pkey_ctx(ctx)
    @ccall libwebsockets.EVP_MD_CTX_get_pkey_ctx(ctx::Ptr{EVP_MD_CTX})::Ptr{EVP_PKEY_CTX}
end

function EVP_MD_CTX_get0_md_data(ctx)
    @ccall libwebsockets.EVP_MD_CTX_get0_md_data(ctx::Ptr{EVP_MD_CTX})::Ptr{Cvoid}
end

function EVP_CIPHER_get_nid(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_nid(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_get0_name(cipher)
    @ccall libwebsockets.EVP_CIPHER_get0_name(cipher::Ptr{EVP_CIPHER})::Ptr{Cchar}
end

function EVP_CIPHER_get_block_size(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_block_size(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_get_key_length(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_key_length(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_get_iv_length(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_iv_length(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_get_flags(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_flags(cipher::Ptr{EVP_CIPHER})::Culong
end

function EVP_CIPHER_get_mode(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_mode(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_get_type(cipher)
    @ccall libwebsockets.EVP_CIPHER_get_type(cipher::Ptr{EVP_CIPHER})::Cint
end

mutable struct evp_cipher_ctx_st end

const EVP_CIPHER_CTX = evp_cipher_ctx_st

function EVP_CIPHER_CTX_is_encrypting(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_is_encrypting(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_nid(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_nid(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_block_size(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_block_size(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_key_length(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_key_length(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_iv_length(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_iv_length(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_tag_length(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_tag_length(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_num(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_num(ctx::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get0_cipher(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get0_cipher(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{EVP_CIPHER}
end

mutable struct engine_st end

const ENGINE = engine_st

function EVP_DigestInit_ex(ctx, type, impl)
    @ccall libwebsockets.EVP_DigestInit_ex(ctx::Ptr{EVP_MD_CTX}, type::Ptr{EVP_MD}, impl::Ptr{ENGINE})::Cint
end

function EVP_DigestInit(ctx, type)
    @ccall libwebsockets.EVP_DigestInit(ctx::Ptr{EVP_MD_CTX}, type::Ptr{EVP_MD})::Cint
end

function EVP_DigestUpdate(ctx, d, cnt)
    @ccall libwebsockets.EVP_DigestUpdate(ctx::Ptr{EVP_MD_CTX}, d::Ptr{Cvoid}, cnt::Csize_t)::Cint
end

function EVP_DecryptUpdate(ctx, out, outl, in, inl)
    @ccall libwebsockets.EVP_DecryptUpdate(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint}, in::Ptr{Cuchar}, inl::Cint)::Cint
end

function EVP_EncryptUpdate(ctx, out, outl, in, inl)
    @ccall libwebsockets.EVP_EncryptUpdate(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint}, in::Ptr{Cuchar}, inl::Cint)::Cint
end

function OBJ_NAME_add(name, type, data)
    @ccall libwebsockets.OBJ_NAME_add(name::Ptr{Cchar}, type::Cint, data::Ptr{Cchar})::Cint
end

function OBJ_NAME_remove(name, type)
    @ccall libwebsockets.OBJ_NAME_remove(name::Ptr{Cchar}, type::Cint)::Cint
end

function EVP_MD_CTX_new()
    @ccall libwebsockets.EVP_MD_CTX_new()::Ptr{EVP_MD_CTX}
end

function EVP_MD_CTX_reset(ctx)
    @ccall libwebsockets.EVP_MD_CTX_reset(ctx::Ptr{EVP_MD_CTX})::Cint
end

function EVP_MD_CTX_free(ctx)
    @ccall libwebsockets.EVP_MD_CTX_free(ctx::Ptr{EVP_MD_CTX})::Cvoid
end

function EVP_CIPHER_CTX_reset(c)
    @ccall libwebsockets.EVP_CIPHER_CTX_reset(c::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_des_cfb64()
    @ccall libwebsockets.EVP_des_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_des_ede_cfb64()
    @ccall libwebsockets.EVP_des_ede_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_cfb64()
    @ccall libwebsockets.EVP_des_ede3_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_idea_cfb64()
    @ccall libwebsockets.EVP_idea_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_rc2_cfb64()
    @ccall libwebsockets.EVP_rc2_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_bf_cfb64()
    @ccall libwebsockets.EVP_bf_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_cast5_cfb64()
    @ccall libwebsockets.EVP_cast5_cfb64()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_cfb128()
    @ccall libwebsockets.EVP_aes_128_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_cfb128()
    @ccall libwebsockets.EVP_aes_192_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_cfb128()
    @ccall libwebsockets.EVP_aes_256_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_cfb128()
    @ccall libwebsockets.EVP_aria_128_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_cfb128()
    @ccall libwebsockets.EVP_aria_192_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_cfb128()
    @ccall libwebsockets.EVP_aria_256_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_cfb128()
    @ccall libwebsockets.EVP_camellia_128_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_cfb128()
    @ccall libwebsockets.EVP_camellia_192_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_cfb128()
    @ccall libwebsockets.EVP_camellia_256_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_seed_cfb128()
    @ccall libwebsockets.EVP_seed_cfb128()::Ptr{EVP_CIPHER}
end

function EVP_sm4_cfb128()
    @ccall libwebsockets.EVP_sm4_cfb128()::Ptr{EVP_CIPHER}
end

mutable struct ossl_init_settings_st end

const OPENSSL_INIT_SETTINGS = ossl_init_settings_st

function OPENSSL_init_crypto(opts, settings)
    @ccall libwebsockets.OPENSSL_init_crypto(opts::UInt64, settings::Ptr{OPENSSL_INIT_SETTINGS})::Cint
end

function EVP_PKEY_get_id(pkey)
    @ccall libwebsockets.EVP_PKEY_get_id(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_get_base_id(pkey)
    @ccall libwebsockets.EVP_PKEY_get_base_id(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_get_bits(pkey)
    @ccall libwebsockets.EVP_PKEY_get_bits(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_get_security_bits(pkey)
    @ccall libwebsockets.EVP_PKEY_get_security_bits(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_get_size(pkey)
    @ccall libwebsockets.EVP_PKEY_get_size(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_set1_encoded_public_key(pkey, pub, publen)
    @ccall libwebsockets.EVP_PKEY_set1_encoded_public_key(pkey::Ptr{EVP_PKEY}, pub::Ptr{Cuchar}, publen::Csize_t)::Cint
end

function EVP_PKEY_get1_encoded_public_key(pkey, ppub)
    @ccall libwebsockets.EVP_PKEY_get1_encoded_public_key(pkey::Ptr{EVP_PKEY}, ppub::Ptr{Ptr{Cuchar}})::Csize_t
end

mutable struct ec_group_st end

const EC_GROUP = ec_group_st

function d2i_ECPKParameters(arg1, in, len)
    @ccall libwebsockets.d2i_ECPKParameters(arg1::Ptr{Ptr{EC_GROUP}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{EC_GROUP}
end

function i2d_ECPKParameters(arg1, out)
    @ccall libwebsockets.i2d_ECPKParameters(arg1::Ptr{EC_GROUP}, out::Ptr{Ptr{Cuchar}})::Cint
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function EVP_PKEY_Q_keygen(libctx, propq, type, va_list...)
        :(@ccall(libwebsockets.EVP_PKEY_Q_keygen(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar}, type::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Ptr{EVP_PKEY}))
    end

mutable struct ec_key_st end

const EC_KEY = ec_key_st

function i2d_ECParameters(key, out)
    @ccall libwebsockets.i2d_ECParameters(key::Ptr{EC_KEY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_ECParameters(key, in, len)
    @ccall libwebsockets.d2i_ECParameters(key::Ptr{Ptr{EC_KEY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{EC_KEY}
end

mutable struct rsa_st end

const RSA = rsa_st

function RSA_set_ex_data(r, idx, arg)
    @ccall libwebsockets.RSA_set_ex_data(r::Ptr{RSA}, idx::Cint, arg::Ptr{Cvoid})::Cint
end

function RSA_get_ex_data(r, idx)
    @ccall libwebsockets.RSA_get_ex_data(r::Ptr{RSA}, idx::Cint)::Ptr{Cvoid}
end

mutable struct dh_st end

const DH = dh_st

function DH_new()
    @ccall libwebsockets.DH_new()::Ptr{DH}
end

function d2i_DHparams(a, in, len)
    @ccall libwebsockets.d2i_DHparams(a::Ptr{Ptr{DH}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DH}
end

function i2d_DHparams(a, out)
    @ccall libwebsockets.i2d_DHparams(a::Ptr{DH}, out::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_DHxparams(a, in, len)
    @ccall libwebsockets.d2i_DHxparams(a::Ptr{Ptr{DH}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DH}
end

function i2d_DHxparams(a, out)
    @ccall libwebsockets.i2d_DHxparams(a::Ptr{DH}, out::Ptr{Ptr{Cuchar}})::Cint
end

mutable struct dsa_st end

const DSA = dsa_st

function DSA_new()
    @ccall libwebsockets.DSA_new()::Ptr{DSA}
end

function d2i_DSAparams(a, in, len)
    @ccall libwebsockets.d2i_DSAparams(a::Ptr{Ptr{DSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DSA}
end

function i2d_DSAparams(a, out)
    @ccall libwebsockets.i2d_DSAparams(a::Ptr{DSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function BN_is_prime(p, nchecks, callback, ctx, cb_arg)
    @ccall libwebsockets.BN_is_prime(p::Ptr{BIGNUM}, nchecks::Cint, callback::Ptr{Cvoid}, ctx::Ptr{BN_CTX}, cb_arg::Ptr{Cvoid})::Cint
end

mutable struct stack_st_X509_NAME end

function ossl_check_const_X509_NAME_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_NAME_sk_type(sk::Ptr{stack_st_X509_NAME})::Ptr{OPENSSL_STACK}
end

mutable struct X509_name_st end

const X509_NAME = X509_name_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_NAME , X509_NAME , X509_NAME )
const sk_X509_NAME_compfunc = Ptr{Cvoid}

function ossl_check_X509_NAME_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_NAME_compfunc_type(cmp::sk_X509_NAME_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_NAME_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_NAME_sk_type(sk::Ptr{stack_st_X509_NAME})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_NAME_type(ptr)
    @ccall libwebsockets.ossl_check_X509_NAME_type(ptr::Ptr{X509_NAME})::Ptr{X509_NAME}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_NAME , X509_NAME , X509_NAME )
const sk_X509_NAME_freefunc = Ptr{Cvoid}

function ossl_check_X509_NAME_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_NAME_freefunc_type(fr::sk_X509_NAME_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_NAME , X509_NAME , X509_NAME )
const sk_X509_NAME_copyfunc = Ptr{Cvoid}

function ossl_check_X509_NAME_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_NAME_copyfunc_type(cpy::sk_X509_NAME_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509 end

function ossl_check_const_X509_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_sk_type(sk::Ptr{stack_st_X509})::Ptr{OPENSSL_STACK}
end

mutable struct x509_st end

const X509 = x509_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509 , X509 , X509 )
const sk_X509_compfunc = Ptr{Cvoid}

function ossl_check_X509_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_compfunc_type(cmp::sk_X509_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_sk_type(sk::Ptr{stack_st_X509})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_type(ptr)
    @ccall libwebsockets.ossl_check_X509_type(ptr::Ptr{X509})::Ptr{X509}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509 , X509 , X509 )
const sk_X509_freefunc = Ptr{Cvoid}

function ossl_check_X509_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_freefunc_type(fr::sk_X509_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509 , X509 , X509 )
const sk_X509_copyfunc = Ptr{Cvoid}

function ossl_check_X509_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_copyfunc_type(cpy::sk_X509_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_REVOKED end

function ossl_check_const_X509_REVOKED_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_REVOKED_sk_type(sk::Ptr{stack_st_X509_REVOKED})::Ptr{OPENSSL_STACK}
end

mutable struct x509_revoked_st end

const X509_REVOKED = x509_revoked_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_REVOKED , X509_REVOKED , X509_REVOKED )
const sk_X509_REVOKED_compfunc = Ptr{Cvoid}

function ossl_check_X509_REVOKED_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_REVOKED_compfunc_type(cmp::sk_X509_REVOKED_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_REVOKED_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_REVOKED_sk_type(sk::Ptr{stack_st_X509_REVOKED})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_REVOKED_type(ptr)
    @ccall libwebsockets.ossl_check_X509_REVOKED_type(ptr::Ptr{X509_REVOKED})::Ptr{X509_REVOKED}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_REVOKED , X509_REVOKED , X509_REVOKED )
const sk_X509_REVOKED_freefunc = Ptr{Cvoid}

function ossl_check_X509_REVOKED_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_REVOKED_freefunc_type(fr::sk_X509_REVOKED_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_REVOKED , X509_REVOKED , X509_REVOKED )
const sk_X509_REVOKED_copyfunc = Ptr{Cvoid}

function ossl_check_X509_REVOKED_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_REVOKED_copyfunc_type(cpy::sk_X509_REVOKED_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_CRL end

function ossl_check_const_X509_CRL_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_CRL_sk_type(sk::Ptr{stack_st_X509_CRL})::Ptr{OPENSSL_STACK}
end

mutable struct X509_crl_st end

const X509_CRL = X509_crl_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_CRL , X509_CRL , X509_CRL )
const sk_X509_CRL_compfunc = Ptr{Cvoid}

function ossl_check_X509_CRL_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_CRL_compfunc_type(cmp::sk_X509_CRL_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_CRL_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_CRL_sk_type(sk::Ptr{stack_st_X509_CRL})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_CRL_type(ptr)
    @ccall libwebsockets.ossl_check_X509_CRL_type(ptr::Ptr{X509_CRL})::Ptr{X509_CRL}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_CRL , X509_CRL , X509_CRL )
const sk_X509_CRL_freefunc = Ptr{Cvoid}

function ossl_check_X509_CRL_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_CRL_freefunc_type(fr::sk_X509_CRL_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_CRL , X509_CRL , X509_CRL )
const sk_X509_CRL_copyfunc = Ptr{Cvoid}

function ossl_check_X509_CRL_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_CRL_copyfunc_type(cpy::sk_X509_CRL_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_NAME_ENTRY end

function ossl_check_const_X509_NAME_ENTRY_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_NAME_ENTRY_sk_type(sk::Ptr{stack_st_X509_NAME_ENTRY})::Ptr{OPENSSL_STACK}
end

mutable struct X509_name_entry_st end

const X509_NAME_ENTRY = X509_name_entry_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_NAME_ENTRY , X509_NAME_ENTRY , X509_NAME_ENTRY )
const sk_X509_NAME_ENTRY_compfunc = Ptr{Cvoid}

function ossl_check_X509_NAME_ENTRY_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_NAME_ENTRY_compfunc_type(cmp::sk_X509_NAME_ENTRY_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_NAME_ENTRY_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_NAME_ENTRY_sk_type(sk::Ptr{stack_st_X509_NAME_ENTRY})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_NAME_ENTRY_type(ptr)
    @ccall libwebsockets.ossl_check_X509_NAME_ENTRY_type(ptr::Ptr{X509_NAME_ENTRY})::Ptr{X509_NAME_ENTRY}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_NAME_ENTRY , X509_NAME_ENTRY , X509_NAME_ENTRY )
const sk_X509_NAME_ENTRY_freefunc = Ptr{Cvoid}

function ossl_check_X509_NAME_ENTRY_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_NAME_ENTRY_freefunc_type(fr::sk_X509_NAME_ENTRY_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_NAME_ENTRY , X509_NAME_ENTRY , X509_NAME_ENTRY )
const sk_X509_NAME_ENTRY_copyfunc = Ptr{Cvoid}

function ossl_check_X509_NAME_ENTRY_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_NAME_ENTRY_copyfunc_type(cpy::sk_X509_NAME_ENTRY_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_EXTENSION end

function ossl_check_const_X509_EXTENSION_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_EXTENSION_sk_type(sk::Ptr{stack_st_X509_EXTENSION})::Ptr{OPENSSL_STACK}
end

mutable struct X509_extension_st end

const X509_EXTENSION = X509_extension_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_EXTENSION , X509_EXTENSION , X509_EXTENSION )
const sk_X509_EXTENSION_compfunc = Ptr{Cvoid}

function ossl_check_X509_EXTENSION_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_EXTENSION_compfunc_type(cmp::sk_X509_EXTENSION_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_EXTENSION_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_EXTENSION_sk_type(sk::Ptr{stack_st_X509_EXTENSION})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_EXTENSION_type(ptr)
    @ccall libwebsockets.ossl_check_X509_EXTENSION_type(ptr::Ptr{X509_EXTENSION})::Ptr{X509_EXTENSION}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_EXTENSION , X509_EXTENSION , X509_EXTENSION )
const sk_X509_EXTENSION_freefunc = Ptr{Cvoid}

function ossl_check_X509_EXTENSION_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_EXTENSION_freefunc_type(fr::sk_X509_EXTENSION_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_EXTENSION , X509_EXTENSION , X509_EXTENSION )
const sk_X509_EXTENSION_copyfunc = Ptr{Cvoid}

function ossl_check_X509_EXTENSION_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_EXTENSION_copyfunc_type(cpy::sk_X509_EXTENSION_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_ATTRIBUTE end

function ossl_check_const_X509_ATTRIBUTE_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_ATTRIBUTE_sk_type(sk::Ptr{stack_st_X509_ATTRIBUTE})::Ptr{OPENSSL_STACK}
end

mutable struct x509_attributes_st end

const X509_ATTRIBUTE = x509_attributes_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_ATTRIBUTE , X509_ATTRIBUTE , X509_ATTRIBUTE )
const sk_X509_ATTRIBUTE_compfunc = Ptr{Cvoid}

function ossl_check_X509_ATTRIBUTE_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_ATTRIBUTE_compfunc_type(cmp::sk_X509_ATTRIBUTE_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_ATTRIBUTE_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_ATTRIBUTE_sk_type(sk::Ptr{stack_st_X509_ATTRIBUTE})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_ATTRIBUTE_type(ptr)
    @ccall libwebsockets.ossl_check_X509_ATTRIBUTE_type(ptr::Ptr{X509_ATTRIBUTE})::Ptr{X509_ATTRIBUTE}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_ATTRIBUTE , X509_ATTRIBUTE , X509_ATTRIBUTE )
const sk_X509_ATTRIBUTE_freefunc = Ptr{Cvoid}

function ossl_check_X509_ATTRIBUTE_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_ATTRIBUTE_freefunc_type(fr::sk_X509_ATTRIBUTE_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_ATTRIBUTE , X509_ATTRIBUTE , X509_ATTRIBUTE )
const sk_X509_ATTRIBUTE_copyfunc = Ptr{Cvoid}

function ossl_check_X509_ATTRIBUTE_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_ATTRIBUTE_copyfunc_type(cpy::sk_X509_ATTRIBUTE_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_INFO end

function ossl_check_const_X509_INFO_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_INFO_sk_type(sk::Ptr{stack_st_X509_INFO})::Ptr{OPENSSL_STACK}
end

const ASN1_OCTET_STRING = asn1_string_st

struct evp_cipher_info_st
    cipher::Ptr{EVP_CIPHER}
    iv::NTuple{16, Cuchar}
end

const EVP_CIPHER_INFO = evp_cipher_info_st

struct private_key_st
    version::Cint
    enc_algor::Ptr{X509_ALGOR}
    enc_pkey::Ptr{ASN1_OCTET_STRING}
    dec_pkey::Ptr{EVP_PKEY}
    key_length::Cint
    key_data::Ptr{Cchar}
    key_free::Cint
    cipher::EVP_CIPHER_INFO
end

const X509_PKEY = private_key_st

mutable struct X509_info_st
    x509::Ptr{X509}
    crl::Ptr{X509_CRL}
    x_pkey::Ptr{X509_PKEY}
    enc_cipher::EVP_CIPHER_INFO
    enc_len::Cint
    enc_data::Ptr{Cchar}
    X509_info_st() = new()
end

const X509_INFO = X509_info_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_INFO , X509_INFO , X509_INFO )
const sk_X509_INFO_compfunc = Ptr{Cvoid}

function ossl_check_X509_INFO_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_INFO_compfunc_type(cmp::sk_X509_INFO_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_INFO_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_INFO_sk_type(sk::Ptr{stack_st_X509_INFO})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_INFO_type(ptr)
    @ccall libwebsockets.ossl_check_X509_INFO_type(ptr::Ptr{X509_INFO})::Ptr{X509_INFO}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_INFO , X509_INFO , X509_INFO )
const sk_X509_INFO_freefunc = Ptr{Cvoid}

function ossl_check_X509_INFO_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_INFO_freefunc_type(fr::sk_X509_INFO_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_INFO , X509_INFO , X509_INFO )
const sk_X509_INFO_copyfunc = Ptr{Cvoid}

function ossl_check_X509_INFO_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_INFO_copyfunc_type(cpy::sk_X509_INFO_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct lhash_st end

const OPENSSL_LHASH = lhash_st

mutable struct lhash_node_st end

const OPENSSL_LH_NODE = lhash_node_st

function OPENSSL_LH_error(lh)
    @ccall libwebsockets.OPENSSL_LH_error(lh::Ptr{OPENSSL_LHASH})::Cint
end

# typedef unsigned long ( * OPENSSL_LH_HASHFUNC ) ( const void * )
const OPENSSL_LH_HASHFUNC = Ptr{Cvoid}

# typedef int ( * OPENSSL_LH_COMPFUNC ) ( const void * , const void * )
const OPENSSL_LH_COMPFUNC = Ptr{Cvoid}

function OPENSSL_LH_new(h, c)
    @ccall libwebsockets.OPENSSL_LH_new(h::OPENSSL_LH_HASHFUNC, c::OPENSSL_LH_COMPFUNC)::Ptr{OPENSSL_LHASH}
end

function OPENSSL_LH_free(lh)
    @ccall libwebsockets.OPENSSL_LH_free(lh::Ptr{OPENSSL_LHASH})::Cvoid
end

function OPENSSL_LH_insert(lh, data)
    @ccall libwebsockets.OPENSSL_LH_insert(lh::Ptr{OPENSSL_LHASH}, data::Ptr{Cvoid})::Ptr{Cvoid}
end

function OPENSSL_LH_delete(lh, data)
    @ccall libwebsockets.OPENSSL_LH_delete(lh::Ptr{OPENSSL_LHASH}, data::Ptr{Cvoid})::Ptr{Cvoid}
end

function OPENSSL_LH_retrieve(lh, data)
    @ccall libwebsockets.OPENSSL_LH_retrieve(lh::Ptr{OPENSSL_LHASH}, data::Ptr{Cvoid})::Ptr{Cvoid}
end

# typedef void ( * OPENSSL_LH_DOALL_FUNC ) ( void * )
const OPENSSL_LH_DOALL_FUNC = Ptr{Cvoid}

function OPENSSL_LH_doall(lh, func)
    @ccall libwebsockets.OPENSSL_LH_doall(lh::Ptr{OPENSSL_LHASH}, func::OPENSSL_LH_DOALL_FUNC)::Cvoid
end

# typedef void ( * OPENSSL_LH_DOALL_FUNCARG ) ( void * , void * )
const OPENSSL_LH_DOALL_FUNCARG = Ptr{Cvoid}

function OPENSSL_LH_doall_arg(lh, func, arg)
    @ccall libwebsockets.OPENSSL_LH_doall_arg(lh::Ptr{OPENSSL_LHASH}, func::OPENSSL_LH_DOALL_FUNCARG, arg::Ptr{Cvoid})::Cvoid
end

function OPENSSL_LH_strhash(c)
    @ccall libwebsockets.OPENSSL_LH_strhash(c::Ptr{Cchar})::Culong
end

function OPENSSL_LH_num_items(lh)
    @ccall libwebsockets.OPENSSL_LH_num_items(lh::Ptr{OPENSSL_LHASH})::Culong
end

function OPENSSL_LH_stats(lh, fp)
    @ccall libwebsockets.OPENSSL_LH_stats(lh::Ptr{OPENSSL_LHASH}, fp::Ptr{Libc.FILE})::Cvoid
end

function OPENSSL_LH_node_stats(lh, fp)
    @ccall libwebsockets.OPENSSL_LH_node_stats(lh::Ptr{OPENSSL_LHASH}, fp::Ptr{Libc.FILE})::Cvoid
end

function OPENSSL_LH_node_usage_stats(lh, fp)
    @ccall libwebsockets.OPENSSL_LH_node_usage_stats(lh::Ptr{OPENSSL_LHASH}, fp::Ptr{Libc.FILE})::Cvoid
end

function OPENSSL_LH_stats_bio(lh, out)
    @ccall libwebsockets.OPENSSL_LH_stats_bio(lh::Ptr{OPENSSL_LHASH}, out::Ptr{BIO})::Cvoid
end

function OPENSSL_LH_node_stats_bio(lh, out)
    @ccall libwebsockets.OPENSSL_LH_node_stats_bio(lh::Ptr{OPENSSL_LHASH}, out::Ptr{BIO})::Cvoid
end

function OPENSSL_LH_node_usage_stats_bio(lh, out)
    @ccall libwebsockets.OPENSSL_LH_node_usage_stats_bio(lh::Ptr{OPENSSL_LHASH}, out::Ptr{BIO})::Cvoid
end

function OPENSSL_LH_flush(lh)
    @ccall libwebsockets.OPENSSL_LH_flush(lh::Ptr{OPENSSL_LHASH})::Cvoid
end

function OPENSSL_LH_get_down_load(lh)
    @ccall libwebsockets.OPENSSL_LH_get_down_load(lh::Ptr{OPENSSL_LHASH})::Culong
end

function OPENSSL_LH_set_down_load(lh, down_load)
    @ccall libwebsockets.OPENSSL_LH_set_down_load(lh::Ptr{OPENSSL_LHASH}, down_load::Culong)::Cvoid
end

# DEFINE_LHASH_OF_INTERNAL ( OPENSSL_STRING )
const lh_OPENSSL_STRING_hashfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_STRING_lh_hashfunc_type(hfn)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_lh_hashfunc_type(hfn::lh_OPENSSL_STRING_hashfunc)::OPENSSL_LH_HASHFUNC
end

# DEFINE_LHASH_OF_INTERNAL ( OPENSSL_STRING )
const lh_OPENSSL_STRING_compfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_STRING_lh_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_lh_compfunc_type(cmp::lh_OPENSSL_STRING_compfunc)::OPENSSL_LH_COMPFUNC
end

struct lh_OPENSSL_STRING_dummy
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lh_OPENSSL_STRING_dummy}, f::Symbol)
    f === :d1 && return Ptr{Ptr{Cvoid}}(x + 0)
    f === :d2 && return Ptr{Culong}(x + 0)
    f === :d3 && return Ptr{Cint}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lh_OPENSSL_STRING_dummy, f::Symbol)
    r = Ref{lh_OPENSSL_STRING_dummy}(x)
    ptr = Base.unsafe_convert(Ptr{lh_OPENSSL_STRING_dummy}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lh_OPENSSL_STRING_dummy}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lhash_st_OPENSSL_STRING
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lhash_st_OPENSSL_STRING}, f::Symbol)
    f === :dummy && return Ptr{lh_OPENSSL_STRING_dummy}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lhash_st_OPENSSL_STRING, f::Symbol)
    r = Ref{lhash_st_OPENSSL_STRING}(x)
    ptr = Base.unsafe_convert(Ptr{lhash_st_OPENSSL_STRING}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lhash_st_OPENSSL_STRING}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function ossl_check_OPENSSL_STRING_lh_type(lh)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_lh_type(lh::Ptr{lhash_st_OPENSSL_STRING})::Ptr{OPENSSL_LHASH}
end

function ossl_check_OPENSSL_STRING_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_lh_plain_type(ptr::Ptr{OPENSSL_STRING})::Ptr{OPENSSL_STRING}
end

function ossl_check_const_OPENSSL_STRING_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_const_OPENSSL_STRING_lh_plain_type(ptr::Ptr{OPENSSL_STRING})::Ptr{OPENSSL_STRING}
end

function ossl_check_const_OPENSSL_STRING_lh_type(lh)
    @ccall libwebsockets.ossl_check_const_OPENSSL_STRING_lh_type(lh::Ptr{lhash_st_OPENSSL_STRING})::Ptr{OPENSSL_LHASH}
end

# DEFINE_LHASH_OF_INTERNAL ( OPENSSL_STRING )
const lh_OPENSSL_STRING_doallfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_STRING_lh_doallfunc_type(dfn)
    @ccall libwebsockets.ossl_check_OPENSSL_STRING_lh_doallfunc_type(dfn::lh_OPENSSL_STRING_doallfunc)::OPENSSL_LH_DOALL_FUNC
end

# DEFINE_LHASH_OF_INTERNAL ( OPENSSL_CSTRING )
const lh_OPENSSL_CSTRING_hashfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_CSTRING_lh_hashfunc_type(hfn)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_lh_hashfunc_type(hfn::lh_OPENSSL_CSTRING_hashfunc)::OPENSSL_LH_HASHFUNC
end

# DEFINE_LHASH_OF_INTERNAL ( OPENSSL_CSTRING )
const lh_OPENSSL_CSTRING_compfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_CSTRING_lh_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_lh_compfunc_type(cmp::lh_OPENSSL_CSTRING_compfunc)::OPENSSL_LH_COMPFUNC
end

struct lh_OPENSSL_CSTRING_dummy
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lh_OPENSSL_CSTRING_dummy}, f::Symbol)
    f === :d1 && return Ptr{Ptr{Cvoid}}(x + 0)
    f === :d2 && return Ptr{Culong}(x + 0)
    f === :d3 && return Ptr{Cint}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lh_OPENSSL_CSTRING_dummy, f::Symbol)
    r = Ref{lh_OPENSSL_CSTRING_dummy}(x)
    ptr = Base.unsafe_convert(Ptr{lh_OPENSSL_CSTRING_dummy}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lh_OPENSSL_CSTRING_dummy}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lhash_st_OPENSSL_CSTRING
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lhash_st_OPENSSL_CSTRING}, f::Symbol)
    f === :dummy && return Ptr{lh_OPENSSL_CSTRING_dummy}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lhash_st_OPENSSL_CSTRING, f::Symbol)
    r = Ref{lhash_st_OPENSSL_CSTRING}(x)
    ptr = Base.unsafe_convert(Ptr{lhash_st_OPENSSL_CSTRING}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lhash_st_OPENSSL_CSTRING}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function ossl_check_OPENSSL_CSTRING_lh_type(lh)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_lh_type(lh::Ptr{lhash_st_OPENSSL_CSTRING})::Ptr{OPENSSL_LHASH}
end

function ossl_check_OPENSSL_CSTRING_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_lh_plain_type(ptr::Ptr{OPENSSL_CSTRING})::Ptr{OPENSSL_CSTRING}
end

function ossl_check_const_OPENSSL_CSTRING_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_const_OPENSSL_CSTRING_lh_plain_type(ptr::Ptr{OPENSSL_CSTRING})::Ptr{OPENSSL_CSTRING}
end

function ossl_check_const_OPENSSL_CSTRING_lh_type(lh)
    @ccall libwebsockets.ossl_check_const_OPENSSL_CSTRING_lh_type(lh::Ptr{lhash_st_OPENSSL_CSTRING})::Ptr{OPENSSL_LHASH}
end

# DEFINE_LHASH_OF_INTERNAL ( OPENSSL_CSTRING )
const lh_OPENSSL_CSTRING_doallfunc = Ptr{Cvoid}

function ossl_check_OPENSSL_CSTRING_lh_doallfunc_type(dfn)
    @ccall libwebsockets.ossl_check_OPENSSL_CSTRING_lh_doallfunc_type(dfn::lh_OPENSSL_CSTRING_doallfunc)::OPENSSL_LH_DOALL_FUNC
end

mutable struct stack_st_X509_LOOKUP end

function ossl_check_const_X509_LOOKUP_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_LOOKUP_sk_type(sk::Ptr{stack_st_X509_LOOKUP})::Ptr{OPENSSL_STACK}
end

mutable struct x509_lookup_st end

const X509_LOOKUP = x509_lookup_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_LOOKUP , X509_LOOKUP , X509_LOOKUP )
const sk_X509_LOOKUP_compfunc = Ptr{Cvoid}

function ossl_check_X509_LOOKUP_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_LOOKUP_compfunc_type(cmp::sk_X509_LOOKUP_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_LOOKUP_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_LOOKUP_sk_type(sk::Ptr{stack_st_X509_LOOKUP})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_LOOKUP_type(ptr)
    @ccall libwebsockets.ossl_check_X509_LOOKUP_type(ptr::Ptr{X509_LOOKUP})::Ptr{X509_LOOKUP}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_LOOKUP , X509_LOOKUP , X509_LOOKUP )
const sk_X509_LOOKUP_freefunc = Ptr{Cvoid}

function ossl_check_X509_LOOKUP_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_LOOKUP_freefunc_type(fr::sk_X509_LOOKUP_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_LOOKUP , X509_LOOKUP , X509_LOOKUP )
const sk_X509_LOOKUP_copyfunc = Ptr{Cvoid}

function ossl_check_X509_LOOKUP_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_LOOKUP_copyfunc_type(cpy::sk_X509_LOOKUP_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_OBJECT end

function ossl_check_const_X509_OBJECT_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_OBJECT_sk_type(sk::Ptr{stack_st_X509_OBJECT})::Ptr{OPENSSL_STACK}
end

mutable struct x509_object_st end

const X509_OBJECT = x509_object_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_OBJECT , X509_OBJECT , X509_OBJECT )
const sk_X509_OBJECT_compfunc = Ptr{Cvoid}

function ossl_check_X509_OBJECT_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_OBJECT_compfunc_type(cmp::sk_X509_OBJECT_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_OBJECT_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_OBJECT_sk_type(sk::Ptr{stack_st_X509_OBJECT})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_OBJECT_type(ptr)
    @ccall libwebsockets.ossl_check_X509_OBJECT_type(ptr::Ptr{X509_OBJECT})::Ptr{X509_OBJECT}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_OBJECT , X509_OBJECT , X509_OBJECT )
const sk_X509_OBJECT_freefunc = Ptr{Cvoid}

function ossl_check_X509_OBJECT_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_OBJECT_freefunc_type(fr::sk_X509_OBJECT_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_OBJECT , X509_OBJECT , X509_OBJECT )
const sk_X509_OBJECT_copyfunc = Ptr{Cvoid}

function ossl_check_X509_OBJECT_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_OBJECT_copyfunc_type(cpy::sk_X509_OBJECT_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_VERIFY_PARAM end

function ossl_check_const_X509_VERIFY_PARAM_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_VERIFY_PARAM_sk_type(sk::Ptr{stack_st_X509_VERIFY_PARAM})::Ptr{OPENSSL_STACK}
end

mutable struct X509_VERIFY_PARAM_st end

const X509_VERIFY_PARAM = X509_VERIFY_PARAM_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_VERIFY_PARAM , X509_VERIFY_PARAM , X509_VERIFY_PARAM )
const sk_X509_VERIFY_PARAM_compfunc = Ptr{Cvoid}

function ossl_check_X509_VERIFY_PARAM_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_VERIFY_PARAM_compfunc_type(cmp::sk_X509_VERIFY_PARAM_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_VERIFY_PARAM_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_VERIFY_PARAM_sk_type(sk::Ptr{stack_st_X509_VERIFY_PARAM})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_VERIFY_PARAM_type(ptr)
    @ccall libwebsockets.ossl_check_X509_VERIFY_PARAM_type(ptr::Ptr{X509_VERIFY_PARAM})::Ptr{X509_VERIFY_PARAM}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_VERIFY_PARAM , X509_VERIFY_PARAM , X509_VERIFY_PARAM )
const sk_X509_VERIFY_PARAM_freefunc = Ptr{Cvoid}

function ossl_check_X509_VERIFY_PARAM_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_VERIFY_PARAM_freefunc_type(fr::sk_X509_VERIFY_PARAM_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_VERIFY_PARAM , X509_VERIFY_PARAM , X509_VERIFY_PARAM )
const sk_X509_VERIFY_PARAM_copyfunc = Ptr{Cvoid}

function ossl_check_X509_VERIFY_PARAM_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_VERIFY_PARAM_copyfunc_type(cpy::sk_X509_VERIFY_PARAM_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_X509_TRUST end

function ossl_check_const_X509_TRUST_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_X509_TRUST_sk_type(sk::Ptr{stack_st_X509_TRUST})::Ptr{OPENSSL_STACK}
end

mutable struct x509_trust_st
    trust::Cint
    flags::Cint
    check_trust::Ptr{Cvoid}
    name::Ptr{Cchar}
    arg1::Cint
    arg2::Ptr{Cvoid}
    x509_trust_st() = new()
end

const X509_TRUST = x509_trust_st

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_TRUST , X509_TRUST , X509_TRUST )
const sk_X509_TRUST_compfunc = Ptr{Cvoid}

function ossl_check_X509_TRUST_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_X509_TRUST_compfunc_type(cmp::sk_X509_TRUST_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_X509_TRUST_sk_type(sk)
    @ccall libwebsockets.ossl_check_X509_TRUST_sk_type(sk::Ptr{stack_st_X509_TRUST})::Ptr{OPENSSL_STACK}
end

function ossl_check_X509_TRUST_type(ptr)
    @ccall libwebsockets.ossl_check_X509_TRUST_type(ptr::Ptr{X509_TRUST})::Ptr{X509_TRUST}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_TRUST , X509_TRUST , X509_TRUST )
const sk_X509_TRUST_freefunc = Ptr{Cvoid}

function ossl_check_X509_TRUST_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_X509_TRUST_freefunc_type(fr::sk_X509_TRUST_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( X509_TRUST , X509_TRUST , X509_TRUST )
const sk_X509_TRUST_copyfunc = Ptr{Cvoid}

function ossl_check_X509_TRUST_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_X509_TRUST_copyfunc_type(cpy::sk_X509_TRUST_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct x509_store_ctx_st end

const X509_STORE_CTX = x509_store_ctx_st

function X509_STORE_CTX_set_ex_data(ctx, idx, data)
    @ccall libwebsockets.X509_STORE_CTX_set_ex_data(ctx::Ptr{X509_STORE_CTX}, idx::Cint, data::Ptr{Cvoid})::Cint
end

function X509_STORE_CTX_get_ex_data(ctx, idx)
    @ccall libwebsockets.X509_STORE_CTX_get_ex_data(ctx::Ptr{X509_STORE_CTX}, idx::Cint)::Ptr{Cvoid}
end

function X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret)
    @ccall libwebsockets.X509_LOOKUP_ctrl(ctx::Ptr{X509_LOOKUP}, cmd::Cint, argc::Ptr{Cchar}, argl::Clong, ret::Ptr{Ptr{Cchar}})::Cint
end

mutable struct ossl_lib_ctx_st end

const OSSL_LIB_CTX = ossl_lib_ctx_st

function X509_LOOKUP_ctrl_ex(ctx, cmd, argc, argl, ret, libctx, propq)
    @ccall libwebsockets.X509_LOOKUP_ctrl_ex(ctx::Ptr{X509_LOOKUP}, cmd::Cint, argc::Ptr{Cchar}, argl::Clong, ret::Ptr{Ptr{Cchar}}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

mutable struct x509_store_st end

const X509_STORE = x509_store_st

# typedef int ( * X509_STORE_CTX_verify_fn ) ( X509_STORE_CTX * )
const X509_STORE_CTX_verify_fn = Ptr{Cvoid}

function X509_STORE_set_verify(ctx, verify)
    @ccall libwebsockets.X509_STORE_set_verify(ctx::Ptr{X509_STORE}, verify::X509_STORE_CTX_verify_fn)::Cvoid
end

# typedef int ( * X509_STORE_CTX_verify_cb ) ( int , X509_STORE_CTX * )
const X509_STORE_CTX_verify_cb = Ptr{Cvoid}

function X509_STORE_set_verify_cb(ctx, verify_cb)
    @ccall libwebsockets.X509_STORE_set_verify_cb(ctx::Ptr{X509_STORE}, verify_cb::X509_STORE_CTX_verify_cb)::Cvoid
end

# typedef STACK_OF ( X509_CRL ) * ( * X509_STORE_CTX_lookup_crls_fn ) ( const X509_STORE_CTX * ctx , const X509_NAME * nm )
const X509_STORE_CTX_lookup_crls_fn = Ptr{Cvoid}

function X509_STORE_set_lookup_crls(ctx, lookup_crls)
    @ccall libwebsockets.X509_STORE_set_lookup_crls(ctx::Ptr{X509_STORE}, lookup_crls::X509_STORE_CTX_lookup_crls_fn)::Cvoid
end

function X509_STORE_CTX_get0_chain(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_chain(ctx::Ptr{X509_STORE_CTX})::Ptr{stack_st_X509}
end

function X509_STORE_CTX_set0_untrusted(ctx, sk)
    @ccall libwebsockets.X509_STORE_CTX_set0_untrusted(ctx::Ptr{X509_STORE_CTX}, sk::Ptr{stack_st_X509})::Cvoid
end

function X509_STORE_CTX_set0_trusted_stack(ctx, sk)
    @ccall libwebsockets.X509_STORE_CTX_set0_trusted_stack(ctx::Ptr{X509_STORE_CTX}, sk::Ptr{stack_st_X509})::Cvoid
end

const X509_LOOKUP_TYPE = UInt32
const X509_LU_NONE = 0 % UInt32
const X509_LU_X509 = 1 % UInt32
const X509_LU_CRL = 2 % UInt32

function X509_STORE_CTX_get_by_subject(vs, type, name, ret)
    @ccall libwebsockets.X509_STORE_CTX_get_by_subject(vs::Ptr{X509_STORE_CTX}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME}, ret::Ptr{X509_OBJECT})::Cint
end

function X509_STORE_CTX_get1_certs(st, nm)
    @ccall libwebsockets.X509_STORE_CTX_get1_certs(st::Ptr{X509_STORE_CTX}, nm::Ptr{X509_NAME})::Ptr{stack_st_X509}
end

function X509_STORE_CTX_get1_crls(st, nm)
    @ccall libwebsockets.X509_STORE_CTX_get1_crls(st::Ptr{X509_STORE_CTX}, nm::Ptr{X509_NAME})::Ptr{stack_st_X509_CRL}
end

mutable struct stack_st_PKCS7_SIGNER_INFO end

function ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk::Ptr{stack_st_PKCS7_SIGNER_INFO})::Ptr{OPENSSL_STACK}
end

struct pkcs7_issuer_and_serial_st
    issuer::Ptr{X509_NAME}
    serial::Ptr{ASN1_INTEGER}
end

const PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st

struct PKCS7_CTX_st
    libctx::Ptr{OSSL_LIB_CTX}
    propq::Ptr{Cchar}
end

const PKCS7_CTX = PKCS7_CTX_st

mutable struct pkcs7_signer_info_st
    version::Ptr{ASN1_INTEGER}
    issuer_and_serial::Ptr{PKCS7_ISSUER_AND_SERIAL}
    digest_alg::Ptr{X509_ALGOR}
    auth_attr::Ptr{stack_st_X509_ATTRIBUTE}
    digest_enc_alg::Ptr{X509_ALGOR}
    enc_digest::Ptr{ASN1_OCTET_STRING}
    unauth_attr::Ptr{stack_st_X509_ATTRIBUTE}
    pkey::Ptr{EVP_PKEY}
    ctx::Ptr{PKCS7_CTX}
    pkcs7_signer_info_st() = new()
end

const PKCS7_SIGNER_INFO = pkcs7_signer_info_st

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7_SIGNER_INFO , PKCS7_SIGNER_INFO , PKCS7_SIGNER_INFO )
const sk_PKCS7_SIGNER_INFO_compfunc = Ptr{Cvoid}

function ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp::sk_PKCS7_SIGNER_INFO_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_PKCS7_SIGNER_INFO_sk_type(sk)
    @ccall libwebsockets.ossl_check_PKCS7_SIGNER_INFO_sk_type(sk::Ptr{stack_st_PKCS7_SIGNER_INFO})::Ptr{OPENSSL_STACK}
end

function ossl_check_PKCS7_SIGNER_INFO_type(ptr)
    @ccall libwebsockets.ossl_check_PKCS7_SIGNER_INFO_type(ptr::Ptr{PKCS7_SIGNER_INFO})::Ptr{PKCS7_SIGNER_INFO}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7_SIGNER_INFO , PKCS7_SIGNER_INFO , PKCS7_SIGNER_INFO )
const sk_PKCS7_SIGNER_INFO_freefunc = Ptr{Cvoid}

function ossl_check_PKCS7_SIGNER_INFO_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_PKCS7_SIGNER_INFO_freefunc_type(fr::sk_PKCS7_SIGNER_INFO_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7_SIGNER_INFO , PKCS7_SIGNER_INFO , PKCS7_SIGNER_INFO )
const sk_PKCS7_SIGNER_INFO_copyfunc = Ptr{Cvoid}

function ossl_check_PKCS7_SIGNER_INFO_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_PKCS7_SIGNER_INFO_copyfunc_type(cpy::sk_PKCS7_SIGNER_INFO_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_PKCS7_RECIP_INFO end

function ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk::Ptr{stack_st_PKCS7_RECIP_INFO})::Ptr{OPENSSL_STACK}
end

mutable struct pkcs7_recip_info_st
    version::Ptr{ASN1_INTEGER}
    issuer_and_serial::Ptr{PKCS7_ISSUER_AND_SERIAL}
    key_enc_algor::Ptr{X509_ALGOR}
    enc_key::Ptr{ASN1_OCTET_STRING}
    cert::Ptr{X509}
    ctx::Ptr{PKCS7_CTX}
    pkcs7_recip_info_st() = new()
end

const PKCS7_RECIP_INFO = pkcs7_recip_info_st

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7_RECIP_INFO , PKCS7_RECIP_INFO , PKCS7_RECIP_INFO )
const sk_PKCS7_RECIP_INFO_compfunc = Ptr{Cvoid}

function ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp::sk_PKCS7_RECIP_INFO_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_PKCS7_RECIP_INFO_sk_type(sk)
    @ccall libwebsockets.ossl_check_PKCS7_RECIP_INFO_sk_type(sk::Ptr{stack_st_PKCS7_RECIP_INFO})::Ptr{OPENSSL_STACK}
end

function ossl_check_PKCS7_RECIP_INFO_type(ptr)
    @ccall libwebsockets.ossl_check_PKCS7_RECIP_INFO_type(ptr::Ptr{PKCS7_RECIP_INFO})::Ptr{PKCS7_RECIP_INFO}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7_RECIP_INFO , PKCS7_RECIP_INFO , PKCS7_RECIP_INFO )
const sk_PKCS7_RECIP_INFO_freefunc = Ptr{Cvoid}

function ossl_check_PKCS7_RECIP_INFO_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_PKCS7_RECIP_INFO_freefunc_type(fr::sk_PKCS7_RECIP_INFO_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7_RECIP_INFO , PKCS7_RECIP_INFO , PKCS7_RECIP_INFO )
const sk_PKCS7_RECIP_INFO_copyfunc = Ptr{Cvoid}

function ossl_check_PKCS7_RECIP_INFO_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_PKCS7_RECIP_INFO_copyfunc_type(cpy::sk_PKCS7_RECIP_INFO_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_PKCS7 end

function ossl_check_const_PKCS7_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_PKCS7_sk_type(sk::Ptr{stack_st_PKCS7})::Ptr{OPENSSL_STACK}
end

struct __JL_Ctag_89
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_89}, f::Symbol)
    f === :ptr && return Ptr{Ptr{Cchar}}(x + 0)
    f === :data && return Ptr{Ptr{ASN1_OCTET_STRING}}(x + 0)
    f === :sign && return Ptr{Ptr{PKCS7_SIGNED}}(x + 0)
    f === :enveloped && return Ptr{Ptr{PKCS7_ENVELOPE}}(x + 0)
    f === :signed_and_enveloped && return Ptr{Ptr{PKCS7_SIGN_ENVELOPE}}(x + 0)
    f === :digest && return Ptr{Ptr{PKCS7_DIGEST}}(x + 0)
    f === :encrypted && return Ptr{Ptr{PKCS7_ENCRYPT}}(x + 0)
    f === :other && return Ptr{Ptr{ASN1_TYPE}}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_89, f::Symbol)
    r = Ref{__JL_Ctag_89}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_89}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_89}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct pkcs7_st
    data::NTuple{56, UInt8}
end

function Base.getproperty(x::Ptr{pkcs7_st}, f::Symbol)
    f === :asn1 && return Ptr{Ptr{Cuchar}}(x + 0)
    f === :length && return Ptr{Clong}(x + 8)
    f === :state && return Ptr{Cint}(x + 16)
    f === :detached && return Ptr{Cint}(x + 20)
    f === :type && return Ptr{Ptr{ASN1_OBJECT}}(x + 24)
    f === :d && return Ptr{__JL_Ctag_89}(x + 32)
    f === :ctx && return Ptr{PKCS7_CTX}(x + 40)
    return getfield(x, f)
end

function Base.getproperty(x::pkcs7_st, f::Symbol)
    r = Ref{pkcs7_st}(x)
    ptr = Base.unsafe_convert(Ptr{pkcs7_st}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{pkcs7_st}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const PKCS7 = pkcs7_st

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7 , PKCS7 , PKCS7 )
const sk_PKCS7_compfunc = Ptr{Cvoid}

function ossl_check_PKCS7_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_PKCS7_compfunc_type(cmp::sk_PKCS7_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_PKCS7_sk_type(sk)
    @ccall libwebsockets.ossl_check_PKCS7_sk_type(sk::Ptr{stack_st_PKCS7})::Ptr{OPENSSL_STACK}
end

function ossl_check_PKCS7_type(ptr)
    @ccall libwebsockets.ossl_check_PKCS7_type(ptr::Ptr{PKCS7})::Ptr{PKCS7}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7 , PKCS7 , PKCS7 )
const sk_PKCS7_freefunc = Ptr{Cvoid}

function ossl_check_PKCS7_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_PKCS7_freefunc_type(fr::sk_PKCS7_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( PKCS7 , PKCS7 , PKCS7 )
const sk_PKCS7_copyfunc = Ptr{Cvoid}

function ossl_check_PKCS7_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_PKCS7_copyfunc_type(cpy::sk_PKCS7_copyfunc)::OPENSSL_sk_copyfunc
end

function PKCS7_ctrl(p7, cmd, larg, parg)
    @ccall libwebsockets.PKCS7_ctrl(p7::Ptr{PKCS7}, cmd::Cint, larg::Clong, parg::Ptr{Cchar})::Clong
end

function X509_get_pubkey(x)
    @ccall libwebsockets.X509_get_pubkey(x::Ptr{X509})::Ptr{EVP_PKEY}
end

mutable struct X509_req_st end

const X509_REQ = X509_req_st

function X509_REQ_get_pubkey(req)
    @ccall libwebsockets.X509_REQ_get_pubkey(req::Ptr{X509_REQ})::Ptr{EVP_PKEY}
end

function X509_NAME_cmp(a, b)
    @ccall libwebsockets.X509_NAME_cmp(a::Ptr{X509_NAME}, b::Ptr{X509_NAME})::Cint
end

mutable struct stack_st_CONF_VALUE end

function ossl_check_const_CONF_VALUE_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_CONF_VALUE_sk_type(sk::Ptr{stack_st_CONF_VALUE})::Ptr{OPENSSL_STACK}
end

mutable struct CONF_VALUE
    section::Ptr{Cchar}
    name::Ptr{Cchar}
    value::Ptr{Cchar}
    CONF_VALUE() = new()
end

# SKM_DEFINE_STACK_OF_INTERNAL ( CONF_VALUE , CONF_VALUE , CONF_VALUE )
const sk_CONF_VALUE_compfunc = Ptr{Cvoid}

function ossl_check_CONF_VALUE_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_CONF_VALUE_compfunc_type(cmp::sk_CONF_VALUE_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_CONF_VALUE_sk_type(sk)
    @ccall libwebsockets.ossl_check_CONF_VALUE_sk_type(sk::Ptr{stack_st_CONF_VALUE})::Ptr{OPENSSL_STACK}
end

function ossl_check_CONF_VALUE_type(ptr)
    @ccall libwebsockets.ossl_check_CONF_VALUE_type(ptr::Ptr{CONF_VALUE})::Ptr{CONF_VALUE}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( CONF_VALUE , CONF_VALUE , CONF_VALUE )
const sk_CONF_VALUE_freefunc = Ptr{Cvoid}

function ossl_check_CONF_VALUE_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_CONF_VALUE_freefunc_type(fr::sk_CONF_VALUE_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( CONF_VALUE , CONF_VALUE , CONF_VALUE )
const sk_CONF_VALUE_copyfunc = Ptr{Cvoid}

function ossl_check_CONF_VALUE_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_CONF_VALUE_copyfunc_type(cpy::sk_CONF_VALUE_copyfunc)::OPENSSL_sk_copyfunc
end

# DEFINE_LHASH_OF_INTERNAL ( CONF_VALUE )
const lh_CONF_VALUE_hashfunc = Ptr{Cvoid}

function ossl_check_CONF_VALUE_lh_hashfunc_type(hfn)
    @ccall libwebsockets.ossl_check_CONF_VALUE_lh_hashfunc_type(hfn::lh_CONF_VALUE_hashfunc)::OPENSSL_LH_HASHFUNC
end

# DEFINE_LHASH_OF_INTERNAL ( CONF_VALUE )
const lh_CONF_VALUE_compfunc = Ptr{Cvoid}

function ossl_check_CONF_VALUE_lh_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_CONF_VALUE_lh_compfunc_type(cmp::lh_CONF_VALUE_compfunc)::OPENSSL_LH_COMPFUNC
end

struct lh_CONF_VALUE_dummy
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lh_CONF_VALUE_dummy}, f::Symbol)
    f === :d1 && return Ptr{Ptr{Cvoid}}(x + 0)
    f === :d2 && return Ptr{Culong}(x + 0)
    f === :d3 && return Ptr{Cint}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lh_CONF_VALUE_dummy, f::Symbol)
    r = Ref{lh_CONF_VALUE_dummy}(x)
    ptr = Base.unsafe_convert(Ptr{lh_CONF_VALUE_dummy}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lh_CONF_VALUE_dummy}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lhash_st_CONF_VALUE
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lhash_st_CONF_VALUE}, f::Symbol)
    f === :dummy && return Ptr{lh_CONF_VALUE_dummy}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lhash_st_CONF_VALUE, f::Symbol)
    r = Ref{lhash_st_CONF_VALUE}(x)
    ptr = Base.unsafe_convert(Ptr{lhash_st_CONF_VALUE}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lhash_st_CONF_VALUE}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function ossl_check_CONF_VALUE_lh_type(lh)
    @ccall libwebsockets.ossl_check_CONF_VALUE_lh_type(lh::Ptr{lhash_st_CONF_VALUE})::Ptr{OPENSSL_LHASH}
end

function ossl_check_CONF_VALUE_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_CONF_VALUE_lh_plain_type(ptr::Ptr{CONF_VALUE})::Ptr{CONF_VALUE}
end

function ossl_check_const_CONF_VALUE_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_const_CONF_VALUE_lh_plain_type(ptr::Ptr{CONF_VALUE})::Ptr{CONF_VALUE}
end

function ossl_check_const_CONF_VALUE_lh_type(lh)
    @ccall libwebsockets.ossl_check_const_CONF_VALUE_lh_type(lh::Ptr{lhash_st_CONF_VALUE})::Ptr{OPENSSL_LHASH}
end

# DEFINE_LHASH_OF_INTERNAL ( CONF_VALUE )
const lh_CONF_VALUE_doallfunc = Ptr{Cvoid}

function ossl_check_CONF_VALUE_lh_doallfunc_type(dfn)
    @ccall libwebsockets.ossl_check_CONF_VALUE_lh_doallfunc_type(dfn::lh_CONF_VALUE_doallfunc)::OPENSSL_LH_DOALL_FUNC
end

struct conf_method_st
    name::Ptr{Cchar}
    create::Ptr{Cvoid}
    init::Ptr{Cvoid}
    destroy::Ptr{Cvoid}
    destroy_data::Ptr{Cvoid}
    load_bio::Ptr{Cvoid}
    dump::Ptr{Cvoid}
    is_number::Ptr{Cvoid}
    to_int::Ptr{Cvoid}
    load::Ptr{Cvoid}
end

const CONF_METHOD = conf_method_st

mutable struct conf_st
    meth::Ptr{CONF_METHOD}
    meth_data::Ptr{Cvoid}
    data::Ptr{lhash_st_CONF_VALUE}
    flag_dollarid::Cint
    flag_abspath::Cint
    includedir::Ptr{Cchar}
    libctx::Ptr{OSSL_LIB_CTX}
    conf_st() = new()
end

const CONF = conf_st

function NCONF_get_number_e(conf, group, name, result)
    @ccall libwebsockets.NCONF_get_number_e(conf::Ptr{CONF}, group::Ptr{Cchar}, name::Ptr{Cchar}, result::Ptr{Clong})::Cint
end

mutable struct ossl_http_req_ctx_st end

const OSSL_HTTP_REQ_CTX = ossl_http_req_ctx_st

function OSSL_HTTP_REQ_CTX_nbio_d2i(rctx, pval, it)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_nbio_d2i(rctx::Ptr{OSSL_HTTP_REQ_CTX}, pval::Ptr{Ptr{ASN1_VALUE}}, it::Ptr{ASN1_ITEM})::Cint
end

const ASN1_TIME = asn1_string_st

function X509_getm_notBefore(x)
    @ccall libwebsockets.X509_getm_notBefore(x::Ptr{X509})::Ptr{ASN1_TIME}
end

function X509_getm_notAfter(x)
    @ccall libwebsockets.X509_getm_notAfter(x::Ptr{X509})::Ptr{ASN1_TIME}
end

function X509_set1_notBefore(x, tm)
    @ccall libwebsockets.X509_set1_notBefore(x::Ptr{X509}, tm::Ptr{ASN1_TIME})::Cint
end

function X509_set1_notAfter(x, tm)
    @ccall libwebsockets.X509_set1_notAfter(x::Ptr{X509}, tm::Ptr{ASN1_TIME})::Cint
end

function X509_CRL_set1_lastUpdate(x, tm)
    @ccall libwebsockets.X509_CRL_set1_lastUpdate(x::Ptr{X509_CRL}, tm::Ptr{ASN1_TIME})::Cint
end

function X509_CRL_set1_nextUpdate(x, tm)
    @ccall libwebsockets.X509_CRL_set1_nextUpdate(x::Ptr{X509_CRL}, tm::Ptr{ASN1_TIME})::Cint
end

function X509_NAME_hash_ex(x, libctx, propq, ok)
    @ccall libwebsockets.X509_NAME_hash_ex(x::Ptr{X509_NAME}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar}, ok::Ptr{Cint})::Culong
end

# typedef int pem_password_cb ( char * buf , int size , int rwflag , void * userdata )
const pem_password_cb = Cvoid

function PEM_ASN1_read(d2i, name, fp, x, cb, u)
    @ccall libwebsockets.PEM_ASN1_read(d2i::Ptr{d2i_of_void}, name::Ptr{Cchar}, fp::Ptr{Libc.FILE}, x::Ptr{Ptr{Cvoid}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{Cvoid}
end

function PEM_ASN1_write(i2d, name, fp, x, enc, kstr, klen, callback, u)
    @ccall libwebsockets.PEM_ASN1_write(i2d::Ptr{i2d_of_void}, name::Ptr{Cchar}, fp::Ptr{Libc.FILE}, x::Ptr{Cvoid}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, callback::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_ASN1_read_bio(d2i, name, bp, x, cb, u)
    @ccall libwebsockets.PEM_ASN1_read_bio(d2i::Ptr{d2i_of_void}, name::Ptr{Cchar}, bp::Ptr{BIO}, x::Ptr{Ptr{Cvoid}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{Cvoid}
end

function PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_ASN1_write_bio(i2d::Ptr{i2d_of_void}, name::Ptr{Cchar}, bp::Ptr{BIO}, x::Ptr{Cvoid}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

mutable struct stack_st_SCT end

function ossl_check_const_SCT_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_SCT_sk_type(sk::Ptr{stack_st_SCT})::Ptr{OPENSSL_STACK}
end

mutable struct sct_st end

const SCT = sct_st

# SKM_DEFINE_STACK_OF_INTERNAL ( SCT , SCT , SCT )
const sk_SCT_compfunc = Ptr{Cvoid}

function ossl_check_SCT_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_SCT_compfunc_type(cmp::sk_SCT_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_SCT_sk_type(sk)
    @ccall libwebsockets.ossl_check_SCT_sk_type(sk::Ptr{stack_st_SCT})::Ptr{OPENSSL_STACK}
end

function ossl_check_SCT_type(ptr)
    @ccall libwebsockets.ossl_check_SCT_type(ptr::Ptr{SCT})::Ptr{SCT}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SCT , SCT , SCT )
const sk_SCT_freefunc = Ptr{Cvoid}

function ossl_check_SCT_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_SCT_freefunc_type(fr::sk_SCT_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SCT , SCT , SCT )
const sk_SCT_copyfunc = Ptr{Cvoid}

function ossl_check_SCT_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_SCT_copyfunc_type(cpy::sk_SCT_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_CTLOG end

function ossl_check_const_CTLOG_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_CTLOG_sk_type(sk::Ptr{stack_st_CTLOG})::Ptr{OPENSSL_STACK}
end

mutable struct ctlog_st end

const CTLOG = ctlog_st

# SKM_DEFINE_STACK_OF_INTERNAL ( CTLOG , CTLOG , CTLOG )
const sk_CTLOG_compfunc = Ptr{Cvoid}

function ossl_check_CTLOG_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_CTLOG_compfunc_type(cmp::sk_CTLOG_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_CTLOG_sk_type(sk)
    @ccall libwebsockets.ossl_check_CTLOG_sk_type(sk::Ptr{stack_st_CTLOG})::Ptr{OPENSSL_STACK}
end

function ossl_check_CTLOG_type(ptr)
    @ccall libwebsockets.ossl_check_CTLOG_type(ptr::Ptr{CTLOG})::Ptr{CTLOG}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( CTLOG , CTLOG , CTLOG )
const sk_CTLOG_freefunc = Ptr{Cvoid}

function ossl_check_CTLOG_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_CTLOG_freefunc_type(fr::sk_CTLOG_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( CTLOG , CTLOG , CTLOG )
const sk_CTLOG_copyfunc = Ptr{Cvoid}

function ossl_check_CTLOG_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_CTLOG_copyfunc_type(cpy::sk_CTLOG_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_SRTP_PROTECTION_PROFILE end

function ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk::Ptr{stack_st_SRTP_PROTECTION_PROFILE})::Ptr{OPENSSL_STACK}
end

mutable struct srtp_protection_profile_st
    name::Ptr{Cchar}
    id::Culong
    srtp_protection_profile_st() = new()
end

const SRTP_PROTECTION_PROFILE = srtp_protection_profile_st

# SKM_DEFINE_STACK_OF_INTERNAL ( SRTP_PROTECTION_PROFILE , SRTP_PROTECTION_PROFILE , SRTP_PROTECTION_PROFILE )
const sk_SRTP_PROTECTION_PROFILE_compfunc = Ptr{Cvoid}

function ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp::sk_SRTP_PROTECTION_PROFILE_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk)
    @ccall libwebsockets.ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk::Ptr{stack_st_SRTP_PROTECTION_PROFILE})::Ptr{OPENSSL_STACK}
end

function ossl_check_SRTP_PROTECTION_PROFILE_type(ptr)
    @ccall libwebsockets.ossl_check_SRTP_PROTECTION_PROFILE_type(ptr::Ptr{SRTP_PROTECTION_PROFILE})::Ptr{SRTP_PROTECTION_PROFILE}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SRTP_PROTECTION_PROFILE , SRTP_PROTECTION_PROFILE , SRTP_PROTECTION_PROFILE )
const sk_SRTP_PROTECTION_PROFILE_freefunc = Ptr{Cvoid}

function ossl_check_SRTP_PROTECTION_PROFILE_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_SRTP_PROTECTION_PROFILE_freefunc_type(fr::sk_SRTP_PROTECTION_PROFILE_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SRTP_PROTECTION_PROFILE , SRTP_PROTECTION_PROFILE , SRTP_PROTECTION_PROFILE )
const sk_SRTP_PROTECTION_PROFILE_copyfunc = Ptr{Cvoid}

function ossl_check_SRTP_PROTECTION_PROFILE_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_SRTP_PROTECTION_PROFILE_copyfunc_type(cpy::sk_SRTP_PROTECTION_PROFILE_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct ssl_ctx_st end

const SSL_CTX = ssl_ctx_st

function SSL_CTX_ctrl(ctx, cmd, larg, parg)
    @ccall libwebsockets.SSL_CTX_ctrl(ctx::Ptr{SSL_CTX}, cmd::Cint, larg::Clong, parg::Ptr{Cvoid})::Clong
end

mutable struct ssl_st end

const SSL = ssl_st

function SSL_ctrl(ssl, cmd, larg, parg)
    @ccall libwebsockets.SSL_ctrl(ssl::Ptr{SSL}, cmd::Cint, larg::Clong, parg::Ptr{Cvoid})::Clong
end

# typedef int ( * SSL_CTX_npn_advertised_cb_func ) ( SSL * ssl , const unsigned char * * out , unsigned int * outlen , void * arg )
const SSL_CTX_npn_advertised_cb_func = Ptr{Cvoid}

function SSL_CTX_set_next_protos_advertised_cb(s, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_next_protos_advertised_cb(s::Ptr{SSL_CTX}, cb::SSL_CTX_npn_advertised_cb_func, arg::Ptr{Cvoid})::Cvoid
end

# typedef int ( * SSL_CTX_npn_select_cb_func ) ( SSL * s , unsigned char * * out , unsigned char * outlen , const unsigned char * in , unsigned int inlen , void * arg )
const SSL_CTX_npn_select_cb_func = Ptr{Cvoid}

function SSL_CTX_set_next_proto_select_cb(s, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_next_proto_select_cb(s::Ptr{SSL_CTX}, cb::SSL_CTX_npn_select_cb_func, arg::Ptr{Cvoid})::Cvoid
end

function SSL_get0_next_proto_negotiated(s, data, len)
    @ccall libwebsockets.SSL_get0_next_proto_negotiated(s::Ptr{SSL}, data::Ptr{Ptr{Cuchar}}, len::Ptr{Cuint})::Cvoid
end

function SSL_want(s)
    @ccall libwebsockets.SSL_want(s::Ptr{SSL})::Cint
end

function SSL_version(ssl)
    @ccall libwebsockets.SSL_version(ssl::Ptr{SSL})::Cint
end

function SSL_client_version(s)
    @ccall libwebsockets.SSL_client_version(s::Ptr{SSL})::Cint
end

function SSL_callback_ctrl(arg1, arg2, arg3)
    @ccall libwebsockets.SSL_callback_ctrl(arg1::Ptr{SSL}, arg2::Cint, arg3::Ptr{Cvoid})::Clong
end

function SSL_CTX_callback_ctrl(arg1, arg2, arg3)
    @ccall libwebsockets.SSL_CTX_callback_ctrl(arg1::Ptr{SSL_CTX}, arg2::Cint, arg3::Ptr{Cvoid})::Clong
end

mutable struct stack_st_SSL_CIPHER end

function ossl_check_const_SSL_CIPHER_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_SSL_CIPHER_sk_type(sk::Ptr{stack_st_SSL_CIPHER})::Ptr{OPENSSL_STACK}
end

mutable struct ssl_cipher_st end

const SSL_CIPHER = ssl_cipher_st

# SKM_DEFINE_STACK_OF_INTERNAL ( SSL_CIPHER , const SSL_CIPHER , SSL_CIPHER )
const sk_SSL_CIPHER_compfunc = Ptr{Cvoid}

function ossl_check_SSL_CIPHER_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_SSL_CIPHER_compfunc_type(cmp::sk_SSL_CIPHER_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_SSL_CIPHER_sk_type(sk)
    @ccall libwebsockets.ossl_check_SSL_CIPHER_sk_type(sk::Ptr{stack_st_SSL_CIPHER})::Ptr{OPENSSL_STACK}
end

function ossl_check_SSL_CIPHER_type(ptr)
    @ccall libwebsockets.ossl_check_SSL_CIPHER_type(ptr::Ptr{SSL_CIPHER})::Ptr{SSL_CIPHER}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SSL_CIPHER , const SSL_CIPHER , SSL_CIPHER )
const sk_SSL_CIPHER_freefunc = Ptr{Cvoid}

function ossl_check_SSL_CIPHER_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_SSL_CIPHER_freefunc_type(fr::sk_SSL_CIPHER_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SSL_CIPHER , const SSL_CIPHER , SSL_CIPHER )
const sk_SSL_CIPHER_copyfunc = Ptr{Cvoid}

function ossl_check_SSL_CIPHER_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_SSL_CIPHER_copyfunc_type(cpy::sk_SSL_CIPHER_copyfunc)::OPENSSL_sk_copyfunc
end

mutable struct stack_st_SSL_COMP end

function ossl_check_const_SSL_COMP_sk_type(sk)
    @ccall libwebsockets.ossl_check_const_SSL_COMP_sk_type(sk::Ptr{stack_st_SSL_COMP})::Ptr{OPENSSL_STACK}
end

mutable struct ssl_comp_st end

const SSL_COMP = ssl_comp_st

# SKM_DEFINE_STACK_OF_INTERNAL ( SSL_COMP , SSL_COMP , SSL_COMP )
const sk_SSL_COMP_compfunc = Ptr{Cvoid}

function ossl_check_SSL_COMP_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_SSL_COMP_compfunc_type(cmp::sk_SSL_COMP_compfunc)::OPENSSL_sk_compfunc
end

function ossl_check_SSL_COMP_sk_type(sk)
    @ccall libwebsockets.ossl_check_SSL_COMP_sk_type(sk::Ptr{stack_st_SSL_COMP})::Ptr{OPENSSL_STACK}
end

function ossl_check_SSL_COMP_type(ptr)
    @ccall libwebsockets.ossl_check_SSL_COMP_type(ptr::Ptr{SSL_COMP})::Ptr{SSL_COMP}
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SSL_COMP , SSL_COMP , SSL_COMP )
const sk_SSL_COMP_freefunc = Ptr{Cvoid}

function ossl_check_SSL_COMP_freefunc_type(fr)
    @ccall libwebsockets.ossl_check_SSL_COMP_freefunc_type(fr::sk_SSL_COMP_freefunc)::OPENSSL_sk_freefunc
end

# SKM_DEFINE_STACK_OF_INTERNAL ( SSL_COMP , SSL_COMP , SSL_COMP )
const sk_SSL_COMP_copyfunc = Ptr{Cvoid}

function ossl_check_SSL_COMP_copyfunc_type(cpy)
    @ccall libwebsockets.ossl_check_SSL_COMP_copyfunc_type(cpy::sk_SSL_COMP_copyfunc)::OPENSSL_sk_copyfunc
end

function SSL_set_ex_data(ssl, idx, data)
    @ccall libwebsockets.SSL_set_ex_data(ssl::Ptr{SSL}, idx::Cint, data::Ptr{Cvoid})::Cint
end

function SSL_get_ex_data(ssl, idx)
    @ccall libwebsockets.SSL_get_ex_data(ssl::Ptr{SSL}, idx::Cint)::Ptr{Cvoid}
end

mutable struct ssl_session_st end

const SSL_SESSION = ssl_session_st

function SSL_SESSION_set_ex_data(ss, idx, data)
    @ccall libwebsockets.SSL_SESSION_set_ex_data(ss::Ptr{SSL_SESSION}, idx::Cint, data::Ptr{Cvoid})::Cint
end

function SSL_SESSION_get_ex_data(ss, idx)
    @ccall libwebsockets.SSL_SESSION_get_ex_data(ss::Ptr{SSL_SESSION}, idx::Cint)::Ptr{Cvoid}
end

function SSL_CTX_get_ex_data(ssl, idx)
    @ccall libwebsockets.SSL_CTX_get_ex_data(ssl::Ptr{SSL_CTX}, idx::Cint)::Ptr{Cvoid}
end

function SSL_CTX_set_ex_data(ssl, idx, data)
    @ccall libwebsockets.SSL_CTX_set_ex_data(ssl::Ptr{SSL_CTX}, idx::Cint, data::Ptr{Cvoid})::Cint
end

function SSL_in_init(s)
    @ccall libwebsockets.SSL_in_init(s::Ptr{SSL})::Cint
end

function SSL_is_server(s)
    @ccall libwebsockets.SSL_is_server(s::Ptr{SSL})::Cint
end

function OPENSSL_init_ssl(opts, settings)
    @ccall libwebsockets.OPENSSL_init_ssl(opts::UInt64, settings::Ptr{OPENSSL_INIT_SETTINGS})::Cint
end

function SSL_CIPHER_get_name(c)
    @ccall libwebsockets.SSL_CIPHER_get_name(c::Ptr{SSL_CIPHER})::Ptr{Cchar}
end

function SSL_get_current_cipher(s)
    @ccall libwebsockets.SSL_get_current_cipher(s::Ptr{SSL})::Ptr{SSL_CIPHER}
end

function SSL_CIPHER_get_bits(c, alg_bits)
    @ccall libwebsockets.SSL_CIPHER_get_bits(c::Ptr{SSL_CIPHER}, alg_bits::Ptr{Cint})::Cint
end

function SSL_CIPHER_get_version(c)
    @ccall libwebsockets.SSL_CIPHER_get_version(c::Ptr{SSL_CIPHER})::Ptr{Cchar}
end

function SSL_SESSION_get_time(s)
    @ccall libwebsockets.SSL_SESSION_get_time(s::Ptr{SSL_SESSION})::Clong
end

function SSL_SESSION_set_time(s, t)
    @ccall libwebsockets.SSL_SESSION_set_time(s::Ptr{SSL_SESSION}, t::Clong)::Clong
end

function SSL_SESSION_get_timeout(s)
    @ccall libwebsockets.SSL_SESSION_get_timeout(s::Ptr{SSL_SESSION})::Clong
end

function SSL_SESSION_set_timeout(s, t)
    @ccall libwebsockets.SSL_SESSION_set_timeout(s::Ptr{SSL_SESSION}, t::Clong)::Clong
end

function SSL_SESSION_new()
    @ccall libwebsockets.SSL_SESSION_new()::Ptr{SSL_SESSION}
end

function d2i_SSL_SESSION(a, pp, length)
    @ccall libwebsockets.d2i_SSL_SESSION(a::Ptr{Ptr{SSL_SESSION}}, pp::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{SSL_SESSION}
end

function i2d_SSL_SESSION(in, pp)
    @ccall libwebsockets.i2d_SSL_SESSION(in::Ptr{SSL_SESSION}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function SSL_get1_peer_certificate(s)
    @ccall libwebsockets.SSL_get1_peer_certificate(s::Ptr{SSL})::Ptr{X509}
end

mutable struct ssl_method_st end

const SSL_METHOD = ssl_method_st

function TLS_method()
    @ccall libwebsockets.TLS_method()::Ptr{SSL_METHOD}
end

function TLS_server_method()
    @ccall libwebsockets.TLS_server_method()::Ptr{SSL_METHOD}
end

function TLS_client_method()
    @ccall libwebsockets.TLS_client_method()::Ptr{SSL_METHOD}
end

function SSL_get_session(ssl)
    @ccall libwebsockets.SSL_get_session(ssl::Ptr{SSL})::Ptr{SSL_SESSION}
end

function SSL_session_reused(s)
    @ccall libwebsockets.SSL_session_reused(s::Ptr{SSL})::Cint
end

function ERR_new()
    @ccall libwebsockets.ERR_new()::Cvoid
end

function ERR_set_debug(file, line, func)
    @ccall libwebsockets.ERR_set_debug(file::Ptr{Cchar}, line::Cint, func::Ptr{Cchar})::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function ERR_set_error(lib, reason, fmt, va_list...)
        :(@ccall(libwebsockets.ERR_set_error(lib::Cint, reason::Cint, fmt::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cvoid))
    end

mutable struct ERR_string_data_st
    error::Culong
    string::Ptr{Cchar}
    ERR_string_data_st() = new()
end

const ERR_STRING_DATA = ERR_string_data_st

# DEFINE_LHASH_OF_INTERNAL ( ERR_STRING_DATA )
const lh_ERR_STRING_DATA_hashfunc = Ptr{Cvoid}

function ossl_check_ERR_STRING_DATA_lh_hashfunc_type(hfn)
    @ccall libwebsockets.ossl_check_ERR_STRING_DATA_lh_hashfunc_type(hfn::lh_ERR_STRING_DATA_hashfunc)::OPENSSL_LH_HASHFUNC
end

# DEFINE_LHASH_OF_INTERNAL ( ERR_STRING_DATA )
const lh_ERR_STRING_DATA_compfunc = Ptr{Cvoid}

function ossl_check_ERR_STRING_DATA_lh_compfunc_type(cmp)
    @ccall libwebsockets.ossl_check_ERR_STRING_DATA_lh_compfunc_type(cmp::lh_ERR_STRING_DATA_compfunc)::OPENSSL_LH_COMPFUNC
end

struct lh_ERR_STRING_DATA_dummy
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lh_ERR_STRING_DATA_dummy}, f::Symbol)
    f === :d1 && return Ptr{Ptr{Cvoid}}(x + 0)
    f === :d2 && return Ptr{Culong}(x + 0)
    f === :d3 && return Ptr{Cint}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lh_ERR_STRING_DATA_dummy, f::Symbol)
    r = Ref{lh_ERR_STRING_DATA_dummy}(x)
    ptr = Base.unsafe_convert(Ptr{lh_ERR_STRING_DATA_dummy}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lh_ERR_STRING_DATA_dummy}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lhash_st_ERR_STRING_DATA
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{lhash_st_ERR_STRING_DATA}, f::Symbol)
    f === :dummy && return Ptr{lh_ERR_STRING_DATA_dummy}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lhash_st_ERR_STRING_DATA, f::Symbol)
    r = Ref{lhash_st_ERR_STRING_DATA}(x)
    ptr = Base.unsafe_convert(Ptr{lhash_st_ERR_STRING_DATA}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lhash_st_ERR_STRING_DATA}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function ossl_check_ERR_STRING_DATA_lh_type(lh)
    @ccall libwebsockets.ossl_check_ERR_STRING_DATA_lh_type(lh::Ptr{lhash_st_ERR_STRING_DATA})::Ptr{OPENSSL_LHASH}
end

function ossl_check_ERR_STRING_DATA_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_ERR_STRING_DATA_lh_plain_type(ptr::Ptr{ERR_STRING_DATA})::Ptr{ERR_STRING_DATA}
end

function ossl_check_const_ERR_STRING_DATA_lh_plain_type(ptr)
    @ccall libwebsockets.ossl_check_const_ERR_STRING_DATA_lh_plain_type(ptr::Ptr{ERR_STRING_DATA})::Ptr{ERR_STRING_DATA}
end

function ossl_check_const_ERR_STRING_DATA_lh_type(lh)
    @ccall libwebsockets.ossl_check_const_ERR_STRING_DATA_lh_type(lh::Ptr{lhash_st_ERR_STRING_DATA})::Ptr{OPENSSL_LHASH}
end

# DEFINE_LHASH_OF_INTERNAL ( ERR_STRING_DATA )
const lh_ERR_STRING_DATA_doallfunc = Ptr{Cvoid}

function ossl_check_ERR_STRING_DATA_lh_doallfunc_type(dfn)
    @ccall libwebsockets.ossl_check_ERR_STRING_DATA_lh_doallfunc_type(dfn::lh_ERR_STRING_DATA_doallfunc)::OPENSSL_LH_DOALL_FUNC
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function _lws_log_cx(cx, prep, obj, filter, _fun, format, va_list...)
        :(@ccall(libwebsockets._lws_log_cx(cx::Ptr{lws_log_cx_t}, prep::lws_log_prepend_cx_t, obj::Ptr{Cvoid}, filter::Cint, _fun::Ptr{Cchar}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cvoid))
    end

mutable struct lws_context end

struct __JL_Ctag_80
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_80}, f::Symbol)
    f === :emit && return Ptr{lws_log_emit_t}(x + 0)
    f === :emit_cx && return Ptr{lws_log_emit_cx_t}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_80, f::Symbol)
    r = Ref{__JL_Ctag_80}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_80}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_80}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

# typedef void ( * lws_log_use_cx_t ) ( struct lws_log_cx * cx , int _new )
const lws_log_use_cx_t = Ptr{Cvoid}

# typedef void ( * lws_log_prepend_cx_t ) ( struct lws_log_cx * cx , void * obj , char * * p , char * e )
const lws_log_prepend_cx_t = Ptr{Cvoid}

struct lws_log_cx
    data::NTuple{56, UInt8}
end

function Base.getproperty(x::Ptr{lws_log_cx}, f::Symbol)
    f === :u && return Ptr{__JL_Ctag_80}(x + 0)
    f === :refcount_cb && return Ptr{lws_log_use_cx_t}(x + 8)
    f === :prepend && return Ptr{lws_log_prepend_cx_t}(x + 16)
    f === :parent && return Ptr{Ptr{lws_log_cx}}(x + 24)
    f === :opaque && return Ptr{Ptr{Cvoid}}(x + 32)
    f === :stg && return Ptr{Ptr{Cvoid}}(x + 40)
    f === :lll_flags && return Ptr{UInt32}(x + 48)
    f === :refcount && return Ptr{Int32}(x + 52)
    return getfield(x, f)
end

function Base.getproperty(x::lws_log_cx, f::Symbol)
    r = Ref{lws_log_cx}(x)
    ptr = Base.unsafe_convert(Ptr{lws_log_cx}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_log_cx}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function lwsl_context_get_cx(cx)
    @ccall libwebsockets.lwsl_context_get_cx(cx::Ptr{lws_context})::Ptr{lws_log_cx}
end

function lws_log_prepend_context(cx, obj, p, e)
    @ccall libwebsockets.lws_log_prepend_context(cx::Ptr{lws_log_cx}, obj::Ptr{Cvoid}, p::Ptr{Ptr{Cchar}}, e::Ptr{Cchar})::Cvoid
end

mutable struct lws_vhost end

function lwsl_vhost_get_cx(vh)
    @ccall libwebsockets.lwsl_vhost_get_cx(vh::Ptr{lws_vhost})::Ptr{lws_log_cx}
end

function lws_log_prepend_vhost(cx, obj, p, e)
    @ccall libwebsockets.lws_log_prepend_vhost(cx::Ptr{lws_log_cx}, obj::Ptr{Cvoid}, p::Ptr{Ptr{Cchar}}, e::Ptr{Cchar})::Cvoid
end

mutable struct lws end

function lwsl_wsi_get_cx(wsi)
    @ccall libwebsockets.lwsl_wsi_get_cx(wsi::Ptr{lws})::Ptr{lws_log_cx}
end

function lws_log_prepend_wsi(cx, obj, p, e)
    @ccall libwebsockets.lws_log_prepend_wsi(cx::Ptr{lws_log_cx}, obj::Ptr{Cvoid}, p::Ptr{Ptr{Cchar}}, e::Ptr{Cchar})::Cvoid
end

const lws_log_cx_t = lws_log_cx

function lwsl_hexdump_level_cx(cx, prep, obj, hexdump_level, vbuf, len)
    @ccall libwebsockets.lwsl_hexdump_level_cx(cx::Ptr{lws_log_cx_t}, prep::lws_log_prepend_cx_t, obj::Ptr{Cvoid}, hexdump_level::Cint, vbuf::Ptr{Cvoid}, len::Csize_t)::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function _lws_log(filter, format, va_list...)
        :(@ccall(libwebsockets._lws_log(filter::Cint, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cvoid))
    end

function lwsl_hexdump_level(level, vbuf, len)
    @ccall libwebsockets.lwsl_hexdump_level(level::Cint, vbuf::Ptr{Cvoid}, len::Csize_t)::Cvoid
end

struct lws_dll2
    prev::Ptr{lws_dll2}
    next::Ptr{lws_dll2}
    owner::Ptr{Cvoid} # owner::Ptr{lws_dll2_owner}
end

function Base.getproperty(x::lws_dll2, f::Symbol)
    f === :owner && return Ptr{lws_dll2_owner}(getfield(x, f))
    return getfield(x, f)
end

struct lws_dll2_owner
    tail::Ptr{lws_dll2}
    head::Ptr{lws_dll2}
    count::UInt32
end

const lws_dll2_owner_t = lws_dll2_owner

function _lws_dll2_search_sz_pl(own, name, namelen, dll2_ofs, ptr_ofs)
    @ccall libwebsockets._lws_dll2_search_sz_pl(own::Ptr{lws_dll2_owner_t}, name::Ptr{Cchar}, namelen::Csize_t, dll2_ofs::Csize_t, ptr_ofs::Csize_t)::Ptr{Cvoid}
end

mutable struct lws_map end

const lws_map_t = lws_map

const lws_map_key_t = Ptr{Cvoid}

const lws_map_value_t = Ptr{Cvoid}

mutable struct lws_map_item end

function lws_map_item_create(map, key, keylen, value, valuelen)
    @ccall libwebsockets.lws_map_item_create(map::Ptr{lws_map_t}, key::lws_map_key_t, keylen::Csize_t, value::lws_map_value_t, valuelen::Csize_t)::Ptr{lws_map_item}
end

function lws_map_item_lookup(map, key, keylen)
    @ccall libwebsockets.lws_map_item_lookup(map::Ptr{lws_map_t}, key::lws_map_key_t, keylen::Csize_t)::Ptr{lws_map_item}
end

function lws_now_usecs()
    @ccall libwebsockets.lws_now_usecs()::lws_usec_t
end

const pending_timeout = UInt32
const NO_PENDING_TIMEOUT = 0 % UInt32
const PENDING_TIMEOUT_AWAITING_PROXY_RESPONSE = 1 % UInt32
const PENDING_TIMEOUT_AWAITING_CONNECT_RESPONSE = 2 % UInt32
const PENDING_TIMEOUT_ESTABLISH_WITH_SERVER = 3 % UInt32
const PENDING_TIMEOUT_AWAITING_SERVER_RESPONSE = 4 % UInt32
const PENDING_TIMEOUT_AWAITING_PING = 5 % UInt32
const PENDING_TIMEOUT_CLOSE_ACK = 6 % UInt32
const PENDING_TIMEOUT_UNUSED1 = 7 % UInt32
const PENDING_TIMEOUT_SENT_CLIENT_HANDSHAKE = 8 % UInt32
const PENDING_TIMEOUT_SSL_ACCEPT = 9 % UInt32
const PENDING_TIMEOUT_HTTP_CONTENT = 10 % UInt32
const PENDING_TIMEOUT_AWAITING_CLIENT_HS_SEND = 11 % UInt32
const PENDING_FLUSH_STORED_SEND_BEFORE_CLOSE = 12 % UInt32
const PENDING_TIMEOUT_SHUTDOWN_FLUSH = 13 % UInt32
const PENDING_TIMEOUT_CGI = 14 % UInt32
const PENDING_TIMEOUT_HTTP_KEEPALIVE_IDLE = 15 % UInt32
const PENDING_TIMEOUT_WS_PONG_CHECK_SEND_PING = 16 % UInt32
const PENDING_TIMEOUT_WS_PONG_CHECK_GET_PONG = 17 % UInt32
const PENDING_TIMEOUT_CLIENT_ISSUE_PAYLOAD = 18 % UInt32
const PENDING_TIMEOUT_AWAITING_SOCKS_GREETING_REPLY = 19 % UInt32
const PENDING_TIMEOUT_AWAITING_SOCKS_CONNECT_REPLY = 20 % UInt32
const PENDING_TIMEOUT_AWAITING_SOCKS_AUTH_REPLY = 21 % UInt32
const PENDING_TIMEOUT_KILLED_BY_SSL_INFO = 22 % UInt32
const PENDING_TIMEOUT_KILLED_BY_PARENT = 23 % UInt32
const PENDING_TIMEOUT_CLOSE_SEND = 24 % UInt32
const PENDING_TIMEOUT_HOLDING_AH = 25 % UInt32
const PENDING_TIMEOUT_UDP_IDLE = 26 % UInt32
const PENDING_TIMEOUT_CLIENT_CONN_IDLE = 27 % UInt32
const PENDING_TIMEOUT_LAGGING = 28 % UInt32
const PENDING_TIMEOUT_THREADPOOL = 29 % UInt32
const PENDING_TIMEOUT_THREADPOOL_TASK = 30 % UInt32
const PENDING_TIMEOUT_KILLED_BY_PROXY_CLIENT_CLOSE = 31 % UInt32
const PENDING_TIMEOUT_USER_OK = 32 % UInt32
const PENDING_TIMEOUT_USER_REASON_BASE = 1000 % UInt32

function lws_set_timeout(wsi, reason, secs)
    @ccall libwebsockets.lws_set_timeout(wsi::Ptr{lws}, reason::pending_timeout, secs::Cint)::Cvoid
end

const lws_filepos_t = Culonglong

function lws_strncpy(dest, src, size)
    @ccall libwebsockets.lws_strncpy(dest::Ptr{Cchar}, src::Ptr{Cchar}, size::Csize_t)::Ptr{Cchar}
end

function lws_service_tsi(context, timeout_ms, tsi)
    @ccall libwebsockets.lws_service_tsi(context::Ptr{lws_context}, timeout_ms::Cint, tsi::Cint)::Cint
end

const lws_write_protocol = UInt32
const LWS_WRITE_TEXT = 0 % UInt32
const LWS_WRITE_BINARY = 1 % UInt32
const LWS_WRITE_CONTINUATION = 2 % UInt32
const LWS_WRITE_HTTP = 3 % UInt32
const LWS_WRITE_PING = 5 % UInt32
const LWS_WRITE_PONG = 6 % UInt32
const LWS_WRITE_HTTP_FINAL = 7 % UInt32
const LWS_WRITE_HTTP_HEADERS = 8 % UInt32
const LWS_WRITE_HTTP_HEADERS_CONTINUATION = 9 % UInt32
const LWS_WRITE_BUFLIST = 32 % UInt32
const LWS_WRITE_NO_FIN = 64 % UInt32
const LWS_WRITE_H2_STREAM_END = 128 % UInt32
const LWS_WRITE_CLIENT_IGNORE_XOR_MASK = 128 % UInt32

function lws_write(wsi, buf, len, protocol)
    @ccall libwebsockets.lws_write(wsi::Ptr{lws}, buf::Ptr{Cuchar}, len::Csize_t, protocol::lws_write_protocol)::Cint
end

mutable struct lws_ring end

function lws_ring_get_oldest_tail(ring)
    @ccall libwebsockets.lws_ring_get_oldest_tail(ring::Ptr{lws_ring})::UInt32
end

function lws_ring_consume(ring, tail, dest, max_count)
    @ccall libwebsockets.lws_ring_consume(ring::Ptr{lws_ring}, tail::Ptr{UInt32}, dest::Ptr{Cvoid}, max_count::Csize_t)::Csize_t
end

function lws_ring_get_count_waiting_elements(ring, tail)
    @ccall libwebsockets.lws_ring_get_count_waiting_elements(ring::Ptr{lws_ring}, tail::Ptr{UInt32})::Csize_t
end

function lws_ring_update_oldest_tail(ring, tail)
    @ccall libwebsockets.lws_ring_update_oldest_tail(ring::Ptr{lws_ring}, tail::UInt32)::Cvoid
end

mutable struct lwsac end

function lwsac_use_zero(head, ensure, chunk_size)
    @ccall libwebsockets.lwsac_use_zero(head::Ptr{Ptr{lwsac}}, ensure::Csize_t, chunk_size::Csize_t)::Ptr{Cvoid}
end

struct lws_i2c_ops
    init::Ptr{Cvoid}
    start::Ptr{Cvoid}
    stop::Ptr{Cvoid}
    write::Ptr{Cvoid}
    read::Ptr{Cvoid}
    set_ack::Ptr{Cvoid}
end

const lws_i2c_ops_t = lws_i2c_ops

function lws_bb_i2c_init(octx)
    @ccall libwebsockets.lws_bb_i2c_init(octx::Ptr{lws_i2c_ops_t})::Cint
end

function lws_bb_i2c_start(octx)
    @ccall libwebsockets.lws_bb_i2c_start(octx::Ptr{lws_i2c_ops_t})::Cint
end

function lws_bb_i2c_stop(octx)
    @ccall libwebsockets.lws_bb_i2c_stop(octx::Ptr{lws_i2c_ops_t})::Cvoid
end

function lws_bb_i2c_write(octx, data)
    @ccall libwebsockets.lws_bb_i2c_write(octx::Ptr{lws_i2c_ops_t}, data::UInt8)::Cint
end

function lws_bb_i2c_read(octx)
    @ccall libwebsockets.lws_bb_i2c_read(octx::Ptr{lws_i2c_ops_t})::Cint
end

function lws_bb_i2c_set_ack(octx, ack)
    @ccall libwebsockets.lws_bb_i2c_set_ack(octx::Ptr{lws_i2c_ops_t}, ack::Cint)::Cvoid
end

struct lws_spi_ops
    init::Ptr{Cvoid}
    queue::Ptr{Cvoid}
    bus_mode::UInt8
end

const lws_spi_ops_t = lws_spi_ops

function lws_bb_spi_init(octx)
    @ccall libwebsockets.lws_bb_spi_init(octx::Ptr{lws_spi_ops_t})::Cint
end

# typedef int ( * lws_spi_cb_t ) ( void * opaque )
const lws_spi_cb_t = Ptr{Cvoid}

mutable struct lws_spi_desc
    src::Ptr{UInt8}
    data::Ptr{UInt8}
    dest::Ptr{UInt8}
    opaque::Ptr{Cvoid}
    completion_cb::lws_spi_cb_t
    count_cmd::UInt16
    count_write::UInt16
    count_read::UInt16
    txn_type::UInt8
    channel::UInt8
    lws_spi_desc() = new()
end

const lws_spi_desc_t = lws_spi_desc

function lws_bb_spi_queue(octx, desc)
    @ccall libwebsockets.lws_bb_spi_queue(octx::Ptr{lws_spi_ops_t}, desc::Ptr{lws_spi_desc_t})::Cint
end

struct lws_led_ops
    intensity::Ptr{Cvoid}
    create::Ptr{Cvoid}
    destroy::Ptr{Cvoid}
end

const lws_led_ops_t = lws_led_ops

mutable struct lws_led_state end

function lws_led_gpio_create(led_ops)
    @ccall libwebsockets.lws_led_gpio_create(led_ops::Ptr{lws_led_ops_t})::Ptr{lws_led_state}
end

function lws_led_gpio_destroy(lcs)
    @ccall libwebsockets.lws_led_gpio_destroy(lcs::Ptr{lws_led_state})::Cvoid
end

const lws_led_intensity_t = UInt16

function lws_led_gpio_intensity(lo, name, inten)
    @ccall libwebsockets.lws_led_gpio_intensity(lo::Ptr{lws_led_ops}, name::Ptr{Cchar}, inten::lws_led_intensity_t)::Cvoid
end

const _lws_plat_gpio_t = Cint

struct lws_pwm_map
    gpio::_lws_plat_gpio_t
    index::UInt8
    active_level::UInt8
end

const lws_pwm_map_t = lws_pwm_map

struct lws_pwm_ops
    init::Ptr{Cvoid}
    intensity::Ptr{Cvoid}
    pwm_map::Ptr{lws_pwm_map_t}
    count_pwm_map::UInt8
end

function lws_pwm_plat_init(lo)
    @ccall libwebsockets.lws_pwm_plat_init(lo::Ptr{lws_pwm_ops})::Cint
end

function lws_pwm_plat_intensity(lo, gpio, inten)
    @ccall libwebsockets.lws_pwm_plat_intensity(lo::Ptr{lws_pwm_ops}, gpio::_lws_plat_gpio_t, inten::lws_led_intensity_t)::Cvoid
end

const lws_pwm_ops_t = lws_pwm_ops

# typedef lws_led_intensity_t ( * lws_led_lookup_t ) ( lws_led_seq_phase_t ph )
const lws_led_lookup_t = Ptr{Cvoid}

const lws_led_seq_phase_t = UInt16

struct lws_led_sequence_def_t
    func::lws_led_lookup_t
    ledphase_offset::lws_led_seq_phase_t
    ledphase_total::Cint
    ms::UInt16
    flags::UInt8
end

const lws_display_scalar = UInt16

struct lws_display
    init::Ptr{Cvoid}
    bl_pwm_ops::Ptr{lws_pwm_ops_t}
    contrast::Ptr{Cvoid}
    blit::Ptr{Cvoid}
    power::Ptr{Cvoid}
    bl_active::Ptr{lws_led_sequence_def_t}
    bl_dim::Ptr{lws_led_sequence_def_t}
    bl_transition::Ptr{lws_led_sequence_def_t}
    variant::Ptr{Cvoid}
    bl_index::Cint
    w::lws_display_scalar
    h::lws_display_scalar
    latency_wake_ms::UInt8
end

function lws_display_ssd1306_i2c_init(disp)
    @ccall libwebsockets.lws_display_ssd1306_i2c_init(disp::Ptr{lws_display})::Cint
end

function lws_display_ssd1306_i2c_contrast(disp, b)
    @ccall libwebsockets.lws_display_ssd1306_i2c_contrast(disp::Ptr{lws_display}, b::UInt8)::Cint
end

function lws_display_ssd1306_i2c_blit(disp, src, x, y, w, h)
    @ccall libwebsockets.lws_display_ssd1306_i2c_blit(disp::Ptr{lws_display}, src::Ptr{UInt8}, x::lws_display_scalar, y::lws_display_scalar, w::lws_display_scalar, h::lws_display_scalar)::Cint
end

function lws_display_ssd1306_i2c_power(disp, state)
    @ccall libwebsockets.lws_display_ssd1306_i2c_power(disp::Ptr{lws_display}, state::Cint)::Cint
end

function lws_display_ili9341_spi_init(disp)
    @ccall libwebsockets.lws_display_ili9341_spi_init(disp::Ptr{lws_display})::Cint
end

function lws_display_ili9341_spi_blit(disp, src, x, y, w, h)
    @ccall libwebsockets.lws_display_ili9341_spi_blit(disp::Ptr{lws_display}, src::Ptr{UInt8}, x::lws_display_scalar, y::lws_display_scalar, w::lws_display_scalar, h::lws_display_scalar)::Cint
end

function lws_display_ili9341_spi_power(disp, state)
    @ccall libwebsockets.lws_display_ili9341_spi_power(disp::Ptr{lws_display}, state::Cint)::Cint
end

struct lws_settings_ops
    get::Ptr{Cvoid}
    set::Ptr{Cvoid}
end

mutable struct lws_settings_instance_t
    handle_plat::Ptr{Cvoid}
    so::Ptr{lws_settings_ops}
    refcount::UInt8
    opaque_plat::Ptr{Cvoid}
    lws_settings_instance_t() = new()
end

function lws_settings_plat_get(si, name, dest, max_actual)
    @ccall libwebsockets.lws_settings_plat_get(si::Ptr{lws_settings_instance_t}, name::Ptr{Cchar}, dest::Ptr{UInt8}, max_actual::Ptr{Csize_t})::Cint
end

function lws_settings_plat_set(si, name, src, len)
    @ccall libwebsockets.lws_settings_plat_set(si::Ptr{lws_settings_instance_t}, name::Ptr{Cchar}, src::Ptr{UInt8}, len::Csize_t)::Cint
end

struct lws_netdev_ops
    create::Ptr{Cvoid}
    configure::Ptr{Cvoid}
    up::Ptr{Cvoid}
    down::Ptr{Cvoid}
    event::Ptr{Cvoid}
    destroy::Ptr{Cvoid}
    connect::Ptr{Cvoid}
    scan::Ptr{Cvoid}
end

const lws_netdev_ops_t = lws_netdev_ops

const lws_dll2_t = lws_dll2

struct lws_netdev_instance
    name::Ptr{Cchar}
    ops::Ptr{lws_netdev_ops_t}
    platinfo::Ptr{Cvoid}
    list::lws_dll2_t
    mac::NTuple{6, UInt8}
    type::UInt8
end

function lws_netdev_wifi_create_plat(ctx, ops, name, platinfo)
    @ccall libwebsockets.lws_netdev_wifi_create_plat(ctx::Ptr{lws_context}, ops::Ptr{lws_netdev_ops_t}, name::Ptr{Cchar}, platinfo::Ptr{Cvoid})::Ptr{lws_netdev_instance}
end

mutable struct lws_netdev_config
    plat_config::Ptr{Cvoid}
    lws_netdev_config() = new()
end

const lws_netdev_config_t = lws_netdev_config

function lws_netdev_wifi_configure_plat(nd, config)
    @ccall libwebsockets.lws_netdev_wifi_configure_plat(nd::Ptr{lws_netdev_instance}, config::Ptr{lws_netdev_config_t})::Cint
end

function lws_netdev_wifi_event_plat(nd, timestamp, buf, len)
    @ccall libwebsockets.lws_netdev_wifi_event_plat(nd::Ptr{lws_netdev_instance}, timestamp::lws_usec_t, buf::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_netdev_wifi_up_plat(nd)
    @ccall libwebsockets.lws_netdev_wifi_up_plat(nd::Ptr{lws_netdev_instance})::Cint
end

function lws_netdev_wifi_down_plat(nd)
    @ccall libwebsockets.lws_netdev_wifi_down_plat(nd::Ptr{lws_netdev_instance})::Cint
end

const lws_netdev_instance_t = lws_netdev_instance

function lws_netdev_wifi_connect_plat(wnd, ssid, passphrase, bssid)
    @ccall libwebsockets.lws_netdev_wifi_connect_plat(wnd::Ptr{lws_netdev_instance_t}, ssid::Ptr{Cchar}, passphrase::Ptr{Cchar}, bssid::Ptr{UInt8})::Cint
end

function lws_netdev_wifi_scan_plat(nd)
    @ccall libwebsockets.lws_netdev_wifi_scan_plat(nd::Ptr{lws_netdev_instance_t})::Cvoid
end

function lws_netdev_wifi_destroy_plat(pnd)
    @ccall libwebsockets.lws_netdev_wifi_destroy_plat(pnd::Ptr{Ptr{lws_netdev_instance}})::Cvoid
end

const lws_ctx_t = Ptr{lws_context}

mutable struct lws_dsh end

const ossl_intmax_t = intmax_t

const ossl_uintmax_t = uintmax_t

mutable struct ossl_provider_st end

const OSSL_PROVIDER = ossl_provider_st

const ASN1_ENUMERATED = asn1_string_st

const ASN1_BIT_STRING = asn1_string_st

const ASN1_PRINTABLESTRING = asn1_string_st

const ASN1_T61STRING = asn1_string_st

const ASN1_IA5STRING = asn1_string_st

const ASN1_UNIVERSALSTRING = asn1_string_st

const ASN1_BMPSTRING = asn1_string_st

const ASN1_UTCTIME = asn1_string_st

const ASN1_GENERALIZEDTIME = asn1_string_st

const ASN1_VISIBLESTRING = asn1_string_st

const ASN1_STRING = asn1_string_st

const ASN1_BOOLEAN = Cint

const ASN1_NULL = Cint

mutable struct asn1_sctx_st end

const ASN1_SCTX = asn1_sctx_st

mutable struct bn_blinding_st end

const BN_BLINDING = bn_blinding_st

mutable struct bn_mont_ctx_st end

const BN_MONT_CTX = bn_mont_ctx_st

mutable struct bn_recp_ctx_st end

const BN_RECP_CTX = bn_recp_ctx_st

mutable struct bn_gencb_st end

const BN_GENCB = bn_gencb_st

mutable struct buf_mem_st
    length::Csize_t
    data::Ptr{Cchar}
    max::Csize_t
    flags::Culong
    buf_mem_st() = new()
end

const BUF_MEM = buf_mem_st

mutable struct stack_st_BIGNUM end

mutable struct stack_st_BIGNUM_const end

mutable struct err_state_st
    err_flags::NTuple{16, Cint}
    err_marks::NTuple{16, Cint}
    err_buffer::NTuple{16, Culong}
    err_data::NTuple{16, Ptr{Cchar}}
    err_data_size::NTuple{16, Csize_t}
    err_data_flags::NTuple{16, Cint}
    err_file::NTuple{16, Ptr{Cchar}}
    err_line::NTuple{16, Cint}
    err_func::NTuple{16, Ptr{Cchar}}
    top::Cint
    bottom::Cint
    err_state_st() = new()
end

const ERR_STATE = err_state_st

mutable struct evp_mac_st end

const EVP_MAC = evp_mac_st

mutable struct evp_mac_ctx_st end

const EVP_MAC_CTX = evp_mac_ctx_st

mutable struct evp_pkey_asn1_method_st end

const EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st

mutable struct evp_pkey_method_st end

const EVP_PKEY_METHOD = evp_pkey_method_st

mutable struct evp_keymgmt_st end

const EVP_KEYMGMT = evp_keymgmt_st

mutable struct evp_kdf_st end

const EVP_KDF = evp_kdf_st

mutable struct evp_kdf_ctx_st end

const EVP_KDF_CTX = evp_kdf_ctx_st

mutable struct evp_rand_st end

const EVP_RAND = evp_rand_st

mutable struct evp_rand_ctx_st end

const EVP_RAND_CTX = evp_rand_ctx_st

mutable struct evp_keyexch_st end

const EVP_KEYEXCH = evp_keyexch_st

mutable struct evp_signature_st end

const EVP_SIGNATURE = evp_signature_st

mutable struct evp_asym_cipher_st end

const EVP_ASYM_CIPHER = evp_asym_cipher_st

mutable struct evp_kem_st end

const EVP_KEM = evp_kem_st

mutable struct evp_Encode_Ctx_st end

const EVP_ENCODE_CTX = evp_Encode_Ctx_st

mutable struct hmac_ctx_st end

const HMAC_CTX = hmac_ctx_st

mutable struct dh_method end

const DH_METHOD = dh_method

mutable struct dsa_method end

const DSA_METHOD = dsa_method

mutable struct rsa_meth_st end

const RSA_METHOD = rsa_meth_st

mutable struct rsa_pss_params_st
    hashAlgorithm::Ptr{X509_ALGOR}
    maskGenAlgorithm::Ptr{X509_ALGOR}
    saltLength::Ptr{ASN1_INTEGER}
    trailerField::Ptr{ASN1_INTEGER}
    maskHash::Ptr{X509_ALGOR}
    rsa_pss_params_st() = new()
end

const RSA_PSS_PARAMS = rsa_pss_params_st

mutable struct ec_key_method_st end

const EC_KEY_METHOD = ec_key_method_st

mutable struct rand_meth_st end

const RAND_METHOD = rand_meth_st

mutable struct rand_drbg_st end

const RAND_DRBG = rand_drbg_st

mutable struct ssl_dane_st end

const SSL_DANE = ssl_dane_st

mutable struct x509_crl_method_st end

const X509_CRL_METHOD = x509_crl_method_st

mutable struct X509_pubkey_st end

const X509_PUBKEY = X509_pubkey_st

mutable struct x509_lookup_method_st end

const X509_LOOKUP_METHOD = x509_lookup_method_st

mutable struct x509_sig_info_st end

const X509_SIG_INFO = x509_sig_info_st

mutable struct pkcs8_priv_key_info_st end

const PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st

mutable struct v3_ext_ctx end

const X509V3_CTX = v3_ext_ctx

mutable struct ui_st end

const UI = ui_st

mutable struct ui_method_st end

const UI_METHOD = ui_method_st

mutable struct comp_ctx_st end

const COMP_CTX = comp_ctx_st

mutable struct comp_method_st end

const COMP_METHOD = comp_method_st

mutable struct X509_POLICY_NODE_st end

const X509_POLICY_NODE = X509_POLICY_NODE_st

mutable struct X509_POLICY_LEVEL_st end

const X509_POLICY_LEVEL = X509_POLICY_LEVEL_st

mutable struct X509_POLICY_TREE_st end

const X509_POLICY_TREE = X509_POLICY_TREE_st

mutable struct X509_POLICY_CACHE_st end

const X509_POLICY_CACHE = X509_POLICY_CACHE_st

mutable struct AUTHORITY_KEYID_st end

const AUTHORITY_KEYID = AUTHORITY_KEYID_st

mutable struct DIST_POINT_st end

const DIST_POINT = DIST_POINT_st

mutable struct ISSUING_DIST_POINT_st end

const ISSUING_DIST_POINT = ISSUING_DIST_POINT_st

mutable struct NAME_CONSTRAINTS_st end

const NAME_CONSTRAINTS = NAME_CONSTRAINTS_st

mutable struct crypto_ex_data_st
    ctx::Ptr{OSSL_LIB_CTX}
    sk::Ptr{stack_st_void}
    crypto_ex_data_st() = new()
end

const CRYPTO_EX_DATA = crypto_ex_data_st

mutable struct ocsp_response_st end

const OCSP_RESPONSE = ocsp_response_st

mutable struct ocsp_responder_id_st end

const OCSP_RESPID = ocsp_responder_id_st

mutable struct sct_ctx_st end

const SCT_CTX = sct_ctx_st

mutable struct ctlog_store_st end

const CTLOG_STORE = ctlog_store_st

mutable struct ct_policy_eval_ctx_st end

const CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st

mutable struct ossl_store_info_st end

const OSSL_STORE_INFO = ossl_store_info_st

mutable struct ossl_store_search_st end

const OSSL_STORE_SEARCH = ossl_store_search_st

mutable struct ossl_item_st
    id::Cuint
    ptr::Ptr{Cvoid}
    ossl_item_st() = new()
end

const OSSL_ITEM = ossl_item_st

mutable struct ossl_algorithm_st
    algorithm_names::Ptr{Cchar}
    property_definition::Ptr{Cchar}
    implementation::Ptr{OSSL_DISPATCH}
    algorithm_description::Ptr{Cchar}
    ossl_algorithm_st() = new()
end

const OSSL_ALGORITHM = ossl_algorithm_st

mutable struct ossl_param_st
    key::Ptr{Cchar}
    data_type::Cuint
    data::Ptr{Cvoid}
    data_size::Csize_t
    return_size::Csize_t
    ossl_param_st() = new()
end

const OSSL_PARAM = ossl_param_st

mutable struct ossl_param_bld_st end

const OSSL_PARAM_BLD = ossl_param_bld_st

mutable struct ossl_encoder_st end

const OSSL_ENCODER = ossl_encoder_st

mutable struct ossl_encoder_ctx_st end

const OSSL_ENCODER_CTX = ossl_encoder_ctx_st

mutable struct ossl_decoder_st end

const OSSL_DECODER = ossl_decoder_st

mutable struct ossl_decoder_ctx_st end

const OSSL_DECODER_CTX = ossl_decoder_ctx_st

mutable struct ossl_self_test_st end

const OSSL_SELF_TEST = ossl_self_test_st

function ERR_load_ASN1_strings()
    @ccall libwebsockets.ERR_load_ASN1_strings()::Cint
end

function ERR_load_ASYNC_strings()
    @ccall libwebsockets.ERR_load_ASYNC_strings()::Cint
end

function ERR_load_BIO_strings()
    @ccall libwebsockets.ERR_load_BIO_strings()::Cint
end

function ERR_load_BN_strings()
    @ccall libwebsockets.ERR_load_BN_strings()::Cint
end

function ERR_load_BUF_strings()
    @ccall libwebsockets.ERR_load_BUF_strings()::Cint
end

function ERR_load_CMS_strings()
    @ccall libwebsockets.ERR_load_CMS_strings()::Cint
end

function ERR_load_COMP_strings()
    @ccall libwebsockets.ERR_load_COMP_strings()::Cint
end

function ERR_load_CONF_strings()
    @ccall libwebsockets.ERR_load_CONF_strings()::Cint
end

function ERR_load_CRYPTO_strings()
    @ccall libwebsockets.ERR_load_CRYPTO_strings()::Cint
end

function ERR_load_CT_strings()
    @ccall libwebsockets.ERR_load_CT_strings()::Cint
end

function ERR_load_DH_strings()
    @ccall libwebsockets.ERR_load_DH_strings()::Cint
end

function ERR_load_DSA_strings()
    @ccall libwebsockets.ERR_load_DSA_strings()::Cint
end

function ERR_load_EC_strings()
    @ccall libwebsockets.ERR_load_EC_strings()::Cint
end

function ERR_load_ENGINE_strings()
    @ccall libwebsockets.ERR_load_ENGINE_strings()::Cint
end

function ERR_load_ERR_strings()
    @ccall libwebsockets.ERR_load_ERR_strings()::Cint
end

function ERR_load_EVP_strings()
    @ccall libwebsockets.ERR_load_EVP_strings()::Cint
end

function ERR_load_KDF_strings()
    @ccall libwebsockets.ERR_load_KDF_strings()::Cint
end

function ERR_load_OBJ_strings()
    @ccall libwebsockets.ERR_load_OBJ_strings()::Cint
end

function ERR_load_OCSP_strings()
    @ccall libwebsockets.ERR_load_OCSP_strings()::Cint
end

function ERR_load_PEM_strings()
    @ccall libwebsockets.ERR_load_PEM_strings()::Cint
end

function ERR_load_PKCS12_strings()
    @ccall libwebsockets.ERR_load_PKCS12_strings()::Cint
end

function ERR_load_PKCS7_strings()
    @ccall libwebsockets.ERR_load_PKCS7_strings()::Cint
end

function ERR_load_RAND_strings()
    @ccall libwebsockets.ERR_load_RAND_strings()::Cint
end

function ERR_load_RSA_strings()
    @ccall libwebsockets.ERR_load_RSA_strings()::Cint
end

function ERR_load_OSSL_STORE_strings()
    @ccall libwebsockets.ERR_load_OSSL_STORE_strings()::Cint
end

function ERR_load_TS_strings()
    @ccall libwebsockets.ERR_load_TS_strings()::Cint
end

function ERR_load_UI_strings()
    @ccall libwebsockets.ERR_load_UI_strings()::Cint
end

function ERR_load_X509_strings()
    @ccall libwebsockets.ERR_load_X509_strings()::Cint
end

function ERR_load_X509V3_strings()
    @ccall libwebsockets.ERR_load_X509V3_strings()::Cint
end

mutable struct ossl_core_handle_st end

const OSSL_CORE_HANDLE = ossl_core_handle_st

mutable struct openssl_core_ctx_st end

const OPENSSL_CORE_CTX = openssl_core_ctx_st

mutable struct ossl_core_bio_st end

const OSSL_CORE_BIO = ossl_core_bio_st

# typedef void ( * OSSL_thread_stop_handler_fn ) ( void * arg )
const OSSL_thread_stop_handler_fn = Ptr{Cvoid}

# typedef int ( OSSL_provider_init_fn ) ( const OSSL_CORE_HANDLE * handle , const OSSL_DISPATCH * in , const OSSL_DISPATCH * * out , void * * provctx )
const OSSL_provider_init_fn = Cvoid

# typedef int ( OSSL_CALLBACK ) ( const OSSL_PARAM params [ ] , void * arg )
const OSSL_CALLBACK = Cvoid

# typedef int ( OSSL_INOUT_CALLBACK ) ( const OSSL_PARAM in_params [ ] , OSSL_PARAM out_params [ ] , void * arg )
const OSSL_INOUT_CALLBACK = Cvoid

# typedef int ( OSSL_PASSPHRASE_CALLBACK ) ( char * pass , size_t pass_size , size_t * pass_len , const OSSL_PARAM params [ ] , void * arg )
const OSSL_PASSPHRASE_CALLBACK = Cvoid

mutable struct CRYPTO_dynlock
    dummy::Cint
    CRYPTO_dynlock() = new()
end

const CRYPTO_RWLOCK = Cvoid

function CRYPTO_THREAD_lock_new()
    @ccall libwebsockets.CRYPTO_THREAD_lock_new()::Ptr{CRYPTO_RWLOCK}
end

function CRYPTO_THREAD_read_lock(lock)
    @ccall libwebsockets.CRYPTO_THREAD_read_lock(lock::Ptr{CRYPTO_RWLOCK})::Cint
end

function CRYPTO_THREAD_write_lock(lock)
    @ccall libwebsockets.CRYPTO_THREAD_write_lock(lock::Ptr{CRYPTO_RWLOCK})::Cint
end

function CRYPTO_THREAD_unlock(lock)
    @ccall libwebsockets.CRYPTO_THREAD_unlock(lock::Ptr{CRYPTO_RWLOCK})::Cint
end

function CRYPTO_THREAD_lock_free(lock)
    @ccall libwebsockets.CRYPTO_THREAD_lock_free(lock::Ptr{CRYPTO_RWLOCK})::Cvoid
end

function CRYPTO_atomic_add(val, amount, ret, lock)
    @ccall libwebsockets.CRYPTO_atomic_add(val::Ptr{Cint}, amount::Cint, ret::Ptr{Cint}, lock::Ptr{CRYPTO_RWLOCK})::Cint
end

function CRYPTO_atomic_or(val, op, ret, lock)
    @ccall libwebsockets.CRYPTO_atomic_or(val::Ptr{UInt64}, op::UInt64, ret::Ptr{UInt64}, lock::Ptr{CRYPTO_RWLOCK})::Cint
end

function CRYPTO_atomic_load(val, ret, lock)
    @ccall libwebsockets.CRYPTO_atomic_load(val::Ptr{UInt64}, ret::Ptr{UInt64}, lock::Ptr{CRYPTO_RWLOCK})::Cint
end

function OPENSSL_buf2hexstr_ex(str, str_n, strlength, buf, buflen, sep)
    @ccall libwebsockets.OPENSSL_buf2hexstr_ex(str::Ptr{Cchar}, str_n::Csize_t, strlength::Ptr{Csize_t}, buf::Ptr{Cuchar}, buflen::Csize_t, sep::Cchar)::Cint
end

function OPENSSL_buf2hexstr(buf, buflen)
    @ccall libwebsockets.OPENSSL_buf2hexstr(buf::Ptr{Cuchar}, buflen::Clong)::Ptr{Cchar}
end

function OPENSSL_hexstr2buf_ex(buf, buf_n, buflen, str, sep)
    @ccall libwebsockets.OPENSSL_hexstr2buf_ex(buf::Ptr{Cuchar}, buf_n::Csize_t, buflen::Ptr{Csize_t}, str::Ptr{Cchar}, sep::Cchar)::Cint
end

function OPENSSL_hexstr2buf(str, buflen)
    @ccall libwebsockets.OPENSSL_hexstr2buf(str::Ptr{Cchar}, buflen::Ptr{Clong})::Ptr{Cuchar}
end

function OPENSSL_hexchar2int(c)
    @ccall libwebsockets.OPENSSL_hexchar2int(c::Cuchar)::Cint
end

function OPENSSL_strcasecmp(s1, s2)
    @ccall libwebsockets.OPENSSL_strcasecmp(s1::Ptr{Cchar}, s2::Ptr{Cchar})::Cint
end

function OPENSSL_strncasecmp(s1, s2, n)
    @ccall libwebsockets.OPENSSL_strncasecmp(s1::Ptr{Cchar}, s2::Ptr{Cchar}, n::Csize_t)::Cint
end

function OPENSSL_version_major()
    @ccall libwebsockets.OPENSSL_version_major()::Cuint
end

function OPENSSL_version_minor()
    @ccall libwebsockets.OPENSSL_version_minor()::Cuint
end

function OPENSSL_version_patch()
    @ccall libwebsockets.OPENSSL_version_patch()::Cuint
end

function OPENSSL_version_pre_release()
    @ccall libwebsockets.OPENSSL_version_pre_release()::Ptr{Cchar}
end

function OPENSSL_version_build_metadata()
    @ccall libwebsockets.OPENSSL_version_build_metadata()::Ptr{Cchar}
end

function OPENSSL_info(type)
    @ccall libwebsockets.OPENSSL_info(type::Cint)::Ptr{Cchar}
end

function OPENSSL_issetugid()
    @ccall libwebsockets.OPENSSL_issetugid()::Cint
end

function CRYPTO_free_ex_index(class_index, idx)
    @ccall libwebsockets.CRYPTO_free_ex_index(class_index::Cint, idx::Cint)::Cint
end

function CRYPTO_new_ex_data(class_index, obj, ad)
    @ccall libwebsockets.CRYPTO_new_ex_data(class_index::Cint, obj::Ptr{Cvoid}, ad::Ptr{CRYPTO_EX_DATA})::Cint
end

function CRYPTO_dup_ex_data(class_index, to, from)
    @ccall libwebsockets.CRYPTO_dup_ex_data(class_index::Cint, to::Ptr{CRYPTO_EX_DATA}, from::Ptr{CRYPTO_EX_DATA})::Cint
end

function CRYPTO_free_ex_data(class_index, obj, ad)
    @ccall libwebsockets.CRYPTO_free_ex_data(class_index::Cint, obj::Ptr{Cvoid}, ad::Ptr{CRYPTO_EX_DATA})::Cvoid
end

function CRYPTO_alloc_ex_data(class_index, obj, ad, idx)
    @ccall libwebsockets.CRYPTO_alloc_ex_data(class_index::Cint, obj::Ptr{Cvoid}, ad::Ptr{CRYPTO_EX_DATA}, idx::Cint)::Cint
end

function CRYPTO_set_ex_data(ad, idx, val)
    @ccall libwebsockets.CRYPTO_set_ex_data(ad::Ptr{CRYPTO_EX_DATA}, idx::Cint, val::Ptr{Cvoid})::Cint
end

function CRYPTO_get_ex_data(ad, idx)
    @ccall libwebsockets.CRYPTO_get_ex_data(ad::Ptr{CRYPTO_EX_DATA}, idx::Cint)::Ptr{Cvoid}
end

mutable struct crypto_threadid_st
    dummy::Cint
    crypto_threadid_st() = new()
end

const CRYPTO_THREADID = crypto_threadid_st

# typedef void * ( * CRYPTO_malloc_fn ) ( size_t num , const char * file , int line )
const CRYPTO_malloc_fn = Ptr{Cvoid}

# typedef void * ( * CRYPTO_realloc_fn ) ( void * addr , size_t num , const char * file , int line )
const CRYPTO_realloc_fn = Ptr{Cvoid}

# typedef void ( * CRYPTO_free_fn ) ( void * addr , const char * file , int line )
const CRYPTO_free_fn = Ptr{Cvoid}

function CRYPTO_set_mem_functions(malloc_fn, realloc_fn, free_fn)
    @ccall libwebsockets.CRYPTO_set_mem_functions(malloc_fn::CRYPTO_malloc_fn, realloc_fn::CRYPTO_realloc_fn, free_fn::CRYPTO_free_fn)::Cint
end

function CRYPTO_get_mem_functions(malloc_fn, realloc_fn, free_fn)
    @ccall libwebsockets.CRYPTO_get_mem_functions(malloc_fn::Ptr{CRYPTO_malloc_fn}, realloc_fn::Ptr{CRYPTO_realloc_fn}, free_fn::Ptr{CRYPTO_free_fn})::Cvoid
end

function CRYPTO_secure_malloc_init(sz, minsize)
    @ccall libwebsockets.CRYPTO_secure_malloc_init(sz::Csize_t, minsize::Csize_t)::Cint
end

function CRYPTO_secure_malloc_done()
    @ccall libwebsockets.CRYPTO_secure_malloc_done()::Cint
end

function CRYPTO_secure_allocated(ptr)
    @ccall libwebsockets.CRYPTO_secure_allocated(ptr::Ptr{Cvoid})::Cint
end

function CRYPTO_secure_malloc_initialized()
    @ccall libwebsockets.CRYPTO_secure_malloc_initialized()::Cint
end

function CRYPTO_secure_used()
    @ccall libwebsockets.CRYPTO_secure_used()::Csize_t
end

function OPENSSL_cleanse(ptr, len)
    @ccall libwebsockets.OPENSSL_cleanse(ptr::Ptr{Cvoid}, len::Csize_t)::Cvoid
end

function OPENSSL_isservice()
    @ccall libwebsockets.OPENSSL_isservice()::Cint
end

function OPENSSL_init()
    @ccall libwebsockets.OPENSSL_init()::Cvoid
end

function OPENSSL_fork_prepare()
    @ccall libwebsockets.OPENSSL_fork_prepare()::Cvoid
end

function OPENSSL_fork_parent()
    @ccall libwebsockets.OPENSSL_fork_parent()::Cvoid
end

function OPENSSL_fork_child()
    @ccall libwebsockets.OPENSSL_fork_child()::Cvoid
end

function OPENSSL_gmtime(timer, result)
    @ccall libwebsockets.OPENSSL_gmtime(timer::Ptr{time_t}, result::Ptr{Cvoid})::Ptr{Cvoid}
end

function OPENSSL_gmtime_adj(tm, offset_day, offset_sec)
    @ccall libwebsockets.OPENSSL_gmtime_adj(tm::Ptr{Cvoid}, offset_day::Cint, offset_sec::Clong)::Cint
end

function OPENSSL_gmtime_diff(pday, psec, from, to)
    @ccall libwebsockets.OPENSSL_gmtime_diff(pday::Ptr{Cint}, psec::Ptr{Cint}, from::Ptr{Cvoid}, to::Ptr{Cvoid})::Cint
end

function CRYPTO_memcmp(in_a, in_b, len)
    @ccall libwebsockets.CRYPTO_memcmp(in_a::Ptr{Cvoid}, in_b::Ptr{Cvoid}, len::Csize_t)::Cint
end

function OPENSSL_cleanup()
    @ccall libwebsockets.OPENSSL_cleanup()::Cvoid
end

function OPENSSL_atexit(handler)
    @ccall libwebsockets.OPENSSL_atexit(handler::Ptr{Cvoid})::Cint
end

function OPENSSL_thread_stop()
    @ccall libwebsockets.OPENSSL_thread_stop()::Cvoid
end

function OPENSSL_thread_stop_ex(ctx)
    @ccall libwebsockets.OPENSSL_thread_stop_ex(ctx::Ptr{OSSL_LIB_CTX})::Cvoid
end

function OPENSSL_INIT_new()
    @ccall libwebsockets.OPENSSL_INIT_new()::Ptr{OPENSSL_INIT_SETTINGS}
end

function OPENSSL_INIT_set_config_filename(settings, config_filename)
    @ccall libwebsockets.OPENSSL_INIT_set_config_filename(settings::Ptr{OPENSSL_INIT_SETTINGS}, config_filename::Ptr{Cchar})::Cint
end

function OPENSSL_INIT_set_config_file_flags(settings, flags)
    @ccall libwebsockets.OPENSSL_INIT_set_config_file_flags(settings::Ptr{OPENSSL_INIT_SETTINGS}, flags::Culong)::Cvoid
end

function OPENSSL_INIT_set_config_appname(settings, config_appname)
    @ccall libwebsockets.OPENSSL_INIT_set_config_appname(settings::Ptr{OPENSSL_INIT_SETTINGS}, config_appname::Ptr{Cchar})::Cint
end

function OPENSSL_INIT_free(settings)
    @ccall libwebsockets.OPENSSL_INIT_free(settings::Ptr{OPENSSL_INIT_SETTINGS})::Cvoid
end

const CRYPTO_ONCE = pthread_once_t

const CRYPTO_THREAD_LOCAL = pthread_key_t

const CRYPTO_THREAD_ID = pthread_t

function CRYPTO_THREAD_run_once(once, init)
    @ccall libwebsockets.CRYPTO_THREAD_run_once(once::Ptr{CRYPTO_ONCE}, init::Ptr{Cvoid})::Cint
end

function CRYPTO_THREAD_init_local(key, cleanup)
    @ccall libwebsockets.CRYPTO_THREAD_init_local(key::Ptr{CRYPTO_THREAD_LOCAL}, cleanup::Ptr{Cvoid})::Cint
end

function CRYPTO_THREAD_get_local(key)
    @ccall libwebsockets.CRYPTO_THREAD_get_local(key::Ptr{CRYPTO_THREAD_LOCAL})::Ptr{Cvoid}
end

function CRYPTO_THREAD_set_local(key, val)
    @ccall libwebsockets.CRYPTO_THREAD_set_local(key::Ptr{CRYPTO_THREAD_LOCAL}, val::Ptr{Cvoid})::Cint
end

function CRYPTO_THREAD_cleanup_local(key)
    @ccall libwebsockets.CRYPTO_THREAD_cleanup_local(key::Ptr{CRYPTO_THREAD_LOCAL})::Cint
end

function CRYPTO_THREAD_get_current_id()
    @ccall libwebsockets.CRYPTO_THREAD_get_current_id()::CRYPTO_THREAD_ID
end

function CRYPTO_THREAD_compare_id(a, b)
    @ccall libwebsockets.CRYPTO_THREAD_compare_id(a::CRYPTO_THREAD_ID, b::CRYPTO_THREAD_ID)::Cint
end

function OSSL_LIB_CTX_new()
    @ccall libwebsockets.OSSL_LIB_CTX_new()::Ptr{OSSL_LIB_CTX}
end

function OSSL_LIB_CTX_new_from_dispatch(handle, in)
    @ccall libwebsockets.OSSL_LIB_CTX_new_from_dispatch(handle::Ptr{OSSL_CORE_HANDLE}, in::Ptr{OSSL_DISPATCH})::Ptr{OSSL_LIB_CTX}
end

function OSSL_LIB_CTX_new_child(handle, in)
    @ccall libwebsockets.OSSL_LIB_CTX_new_child(handle::Ptr{OSSL_CORE_HANDLE}, in::Ptr{OSSL_DISPATCH})::Ptr{OSSL_LIB_CTX}
end

function OSSL_LIB_CTX_load_config(ctx, config_file)
    @ccall libwebsockets.OSSL_LIB_CTX_load_config(ctx::Ptr{OSSL_LIB_CTX}, config_file::Ptr{Cchar})::Cint
end

function OSSL_LIB_CTX_free(arg1)
    @ccall libwebsockets.OSSL_LIB_CTX_free(arg1::Ptr{OSSL_LIB_CTX})::Cvoid
end

function OSSL_LIB_CTX_get0_global_default()
    @ccall libwebsockets.OSSL_LIB_CTX_get0_global_default()::Ptr{OSSL_LIB_CTX}
end

function OSSL_LIB_CTX_set0_default(libctx)
    @ccall libwebsockets.OSSL_LIB_CTX_set0_default(libctx::Ptr{OSSL_LIB_CTX})::Ptr{OSSL_LIB_CTX}
end

function COMP_CTX_new(meth)
    @ccall libwebsockets.COMP_CTX_new(meth::Ptr{COMP_METHOD})::Ptr{COMP_CTX}
end

function COMP_CTX_get_method(ctx)
    @ccall libwebsockets.COMP_CTX_get_method(ctx::Ptr{COMP_CTX})::Ptr{COMP_METHOD}
end

function COMP_CTX_get_type(comp)
    @ccall libwebsockets.COMP_CTX_get_type(comp::Ptr{COMP_CTX})::Cint
end

function COMP_get_type(meth)
    @ccall libwebsockets.COMP_get_type(meth::Ptr{COMP_METHOD})::Cint
end

function COMP_get_name(meth)
    @ccall libwebsockets.COMP_get_name(meth::Ptr{COMP_METHOD})::Ptr{Cchar}
end

function COMP_CTX_free(ctx)
    @ccall libwebsockets.COMP_CTX_free(ctx::Ptr{COMP_CTX})::Cvoid
end

function COMP_compress_block(ctx, out, olen, in, ilen)
    @ccall libwebsockets.COMP_compress_block(ctx::Ptr{COMP_CTX}, out::Ptr{Cuchar}, olen::Cint, in::Ptr{Cuchar}, ilen::Cint)::Cint
end

function COMP_expand_block(ctx, out, olen, in, ilen)
    @ccall libwebsockets.COMP_expand_block(ctx::Ptr{COMP_CTX}, out::Ptr{Cuchar}, olen::Cint, in::Ptr{Cuchar}, ilen::Cint)::Cint
end

function COMP_zlib()
    @ccall libwebsockets.COMP_zlib()::Ptr{COMP_METHOD}
end

mutable struct bio_addrinfo_st end

const BIO_ADDRINFO = bio_addrinfo_st

function BIO_get_new_index()
    @ccall libwebsockets.BIO_get_new_index()::Cint
end

# typedef long ( * BIO_callback_fn ) ( BIO * b , int oper , const char * argp , int argi , long argl , long ret )
const BIO_callback_fn = Ptr{Cvoid}

function BIO_get_callback(b)
    @ccall libwebsockets.BIO_get_callback(b::Ptr{BIO})::BIO_callback_fn
end

function BIO_set_callback(b, callback)
    @ccall libwebsockets.BIO_set_callback(b::Ptr{BIO}, callback::BIO_callback_fn)::Cvoid
end

function BIO_debug_callback(bio, cmd, argp, argi, argl, ret)
    @ccall libwebsockets.BIO_debug_callback(bio::Ptr{BIO}, cmd::Cint, argp::Ptr{Cchar}, argi::Cint, argl::Clong, ret::Clong)::Clong
end

# typedef long ( * BIO_callback_fn_ex ) ( BIO * b , int oper , const char * argp , size_t len , int argi , long argl , int ret , size_t * processed )
const BIO_callback_fn_ex = Ptr{Cvoid}

function BIO_get_callback_ex(b)
    @ccall libwebsockets.BIO_get_callback_ex(b::Ptr{BIO})::BIO_callback_fn_ex
end

function BIO_set_callback_ex(b, callback)
    @ccall libwebsockets.BIO_set_callback_ex(b::Ptr{BIO}, callback::BIO_callback_fn_ex)::Cvoid
end

function BIO_debug_callback_ex(bio, oper, argp, len, argi, argl, ret, processed)
    @ccall libwebsockets.BIO_debug_callback_ex(bio::Ptr{BIO}, oper::Cint, argp::Ptr{Cchar}, len::Csize_t, argi::Cint, argl::Clong, ret::Cint, processed::Ptr{Csize_t})::Clong
end

function BIO_get_callback_arg(b)
    @ccall libwebsockets.BIO_get_callback_arg(b::Ptr{BIO})::Ptr{Cchar}
end

function BIO_set_callback_arg(b, arg)
    @ccall libwebsockets.BIO_set_callback_arg(b::Ptr{BIO}, arg::Ptr{Cchar})::Cvoid
end

mutable struct bio_method_st end

const BIO_METHOD = bio_method_st

function BIO_method_name(b)
    @ccall libwebsockets.BIO_method_name(b::Ptr{BIO})::Ptr{Cchar}
end

function BIO_method_type(b)
    @ccall libwebsockets.BIO_method_type(b::Ptr{BIO})::Cint
end

# typedef BIO_info_cb bio_info_cb
const bio_info_cb = BIO_info_cb

# typedef int asn1_ps_func ( BIO * b , unsigned char * * pbuf , int * plen , void * parg )
const asn1_ps_func = Cvoid

# typedef void ( * BIO_dgram_sctp_notification_handler_fn ) ( BIO * b , void * context , void * buf )
const BIO_dgram_sctp_notification_handler_fn = Ptr{Cvoid}

function BIO_ctrl_pending(b)
    @ccall libwebsockets.BIO_ctrl_pending(b::Ptr{BIO})::Csize_t
end

function BIO_ctrl_wpending(b)
    @ccall libwebsockets.BIO_ctrl_wpending(b::Ptr{BIO})::Csize_t
end

function BIO_ctrl_get_write_guarantee(b)
    @ccall libwebsockets.BIO_ctrl_get_write_guarantee(b::Ptr{BIO})::Csize_t
end

function BIO_ctrl_get_read_request(b)
    @ccall libwebsockets.BIO_ctrl_get_read_request(b::Ptr{BIO})::Csize_t
end

function BIO_ctrl_reset_read_request(b)
    @ccall libwebsockets.BIO_ctrl_reset_read_request(b::Ptr{BIO})::Cint
end

function BIO_number_read(bio)
    @ccall libwebsockets.BIO_number_read(bio::Ptr{BIO})::UInt64
end

function BIO_number_written(bio)
    @ccall libwebsockets.BIO_number_written(bio::Ptr{BIO})::UInt64
end

function BIO_asn1_set_prefix(b, prefix, prefix_free)
    @ccall libwebsockets.BIO_asn1_set_prefix(b::Ptr{BIO}, prefix::Ptr{asn1_ps_func}, prefix_free::Ptr{asn1_ps_func})::Cint
end

function BIO_asn1_get_prefix(b, pprefix, pprefix_free)
    @ccall libwebsockets.BIO_asn1_get_prefix(b::Ptr{BIO}, pprefix::Ptr{Ptr{asn1_ps_func}}, pprefix_free::Ptr{Ptr{asn1_ps_func}})::Cint
end

function BIO_asn1_set_suffix(b, suffix, suffix_free)
    @ccall libwebsockets.BIO_asn1_set_suffix(b::Ptr{BIO}, suffix::Ptr{asn1_ps_func}, suffix_free::Ptr{asn1_ps_func})::Cint
end

function BIO_asn1_get_suffix(b, psuffix, psuffix_free)
    @ccall libwebsockets.BIO_asn1_get_suffix(b::Ptr{BIO}, psuffix::Ptr{Ptr{asn1_ps_func}}, psuffix_free::Ptr{Ptr{asn1_ps_func}})::Cint
end

function BIO_s_file()
    @ccall libwebsockets.BIO_s_file()::Ptr{BIO_METHOD}
end

function BIO_new_file(filename, mode)
    @ccall libwebsockets.BIO_new_file(filename::Ptr{Cchar}, mode::Ptr{Cchar})::Ptr{BIO}
end

function BIO_new_from_core_bio(libctx, corebio)
    @ccall libwebsockets.BIO_new_from_core_bio(libctx::Ptr{OSSL_LIB_CTX}, corebio::Ptr{OSSL_CORE_BIO})::Ptr{BIO}
end

function BIO_new_fp(stream, close_flag)
    @ccall libwebsockets.BIO_new_fp(stream::Ptr{Libc.FILE}, close_flag::Cint)::Ptr{BIO}
end

function BIO_new_ex(libctx, method)
    @ccall libwebsockets.BIO_new_ex(libctx::Ptr{OSSL_LIB_CTX}, method::Ptr{BIO_METHOD})::Ptr{BIO}
end

function BIO_new(type)
    @ccall libwebsockets.BIO_new(type::Ptr{BIO_METHOD})::Ptr{BIO}
end

function BIO_free(a)
    @ccall libwebsockets.BIO_free(a::Ptr{BIO})::Cint
end

function BIO_set_data(a, ptr)
    @ccall libwebsockets.BIO_set_data(a::Ptr{BIO}, ptr::Ptr{Cvoid})::Cvoid
end

function BIO_get_data(a)
    @ccall libwebsockets.BIO_get_data(a::Ptr{BIO})::Ptr{Cvoid}
end

function BIO_set_init(a, init)
    @ccall libwebsockets.BIO_set_init(a::Ptr{BIO}, init::Cint)::Cvoid
end

function BIO_get_init(a)
    @ccall libwebsockets.BIO_get_init(a::Ptr{BIO})::Cint
end

function BIO_set_shutdown(a, shut)
    @ccall libwebsockets.BIO_set_shutdown(a::Ptr{BIO}, shut::Cint)::Cvoid
end

function BIO_get_shutdown(a)
    @ccall libwebsockets.BIO_get_shutdown(a::Ptr{BIO})::Cint
end

function BIO_vfree(a)
    @ccall libwebsockets.BIO_vfree(a::Ptr{BIO})::Cvoid
end

function BIO_up_ref(a)
    @ccall libwebsockets.BIO_up_ref(a::Ptr{BIO})::Cint
end

function BIO_read(b, data, dlen)
    @ccall libwebsockets.BIO_read(b::Ptr{BIO}, data::Ptr{Cvoid}, dlen::Cint)::Cint
end

function BIO_read_ex(b, data, dlen, readbytes)
    @ccall libwebsockets.BIO_read_ex(b::Ptr{BIO}, data::Ptr{Cvoid}, dlen::Csize_t, readbytes::Ptr{Csize_t})::Cint
end

function BIO_gets(bp, buf, size)
    @ccall libwebsockets.BIO_gets(bp::Ptr{BIO}, buf::Ptr{Cchar}, size::Cint)::Cint
end

function BIO_get_line(bio, buf, size)
    @ccall libwebsockets.BIO_get_line(bio::Ptr{BIO}, buf::Ptr{Cchar}, size::Cint)::Cint
end

function BIO_write(b, data, dlen)
    @ccall libwebsockets.BIO_write(b::Ptr{BIO}, data::Ptr{Cvoid}, dlen::Cint)::Cint
end

function BIO_write_ex(b, data, dlen, written)
    @ccall libwebsockets.BIO_write_ex(b::Ptr{BIO}, data::Ptr{Cvoid}, dlen::Csize_t, written::Ptr{Csize_t})::Cint
end

function BIO_puts(bp, buf)
    @ccall libwebsockets.BIO_puts(bp::Ptr{BIO}, buf::Ptr{Cchar})::Cint
end

function BIO_indent(b, indent, max)
    @ccall libwebsockets.BIO_indent(b::Ptr{BIO}, indent::Cint, max::Cint)::Cint
end

function BIO_push(b, append)
    @ccall libwebsockets.BIO_push(b::Ptr{BIO}, append::Ptr{BIO})::Ptr{BIO}
end

function BIO_pop(b)
    @ccall libwebsockets.BIO_pop(b::Ptr{BIO})::Ptr{BIO}
end

function BIO_free_all(a)
    @ccall libwebsockets.BIO_free_all(a::Ptr{BIO})::Cvoid
end

function BIO_find_type(b, bio_type)
    @ccall libwebsockets.BIO_find_type(b::Ptr{BIO}, bio_type::Cint)::Ptr{BIO}
end

function BIO_next(b)
    @ccall libwebsockets.BIO_next(b::Ptr{BIO})::Ptr{BIO}
end

function BIO_set_next(b, next)
    @ccall libwebsockets.BIO_set_next(b::Ptr{BIO}, next::Ptr{BIO})::Cvoid
end

function BIO_get_retry_BIO(bio, reason)
    @ccall libwebsockets.BIO_get_retry_BIO(bio::Ptr{BIO}, reason::Ptr{Cint})::Ptr{BIO}
end

function BIO_get_retry_reason(bio)
    @ccall libwebsockets.BIO_get_retry_reason(bio::Ptr{BIO})::Cint
end

function BIO_set_retry_reason(bio, reason)
    @ccall libwebsockets.BIO_set_retry_reason(bio::Ptr{BIO}, reason::Cint)::Cvoid
end

function BIO_dup_chain(in)
    @ccall libwebsockets.BIO_dup_chain(in::Ptr{BIO})::Ptr{BIO}
end

function BIO_nread0(bio, buf)
    @ccall libwebsockets.BIO_nread0(bio::Ptr{BIO}, buf::Ptr{Ptr{Cchar}})::Cint
end

function BIO_nread(bio, buf, num)
    @ccall libwebsockets.BIO_nread(bio::Ptr{BIO}, buf::Ptr{Ptr{Cchar}}, num::Cint)::Cint
end

function BIO_nwrite0(bio, buf)
    @ccall libwebsockets.BIO_nwrite0(bio::Ptr{BIO}, buf::Ptr{Ptr{Cchar}})::Cint
end

function BIO_nwrite(bio, buf, num)
    @ccall libwebsockets.BIO_nwrite(bio::Ptr{BIO}, buf::Ptr{Ptr{Cchar}}, num::Cint)::Cint
end

function BIO_s_mem()
    @ccall libwebsockets.BIO_s_mem()::Ptr{BIO_METHOD}
end

function BIO_s_secmem()
    @ccall libwebsockets.BIO_s_secmem()::Ptr{BIO_METHOD}
end

function BIO_new_mem_buf(buf, len)
    @ccall libwebsockets.BIO_new_mem_buf(buf::Ptr{Cvoid}, len::Cint)::Ptr{BIO}
end

function BIO_s_socket()
    @ccall libwebsockets.BIO_s_socket()::Ptr{BIO_METHOD}
end

function BIO_s_connect()
    @ccall libwebsockets.BIO_s_connect()::Ptr{BIO_METHOD}
end

function BIO_s_accept()
    @ccall libwebsockets.BIO_s_accept()::Ptr{BIO_METHOD}
end

function BIO_s_fd()
    @ccall libwebsockets.BIO_s_fd()::Ptr{BIO_METHOD}
end

function BIO_s_log()
    @ccall libwebsockets.BIO_s_log()::Ptr{BIO_METHOD}
end

function BIO_s_bio()
    @ccall libwebsockets.BIO_s_bio()::Ptr{BIO_METHOD}
end

function BIO_s_null()
    @ccall libwebsockets.BIO_s_null()::Ptr{BIO_METHOD}
end

function BIO_f_null()
    @ccall libwebsockets.BIO_f_null()::Ptr{BIO_METHOD}
end

function BIO_f_buffer()
    @ccall libwebsockets.BIO_f_buffer()::Ptr{BIO_METHOD}
end

function BIO_f_readbuffer()
    @ccall libwebsockets.BIO_f_readbuffer()::Ptr{BIO_METHOD}
end

function BIO_f_linebuffer()
    @ccall libwebsockets.BIO_f_linebuffer()::Ptr{BIO_METHOD}
end

function BIO_f_nbio_test()
    @ccall libwebsockets.BIO_f_nbio_test()::Ptr{BIO_METHOD}
end

function BIO_f_prefix()
    @ccall libwebsockets.BIO_f_prefix()::Ptr{BIO_METHOD}
end

function BIO_s_core()
    @ccall libwebsockets.BIO_s_core()::Ptr{BIO_METHOD}
end

function BIO_s_datagram()
    @ccall libwebsockets.BIO_s_datagram()::Ptr{BIO_METHOD}
end

function BIO_dgram_non_fatal_error(error)
    @ccall libwebsockets.BIO_dgram_non_fatal_error(error::Cint)::Cint
end

function BIO_new_dgram(fd, close_flag)
    @ccall libwebsockets.BIO_new_dgram(fd::Cint, close_flag::Cint)::Ptr{BIO}
end

function BIO_sock_should_retry(i)
    @ccall libwebsockets.BIO_sock_should_retry(i::Cint)::Cint
end

function BIO_sock_non_fatal_error(error)
    @ccall libwebsockets.BIO_sock_non_fatal_error(error::Cint)::Cint
end

function BIO_socket_wait(fd, for_read, max_time)
    @ccall libwebsockets.BIO_socket_wait(fd::Cint, for_read::Cint, max_time::time_t)::Cint
end

function BIO_wait(bio, max_time, nap_milliseconds)
    @ccall libwebsockets.BIO_wait(bio::Ptr{BIO}, max_time::time_t, nap_milliseconds::Cuint)::Cint
end

function BIO_do_connect_retry(bio, timeout, nap_milliseconds)
    @ccall libwebsockets.BIO_do_connect_retry(bio::Ptr{BIO}, timeout::Cint, nap_milliseconds::Cint)::Cint
end

function BIO_fd_should_retry(i)
    @ccall libwebsockets.BIO_fd_should_retry(i::Cint)::Cint
end

function BIO_fd_non_fatal_error(error)
    @ccall libwebsockets.BIO_fd_non_fatal_error(error::Cint)::Cint
end

function BIO_dump_cb(cb, u, s, len)
    @ccall libwebsockets.BIO_dump_cb(cb::Ptr{Cvoid}, u::Ptr{Cvoid}, s::Ptr{Cvoid}, len::Cint)::Cint
end

function BIO_dump_indent_cb(cb, u, s, len, indent)
    @ccall libwebsockets.BIO_dump_indent_cb(cb::Ptr{Cvoid}, u::Ptr{Cvoid}, s::Ptr{Cvoid}, len::Cint, indent::Cint)::Cint
end

function BIO_dump(b, bytes, len)
    @ccall libwebsockets.BIO_dump(b::Ptr{BIO}, bytes::Ptr{Cvoid}, len::Cint)::Cint
end

function BIO_dump_indent(b, bytes, len, indent)
    @ccall libwebsockets.BIO_dump_indent(b::Ptr{BIO}, bytes::Ptr{Cvoid}, len::Cint, indent::Cint)::Cint
end

function BIO_dump_fp(fp, s, len)
    @ccall libwebsockets.BIO_dump_fp(fp::Ptr{Libc.FILE}, s::Ptr{Cvoid}, len::Cint)::Cint
end

function BIO_dump_indent_fp(fp, s, len, indent)
    @ccall libwebsockets.BIO_dump_indent_fp(fp::Ptr{Libc.FILE}, s::Ptr{Cvoid}, len::Cint, indent::Cint)::Cint
end

function BIO_hex_string(out, indent, width, data, datalen)
    @ccall libwebsockets.BIO_hex_string(out::Ptr{BIO}, indent::Cint, width::Cint, data::Ptr{Cvoid}, datalen::Cint)::Cint
end

function BIO_ADDR_new()
    @ccall libwebsockets.BIO_ADDR_new()::Ptr{BIO_ADDR}
end

function BIO_ADDR_rawmake(ap, family, where, wherelen, port)
    @ccall libwebsockets.BIO_ADDR_rawmake(ap::Ptr{BIO_ADDR}, family::Cint, where::Ptr{Cvoid}, wherelen::Csize_t, port::Cushort)::Cint
end

function BIO_ADDR_free(arg1)
    @ccall libwebsockets.BIO_ADDR_free(arg1::Ptr{BIO_ADDR})::Cvoid
end

function BIO_ADDR_clear(ap)
    @ccall libwebsockets.BIO_ADDR_clear(ap::Ptr{BIO_ADDR})::Cvoid
end

function BIO_ADDR_family(ap)
    @ccall libwebsockets.BIO_ADDR_family(ap::Ptr{BIO_ADDR})::Cint
end

function BIO_ADDR_rawaddress(ap, p, l)
    @ccall libwebsockets.BIO_ADDR_rawaddress(ap::Ptr{BIO_ADDR}, p::Ptr{Cvoid}, l::Ptr{Csize_t})::Cint
end

function BIO_ADDR_rawport(ap)
    @ccall libwebsockets.BIO_ADDR_rawport(ap::Ptr{BIO_ADDR})::Cushort
end

function BIO_ADDR_hostname_string(ap, numeric)
    @ccall libwebsockets.BIO_ADDR_hostname_string(ap::Ptr{BIO_ADDR}, numeric::Cint)::Ptr{Cchar}
end

function BIO_ADDR_service_string(ap, numeric)
    @ccall libwebsockets.BIO_ADDR_service_string(ap::Ptr{BIO_ADDR}, numeric::Cint)::Ptr{Cchar}
end

function BIO_ADDR_path_string(ap)
    @ccall libwebsockets.BIO_ADDR_path_string(ap::Ptr{BIO_ADDR})::Ptr{Cchar}
end

function BIO_ADDRINFO_next(bai)
    @ccall libwebsockets.BIO_ADDRINFO_next(bai::Ptr{BIO_ADDRINFO})::Ptr{BIO_ADDRINFO}
end

function BIO_ADDRINFO_family(bai)
    @ccall libwebsockets.BIO_ADDRINFO_family(bai::Ptr{BIO_ADDRINFO})::Cint
end

function BIO_ADDRINFO_socktype(bai)
    @ccall libwebsockets.BIO_ADDRINFO_socktype(bai::Ptr{BIO_ADDRINFO})::Cint
end

function BIO_ADDRINFO_protocol(bai)
    @ccall libwebsockets.BIO_ADDRINFO_protocol(bai::Ptr{BIO_ADDRINFO})::Cint
end

function BIO_ADDRINFO_address(bai)
    @ccall libwebsockets.BIO_ADDRINFO_address(bai::Ptr{BIO_ADDRINFO})::Ptr{BIO_ADDR}
end

function BIO_ADDRINFO_free(bai)
    @ccall libwebsockets.BIO_ADDRINFO_free(bai::Ptr{BIO_ADDRINFO})::Cvoid
end

const BIO_hostserv_priorities = UInt32
const BIO_PARSE_PRIO_HOST = 0 % UInt32
const BIO_PARSE_PRIO_SERV = 1 % UInt32

function BIO_parse_hostserv(hostserv, host, service, hostserv_prio)
    @ccall libwebsockets.BIO_parse_hostserv(hostserv::Ptr{Cchar}, host::Ptr{Ptr{Cchar}}, service::Ptr{Ptr{Cchar}}, hostserv_prio::BIO_hostserv_priorities)::Cint
end

const BIO_lookup_type = UInt32
const BIO_LOOKUP_CLIENT = 0 % UInt32
const BIO_LOOKUP_SERVER = 1 % UInt32

function BIO_lookup(host, service, lookup_type, family, socktype, res)
    @ccall libwebsockets.BIO_lookup(host::Ptr{Cchar}, service::Ptr{Cchar}, lookup_type::BIO_lookup_type, family::Cint, socktype::Cint, res::Ptr{Ptr{BIO_ADDRINFO}})::Cint
end

function BIO_lookup_ex(host, service, lookup_type, family, socktype, protocol, res)
    @ccall libwebsockets.BIO_lookup_ex(host::Ptr{Cchar}, service::Ptr{Cchar}, lookup_type::Cint, family::Cint, socktype::Cint, protocol::Cint, res::Ptr{Ptr{BIO_ADDRINFO}})::Cint
end

function BIO_sock_error(sock)
    @ccall libwebsockets.BIO_sock_error(sock::Cint)::Cint
end

function BIO_socket_ioctl(fd, type, arg)
    @ccall libwebsockets.BIO_socket_ioctl(fd::Cint, type::Clong, arg::Ptr{Cvoid})::Cint
end

function BIO_socket_nbio(fd, mode)
    @ccall libwebsockets.BIO_socket_nbio(fd::Cint, mode::Cint)::Cint
end

function BIO_sock_init()
    @ccall libwebsockets.BIO_sock_init()::Cint
end

function BIO_set_tcp_ndelay(sock, turn_on)
    @ccall libwebsockets.BIO_set_tcp_ndelay(sock::Cint, turn_on::Cint)::Cint
end

function BIO_gethostbyname(name)
    @ccall libwebsockets.BIO_gethostbyname(name::Ptr{Cchar})::Ptr{Cvoid}
end

function BIO_get_port(str, port_ptr)
    @ccall libwebsockets.BIO_get_port(str::Ptr{Cchar}, port_ptr::Ptr{Cushort})::Cint
end

function BIO_get_host_ip(str, ip)
    @ccall libwebsockets.BIO_get_host_ip(str::Ptr{Cchar}, ip::Ptr{Cuchar})::Cint
end

function BIO_get_accept_socket(host_port, mode)
    @ccall libwebsockets.BIO_get_accept_socket(host_port::Ptr{Cchar}, mode::Cint)::Cint
end

function BIO_accept(sock, ip_port)
    @ccall libwebsockets.BIO_accept(sock::Cint, ip_port::Ptr{Ptr{Cchar}})::Cint
end

struct BIO_sock_info_u
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{BIO_sock_info_u}, f::Symbol)
    f === :addr && return Ptr{Ptr{BIO_ADDR}}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::BIO_sock_info_u, f::Symbol)
    r = Ref{BIO_sock_info_u}(x)
    ptr = Base.unsafe_convert(Ptr{BIO_sock_info_u}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{BIO_sock_info_u}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const BIO_sock_info_type = UInt32
const BIO_SOCK_INFO_ADDRESS = 0 % UInt32

function BIO_sock_info(sock, type, info)
    @ccall libwebsockets.BIO_sock_info(sock::Cint, type::BIO_sock_info_type, info::Ptr{BIO_sock_info_u})::Cint
end

function BIO_socket(domain, socktype, protocol, options)
    @ccall libwebsockets.BIO_socket(domain::Cint, socktype::Cint, protocol::Cint, options::Cint)::Cint
end

function BIO_connect(sock, addr, options)
    @ccall libwebsockets.BIO_connect(sock::Cint, addr::Ptr{BIO_ADDR}, options::Cint)::Cint
end

function BIO_bind(sock, addr, options)
    @ccall libwebsockets.BIO_bind(sock::Cint, addr::Ptr{BIO_ADDR}, options::Cint)::Cint
end

function BIO_listen(sock, addr, options)
    @ccall libwebsockets.BIO_listen(sock::Cint, addr::Ptr{BIO_ADDR}, options::Cint)::Cint
end

function BIO_accept_ex(accept_sock, addr, options)
    @ccall libwebsockets.BIO_accept_ex(accept_sock::Cint, addr::Ptr{BIO_ADDR}, options::Cint)::Cint
end

function BIO_closesocket(sock)
    @ccall libwebsockets.BIO_closesocket(sock::Cint)::Cint
end

function BIO_new_socket(sock, close_flag)
    @ccall libwebsockets.BIO_new_socket(sock::Cint, close_flag::Cint)::Ptr{BIO}
end

function BIO_new_connect(host_port)
    @ccall libwebsockets.BIO_new_connect(host_port::Ptr{Cchar})::Ptr{BIO}
end

function BIO_new_accept(host_port)
    @ccall libwebsockets.BIO_new_accept(host_port::Ptr{Cchar})::Ptr{BIO}
end

function BIO_new_fd(fd, close_flag)
    @ccall libwebsockets.BIO_new_fd(fd::Cint, close_flag::Cint)::Ptr{BIO}
end

function BIO_new_bio_pair(bio1, writebuf1, bio2, writebuf2)
    @ccall libwebsockets.BIO_new_bio_pair(bio1::Ptr{Ptr{BIO}}, writebuf1::Csize_t, bio2::Ptr{Ptr{BIO}}, writebuf2::Csize_t)::Cint
end

function BIO_copy_next_retry(b)
    @ccall libwebsockets.BIO_copy_next_retry(b::Ptr{BIO})::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function BIO_printf(bio, format, va_list...)
        :(@ccall(libwebsockets.BIO_printf(bio::Ptr{BIO}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function BIO_snprintf(buf, n, format, va_list...)
        :(@ccall(libwebsockets.BIO_snprintf(buf::Ptr{Cchar}, n::Csize_t, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

function BIO_meth_new(type, name)
    @ccall libwebsockets.BIO_meth_new(type::Cint, name::Ptr{Cchar})::Ptr{BIO_METHOD}
end

function BIO_meth_free(biom)
    @ccall libwebsockets.BIO_meth_free(biom::Ptr{BIO_METHOD})::Cvoid
end

function BIO_meth_get_write(biom)
    @ccall libwebsockets.BIO_meth_get_write(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_get_write_ex(biom)
    @ccall libwebsockets.BIO_meth_get_write_ex(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_write(biom, write)
    @ccall libwebsockets.BIO_meth_set_write(biom::Ptr{BIO_METHOD}, write::Ptr{Cvoid})::Cint
end

function BIO_meth_set_write_ex(biom, bwrite)
    @ccall libwebsockets.BIO_meth_set_write_ex(biom::Ptr{BIO_METHOD}, bwrite::Ptr{Cvoid})::Cint
end

function BIO_meth_get_read(biom)
    @ccall libwebsockets.BIO_meth_get_read(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_get_read_ex(biom)
    @ccall libwebsockets.BIO_meth_get_read_ex(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_read(biom, read)
    @ccall libwebsockets.BIO_meth_set_read(biom::Ptr{BIO_METHOD}, read::Ptr{Cvoid})::Cint
end

function BIO_meth_set_read_ex(biom, bread)
    @ccall libwebsockets.BIO_meth_set_read_ex(biom::Ptr{BIO_METHOD}, bread::Ptr{Cvoid})::Cint
end

function BIO_meth_get_puts(biom)
    @ccall libwebsockets.BIO_meth_get_puts(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_puts(biom, puts)
    @ccall libwebsockets.BIO_meth_set_puts(biom::Ptr{BIO_METHOD}, puts::Ptr{Cvoid})::Cint
end

function BIO_meth_get_gets(biom)
    @ccall libwebsockets.BIO_meth_get_gets(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_gets(biom, ossl_gets)
    @ccall libwebsockets.BIO_meth_set_gets(biom::Ptr{BIO_METHOD}, ossl_gets::Ptr{Cvoid})::Cint
end

function BIO_meth_get_ctrl(biom)
    @ccall libwebsockets.BIO_meth_get_ctrl(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_ctrl(biom, ctrl)
    @ccall libwebsockets.BIO_meth_set_ctrl(biom::Ptr{BIO_METHOD}, ctrl::Ptr{Cvoid})::Cint
end

function BIO_meth_get_create(bion)
    @ccall libwebsockets.BIO_meth_get_create(bion::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_create(biom, create)
    @ccall libwebsockets.BIO_meth_set_create(biom::Ptr{BIO_METHOD}, create::Ptr{Cvoid})::Cint
end

function BIO_meth_get_destroy(biom)
    @ccall libwebsockets.BIO_meth_get_destroy(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_destroy(biom, destroy)
    @ccall libwebsockets.BIO_meth_set_destroy(biom::Ptr{BIO_METHOD}, destroy::Ptr{Cvoid})::Cint
end

function BIO_meth_get_callback_ctrl(biom)
    @ccall libwebsockets.BIO_meth_get_callback_ctrl(biom::Ptr{BIO_METHOD})::Ptr{Cvoid}
end

function BIO_meth_set_callback_ctrl(biom, callback_ctrl)
    @ccall libwebsockets.BIO_meth_set_callback_ctrl(biom::Ptr{BIO_METHOD}, callback_ctrl::Ptr{Cvoid})::Cint
end

function BUF_MEM_new()
    @ccall libwebsockets.BUF_MEM_new()::Ptr{BUF_MEM}
end

function BUF_MEM_new_ex(flags)
    @ccall libwebsockets.BUF_MEM_new_ex(flags::Culong)::Ptr{BUF_MEM}
end

function BUF_MEM_free(a)
    @ccall libwebsockets.BUF_MEM_free(a::Ptr{BUF_MEM})::Cvoid
end

function BUF_MEM_grow(str, len)
    @ccall libwebsockets.BUF_MEM_grow(str::Ptr{BUF_MEM}, len::Csize_t)::Csize_t
end

function BUF_MEM_grow_clean(str, len)
    @ccall libwebsockets.BUF_MEM_grow_clean(str::Ptr{BUF_MEM}, len::Csize_t)::Csize_t
end

function BUF_reverse(out, in, siz)
    @ccall libwebsockets.BUF_reverse(out::Ptr{Cuchar}, in::Ptr{Cuchar}, siz::Csize_t)::Cvoid
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_gettable_params_fn = Cvoid

function OSSL_FUNC_core_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_core_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_get_params_fn = Cvoid

function OSSL_FUNC_core_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_core_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_thread_start_fn = Cvoid

function OSSL_FUNC_core_thread_start(opf)
    @ccall libwebsockets.OSSL_FUNC_core_thread_start(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_thread_start_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_get_libctx_fn = Cvoid

function OSSL_FUNC_core_get_libctx(opf)
    @ccall libwebsockets.OSSL_FUNC_core_get_libctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_get_libctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_new_error_fn = Cvoid

function OSSL_FUNC_core_new_error(opf)
    @ccall libwebsockets.OSSL_FUNC_core_new_error(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_new_error_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_set_error_debug_fn = Cvoid

function OSSL_FUNC_core_set_error_debug(opf)
    @ccall libwebsockets.OSSL_FUNC_core_set_error_debug(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_set_error_debug_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_vset_error_fn = Cvoid

function OSSL_FUNC_core_vset_error(opf)
    @ccall libwebsockets.OSSL_FUNC_core_vset_error(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_vset_error_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_set_error_mark_fn = Cvoid

function OSSL_FUNC_core_set_error_mark(opf)
    @ccall libwebsockets.OSSL_FUNC_core_set_error_mark(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_set_error_mark_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_clear_last_error_mark_fn = Cvoid

function OSSL_FUNC_core_clear_last_error_mark(opf)
    @ccall libwebsockets.OSSL_FUNC_core_clear_last_error_mark(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_clear_last_error_mark_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_pop_error_to_mark_fn = Cvoid

function OSSL_FUNC_core_pop_error_to_mark(opf)
    @ccall libwebsockets.OSSL_FUNC_core_pop_error_to_mark(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_pop_error_to_mark_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_obj_add_sigid_fn = Cvoid

function OSSL_FUNC_core_obj_add_sigid(opf)
    @ccall libwebsockets.OSSL_FUNC_core_obj_add_sigid(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_obj_add_sigid_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_core_obj_create_fn = Cvoid

function OSSL_FUNC_core_obj_create(opf)
    @ccall libwebsockets.OSSL_FUNC_core_obj_create(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_core_obj_create_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_malloc_fn = Cvoid

function OSSL_FUNC_CRYPTO_malloc(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_malloc(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_malloc_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_zalloc_fn = Cvoid

function OSSL_FUNC_CRYPTO_zalloc(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_zalloc(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_zalloc_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_free_fn = Cvoid

function OSSL_FUNC_CRYPTO_free(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_clear_free_fn = Cvoid

function OSSL_FUNC_CRYPTO_clear_free(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_clear_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_clear_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_realloc_fn = Cvoid

function OSSL_FUNC_CRYPTO_realloc(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_realloc(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_realloc_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_clear_realloc_fn = Cvoid

function OSSL_FUNC_CRYPTO_clear_realloc(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_clear_realloc(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_clear_realloc_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_secure_malloc_fn = Cvoid

function OSSL_FUNC_CRYPTO_secure_malloc(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_secure_malloc(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_secure_malloc_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_secure_zalloc_fn = Cvoid

function OSSL_FUNC_CRYPTO_secure_zalloc(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_secure_zalloc(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_secure_zalloc_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_secure_free_fn = Cvoid

function OSSL_FUNC_CRYPTO_secure_free(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_secure_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_secure_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_secure_clear_free_fn = Cvoid

function OSSL_FUNC_CRYPTO_secure_clear_free(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_secure_clear_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_secure_clear_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_CRYPTO_secure_allocated_fn = Cvoid

function OSSL_FUNC_CRYPTO_secure_allocated(opf)
    @ccall libwebsockets.OSSL_FUNC_CRYPTO_secure_allocated(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_CRYPTO_secure_allocated_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_OPENSSL_cleanse_fn = Cvoid

function OSSL_FUNC_OPENSSL_cleanse(opf)
    @ccall libwebsockets.OSSL_FUNC_OPENSSL_cleanse(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_OPENSSL_cleanse_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_new_file_fn = Cvoid

function OSSL_FUNC_BIO_new_file(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_new_file(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_new_file_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_new_membuf_fn = Cvoid

function OSSL_FUNC_BIO_new_membuf(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_new_membuf(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_new_membuf_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_read_ex_fn = Cvoid

function OSSL_FUNC_BIO_read_ex(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_read_ex(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_read_ex_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_write_ex_fn = Cvoid

function OSSL_FUNC_BIO_write_ex(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_write_ex(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_write_ex_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_gets_fn = Cvoid

function OSSL_FUNC_BIO_gets(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_gets(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_gets_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_puts_fn = Cvoid

function OSSL_FUNC_BIO_puts(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_puts(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_puts_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_up_ref_fn = Cvoid

function OSSL_FUNC_BIO_up_ref(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_up_ref(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_up_ref_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_free_fn = Cvoid

function OSSL_FUNC_BIO_free(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_vprintf_fn = Cvoid

function OSSL_FUNC_BIO_vprintf(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_vprintf(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_vprintf_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_vsnprintf_fn = Cvoid

function OSSL_FUNC_BIO_vsnprintf(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_vsnprintf(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_vsnprintf_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_BIO_ctrl_fn = Cvoid

function OSSL_FUNC_BIO_ctrl(opf)
    @ccall libwebsockets.OSSL_FUNC_BIO_ctrl(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_BIO_ctrl_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_self_test_cb_fn = Cvoid

function OSSL_FUNC_self_test_cb(opf)
    @ccall libwebsockets.OSSL_FUNC_self_test_cb(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_self_test_cb_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_get_entropy_fn = Cvoid

function OSSL_FUNC_get_entropy(opf)
    @ccall libwebsockets.OSSL_FUNC_get_entropy(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_get_entropy_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cleanup_entropy_fn = Cvoid

function OSSL_FUNC_cleanup_entropy(opf)
    @ccall libwebsockets.OSSL_FUNC_cleanup_entropy(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cleanup_entropy_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_get_nonce_fn = Cvoid

function OSSL_FUNC_get_nonce(opf)
    @ccall libwebsockets.OSSL_FUNC_get_nonce(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_get_nonce_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cleanup_nonce_fn = Cvoid

function OSSL_FUNC_cleanup_nonce(opf)
    @ccall libwebsockets.OSSL_FUNC_cleanup_nonce(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cleanup_nonce_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_register_child_cb_fn = Cvoid

function OSSL_FUNC_provider_register_child_cb(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_register_child_cb(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_register_child_cb_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_deregister_child_cb_fn = Cvoid

function OSSL_FUNC_provider_deregister_child_cb(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_deregister_child_cb(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_deregister_child_cb_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_name_fn = Cvoid

function OSSL_FUNC_provider_name(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_name(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_name_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_get0_provider_ctx_fn = Cvoid

function OSSL_FUNC_provider_get0_provider_ctx(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_get0_provider_ctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_get0_provider_ctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_get0_dispatch_fn = Cvoid

function OSSL_FUNC_provider_get0_dispatch(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_get0_dispatch(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_get0_dispatch_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_up_ref_fn = Cvoid

function OSSL_FUNC_provider_up_ref(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_up_ref(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_up_ref_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_free_fn = Cvoid

function OSSL_FUNC_provider_free(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_teardown_fn = Cvoid

function OSSL_FUNC_provider_teardown(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_teardown(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_teardown_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_gettable_params_fn = Cvoid

function OSSL_FUNC_provider_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_get_params_fn = Cvoid

function OSSL_FUNC_provider_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_query_operation_fn = Cvoid

function OSSL_FUNC_provider_query_operation(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_query_operation(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_query_operation_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_unquery_operation_fn = Cvoid

function OSSL_FUNC_provider_unquery_operation(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_unquery_operation(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_unquery_operation_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_get_reason_strings_fn = Cvoid

function OSSL_FUNC_provider_get_reason_strings(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_get_reason_strings(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_get_reason_strings_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_get_capabilities_fn = Cvoid

function OSSL_FUNC_provider_get_capabilities(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_get_capabilities(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_get_capabilities_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_provider_self_test_fn = Cvoid

function OSSL_FUNC_provider_self_test(opf)
    @ccall libwebsockets.OSSL_FUNC_provider_self_test(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_provider_self_test_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_newctx_fn = Cvoid

function OSSL_FUNC_digest_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_init_fn = Cvoid

function OSSL_FUNC_digest_init(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_update_fn = Cvoid

function OSSL_FUNC_digest_update(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_update(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_update_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_final_fn = Cvoid

function OSSL_FUNC_digest_final(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_final(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_final_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_digest_fn = Cvoid

function OSSL_FUNC_digest_digest(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_digest(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_digest_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_freectx_fn = Cvoid

function OSSL_FUNC_digest_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_dupctx_fn = Cvoid

function OSSL_FUNC_digest_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_get_params_fn = Cvoid

function OSSL_FUNC_digest_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_set_ctx_params_fn = Cvoid

function OSSL_FUNC_digest_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_get_ctx_params_fn = Cvoid

function OSSL_FUNC_digest_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_gettable_params_fn = Cvoid

function OSSL_FUNC_digest_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_digest_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_digest_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_digest_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_digest_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_digest_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_newctx_fn = Cvoid

function OSSL_FUNC_cipher_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_encrypt_init_fn = Cvoid

function OSSL_FUNC_cipher_encrypt_init(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_encrypt_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_encrypt_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_decrypt_init_fn = Cvoid

function OSSL_FUNC_cipher_decrypt_init(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_decrypt_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_decrypt_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_update_fn = Cvoid

function OSSL_FUNC_cipher_update(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_update(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_update_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_final_fn = Cvoid

function OSSL_FUNC_cipher_final(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_final(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_final_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_cipher_fn = Cvoid

function OSSL_FUNC_cipher_cipher(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_cipher(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_cipher_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_freectx_fn = Cvoid

function OSSL_FUNC_cipher_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_dupctx_fn = Cvoid

function OSSL_FUNC_cipher_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_get_params_fn = Cvoid

function OSSL_FUNC_cipher_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_get_ctx_params_fn = Cvoid

function OSSL_FUNC_cipher_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_set_ctx_params_fn = Cvoid

function OSSL_FUNC_cipher_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_gettable_params_fn = Cvoid

function OSSL_FUNC_cipher_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_cipher_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_cipher_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_cipher_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_cipher_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_cipher_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_newctx_fn = Cvoid

function OSSL_FUNC_mac_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_dupctx_fn = Cvoid

function OSSL_FUNC_mac_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_freectx_fn = Cvoid

function OSSL_FUNC_mac_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_init_fn = Cvoid

function OSSL_FUNC_mac_init(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_update_fn = Cvoid

function OSSL_FUNC_mac_update(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_update(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_update_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_final_fn = Cvoid

function OSSL_FUNC_mac_final(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_final(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_final_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_gettable_params_fn = Cvoid

function OSSL_FUNC_mac_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_mac_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_mac_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_get_params_fn = Cvoid

function OSSL_FUNC_mac_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_get_ctx_params_fn = Cvoid

function OSSL_FUNC_mac_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_mac_set_ctx_params_fn = Cvoid

function OSSL_FUNC_mac_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_mac_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_mac_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_newctx_fn = Cvoid

function OSSL_FUNC_kdf_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_dupctx_fn = Cvoid

function OSSL_FUNC_kdf_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_freectx_fn = Cvoid

function OSSL_FUNC_kdf_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_reset_fn = Cvoid

function OSSL_FUNC_kdf_reset(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_reset(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_reset_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_derive_fn = Cvoid

function OSSL_FUNC_kdf_derive(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_derive(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_derive_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_gettable_params_fn = Cvoid

function OSSL_FUNC_kdf_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_kdf_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_kdf_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_get_params_fn = Cvoid

function OSSL_FUNC_kdf_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_get_ctx_params_fn = Cvoid

function OSSL_FUNC_kdf_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kdf_set_ctx_params_fn = Cvoid

function OSSL_FUNC_kdf_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kdf_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kdf_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_newctx_fn = Cvoid

function OSSL_FUNC_rand_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_freectx_fn = Cvoid

function OSSL_FUNC_rand_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_instantiate_fn = Cvoid

function OSSL_FUNC_rand_instantiate(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_instantiate(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_instantiate_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_uninstantiate_fn = Cvoid

function OSSL_FUNC_rand_uninstantiate(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_uninstantiate(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_uninstantiate_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_generate_fn = Cvoid

function OSSL_FUNC_rand_generate(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_generate(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_generate_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_reseed_fn = Cvoid

function OSSL_FUNC_rand_reseed(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_reseed(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_reseed_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_nonce_fn = Cvoid

function OSSL_FUNC_rand_nonce(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_nonce(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_nonce_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_enable_locking_fn = Cvoid

function OSSL_FUNC_rand_enable_locking(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_enable_locking(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_enable_locking_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_lock_fn = Cvoid

function OSSL_FUNC_rand_lock(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_lock(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_lock_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_unlock_fn = Cvoid

function OSSL_FUNC_rand_unlock(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_unlock(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_unlock_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_gettable_params_fn = Cvoid

function OSSL_FUNC_rand_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_rand_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_rand_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_get_params_fn = Cvoid

function OSSL_FUNC_rand_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_get_ctx_params_fn = Cvoid

function OSSL_FUNC_rand_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_set_ctx_params_fn = Cvoid

function OSSL_FUNC_rand_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_set_callbacks_fn = Cvoid

function OSSL_FUNC_rand_set_callbacks(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_set_callbacks(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_set_callbacks_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_verify_zeroization_fn = Cvoid

function OSSL_FUNC_rand_verify_zeroization(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_verify_zeroization(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_verify_zeroization_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_get_seed_fn = Cvoid

function OSSL_FUNC_rand_get_seed(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_get_seed(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_get_seed_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_rand_clear_seed_fn = Cvoid

function OSSL_FUNC_rand_clear_seed(opf)
    @ccall libwebsockets.OSSL_FUNC_rand_clear_seed(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_rand_clear_seed_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_new_fn = Cvoid

function OSSL_FUNC_keymgmt_new(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_new(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_new_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gen_init_fn = Cvoid

function OSSL_FUNC_keymgmt_gen_init(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gen_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gen_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gen_set_template_fn = Cvoid

function OSSL_FUNC_keymgmt_gen_set_template(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gen_set_template(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gen_set_template_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gen_set_params_fn = Cvoid

function OSSL_FUNC_keymgmt_gen_set_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gen_set_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gen_set_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gen_settable_params_fn = Cvoid

function OSSL_FUNC_keymgmt_gen_settable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gen_settable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gen_settable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gen_fn = Cvoid

function OSSL_FUNC_keymgmt_gen(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gen(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gen_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gen_cleanup_fn = Cvoid

function OSSL_FUNC_keymgmt_gen_cleanup(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gen_cleanup(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gen_cleanup_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_load_fn = Cvoid

function OSSL_FUNC_keymgmt_load(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_load(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_load_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_free_fn = Cvoid

function OSSL_FUNC_keymgmt_free(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_free(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_free_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_get_params_fn = Cvoid

function OSSL_FUNC_keymgmt_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_gettable_params_fn = Cvoid

function OSSL_FUNC_keymgmt_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_set_params_fn = Cvoid

function OSSL_FUNC_keymgmt_set_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_set_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_set_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_settable_params_fn = Cvoid

function OSSL_FUNC_keymgmt_settable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_settable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_settable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_query_operation_name_fn = Cvoid

function OSSL_FUNC_keymgmt_query_operation_name(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_query_operation_name(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_query_operation_name_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_has_fn = Cvoid

function OSSL_FUNC_keymgmt_has(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_has(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_has_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_validate_fn = Cvoid

function OSSL_FUNC_keymgmt_validate(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_validate(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_validate_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_match_fn = Cvoid

function OSSL_FUNC_keymgmt_match(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_match(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_match_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_import_fn = Cvoid

function OSSL_FUNC_keymgmt_import(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_import(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_import_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_import_types_fn = Cvoid

function OSSL_FUNC_keymgmt_import_types(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_import_types(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_import_types_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_export_fn = Cvoid

function OSSL_FUNC_keymgmt_export(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_export(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_export_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_export_types_fn = Cvoid

function OSSL_FUNC_keymgmt_export_types(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_export_types(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_export_types_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keymgmt_dup_fn = Cvoid

function OSSL_FUNC_keymgmt_dup(opf)
    @ccall libwebsockets.OSSL_FUNC_keymgmt_dup(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keymgmt_dup_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_newctx_fn = Cvoid

function OSSL_FUNC_keyexch_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_init_fn = Cvoid

function OSSL_FUNC_keyexch_init(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_derive_fn = Cvoid

function OSSL_FUNC_keyexch_derive(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_derive(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_derive_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_set_peer_fn = Cvoid

function OSSL_FUNC_keyexch_set_peer(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_set_peer(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_set_peer_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_freectx_fn = Cvoid

function OSSL_FUNC_keyexch_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_dupctx_fn = Cvoid

function OSSL_FUNC_keyexch_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_set_ctx_params_fn = Cvoid

function OSSL_FUNC_keyexch_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_keyexch_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_get_ctx_params_fn = Cvoid

function OSSL_FUNC_keyexch_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_keyexch_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_keyexch_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_keyexch_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_keyexch_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_newctx_fn = Cvoid

function OSSL_FUNC_signature_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_sign_init_fn = Cvoid

function OSSL_FUNC_signature_sign_init(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_sign_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_sign_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_sign_fn = Cvoid

function OSSL_FUNC_signature_sign(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_sign(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_sign_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_verify_init_fn = Cvoid

function OSSL_FUNC_signature_verify_init(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_verify_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_verify_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_verify_fn = Cvoid

function OSSL_FUNC_signature_verify(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_verify(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_verify_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_verify_recover_init_fn = Cvoid

function OSSL_FUNC_signature_verify_recover_init(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_verify_recover_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_verify_recover_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_verify_recover_fn = Cvoid

function OSSL_FUNC_signature_verify_recover(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_verify_recover(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_verify_recover_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_sign_init_fn = Cvoid

function OSSL_FUNC_signature_digest_sign_init(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_sign_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_sign_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_sign_update_fn = Cvoid

function OSSL_FUNC_signature_digest_sign_update(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_sign_update(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_sign_update_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_sign_final_fn = Cvoid

function OSSL_FUNC_signature_digest_sign_final(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_sign_final(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_sign_final_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_sign_fn = Cvoid

function OSSL_FUNC_signature_digest_sign(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_sign(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_sign_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_verify_init_fn = Cvoid

function OSSL_FUNC_signature_digest_verify_init(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_verify_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_verify_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_verify_update_fn = Cvoid

function OSSL_FUNC_signature_digest_verify_update(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_verify_update(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_verify_update_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_verify_final_fn = Cvoid

function OSSL_FUNC_signature_digest_verify_final(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_verify_final(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_verify_final_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_digest_verify_fn = Cvoid

function OSSL_FUNC_signature_digest_verify(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_digest_verify(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_digest_verify_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_freectx_fn = Cvoid

function OSSL_FUNC_signature_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_dupctx_fn = Cvoid

function OSSL_FUNC_signature_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_get_ctx_params_fn = Cvoid

function OSSL_FUNC_signature_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_signature_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_set_ctx_params_fn = Cvoid

function OSSL_FUNC_signature_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_signature_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_get_ctx_md_params_fn = Cvoid

function OSSL_FUNC_signature_get_ctx_md_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_get_ctx_md_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_get_ctx_md_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_gettable_ctx_md_params_fn = Cvoid

function OSSL_FUNC_signature_gettable_ctx_md_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_gettable_ctx_md_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_gettable_ctx_md_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_set_ctx_md_params_fn = Cvoid

function OSSL_FUNC_signature_set_ctx_md_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_set_ctx_md_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_set_ctx_md_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_signature_settable_ctx_md_params_fn = Cvoid

function OSSL_FUNC_signature_settable_ctx_md_params(opf)
    @ccall libwebsockets.OSSL_FUNC_signature_settable_ctx_md_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_signature_settable_ctx_md_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_newctx_fn = Cvoid

function OSSL_FUNC_asym_cipher_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_encrypt_init_fn = Cvoid

function OSSL_FUNC_asym_cipher_encrypt_init(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_encrypt_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_encrypt_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_encrypt_fn = Cvoid

function OSSL_FUNC_asym_cipher_encrypt(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_encrypt(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_encrypt_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_decrypt_init_fn = Cvoid

function OSSL_FUNC_asym_cipher_decrypt_init(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_decrypt_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_decrypt_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_decrypt_fn = Cvoid

function OSSL_FUNC_asym_cipher_decrypt(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_decrypt(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_decrypt_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_freectx_fn = Cvoid

function OSSL_FUNC_asym_cipher_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_dupctx_fn = Cvoid

function OSSL_FUNC_asym_cipher_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_get_ctx_params_fn = Cvoid

function OSSL_FUNC_asym_cipher_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_asym_cipher_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_set_ctx_params_fn = Cvoid

function OSSL_FUNC_asym_cipher_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_asym_cipher_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_asym_cipher_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_asym_cipher_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_asym_cipher_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_newctx_fn = Cvoid

function OSSL_FUNC_kem_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_encapsulate_init_fn = Cvoid

function OSSL_FUNC_kem_encapsulate_init(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_encapsulate_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_encapsulate_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_encapsulate_fn = Cvoid

function OSSL_FUNC_kem_encapsulate(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_encapsulate(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_encapsulate_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_decapsulate_init_fn = Cvoid

function OSSL_FUNC_kem_decapsulate_init(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_decapsulate_init(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_decapsulate_init_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_decapsulate_fn = Cvoid

function OSSL_FUNC_kem_decapsulate(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_decapsulate(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_decapsulate_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_freectx_fn = Cvoid

function OSSL_FUNC_kem_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_dupctx_fn = Cvoid

function OSSL_FUNC_kem_dupctx(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_dupctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_dupctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_get_ctx_params_fn = Cvoid

function OSSL_FUNC_kem_get_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_get_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_get_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_gettable_ctx_params_fn = Cvoid

function OSSL_FUNC_kem_gettable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_gettable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_gettable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_set_ctx_params_fn = Cvoid

function OSSL_FUNC_kem_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_kem_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_kem_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_kem_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_kem_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_newctx_fn = Cvoid

function OSSL_FUNC_encoder_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_freectx_fn = Cvoid

function OSSL_FUNC_encoder_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_get_params_fn = Cvoid

function OSSL_FUNC_encoder_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_gettable_params_fn = Cvoid

function OSSL_FUNC_encoder_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_set_ctx_params_fn = Cvoid

function OSSL_FUNC_encoder_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_encoder_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_does_selection_fn = Cvoid

function OSSL_FUNC_encoder_does_selection(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_does_selection(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_does_selection_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_encode_fn = Cvoid

function OSSL_FUNC_encoder_encode(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_encode(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_encode_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_import_object_fn = Cvoid

function OSSL_FUNC_encoder_import_object(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_import_object(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_import_object_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_encoder_free_object_fn = Cvoid

function OSSL_FUNC_encoder_free_object(opf)
    @ccall libwebsockets.OSSL_FUNC_encoder_free_object(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_encoder_free_object_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_newctx_fn = Cvoid

function OSSL_FUNC_decoder_newctx(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_newctx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_newctx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_freectx_fn = Cvoid

function OSSL_FUNC_decoder_freectx(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_freectx(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_freectx_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_get_params_fn = Cvoid

function OSSL_FUNC_decoder_get_params(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_get_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_get_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_gettable_params_fn = Cvoid

function OSSL_FUNC_decoder_gettable_params(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_gettable_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_gettable_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_set_ctx_params_fn = Cvoid

function OSSL_FUNC_decoder_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_decoder_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_does_selection_fn = Cvoid

function OSSL_FUNC_decoder_does_selection(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_does_selection(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_does_selection_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_decode_fn = Cvoid

function OSSL_FUNC_decoder_decode(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_decode(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_decode_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_decoder_export_object_fn = Cvoid

function OSSL_FUNC_decoder_export_object(opf)
    @ccall libwebsockets.OSSL_FUNC_decoder_export_object(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_decoder_export_object_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_open_fn = Cvoid

function OSSL_FUNC_store_open(opf)
    @ccall libwebsockets.OSSL_FUNC_store_open(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_open_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_attach_fn = Cvoid

function OSSL_FUNC_store_attach(opf)
    @ccall libwebsockets.OSSL_FUNC_store_attach(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_attach_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_settable_ctx_params_fn = Cvoid

function OSSL_FUNC_store_settable_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_store_settable_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_settable_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_set_ctx_params_fn = Cvoid

function OSSL_FUNC_store_set_ctx_params(opf)
    @ccall libwebsockets.OSSL_FUNC_store_set_ctx_params(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_set_ctx_params_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_load_fn = Cvoid

function OSSL_FUNC_store_load(opf)
    @ccall libwebsockets.OSSL_FUNC_store_load(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_load_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_eof_fn = Cvoid

function OSSL_FUNC_store_eof(opf)
    @ccall libwebsockets.OSSL_FUNC_store_eof(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_eof_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_close_fn = Cvoid

function OSSL_FUNC_store_close(opf)
    @ccall libwebsockets.OSSL_FUNC_store_close(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_close_fn}
end

# OSSL_CORE_MAKE_FUNC
const OSSL_FUNC_store_export_object_fn = Cvoid

function OSSL_FUNC_store_export_object(opf)
    @ccall libwebsockets.OSSL_FUNC_store_export_object(opf::Ptr{OSSL_DISPATCH})::Ptr{OSSL_FUNC_store_export_object_fn}
end

function BN_set_flags(b, n)
    @ccall libwebsockets.BN_set_flags(b::Ptr{BIGNUM}, n::Cint)::Cvoid
end

function BN_get_flags(b, n)
    @ccall libwebsockets.BN_get_flags(b::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_with_flags(dest, b, flags)
    @ccall libwebsockets.BN_with_flags(dest::Ptr{BIGNUM}, b::Ptr{BIGNUM}, flags::Cint)::Cvoid
end

function BN_GENCB_call(cb, a, b)
    @ccall libwebsockets.BN_GENCB_call(cb::Ptr{BN_GENCB}, a::Cint, b::Cint)::Cint
end

function BN_GENCB_new()
    @ccall libwebsockets.BN_GENCB_new()::Ptr{BN_GENCB}
end

function BN_GENCB_free(cb)
    @ccall libwebsockets.BN_GENCB_free(cb::Ptr{BN_GENCB})::Cvoid
end

function BN_GENCB_set_old(gencb, callback, cb_arg)
    @ccall libwebsockets.BN_GENCB_set_old(gencb::Ptr{BN_GENCB}, callback::Ptr{Cvoid}, cb_arg::Ptr{Cvoid})::Cvoid
end

function BN_GENCB_set(gencb, callback, cb_arg)
    @ccall libwebsockets.BN_GENCB_set(gencb::Ptr{BN_GENCB}, callback::Ptr{Cvoid}, cb_arg::Ptr{Cvoid})::Cvoid
end

function BN_GENCB_get_arg(cb)
    @ccall libwebsockets.BN_GENCB_get_arg(cb::Ptr{BN_GENCB})::Ptr{Cvoid}
end

function BN_abs_is_word(a, w)
    @ccall libwebsockets.BN_abs_is_word(a::Ptr{BIGNUM}, w::Culong)::Cint
end

function BN_is_zero(a)
    @ccall libwebsockets.BN_is_zero(a::Ptr{BIGNUM})::Cint
end

function BN_is_one(a)
    @ccall libwebsockets.BN_is_one(a::Ptr{BIGNUM})::Cint
end

function BN_is_word(a, w)
    @ccall libwebsockets.BN_is_word(a::Ptr{BIGNUM}, w::Culong)::Cint
end

function BN_is_odd(a)
    @ccall libwebsockets.BN_is_odd(a::Ptr{BIGNUM})::Cint
end

function BN_value_one()
    @ccall libwebsockets.BN_value_one()::Ptr{BIGNUM}
end

function BN_options()
    @ccall libwebsockets.BN_options()::Ptr{Cchar}
end

function BN_CTX_new_ex(ctx)
    @ccall libwebsockets.BN_CTX_new_ex(ctx::Ptr{OSSL_LIB_CTX})::Ptr{BN_CTX}
end

function BN_CTX_new()
    @ccall libwebsockets.BN_CTX_new()::Ptr{BN_CTX}
end

function BN_CTX_secure_new_ex(ctx)
    @ccall libwebsockets.BN_CTX_secure_new_ex(ctx::Ptr{OSSL_LIB_CTX})::Ptr{BN_CTX}
end

function BN_CTX_secure_new()
    @ccall libwebsockets.BN_CTX_secure_new()::Ptr{BN_CTX}
end

function BN_CTX_free(c)
    @ccall libwebsockets.BN_CTX_free(c::Ptr{BN_CTX})::Cvoid
end

function BN_CTX_start(ctx)
    @ccall libwebsockets.BN_CTX_start(ctx::Ptr{BN_CTX})::Cvoid
end

function BN_CTX_get(ctx)
    @ccall libwebsockets.BN_CTX_get(ctx::Ptr{BN_CTX})::Ptr{BIGNUM}
end

function BN_CTX_end(ctx)
    @ccall libwebsockets.BN_CTX_end(ctx::Ptr{BN_CTX})::Cvoid
end

function BN_rand_ex(rnd, bits, top, bottom, strength, ctx)
    @ccall libwebsockets.BN_rand_ex(rnd::Ptr{BIGNUM}, bits::Cint, top::Cint, bottom::Cint, strength::Cuint, ctx::Ptr{BN_CTX})::Cint
end

function BN_rand(rnd, bits, top, bottom)
    @ccall libwebsockets.BN_rand(rnd::Ptr{BIGNUM}, bits::Cint, top::Cint, bottom::Cint)::Cint
end

function BN_priv_rand_ex(rnd, bits, top, bottom, strength, ctx)
    @ccall libwebsockets.BN_priv_rand_ex(rnd::Ptr{BIGNUM}, bits::Cint, top::Cint, bottom::Cint, strength::Cuint, ctx::Ptr{BN_CTX})::Cint
end

function BN_priv_rand(rnd, bits, top, bottom)
    @ccall libwebsockets.BN_priv_rand(rnd::Ptr{BIGNUM}, bits::Cint, top::Cint, bottom::Cint)::Cint
end

function BN_rand_range_ex(r, range, strength, ctx)
    @ccall libwebsockets.BN_rand_range_ex(r::Ptr{BIGNUM}, range::Ptr{BIGNUM}, strength::Cuint, ctx::Ptr{BN_CTX})::Cint
end

function BN_rand_range(rnd, range)
    @ccall libwebsockets.BN_rand_range(rnd::Ptr{BIGNUM}, range::Ptr{BIGNUM})::Cint
end

function BN_priv_rand_range_ex(r, range, strength, ctx)
    @ccall libwebsockets.BN_priv_rand_range_ex(r::Ptr{BIGNUM}, range::Ptr{BIGNUM}, strength::Cuint, ctx::Ptr{BN_CTX})::Cint
end

function BN_priv_rand_range(rnd, range)
    @ccall libwebsockets.BN_priv_rand_range(rnd::Ptr{BIGNUM}, range::Ptr{BIGNUM})::Cint
end

function BN_pseudo_rand(rnd, bits, top, bottom)
    @ccall libwebsockets.BN_pseudo_rand(rnd::Ptr{BIGNUM}, bits::Cint, top::Cint, bottom::Cint)::Cint
end

function BN_pseudo_rand_range(rnd, range)
    @ccall libwebsockets.BN_pseudo_rand_range(rnd::Ptr{BIGNUM}, range::Ptr{BIGNUM})::Cint
end

function BN_num_bits_word(l)
    @ccall libwebsockets.BN_num_bits_word(l::Culong)::Cint
end

function BN_security_bits(L, N)
    @ccall libwebsockets.BN_security_bits(L::Cint, N::Cint)::Cint
end

function BN_new()
    @ccall libwebsockets.BN_new()::Ptr{BIGNUM}
end

function BN_secure_new()
    @ccall libwebsockets.BN_secure_new()::Ptr{BIGNUM}
end

function BN_clear_free(a)
    @ccall libwebsockets.BN_clear_free(a::Ptr{BIGNUM})::Cvoid
end

function BN_copy(a, b)
    @ccall libwebsockets.BN_copy(a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_swap(a, b)
    @ccall libwebsockets.BN_swap(a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cvoid
end

function BN_bin2bn(s, len, ret)
    @ccall libwebsockets.BN_bin2bn(s::Ptr{Cuchar}, len::Cint, ret::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_bn2bin(a, to)
    @ccall libwebsockets.BN_bn2bin(a::Ptr{BIGNUM}, to::Ptr{Cuchar})::Cint
end

function BN_bn2binpad(a, to, tolen)
    @ccall libwebsockets.BN_bn2binpad(a::Ptr{BIGNUM}, to::Ptr{Cuchar}, tolen::Cint)::Cint
end

function BN_lebin2bn(s, len, ret)
    @ccall libwebsockets.BN_lebin2bn(s::Ptr{Cuchar}, len::Cint, ret::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_bn2lebinpad(a, to, tolen)
    @ccall libwebsockets.BN_bn2lebinpad(a::Ptr{BIGNUM}, to::Ptr{Cuchar}, tolen::Cint)::Cint
end

function BN_native2bn(s, len, ret)
    @ccall libwebsockets.BN_native2bn(s::Ptr{Cuchar}, len::Cint, ret::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_bn2nativepad(a, to, tolen)
    @ccall libwebsockets.BN_bn2nativepad(a::Ptr{BIGNUM}, to::Ptr{Cuchar}, tolen::Cint)::Cint
end

function BN_mpi2bn(s, len, ret)
    @ccall libwebsockets.BN_mpi2bn(s::Ptr{Cuchar}, len::Cint, ret::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_bn2mpi(a, to)
    @ccall libwebsockets.BN_bn2mpi(a::Ptr{BIGNUM}, to::Ptr{Cuchar})::Cint
end

function BN_sub(r, a, b)
    @ccall libwebsockets.BN_sub(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_usub(r, a, b)
    @ccall libwebsockets.BN_usub(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_uadd(r, a, b)
    @ccall libwebsockets.BN_uadd(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_add(r, a, b)
    @ccall libwebsockets.BN_add(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_mul(r, a, b, ctx)
    @ccall libwebsockets.BN_mul(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_sqr(r, a, ctx)
    @ccall libwebsockets.BN_sqr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_set_negative(b, n)
    @ccall libwebsockets.BN_set_negative(b::Ptr{BIGNUM}, n::Cint)::Cvoid
end

function BN_is_negative(b)
    @ccall libwebsockets.BN_is_negative(b::Ptr{BIGNUM})::Cint
end

function BN_nnmod(r, m, d, ctx)
    @ccall libwebsockets.BN_nnmod(r::Ptr{BIGNUM}, m::Ptr{BIGNUM}, d::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_add(r, a, b, m, ctx)
    @ccall libwebsockets.BN_mod_add(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_add_quick(r, a, b, m)
    @ccall libwebsockets.BN_mod_add_quick(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, m::Ptr{BIGNUM})::Cint
end

function BN_mod_sub(r, a, b, m, ctx)
    @ccall libwebsockets.BN_mod_sub(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_sub_quick(r, a, b, m)
    @ccall libwebsockets.BN_mod_sub_quick(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, m::Ptr{BIGNUM})::Cint
end

function BN_mod_mul(r, a, b, m, ctx)
    @ccall libwebsockets.BN_mod_mul(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_sqr(r, a, m, ctx)
    @ccall libwebsockets.BN_mod_sqr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_lshift1(r, a, m, ctx)
    @ccall libwebsockets.BN_mod_lshift1(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_lshift1_quick(r, a, m)
    @ccall libwebsockets.BN_mod_lshift1_quick(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, m::Ptr{BIGNUM})::Cint
end

function BN_mod_lshift(r, a, n, m, ctx)
    @ccall libwebsockets.BN_mod_lshift(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, n::Cint, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_lshift_quick(r, a, n, m)
    @ccall libwebsockets.BN_mod_lshift_quick(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, n::Cint, m::Ptr{BIGNUM})::Cint
end

function BN_mod_word(a, w)
    @ccall libwebsockets.BN_mod_word(a::Ptr{BIGNUM}, w::Culong)::Culong
end

function BN_div_word(a, w)
    @ccall libwebsockets.BN_div_word(a::Ptr{BIGNUM}, w::Culong)::Culong
end

function BN_mul_word(a, w)
    @ccall libwebsockets.BN_mul_word(a::Ptr{BIGNUM}, w::Culong)::Cint
end

function BN_add_word(a, w)
    @ccall libwebsockets.BN_add_word(a::Ptr{BIGNUM}, w::Culong)::Cint
end

function BN_sub_word(a, w)
    @ccall libwebsockets.BN_sub_word(a::Ptr{BIGNUM}, w::Culong)::Cint
end

function BN_get_word(a)
    @ccall libwebsockets.BN_get_word(a::Ptr{BIGNUM})::Culong
end

function BN_cmp(a, b)
    @ccall libwebsockets.BN_cmp(a::Ptr{BIGNUM}, b::Ptr{BIGNUM})::Cint
end

function BN_free(a)
    @ccall libwebsockets.BN_free(a::Ptr{BIGNUM})::Cvoid
end

function BN_is_bit_set(a, n)
    @ccall libwebsockets.BN_is_bit_set(a::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_lshift(r, a, n)
    @ccall libwebsockets.BN_lshift(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_lshift1(r, a)
    @ccall libwebsockets.BN_lshift1(r::Ptr{BIGNUM}, a::Ptr{BIGNUM})::Cint
end

function BN_exp(r, a, p, ctx)
    @ccall libwebsockets.BN_exp(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_exp(r, a, p, m, ctx)
    @ccall libwebsockets.BN_mod_exp(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_exp_mont(r, a, p, m, ctx, m_ctx)
    @ccall libwebsockets.BN_mod_exp_mont(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, m_ctx::Ptr{BN_MONT_CTX})::Cint
end

function BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont)
    @ccall libwebsockets.BN_mod_exp_mont_consttime(rr::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, in_mont::Ptr{BN_MONT_CTX})::Cint
end

function BN_mod_exp_mont_word(r, a, p, m, ctx, m_ctx)
    @ccall libwebsockets.BN_mod_exp_mont_word(r::Ptr{BIGNUM}, a::Culong, p::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, m_ctx::Ptr{BN_MONT_CTX})::Cint
end

function BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx)
    @ccall libwebsockets.BN_mod_exp2_mont(r::Ptr{BIGNUM}, a1::Ptr{BIGNUM}, p1::Ptr{BIGNUM}, a2::Ptr{BIGNUM}, p2::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, m_ctx::Ptr{BN_MONT_CTX})::Cint
end

function BN_mod_exp_simple(r, a, p, m, ctx)
    @ccall libwebsockets.BN_mod_exp_simple(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_exp_mont_consttime_x2(rr1, a1, p1, m1, in_mont1, rr2, a2, p2, m2, in_mont2, ctx)
    @ccall libwebsockets.BN_mod_exp_mont_consttime_x2(rr1::Ptr{BIGNUM}, a1::Ptr{BIGNUM}, p1::Ptr{BIGNUM}, m1::Ptr{BIGNUM}, in_mont1::Ptr{BN_MONT_CTX}, rr2::Ptr{BIGNUM}, a2::Ptr{BIGNUM}, p2::Ptr{BIGNUM}, m2::Ptr{BIGNUM}, in_mont2::Ptr{BN_MONT_CTX}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mask_bits(a, n)
    @ccall libwebsockets.BN_mask_bits(a::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_print_fp(fp, a)
    @ccall libwebsockets.BN_print_fp(fp::Ptr{Libc.FILE}, a::Ptr{BIGNUM})::Cint
end

function BN_print(bio, a)
    @ccall libwebsockets.BN_print(bio::Ptr{BIO}, a::Ptr{BIGNUM})::Cint
end

function BN_reciprocal(r, m, len, ctx)
    @ccall libwebsockets.BN_reciprocal(r::Ptr{BIGNUM}, m::Ptr{BIGNUM}, len::Cint, ctx::Ptr{BN_CTX})::Cint
end

function BN_rshift(r, a, n)
    @ccall libwebsockets.BN_rshift(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_rshift1(r, a)
    @ccall libwebsockets.BN_rshift1(r::Ptr{BIGNUM}, a::Ptr{BIGNUM})::Cint
end

function BN_clear(a)
    @ccall libwebsockets.BN_clear(a::Ptr{BIGNUM})::Cvoid
end

function BN_dup(a)
    @ccall libwebsockets.BN_dup(a::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function BN_set_bit(a, n)
    @ccall libwebsockets.BN_set_bit(a::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_clear_bit(a, n)
    @ccall libwebsockets.BN_clear_bit(a::Ptr{BIGNUM}, n::Cint)::Cint
end

function BN_bn2hex(a)
    @ccall libwebsockets.BN_bn2hex(a::Ptr{BIGNUM})::Ptr{Cchar}
end

function BN_bn2dec(a)
    @ccall libwebsockets.BN_bn2dec(a::Ptr{BIGNUM})::Ptr{Cchar}
end

function BN_hex2bn(a, str)
    @ccall libwebsockets.BN_hex2bn(a::Ptr{Ptr{BIGNUM}}, str::Ptr{Cchar})::Cint
end

function BN_dec2bn(a, str)
    @ccall libwebsockets.BN_dec2bn(a::Ptr{Ptr{BIGNUM}}, str::Ptr{Cchar})::Cint
end

function BN_asc2bn(a, str)
    @ccall libwebsockets.BN_asc2bn(a::Ptr{Ptr{BIGNUM}}, str::Ptr{Cchar})::Cint
end

function BN_gcd(r, a, b, ctx)
    @ccall libwebsockets.BN_gcd(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_kronecker(a, b, ctx)
    @ccall libwebsockets.BN_kronecker(a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_inverse(ret, a, n, ctx)
    @ccall libwebsockets.BN_mod_inverse(ret::Ptr{BIGNUM}, a::Ptr{BIGNUM}, n::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Ptr{BIGNUM}
end

function BN_mod_sqrt(ret, a, n, ctx)
    @ccall libwebsockets.BN_mod_sqrt(ret::Ptr{BIGNUM}, a::Ptr{BIGNUM}, n::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Ptr{BIGNUM}
end

function BN_consttime_swap(swap, a, b, nwords)
    @ccall libwebsockets.BN_consttime_swap(swap::Culong, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, nwords::Cint)::Cvoid
end

function BN_generate_prime(ret, bits, safe, add, rem, callback, cb_arg)
    @ccall libwebsockets.BN_generate_prime(ret::Ptr{BIGNUM}, bits::Cint, safe::Cint, add::Ptr{BIGNUM}, rem::Ptr{BIGNUM}, callback::Ptr{Cvoid}, cb_arg::Ptr{Cvoid})::Ptr{BIGNUM}
end

function BN_is_prime_fasttest(p, nchecks, callback, ctx, cb_arg, do_trial_division)
    @ccall libwebsockets.BN_is_prime_fasttest(p::Ptr{BIGNUM}, nchecks::Cint, callback::Ptr{Cvoid}, ctx::Ptr{BN_CTX}, cb_arg::Ptr{Cvoid}, do_trial_division::Cint)::Cint
end

function BN_is_prime_ex(p, nchecks, ctx, cb)
    @ccall libwebsockets.BN_is_prime_ex(p::Ptr{BIGNUM}, nchecks::Cint, ctx::Ptr{BN_CTX}, cb::Ptr{BN_GENCB})::Cint
end

function BN_is_prime_fasttest_ex(p, nchecks, ctx, do_trial_division, cb)
    @ccall libwebsockets.BN_is_prime_fasttest_ex(p::Ptr{BIGNUM}, nchecks::Cint, ctx::Ptr{BN_CTX}, do_trial_division::Cint, cb::Ptr{BN_GENCB})::Cint
end

function BN_generate_prime_ex2(ret, bits, safe, add, rem, cb, ctx)
    @ccall libwebsockets.BN_generate_prime_ex2(ret::Ptr{BIGNUM}, bits::Cint, safe::Cint, add::Ptr{BIGNUM}, rem::Ptr{BIGNUM}, cb::Ptr{BN_GENCB}, ctx::Ptr{BN_CTX})::Cint
end

function BN_generate_prime_ex(ret, bits, safe, add, rem, cb)
    @ccall libwebsockets.BN_generate_prime_ex(ret::Ptr{BIGNUM}, bits::Cint, safe::Cint, add::Ptr{BIGNUM}, rem::Ptr{BIGNUM}, cb::Ptr{BN_GENCB})::Cint
end

function BN_check_prime(p, ctx, cb)
    @ccall libwebsockets.BN_check_prime(p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, cb::Ptr{BN_GENCB})::Cint
end

function BN_X931_generate_Xpq(Xp, Xq, nbits, ctx)
    @ccall libwebsockets.BN_X931_generate_Xpq(Xp::Ptr{BIGNUM}, Xq::Ptr{BIGNUM}, nbits::Cint, ctx::Ptr{BN_CTX})::Cint
end

function BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb)
    @ccall libwebsockets.BN_X931_derive_prime_ex(p::Ptr{BIGNUM}, p1::Ptr{BIGNUM}, p2::Ptr{BIGNUM}, Xp::Ptr{BIGNUM}, Xp1::Ptr{BIGNUM}, Xp2::Ptr{BIGNUM}, e::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, cb::Ptr{BN_GENCB})::Cint
end

function BN_X931_generate_prime_ex(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb)
    @ccall libwebsockets.BN_X931_generate_prime_ex(p::Ptr{BIGNUM}, p1::Ptr{BIGNUM}, p2::Ptr{BIGNUM}, Xp1::Ptr{BIGNUM}, Xp2::Ptr{BIGNUM}, Xp::Ptr{BIGNUM}, e::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, cb::Ptr{BN_GENCB})::Cint
end

function BN_MONT_CTX_new()
    @ccall libwebsockets.BN_MONT_CTX_new()::Ptr{BN_MONT_CTX}
end

function BN_mod_mul_montgomery(r, a, b, mont, ctx)
    @ccall libwebsockets.BN_mod_mul_montgomery(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, mont::Ptr{BN_MONT_CTX}, ctx::Ptr{BN_CTX})::Cint
end

function BN_to_montgomery(r, a, mont, ctx)
    @ccall libwebsockets.BN_to_montgomery(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, mont::Ptr{BN_MONT_CTX}, ctx::Ptr{BN_CTX})::Cint
end

function BN_from_montgomery(r, a, mont, ctx)
    @ccall libwebsockets.BN_from_montgomery(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, mont::Ptr{BN_MONT_CTX}, ctx::Ptr{BN_CTX})::Cint
end

function BN_MONT_CTX_free(mont)
    @ccall libwebsockets.BN_MONT_CTX_free(mont::Ptr{BN_MONT_CTX})::Cvoid
end

function BN_MONT_CTX_set(mont, mod, ctx)
    @ccall libwebsockets.BN_MONT_CTX_set(mont::Ptr{BN_MONT_CTX}, mod::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_MONT_CTX_copy(to, from)
    @ccall libwebsockets.BN_MONT_CTX_copy(to::Ptr{BN_MONT_CTX}, from::Ptr{BN_MONT_CTX})::Ptr{BN_MONT_CTX}
end

function BN_MONT_CTX_set_locked(pmont, lock, mod, ctx)
    @ccall libwebsockets.BN_MONT_CTX_set_locked(pmont::Ptr{Ptr{BN_MONT_CTX}}, lock::Ptr{CRYPTO_RWLOCK}, mod::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Ptr{BN_MONT_CTX}
end

function BN_BLINDING_new(A, Ai, mod)
    @ccall libwebsockets.BN_BLINDING_new(A::Ptr{BIGNUM}, Ai::Ptr{BIGNUM}, mod::Ptr{BIGNUM})::Ptr{BN_BLINDING}
end

function BN_BLINDING_free(b)
    @ccall libwebsockets.BN_BLINDING_free(b::Ptr{BN_BLINDING})::Cvoid
end

function BN_BLINDING_update(b, ctx)
    @ccall libwebsockets.BN_BLINDING_update(b::Ptr{BN_BLINDING}, ctx::Ptr{BN_CTX})::Cint
end

function BN_BLINDING_convert(n, b, ctx)
    @ccall libwebsockets.BN_BLINDING_convert(n::Ptr{BIGNUM}, b::Ptr{BN_BLINDING}, ctx::Ptr{BN_CTX})::Cint
end

function BN_BLINDING_invert(n, b, ctx)
    @ccall libwebsockets.BN_BLINDING_invert(n::Ptr{BIGNUM}, b::Ptr{BN_BLINDING}, ctx::Ptr{BN_CTX})::Cint
end

function BN_BLINDING_convert_ex(n, r, b, arg4)
    @ccall libwebsockets.BN_BLINDING_convert_ex(n::Ptr{BIGNUM}, r::Ptr{BIGNUM}, b::Ptr{BN_BLINDING}, arg4::Ptr{BN_CTX})::Cint
end

function BN_BLINDING_invert_ex(n, r, b, arg4)
    @ccall libwebsockets.BN_BLINDING_invert_ex(n::Ptr{BIGNUM}, r::Ptr{BIGNUM}, b::Ptr{BN_BLINDING}, arg4::Ptr{BN_CTX})::Cint
end

function BN_BLINDING_is_current_thread(b)
    @ccall libwebsockets.BN_BLINDING_is_current_thread(b::Ptr{BN_BLINDING})::Cint
end

function BN_BLINDING_set_current_thread(b)
    @ccall libwebsockets.BN_BLINDING_set_current_thread(b::Ptr{BN_BLINDING})::Cvoid
end

function BN_BLINDING_lock(b)
    @ccall libwebsockets.BN_BLINDING_lock(b::Ptr{BN_BLINDING})::Cint
end

function BN_BLINDING_unlock(b)
    @ccall libwebsockets.BN_BLINDING_unlock(b::Ptr{BN_BLINDING})::Cint
end

function BN_BLINDING_get_flags(arg1)
    @ccall libwebsockets.BN_BLINDING_get_flags(arg1::Ptr{BN_BLINDING})::Culong
end

function BN_BLINDING_set_flags(arg1, arg2)
    @ccall libwebsockets.BN_BLINDING_set_flags(arg1::Ptr{BN_BLINDING}, arg2::Culong)::Cvoid
end

function BN_BLINDING_create_param(b, e, m, ctx, bn_mod_exp, m_ctx)
    @ccall libwebsockets.BN_BLINDING_create_param(b::Ptr{BN_BLINDING}, e::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX}, bn_mod_exp::Ptr{Cvoid}, m_ctx::Ptr{BN_MONT_CTX})::Ptr{BN_BLINDING}
end

function BN_set_params(mul, high, low, mont)
    @ccall libwebsockets.BN_set_params(mul::Cint, high::Cint, low::Cint, mont::Cint)::Cvoid
end

function BN_get_params(which)
    @ccall libwebsockets.BN_get_params(which::Cint)::Cint
end

function BN_RECP_CTX_new()
    @ccall libwebsockets.BN_RECP_CTX_new()::Ptr{BN_RECP_CTX}
end

function BN_RECP_CTX_free(recp)
    @ccall libwebsockets.BN_RECP_CTX_free(recp::Ptr{BN_RECP_CTX})::Cvoid
end

function BN_RECP_CTX_set(recp, rdiv, ctx)
    @ccall libwebsockets.BN_RECP_CTX_set(recp::Ptr{BN_RECP_CTX}, rdiv::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_mul_reciprocal(r, x, y, recp, ctx)
    @ccall libwebsockets.BN_mod_mul_reciprocal(r::Ptr{BIGNUM}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, recp::Ptr{BN_RECP_CTX}, ctx::Ptr{BN_CTX})::Cint
end

function BN_mod_exp_recp(r, a, p, m, ctx)
    @ccall libwebsockets.BN_mod_exp_recp(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_div_recp(dv, rem, m, recp, ctx)
    @ccall libwebsockets.BN_div_recp(dv::Ptr{BIGNUM}, rem::Ptr{BIGNUM}, m::Ptr{BIGNUM}, recp::Ptr{BN_RECP_CTX}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod(r, a, p)
    @ccall libwebsockets.BN_GF2m_mod(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM})::Cint
end

function BN_GF2m_mod_mul(r, a, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_mul(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_sqr(r, a, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_sqr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_inv(r, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_inv(r::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_div(r, a, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_div(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_exp(r, a, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_exp(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_sqrt(r, a, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_sqrt(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_solve_quad(r, a, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_solve_quad(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_arr(r, a, p)
    @ccall libwebsockets.BN_GF2m_mod_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{Cint})::Cint
end

function BN_GF2m_mod_mul_arr(r, a, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_mul_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_sqr_arr(r, a, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_sqr_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_inv_arr(r, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_inv_arr(r::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_div_arr(r, a, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_div_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_exp_arr(r, a, b, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_exp_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_sqrt_arr(r, a, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_sqrt_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_mod_solve_quad_arr(r, a, p, ctx)
    @ccall libwebsockets.BN_GF2m_mod_solve_quad_arr(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{Cint}, ctx::Ptr{BN_CTX})::Cint
end

function BN_GF2m_poly2arr(a, p, max)
    @ccall libwebsockets.BN_GF2m_poly2arr(a::Ptr{BIGNUM}, p::Ptr{Cint}, max::Cint)::Cint
end

function BN_GF2m_arr2poly(p, a)
    @ccall libwebsockets.BN_GF2m_arr2poly(p::Ptr{Cint}, a::Ptr{BIGNUM})::Cint
end

function BN_nist_mod_192(r, a, p, ctx)
    @ccall libwebsockets.BN_nist_mod_192(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_nist_mod_224(r, a, p, ctx)
    @ccall libwebsockets.BN_nist_mod_224(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_nist_mod_256(r, a, p, ctx)
    @ccall libwebsockets.BN_nist_mod_256(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_nist_mod_384(r, a, p, ctx)
    @ccall libwebsockets.BN_nist_mod_384(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_nist_mod_521(r, a, p, ctx)
    @ccall libwebsockets.BN_nist_mod_521(r::Ptr{BIGNUM}, a::Ptr{BIGNUM}, p::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function BN_get0_nist_prime_192()
    @ccall libwebsockets.BN_get0_nist_prime_192()::Ptr{BIGNUM}
end

function BN_get0_nist_prime_224()
    @ccall libwebsockets.BN_get0_nist_prime_224()::Ptr{BIGNUM}
end

function BN_get0_nist_prime_256()
    @ccall libwebsockets.BN_get0_nist_prime_256()::Ptr{BIGNUM}
end

function BN_get0_nist_prime_384()
    @ccall libwebsockets.BN_get0_nist_prime_384()::Ptr{BIGNUM}
end

function BN_get0_nist_prime_521()
    @ccall libwebsockets.BN_get0_nist_prime_521()::Ptr{BIGNUM}
end

function BN_nist_mod_func(p)
    @ccall libwebsockets.BN_nist_mod_func(p::Ptr{BIGNUM})::Ptr{Cvoid}
end

function BN_generate_dsa_nonce(out, range, priv, message, message_len, ctx)
    @ccall libwebsockets.BN_generate_dsa_nonce(out::Ptr{BIGNUM}, range::Ptr{BIGNUM}, priv::Ptr{BIGNUM}, message::Ptr{Cuchar}, message_len::Csize_t, ctx::Ptr{BN_CTX})::Cint
end

function BN_bntest_rand(rnd, bits, top, bottom)
    @ccall libwebsockets.BN_bntest_rand(rnd::Ptr{BIGNUM}, bits::Cint, top::Cint, bottom::Cint)::Cint
end

function OSSL_PARAM_locate(p, key)
    @ccall libwebsockets.OSSL_PARAM_locate(p::Ptr{OSSL_PARAM}, key::Ptr{Cchar})::Ptr{OSSL_PARAM}
end

function OSSL_PARAM_locate_const(p, key)
    @ccall libwebsockets.OSSL_PARAM_locate_const(p::Ptr{OSSL_PARAM}, key::Ptr{Cchar})::Ptr{OSSL_PARAM}
end

function OSSL_PARAM_construct_int(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_int(key::Ptr{Cchar}, buf::Ptr{Cint})::OSSL_PARAM
end

function OSSL_PARAM_construct_uint(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_uint(key::Ptr{Cchar}, buf::Ptr{Cuint})::OSSL_PARAM
end

function OSSL_PARAM_construct_long(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_long(key::Ptr{Cchar}, buf::Ptr{Clong})::OSSL_PARAM
end

function OSSL_PARAM_construct_ulong(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_ulong(key::Ptr{Cchar}, buf::Ptr{Culong})::OSSL_PARAM
end

function OSSL_PARAM_construct_int32(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_int32(key::Ptr{Cchar}, buf::Ptr{Int32})::OSSL_PARAM
end

function OSSL_PARAM_construct_uint32(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_uint32(key::Ptr{Cchar}, buf::Ptr{UInt32})::OSSL_PARAM
end

function OSSL_PARAM_construct_int64(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_int64(key::Ptr{Cchar}, buf::Ptr{Int64})::OSSL_PARAM
end

function OSSL_PARAM_construct_uint64(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_uint64(key::Ptr{Cchar}, buf::Ptr{UInt64})::OSSL_PARAM
end

function OSSL_PARAM_construct_size_t(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_size_t(key::Ptr{Cchar}, buf::Ptr{Csize_t})::OSSL_PARAM
end

function OSSL_PARAM_construct_time_t(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_time_t(key::Ptr{Cchar}, buf::Ptr{time_t})::OSSL_PARAM
end

function OSSL_PARAM_construct_BN(key, buf, bsize)
    @ccall libwebsockets.OSSL_PARAM_construct_BN(key::Ptr{Cchar}, buf::Ptr{Cuchar}, bsize::Csize_t)::OSSL_PARAM
end

function OSSL_PARAM_construct_double(key, buf)
    @ccall libwebsockets.OSSL_PARAM_construct_double(key::Ptr{Cchar}, buf::Ptr{Cdouble})::OSSL_PARAM
end

function OSSL_PARAM_construct_utf8_string(key, buf, bsize)
    @ccall libwebsockets.OSSL_PARAM_construct_utf8_string(key::Ptr{Cchar}, buf::Ptr{Cchar}, bsize::Csize_t)::OSSL_PARAM
end

function OSSL_PARAM_construct_utf8_ptr(key, buf, bsize)
    @ccall libwebsockets.OSSL_PARAM_construct_utf8_ptr(key::Ptr{Cchar}, buf::Ptr{Ptr{Cchar}}, bsize::Csize_t)::OSSL_PARAM
end

function OSSL_PARAM_construct_octet_string(key, buf, bsize)
    @ccall libwebsockets.OSSL_PARAM_construct_octet_string(key::Ptr{Cchar}, buf::Ptr{Cvoid}, bsize::Csize_t)::OSSL_PARAM
end

function OSSL_PARAM_construct_octet_ptr(key, buf, bsize)
    @ccall libwebsockets.OSSL_PARAM_construct_octet_ptr(key::Ptr{Cchar}, buf::Ptr{Ptr{Cvoid}}, bsize::Csize_t)::OSSL_PARAM
end

function OSSL_PARAM_construct_end()
    @ccall libwebsockets.OSSL_PARAM_construct_end()::OSSL_PARAM
end

function OSSL_PARAM_allocate_from_text(to, paramdefs, key, value, value_n, found)
    @ccall libwebsockets.OSSL_PARAM_allocate_from_text(to::Ptr{OSSL_PARAM}, paramdefs::Ptr{OSSL_PARAM}, key::Ptr{Cchar}, value::Ptr{Cchar}, value_n::Csize_t, found::Ptr{Cint})::Cint
end

function OSSL_PARAM_get_int(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_int(p::Ptr{OSSL_PARAM}, val::Ptr{Cint})::Cint
end

function OSSL_PARAM_get_uint(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_uint(p::Ptr{OSSL_PARAM}, val::Ptr{Cuint})::Cint
end

function OSSL_PARAM_get_long(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_long(p::Ptr{OSSL_PARAM}, val::Ptr{Clong})::Cint
end

function OSSL_PARAM_get_ulong(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_ulong(p::Ptr{OSSL_PARAM}, val::Ptr{Culong})::Cint
end

function OSSL_PARAM_get_int32(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_int32(p::Ptr{OSSL_PARAM}, val::Ptr{Int32})::Cint
end

function OSSL_PARAM_get_uint32(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_uint32(p::Ptr{OSSL_PARAM}, val::Ptr{UInt32})::Cint
end

function OSSL_PARAM_get_int64(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_int64(p::Ptr{OSSL_PARAM}, val::Ptr{Int64})::Cint
end

function OSSL_PARAM_get_uint64(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_uint64(p::Ptr{OSSL_PARAM}, val::Ptr{UInt64})::Cint
end

function OSSL_PARAM_get_size_t(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_size_t(p::Ptr{OSSL_PARAM}, val::Ptr{Csize_t})::Cint
end

function OSSL_PARAM_get_time_t(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_time_t(p::Ptr{OSSL_PARAM}, val::Ptr{time_t})::Cint
end

function OSSL_PARAM_set_int(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_int(p::Ptr{OSSL_PARAM}, val::Cint)::Cint
end

function OSSL_PARAM_set_uint(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_uint(p::Ptr{OSSL_PARAM}, val::Cuint)::Cint
end

function OSSL_PARAM_set_long(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_long(p::Ptr{OSSL_PARAM}, val::Clong)::Cint
end

function OSSL_PARAM_set_ulong(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_ulong(p::Ptr{OSSL_PARAM}, val::Culong)::Cint
end

function OSSL_PARAM_set_int32(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_int32(p::Ptr{OSSL_PARAM}, val::Int32)::Cint
end

function OSSL_PARAM_set_uint32(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_uint32(p::Ptr{OSSL_PARAM}, val::UInt32)::Cint
end

function OSSL_PARAM_set_int64(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_int64(p::Ptr{OSSL_PARAM}, val::Int64)::Cint
end

function OSSL_PARAM_set_uint64(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_uint64(p::Ptr{OSSL_PARAM}, val::UInt64)::Cint
end

function OSSL_PARAM_set_size_t(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_size_t(p::Ptr{OSSL_PARAM}, val::Csize_t)::Cint
end

function OSSL_PARAM_set_time_t(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_time_t(p::Ptr{OSSL_PARAM}, val::time_t)::Cint
end

function OSSL_PARAM_get_double(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_double(p::Ptr{OSSL_PARAM}, val::Ptr{Cdouble})::Cint
end

function OSSL_PARAM_set_double(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_double(p::Ptr{OSSL_PARAM}, val::Cdouble)::Cint
end

function OSSL_PARAM_get_BN(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_BN(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{BIGNUM}})::Cint
end

function OSSL_PARAM_set_BN(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_BN(p::Ptr{OSSL_PARAM}, val::Ptr{BIGNUM})::Cint
end

function OSSL_PARAM_get_utf8_string(p, val, max_len)
    @ccall libwebsockets.OSSL_PARAM_get_utf8_string(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{Cchar}}, max_len::Csize_t)::Cint
end

function OSSL_PARAM_set_utf8_string(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_utf8_string(p::Ptr{OSSL_PARAM}, val::Ptr{Cchar})::Cint
end

function OSSL_PARAM_get_octet_string(p, val, max_len, used_len)
    @ccall libwebsockets.OSSL_PARAM_get_octet_string(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{Cvoid}}, max_len::Csize_t, used_len::Ptr{Csize_t})::Cint
end

function OSSL_PARAM_set_octet_string(p, val, len)
    @ccall libwebsockets.OSSL_PARAM_set_octet_string(p::Ptr{OSSL_PARAM}, val::Ptr{Cvoid}, len::Csize_t)::Cint
end

function OSSL_PARAM_get_utf8_ptr(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_utf8_ptr(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{Cchar}})::Cint
end

function OSSL_PARAM_set_utf8_ptr(p, val)
    @ccall libwebsockets.OSSL_PARAM_set_utf8_ptr(p::Ptr{OSSL_PARAM}, val::Ptr{Cchar})::Cint
end

function OSSL_PARAM_get_octet_ptr(p, val, used_len)
    @ccall libwebsockets.OSSL_PARAM_get_octet_ptr(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{Cvoid}}, used_len::Ptr{Csize_t})::Cint
end

function OSSL_PARAM_set_octet_ptr(p, val, used_len)
    @ccall libwebsockets.OSSL_PARAM_set_octet_ptr(p::Ptr{OSSL_PARAM}, val::Ptr{Cvoid}, used_len::Csize_t)::Cint
end

function OSSL_PARAM_get_utf8_string_ptr(p, val)
    @ccall libwebsockets.OSSL_PARAM_get_utf8_string_ptr(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{Cchar}})::Cint
end

function OSSL_PARAM_get_octet_string_ptr(p, val, used_len)
    @ccall libwebsockets.OSSL_PARAM_get_octet_string_ptr(p::Ptr{OSSL_PARAM}, val::Ptr{Ptr{Cvoid}}, used_len::Ptr{Csize_t})::Cint
end

function OSSL_PARAM_modified(p)
    @ccall libwebsockets.OSSL_PARAM_modified(p::Ptr{OSSL_PARAM})::Cint
end

function OSSL_PARAM_set_all_unmodified(p)
    @ccall libwebsockets.OSSL_PARAM_set_all_unmodified(p::Ptr{OSSL_PARAM})::Cvoid
end

function OSSL_PARAM_dup(p)
    @ccall libwebsockets.OSSL_PARAM_dup(p::Ptr{OSSL_PARAM})::Ptr{OSSL_PARAM}
end

function OSSL_PARAM_merge(p1, p2)
    @ccall libwebsockets.OSSL_PARAM_merge(p1::Ptr{OSSL_PARAM}, p2::Ptr{OSSL_PARAM})::Ptr{OSSL_PARAM}
end

function OSSL_PARAM_free(p)
    @ccall libwebsockets.OSSL_PARAM_free(p::Ptr{OSSL_PARAM})::Cvoid
end

mutable struct ASN1_ENCODING_st
    enc::Ptr{Cuchar}
    len::Clong
    modified::Cint
    ASN1_ENCODING_st() = new()
end

const ASN1_ENCODING = ASN1_ENCODING_st

mutable struct ASN1_TEMPLATE_st end

const ASN1_TEMPLATE = ASN1_TEMPLATE_st

mutable struct ASN1_TLC_st end

const ASN1_TLC = ASN1_TLC_st

# typedef const ASN1_ITEM * ASN1_ITEM_EXP ( void )
const ASN1_ITEM_EXP = Cvoid

const ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE

function d2i_ASN1_SEQUENCE_ANY(a, in, len)
    @ccall libwebsockets.d2i_ASN1_SEQUENCE_ANY(a::Ptr{Ptr{ASN1_SEQUENCE_ANY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_SEQUENCE_ANY}
end

function i2d_ASN1_SEQUENCE_ANY(a, out)
    @ccall libwebsockets.i2d_ASN1_SEQUENCE_ANY(a::Ptr{ASN1_SEQUENCE_ANY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_SEQUENCE_ANY_it()
    @ccall libwebsockets.ASN1_SEQUENCE_ANY_it()::Ptr{ASN1_ITEM}
end

function d2i_ASN1_SET_ANY(a, in, len)
    @ccall libwebsockets.d2i_ASN1_SET_ANY(a::Ptr{Ptr{ASN1_SEQUENCE_ANY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_SEQUENCE_ANY}
end

function i2d_ASN1_SET_ANY(a, out)
    @ccall libwebsockets.i2d_ASN1_SET_ANY(a::Ptr{ASN1_SEQUENCE_ANY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_SET_ANY_it()
    @ccall libwebsockets.ASN1_SET_ANY_it()::Ptr{ASN1_ITEM}
end

mutable struct BIT_STRING_BITNAME_st
    bitnum::Cint
    lname::Ptr{Cchar}
    sname::Ptr{Cchar}
    BIT_STRING_BITNAME_st() = new()
end

const BIT_STRING_BITNAME = BIT_STRING_BITNAME_st

function ASN1_TYPE_new()
    @ccall libwebsockets.ASN1_TYPE_new()::Ptr{ASN1_TYPE}
end

function ASN1_TYPE_free(a)
    @ccall libwebsockets.ASN1_TYPE_free(a::Ptr{ASN1_TYPE})::Cvoid
end

function d2i_ASN1_TYPE(a, in, len)
    @ccall libwebsockets.d2i_ASN1_TYPE(a::Ptr{Ptr{ASN1_TYPE}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_TYPE}
end

function i2d_ASN1_TYPE(a, out)
    @ccall libwebsockets.i2d_ASN1_TYPE(a::Ptr{ASN1_TYPE}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_ANY_it()
    @ccall libwebsockets.ASN1_ANY_it()::Ptr{ASN1_ITEM}
end

function ASN1_TYPE_get(a)
    @ccall libwebsockets.ASN1_TYPE_get(a::Ptr{ASN1_TYPE})::Cint
end

function ASN1_TYPE_set(a, type, value)
    @ccall libwebsockets.ASN1_TYPE_set(a::Ptr{ASN1_TYPE}, type::Cint, value::Ptr{Cvoid})::Cvoid
end

function ASN1_TYPE_set1(a, type, value)
    @ccall libwebsockets.ASN1_TYPE_set1(a::Ptr{ASN1_TYPE}, type::Cint, value::Ptr{Cvoid})::Cint
end

function ASN1_TYPE_cmp(a, b)
    @ccall libwebsockets.ASN1_TYPE_cmp(a::Ptr{ASN1_TYPE}, b::Ptr{ASN1_TYPE})::Cint
end

function ASN1_TYPE_pack_sequence(it, s, t)
    @ccall libwebsockets.ASN1_TYPE_pack_sequence(it::Ptr{ASN1_ITEM}, s::Ptr{Cvoid}, t::Ptr{Ptr{ASN1_TYPE}})::Ptr{ASN1_TYPE}
end

function ASN1_TYPE_unpack_sequence(it, t)
    @ccall libwebsockets.ASN1_TYPE_unpack_sequence(it::Ptr{ASN1_ITEM}, t::Ptr{ASN1_TYPE})::Ptr{Cvoid}
end

function ASN1_OBJECT_new()
    @ccall libwebsockets.ASN1_OBJECT_new()::Ptr{ASN1_OBJECT}
end

function ASN1_OBJECT_free(a)
    @ccall libwebsockets.ASN1_OBJECT_free(a::Ptr{ASN1_OBJECT})::Cvoid
end

function d2i_ASN1_OBJECT(a, in, len)
    @ccall libwebsockets.d2i_ASN1_OBJECT(a::Ptr{Ptr{ASN1_OBJECT}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_OBJECT}
end

function i2d_ASN1_OBJECT(a, out)
    @ccall libwebsockets.i2d_ASN1_OBJECT(a::Ptr{ASN1_OBJECT}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_OBJECT_it()
    @ccall libwebsockets.ASN1_OBJECT_it()::Ptr{ASN1_ITEM}
end

function ASN1_STRING_new()
    @ccall libwebsockets.ASN1_STRING_new()::Ptr{ASN1_STRING}
end

function ASN1_STRING_free(a)
    @ccall libwebsockets.ASN1_STRING_free(a::Ptr{ASN1_STRING})::Cvoid
end

function ASN1_STRING_clear_free(a)
    @ccall libwebsockets.ASN1_STRING_clear_free(a::Ptr{ASN1_STRING})::Cvoid
end

function ASN1_STRING_copy(dst, str)
    @ccall libwebsockets.ASN1_STRING_copy(dst::Ptr{ASN1_STRING}, str::Ptr{ASN1_STRING})::Cint
end

function ASN1_STRING_dup(a)
    @ccall libwebsockets.ASN1_STRING_dup(a::Ptr{ASN1_STRING})::Ptr{ASN1_STRING}
end

function ASN1_STRING_type_new(type)
    @ccall libwebsockets.ASN1_STRING_type_new(type::Cint)::Ptr{ASN1_STRING}
end

function ASN1_STRING_cmp(a, b)
    @ccall libwebsockets.ASN1_STRING_cmp(a::Ptr{ASN1_STRING}, b::Ptr{ASN1_STRING})::Cint
end

function ASN1_STRING_set(str, data, len)
    @ccall libwebsockets.ASN1_STRING_set(str::Ptr{ASN1_STRING}, data::Ptr{Cvoid}, len::Cint)::Cint
end

function ASN1_STRING_set0(str, data, len)
    @ccall libwebsockets.ASN1_STRING_set0(str::Ptr{ASN1_STRING}, data::Ptr{Cvoid}, len::Cint)::Cvoid
end

function ASN1_STRING_length(x)
    @ccall libwebsockets.ASN1_STRING_length(x::Ptr{ASN1_STRING})::Cint
end

function ASN1_STRING_length_set(x, n)
    @ccall libwebsockets.ASN1_STRING_length_set(x::Ptr{ASN1_STRING}, n::Cint)::Cvoid
end

function ASN1_STRING_type(x)
    @ccall libwebsockets.ASN1_STRING_type(x::Ptr{ASN1_STRING})::Cint
end

function ASN1_STRING_data(x)
    @ccall libwebsockets.ASN1_STRING_data(x::Ptr{ASN1_STRING})::Ptr{Cuchar}
end

function ASN1_STRING_get0_data(x)
    @ccall libwebsockets.ASN1_STRING_get0_data(x::Ptr{ASN1_STRING})::Ptr{Cuchar}
end

function ASN1_BIT_STRING_new()
    @ccall libwebsockets.ASN1_BIT_STRING_new()::Ptr{ASN1_BIT_STRING}
end

function ASN1_BIT_STRING_free(a)
    @ccall libwebsockets.ASN1_BIT_STRING_free(a::Ptr{ASN1_BIT_STRING})::Cvoid
end

function d2i_ASN1_BIT_STRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_BIT_STRING(a::Ptr{Ptr{ASN1_BIT_STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_BIT_STRING}
end

function i2d_ASN1_BIT_STRING(a, out)
    @ccall libwebsockets.i2d_ASN1_BIT_STRING(a::Ptr{ASN1_BIT_STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_BIT_STRING_it()
    @ccall libwebsockets.ASN1_BIT_STRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_BIT_STRING_set(a, d, length)
    @ccall libwebsockets.ASN1_BIT_STRING_set(a::Ptr{ASN1_BIT_STRING}, d::Ptr{Cuchar}, length::Cint)::Cint
end

function ASN1_BIT_STRING_set_bit(a, n, value)
    @ccall libwebsockets.ASN1_BIT_STRING_set_bit(a::Ptr{ASN1_BIT_STRING}, n::Cint, value::Cint)::Cint
end

function ASN1_BIT_STRING_get_bit(a, n)
    @ccall libwebsockets.ASN1_BIT_STRING_get_bit(a::Ptr{ASN1_BIT_STRING}, n::Cint)::Cint
end

function ASN1_BIT_STRING_check(a, flags, flags_len)
    @ccall libwebsockets.ASN1_BIT_STRING_check(a::Ptr{ASN1_BIT_STRING}, flags::Ptr{Cuchar}, flags_len::Cint)::Cint
end

function ASN1_BIT_STRING_name_print(out, bs, tbl, indent)
    @ccall libwebsockets.ASN1_BIT_STRING_name_print(out::Ptr{BIO}, bs::Ptr{ASN1_BIT_STRING}, tbl::Ptr{BIT_STRING_BITNAME}, indent::Cint)::Cint
end

function ASN1_BIT_STRING_num_asc(name, tbl)
    @ccall libwebsockets.ASN1_BIT_STRING_num_asc(name::Ptr{Cchar}, tbl::Ptr{BIT_STRING_BITNAME})::Cint
end

function ASN1_BIT_STRING_set_asc(bs, name, value, tbl)
    @ccall libwebsockets.ASN1_BIT_STRING_set_asc(bs::Ptr{ASN1_BIT_STRING}, name::Ptr{Cchar}, value::Cint, tbl::Ptr{BIT_STRING_BITNAME})::Cint
end

function ASN1_INTEGER_new()
    @ccall libwebsockets.ASN1_INTEGER_new()::Ptr{ASN1_INTEGER}
end

function ASN1_INTEGER_free(a)
    @ccall libwebsockets.ASN1_INTEGER_free(a::Ptr{ASN1_INTEGER})::Cvoid
end

function d2i_ASN1_INTEGER(a, in, len)
    @ccall libwebsockets.d2i_ASN1_INTEGER(a::Ptr{Ptr{ASN1_INTEGER}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_INTEGER}
end

function i2d_ASN1_INTEGER(a, out)
    @ccall libwebsockets.i2d_ASN1_INTEGER(a::Ptr{ASN1_INTEGER}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_INTEGER_it()
    @ccall libwebsockets.ASN1_INTEGER_it()::Ptr{ASN1_ITEM}
end

function d2i_ASN1_UINTEGER(a, pp, length)
    @ccall libwebsockets.d2i_ASN1_UINTEGER(a::Ptr{Ptr{ASN1_INTEGER}}, pp::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{ASN1_INTEGER}
end

function ASN1_INTEGER_dup(a)
    @ccall libwebsockets.ASN1_INTEGER_dup(a::Ptr{ASN1_INTEGER})::Ptr{ASN1_INTEGER}
end

function ASN1_INTEGER_cmp(x, y)
    @ccall libwebsockets.ASN1_INTEGER_cmp(x::Ptr{ASN1_INTEGER}, y::Ptr{ASN1_INTEGER})::Cint
end

function ASN1_ENUMERATED_new()
    @ccall libwebsockets.ASN1_ENUMERATED_new()::Ptr{ASN1_ENUMERATED}
end

function ASN1_ENUMERATED_free(a)
    @ccall libwebsockets.ASN1_ENUMERATED_free(a::Ptr{ASN1_ENUMERATED})::Cvoid
end

function d2i_ASN1_ENUMERATED(a, in, len)
    @ccall libwebsockets.d2i_ASN1_ENUMERATED(a::Ptr{Ptr{ASN1_ENUMERATED}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_ENUMERATED}
end

function i2d_ASN1_ENUMERATED(a, out)
    @ccall libwebsockets.i2d_ASN1_ENUMERATED(a::Ptr{ASN1_ENUMERATED}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_ENUMERATED_it()
    @ccall libwebsockets.ASN1_ENUMERATED_it()::Ptr{ASN1_ITEM}
end

function ASN1_UTCTIME_check(a)
    @ccall libwebsockets.ASN1_UTCTIME_check(a::Ptr{ASN1_UTCTIME})::Cint
end

function ASN1_UTCTIME_set(s, t)
    @ccall libwebsockets.ASN1_UTCTIME_set(s::Ptr{ASN1_UTCTIME}, t::time_t)::Ptr{ASN1_UTCTIME}
end

function ASN1_UTCTIME_adj(s, t, offset_day, offset_sec)
    @ccall libwebsockets.ASN1_UTCTIME_adj(s::Ptr{ASN1_UTCTIME}, t::time_t, offset_day::Cint, offset_sec::Clong)::Ptr{ASN1_UTCTIME}
end

function ASN1_UTCTIME_set_string(s, str)
    @ccall libwebsockets.ASN1_UTCTIME_set_string(s::Ptr{ASN1_UTCTIME}, str::Ptr{Cchar})::Cint
end

function ASN1_UTCTIME_cmp_time_t(s, t)
    @ccall libwebsockets.ASN1_UTCTIME_cmp_time_t(s::Ptr{ASN1_UTCTIME}, t::time_t)::Cint
end

function ASN1_GENERALIZEDTIME_check(a)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_check(a::Ptr{ASN1_GENERALIZEDTIME})::Cint
end

function ASN1_GENERALIZEDTIME_set(s, t)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_set(s::Ptr{ASN1_GENERALIZEDTIME}, t::time_t)::Ptr{ASN1_GENERALIZEDTIME}
end

function ASN1_GENERALIZEDTIME_adj(s, t, offset_day, offset_sec)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_adj(s::Ptr{ASN1_GENERALIZEDTIME}, t::time_t, offset_day::Cint, offset_sec::Clong)::Ptr{ASN1_GENERALIZEDTIME}
end

function ASN1_GENERALIZEDTIME_set_string(s, str)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_set_string(s::Ptr{ASN1_GENERALIZEDTIME}, str::Ptr{Cchar})::Cint
end

function ASN1_TIME_diff(pday, psec, from, to)
    @ccall libwebsockets.ASN1_TIME_diff(pday::Ptr{Cint}, psec::Ptr{Cint}, from::Ptr{ASN1_TIME}, to::Ptr{ASN1_TIME})::Cint
end

function ASN1_OCTET_STRING_new()
    @ccall libwebsockets.ASN1_OCTET_STRING_new()::Ptr{ASN1_OCTET_STRING}
end

function ASN1_OCTET_STRING_free(a)
    @ccall libwebsockets.ASN1_OCTET_STRING_free(a::Ptr{ASN1_OCTET_STRING})::Cvoid
end

function d2i_ASN1_OCTET_STRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_OCTET_STRING(a::Ptr{Ptr{ASN1_OCTET_STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_OCTET_STRING}
end

function i2d_ASN1_OCTET_STRING(a, out)
    @ccall libwebsockets.i2d_ASN1_OCTET_STRING(a::Ptr{ASN1_OCTET_STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_OCTET_STRING_it()
    @ccall libwebsockets.ASN1_OCTET_STRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_OCTET_STRING_dup(a)
    @ccall libwebsockets.ASN1_OCTET_STRING_dup(a::Ptr{ASN1_OCTET_STRING})::Ptr{ASN1_OCTET_STRING}
end

function ASN1_OCTET_STRING_cmp(a, b)
    @ccall libwebsockets.ASN1_OCTET_STRING_cmp(a::Ptr{ASN1_OCTET_STRING}, b::Ptr{ASN1_OCTET_STRING})::Cint
end

function ASN1_OCTET_STRING_set(str, data, len)
    @ccall libwebsockets.ASN1_OCTET_STRING_set(str::Ptr{ASN1_OCTET_STRING}, data::Ptr{Cuchar}, len::Cint)::Cint
end

function ASN1_VISIBLESTRING_new()
    @ccall libwebsockets.ASN1_VISIBLESTRING_new()::Ptr{ASN1_VISIBLESTRING}
end

function ASN1_VISIBLESTRING_free(a)
    @ccall libwebsockets.ASN1_VISIBLESTRING_free(a::Ptr{ASN1_VISIBLESTRING})::Cvoid
end

function d2i_ASN1_VISIBLESTRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_VISIBLESTRING(a::Ptr{Ptr{ASN1_VISIBLESTRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_VISIBLESTRING}
end

function i2d_ASN1_VISIBLESTRING(a, out)
    @ccall libwebsockets.i2d_ASN1_VISIBLESTRING(a::Ptr{ASN1_VISIBLESTRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_VISIBLESTRING_it()
    @ccall libwebsockets.ASN1_VISIBLESTRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_UNIVERSALSTRING_new()
    @ccall libwebsockets.ASN1_UNIVERSALSTRING_new()::Ptr{ASN1_UNIVERSALSTRING}
end

function ASN1_UNIVERSALSTRING_free(a)
    @ccall libwebsockets.ASN1_UNIVERSALSTRING_free(a::Ptr{ASN1_UNIVERSALSTRING})::Cvoid
end

function d2i_ASN1_UNIVERSALSTRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_UNIVERSALSTRING(a::Ptr{Ptr{ASN1_UNIVERSALSTRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_UNIVERSALSTRING}
end

function i2d_ASN1_UNIVERSALSTRING(a, out)
    @ccall libwebsockets.i2d_ASN1_UNIVERSALSTRING(a::Ptr{ASN1_UNIVERSALSTRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_UNIVERSALSTRING_it()
    @ccall libwebsockets.ASN1_UNIVERSALSTRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_UTF8STRING_new()
    @ccall libwebsockets.ASN1_UTF8STRING_new()::Ptr{ASN1_UTF8STRING}
end

function ASN1_UTF8STRING_free(a)
    @ccall libwebsockets.ASN1_UTF8STRING_free(a::Ptr{ASN1_UTF8STRING})::Cvoid
end

function d2i_ASN1_UTF8STRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_UTF8STRING(a::Ptr{Ptr{ASN1_UTF8STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_UTF8STRING}
end

function i2d_ASN1_UTF8STRING(a, out)
    @ccall libwebsockets.i2d_ASN1_UTF8STRING(a::Ptr{ASN1_UTF8STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_UTF8STRING_it()
    @ccall libwebsockets.ASN1_UTF8STRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_NULL_new()
    @ccall libwebsockets.ASN1_NULL_new()::Ptr{ASN1_NULL}
end

function ASN1_NULL_free(a)
    @ccall libwebsockets.ASN1_NULL_free(a::Ptr{ASN1_NULL})::Cvoid
end

function d2i_ASN1_NULL(a, in, len)
    @ccall libwebsockets.d2i_ASN1_NULL(a::Ptr{Ptr{ASN1_NULL}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_NULL}
end

function i2d_ASN1_NULL(a, out)
    @ccall libwebsockets.i2d_ASN1_NULL(a::Ptr{ASN1_NULL}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_NULL_it()
    @ccall libwebsockets.ASN1_NULL_it()::Ptr{ASN1_ITEM}
end

function ASN1_BMPSTRING_new()
    @ccall libwebsockets.ASN1_BMPSTRING_new()::Ptr{ASN1_BMPSTRING}
end

function ASN1_BMPSTRING_free(a)
    @ccall libwebsockets.ASN1_BMPSTRING_free(a::Ptr{ASN1_BMPSTRING})::Cvoid
end

function d2i_ASN1_BMPSTRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_BMPSTRING(a::Ptr{Ptr{ASN1_BMPSTRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_BMPSTRING}
end

function i2d_ASN1_BMPSTRING(a, out)
    @ccall libwebsockets.i2d_ASN1_BMPSTRING(a::Ptr{ASN1_BMPSTRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_BMPSTRING_it()
    @ccall libwebsockets.ASN1_BMPSTRING_it()::Ptr{ASN1_ITEM}
end

function UTF8_getc(str, len, val)
    @ccall libwebsockets.UTF8_getc(str::Ptr{Cuchar}, len::Cint, val::Ptr{Culong})::Cint
end

function UTF8_putc(str, len, value)
    @ccall libwebsockets.UTF8_putc(str::Ptr{Cuchar}, len::Cint, value::Culong)::Cint
end

function ASN1_PRINTABLE_new()
    @ccall libwebsockets.ASN1_PRINTABLE_new()::Ptr{ASN1_STRING}
end

function ASN1_PRINTABLE_free(a)
    @ccall libwebsockets.ASN1_PRINTABLE_free(a::Ptr{ASN1_STRING})::Cvoid
end

function d2i_ASN1_PRINTABLE(a, in, len)
    @ccall libwebsockets.d2i_ASN1_PRINTABLE(a::Ptr{Ptr{ASN1_STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_STRING}
end

function i2d_ASN1_PRINTABLE(a, out)
    @ccall libwebsockets.i2d_ASN1_PRINTABLE(a::Ptr{ASN1_STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_PRINTABLE_it()
    @ccall libwebsockets.ASN1_PRINTABLE_it()::Ptr{ASN1_ITEM}
end

function DIRECTORYSTRING_new()
    @ccall libwebsockets.DIRECTORYSTRING_new()::Ptr{ASN1_STRING}
end

function DIRECTORYSTRING_free(a)
    @ccall libwebsockets.DIRECTORYSTRING_free(a::Ptr{ASN1_STRING})::Cvoid
end

function d2i_DIRECTORYSTRING(a, in, len)
    @ccall libwebsockets.d2i_DIRECTORYSTRING(a::Ptr{Ptr{ASN1_STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_STRING}
end

function i2d_DIRECTORYSTRING(a, out)
    @ccall libwebsockets.i2d_DIRECTORYSTRING(a::Ptr{ASN1_STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function DIRECTORYSTRING_it()
    @ccall libwebsockets.DIRECTORYSTRING_it()::Ptr{ASN1_ITEM}
end

function DISPLAYTEXT_new()
    @ccall libwebsockets.DISPLAYTEXT_new()::Ptr{ASN1_STRING}
end

function DISPLAYTEXT_free(a)
    @ccall libwebsockets.DISPLAYTEXT_free(a::Ptr{ASN1_STRING})::Cvoid
end

function d2i_DISPLAYTEXT(a, in, len)
    @ccall libwebsockets.d2i_DISPLAYTEXT(a::Ptr{Ptr{ASN1_STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_STRING}
end

function i2d_DISPLAYTEXT(a, out)
    @ccall libwebsockets.i2d_DISPLAYTEXT(a::Ptr{ASN1_STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function DISPLAYTEXT_it()
    @ccall libwebsockets.DISPLAYTEXT_it()::Ptr{ASN1_ITEM}
end

function ASN1_PRINTABLESTRING_new()
    @ccall libwebsockets.ASN1_PRINTABLESTRING_new()::Ptr{ASN1_PRINTABLESTRING}
end

function ASN1_PRINTABLESTRING_free(a)
    @ccall libwebsockets.ASN1_PRINTABLESTRING_free(a::Ptr{ASN1_PRINTABLESTRING})::Cvoid
end

function d2i_ASN1_PRINTABLESTRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_PRINTABLESTRING(a::Ptr{Ptr{ASN1_PRINTABLESTRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_PRINTABLESTRING}
end

function i2d_ASN1_PRINTABLESTRING(a, out)
    @ccall libwebsockets.i2d_ASN1_PRINTABLESTRING(a::Ptr{ASN1_PRINTABLESTRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_PRINTABLESTRING_it()
    @ccall libwebsockets.ASN1_PRINTABLESTRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_T61STRING_new()
    @ccall libwebsockets.ASN1_T61STRING_new()::Ptr{ASN1_T61STRING}
end

function ASN1_T61STRING_free(a)
    @ccall libwebsockets.ASN1_T61STRING_free(a::Ptr{ASN1_T61STRING})::Cvoid
end

function d2i_ASN1_T61STRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_T61STRING(a::Ptr{Ptr{ASN1_T61STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_T61STRING}
end

function i2d_ASN1_T61STRING(a, out)
    @ccall libwebsockets.i2d_ASN1_T61STRING(a::Ptr{ASN1_T61STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_T61STRING_it()
    @ccall libwebsockets.ASN1_T61STRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_IA5STRING_new()
    @ccall libwebsockets.ASN1_IA5STRING_new()::Ptr{ASN1_IA5STRING}
end

function ASN1_IA5STRING_free(a)
    @ccall libwebsockets.ASN1_IA5STRING_free(a::Ptr{ASN1_IA5STRING})::Cvoid
end

function d2i_ASN1_IA5STRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_IA5STRING(a::Ptr{Ptr{ASN1_IA5STRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_IA5STRING}
end

function i2d_ASN1_IA5STRING(a, out)
    @ccall libwebsockets.i2d_ASN1_IA5STRING(a::Ptr{ASN1_IA5STRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_IA5STRING_it()
    @ccall libwebsockets.ASN1_IA5STRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_GENERALSTRING_new()
    @ccall libwebsockets.ASN1_GENERALSTRING_new()::Ptr{ASN1_GENERALSTRING}
end

function ASN1_GENERALSTRING_free(a)
    @ccall libwebsockets.ASN1_GENERALSTRING_free(a::Ptr{ASN1_GENERALSTRING})::Cvoid
end

function d2i_ASN1_GENERALSTRING(a, in, len)
    @ccall libwebsockets.d2i_ASN1_GENERALSTRING(a::Ptr{Ptr{ASN1_GENERALSTRING}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_GENERALSTRING}
end

function i2d_ASN1_GENERALSTRING(a, out)
    @ccall libwebsockets.i2d_ASN1_GENERALSTRING(a::Ptr{ASN1_GENERALSTRING}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_GENERALSTRING_it()
    @ccall libwebsockets.ASN1_GENERALSTRING_it()::Ptr{ASN1_ITEM}
end

function ASN1_UTCTIME_new()
    @ccall libwebsockets.ASN1_UTCTIME_new()::Ptr{ASN1_UTCTIME}
end

function ASN1_UTCTIME_free(a)
    @ccall libwebsockets.ASN1_UTCTIME_free(a::Ptr{ASN1_UTCTIME})::Cvoid
end

function d2i_ASN1_UTCTIME(a, in, len)
    @ccall libwebsockets.d2i_ASN1_UTCTIME(a::Ptr{Ptr{ASN1_UTCTIME}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_UTCTIME}
end

function i2d_ASN1_UTCTIME(a, out)
    @ccall libwebsockets.i2d_ASN1_UTCTIME(a::Ptr{ASN1_UTCTIME}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_UTCTIME_it()
    @ccall libwebsockets.ASN1_UTCTIME_it()::Ptr{ASN1_ITEM}
end

function ASN1_GENERALIZEDTIME_new()
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_new()::Ptr{ASN1_GENERALIZEDTIME}
end

function ASN1_GENERALIZEDTIME_free(a)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_free(a::Ptr{ASN1_GENERALIZEDTIME})::Cvoid
end

function d2i_ASN1_GENERALIZEDTIME(a, in, len)
    @ccall libwebsockets.d2i_ASN1_GENERALIZEDTIME(a::Ptr{Ptr{ASN1_GENERALIZEDTIME}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_GENERALIZEDTIME}
end

function i2d_ASN1_GENERALIZEDTIME(a, out)
    @ccall libwebsockets.i2d_ASN1_GENERALIZEDTIME(a::Ptr{ASN1_GENERALIZEDTIME}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_GENERALIZEDTIME_it()
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_it()::Ptr{ASN1_ITEM}
end

function ASN1_TIME_new()
    @ccall libwebsockets.ASN1_TIME_new()::Ptr{ASN1_TIME}
end

function ASN1_TIME_free(a)
    @ccall libwebsockets.ASN1_TIME_free(a::Ptr{ASN1_TIME})::Cvoid
end

function d2i_ASN1_TIME(a, in, len)
    @ccall libwebsockets.d2i_ASN1_TIME(a::Ptr{Ptr{ASN1_TIME}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ASN1_TIME}
end

function i2d_ASN1_TIME(a, out)
    @ccall libwebsockets.i2d_ASN1_TIME(a::Ptr{ASN1_TIME}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_TIME_it()
    @ccall libwebsockets.ASN1_TIME_it()::Ptr{ASN1_ITEM}
end

function ASN1_TIME_dup(a)
    @ccall libwebsockets.ASN1_TIME_dup(a::Ptr{ASN1_TIME})::Ptr{ASN1_TIME}
end

function ASN1_UTCTIME_dup(a)
    @ccall libwebsockets.ASN1_UTCTIME_dup(a::Ptr{ASN1_UTCTIME})::Ptr{ASN1_UTCTIME}
end

function ASN1_GENERALIZEDTIME_dup(a)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_dup(a::Ptr{ASN1_GENERALIZEDTIME})::Ptr{ASN1_GENERALIZEDTIME}
end

function ASN1_OCTET_STRING_NDEF_it()
    @ccall libwebsockets.ASN1_OCTET_STRING_NDEF_it()::Ptr{ASN1_ITEM}
end

function ASN1_TIME_set(s, t)
    @ccall libwebsockets.ASN1_TIME_set(s::Ptr{ASN1_TIME}, t::time_t)::Ptr{ASN1_TIME}
end

function ASN1_TIME_adj(s, t, offset_day, offset_sec)
    @ccall libwebsockets.ASN1_TIME_adj(s::Ptr{ASN1_TIME}, t::time_t, offset_day::Cint, offset_sec::Clong)::Ptr{ASN1_TIME}
end

function ASN1_TIME_check(t)
    @ccall libwebsockets.ASN1_TIME_check(t::Ptr{ASN1_TIME})::Cint
end

function ASN1_TIME_to_generalizedtime(t, out)
    @ccall libwebsockets.ASN1_TIME_to_generalizedtime(t::Ptr{ASN1_TIME}, out::Ptr{Ptr{ASN1_GENERALIZEDTIME}})::Ptr{ASN1_GENERALIZEDTIME}
end

function ASN1_TIME_set_string(s, str)
    @ccall libwebsockets.ASN1_TIME_set_string(s::Ptr{ASN1_TIME}, str::Ptr{Cchar})::Cint
end

function ASN1_TIME_set_string_X509(s, str)
    @ccall libwebsockets.ASN1_TIME_set_string_X509(s::Ptr{ASN1_TIME}, str::Ptr{Cchar})::Cint
end

function ASN1_TIME_to_tm(s, tm)
    @ccall libwebsockets.ASN1_TIME_to_tm(s::Ptr{ASN1_TIME}, tm::Ptr{Cvoid})::Cint
end

function ASN1_TIME_normalize(s)
    @ccall libwebsockets.ASN1_TIME_normalize(s::Ptr{ASN1_TIME})::Cint
end

function ASN1_TIME_cmp_time_t(s, t)
    @ccall libwebsockets.ASN1_TIME_cmp_time_t(s::Ptr{ASN1_TIME}, t::time_t)::Cint
end

function ASN1_TIME_compare(a, b)
    @ccall libwebsockets.ASN1_TIME_compare(a::Ptr{ASN1_TIME}, b::Ptr{ASN1_TIME})::Cint
end

function i2a_ASN1_INTEGER(bp, a)
    @ccall libwebsockets.i2a_ASN1_INTEGER(bp::Ptr{BIO}, a::Ptr{ASN1_INTEGER})::Cint
end

function a2i_ASN1_INTEGER(bp, bs, buf, size)
    @ccall libwebsockets.a2i_ASN1_INTEGER(bp::Ptr{BIO}, bs::Ptr{ASN1_INTEGER}, buf::Ptr{Cchar}, size::Cint)::Cint
end

function i2a_ASN1_ENUMERATED(bp, a)
    @ccall libwebsockets.i2a_ASN1_ENUMERATED(bp::Ptr{BIO}, a::Ptr{ASN1_ENUMERATED})::Cint
end

function a2i_ASN1_ENUMERATED(bp, bs, buf, size)
    @ccall libwebsockets.a2i_ASN1_ENUMERATED(bp::Ptr{BIO}, bs::Ptr{ASN1_ENUMERATED}, buf::Ptr{Cchar}, size::Cint)::Cint
end

function i2a_ASN1_OBJECT(bp, a)
    @ccall libwebsockets.i2a_ASN1_OBJECT(bp::Ptr{BIO}, a::Ptr{ASN1_OBJECT})::Cint
end

function a2i_ASN1_STRING(bp, bs, buf, size)
    @ccall libwebsockets.a2i_ASN1_STRING(bp::Ptr{BIO}, bs::Ptr{ASN1_STRING}, buf::Ptr{Cchar}, size::Cint)::Cint
end

function i2a_ASN1_STRING(bp, a, type)
    @ccall libwebsockets.i2a_ASN1_STRING(bp::Ptr{BIO}, a::Ptr{ASN1_STRING}, type::Cint)::Cint
end

function i2t_ASN1_OBJECT(buf, buf_len, a)
    @ccall libwebsockets.i2t_ASN1_OBJECT(buf::Ptr{Cchar}, buf_len::Cint, a::Ptr{ASN1_OBJECT})::Cint
end

function a2d_ASN1_OBJECT(out, olen, buf, num)
    @ccall libwebsockets.a2d_ASN1_OBJECT(out::Ptr{Cuchar}, olen::Cint, buf::Ptr{Cchar}, num::Cint)::Cint
end

function ASN1_OBJECT_create(nid, data, len, sn, ln)
    @ccall libwebsockets.ASN1_OBJECT_create(nid::Cint, data::Ptr{Cuchar}, len::Cint, sn::Ptr{Cchar}, ln::Ptr{Cchar})::Ptr{ASN1_OBJECT}
end

function ASN1_INTEGER_get_int64(pr, a)
    @ccall libwebsockets.ASN1_INTEGER_get_int64(pr::Ptr{Int64}, a::Ptr{ASN1_INTEGER})::Cint
end

function ASN1_INTEGER_set_int64(a, r)
    @ccall libwebsockets.ASN1_INTEGER_set_int64(a::Ptr{ASN1_INTEGER}, r::Int64)::Cint
end

function ASN1_INTEGER_get_uint64(pr, a)
    @ccall libwebsockets.ASN1_INTEGER_get_uint64(pr::Ptr{UInt64}, a::Ptr{ASN1_INTEGER})::Cint
end

function ASN1_INTEGER_set_uint64(a, r)
    @ccall libwebsockets.ASN1_INTEGER_set_uint64(a::Ptr{ASN1_INTEGER}, r::UInt64)::Cint
end

function ASN1_INTEGER_set(a, v)
    @ccall libwebsockets.ASN1_INTEGER_set(a::Ptr{ASN1_INTEGER}, v::Clong)::Cint
end

function ASN1_INTEGER_get(a)
    @ccall libwebsockets.ASN1_INTEGER_get(a::Ptr{ASN1_INTEGER})::Clong
end

function BN_to_ASN1_INTEGER(bn, ai)
    @ccall libwebsockets.BN_to_ASN1_INTEGER(bn::Ptr{BIGNUM}, ai::Ptr{ASN1_INTEGER})::Ptr{ASN1_INTEGER}
end

function ASN1_INTEGER_to_BN(ai, bn)
    @ccall libwebsockets.ASN1_INTEGER_to_BN(ai::Ptr{ASN1_INTEGER}, bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function ASN1_ENUMERATED_get_int64(pr, a)
    @ccall libwebsockets.ASN1_ENUMERATED_get_int64(pr::Ptr{Int64}, a::Ptr{ASN1_ENUMERATED})::Cint
end

function ASN1_ENUMERATED_set_int64(a, r)
    @ccall libwebsockets.ASN1_ENUMERATED_set_int64(a::Ptr{ASN1_ENUMERATED}, r::Int64)::Cint
end

function ASN1_ENUMERATED_set(a, v)
    @ccall libwebsockets.ASN1_ENUMERATED_set(a::Ptr{ASN1_ENUMERATED}, v::Clong)::Cint
end

function ASN1_ENUMERATED_get(a)
    @ccall libwebsockets.ASN1_ENUMERATED_get(a::Ptr{ASN1_ENUMERATED})::Clong
end

function BN_to_ASN1_ENUMERATED(bn, ai)
    @ccall libwebsockets.BN_to_ASN1_ENUMERATED(bn::Ptr{BIGNUM}, ai::Ptr{ASN1_ENUMERATED})::Ptr{ASN1_ENUMERATED}
end

function ASN1_ENUMERATED_to_BN(ai, bn)
    @ccall libwebsockets.ASN1_ENUMERATED_to_BN(ai::Ptr{ASN1_ENUMERATED}, bn::Ptr{BIGNUM})::Ptr{BIGNUM}
end

function ASN1_PRINTABLE_type(s, max)
    @ccall libwebsockets.ASN1_PRINTABLE_type(s::Ptr{Cuchar}, max::Cint)::Cint
end

function ASN1_tag2bit(tag)
    @ccall libwebsockets.ASN1_tag2bit(tag::Cint)::Culong
end

function ASN1_get_object(pp, plength, ptag, pclass, omax)
    @ccall libwebsockets.ASN1_get_object(pp::Ptr{Ptr{Cuchar}}, plength::Ptr{Clong}, ptag::Ptr{Cint}, pclass::Ptr{Cint}, omax::Clong)::Cint
end

function ASN1_check_infinite_end(p, len)
    @ccall libwebsockets.ASN1_check_infinite_end(p::Ptr{Ptr{Cuchar}}, len::Clong)::Cint
end

function ASN1_const_check_infinite_end(p, len)
    @ccall libwebsockets.ASN1_const_check_infinite_end(p::Ptr{Ptr{Cuchar}}, len::Clong)::Cint
end

function ASN1_put_object(pp, constructed, length, tag, xclass)
    @ccall libwebsockets.ASN1_put_object(pp::Ptr{Ptr{Cuchar}}, constructed::Cint, length::Cint, tag::Cint, xclass::Cint)::Cvoid
end

function ASN1_put_eoc(pp)
    @ccall libwebsockets.ASN1_put_eoc(pp::Ptr{Ptr{Cuchar}})::Cint
end

function ASN1_object_size(constructed, length, tag)
    @ccall libwebsockets.ASN1_object_size(constructed::Cint, length::Cint, tag::Cint)::Cint
end

function ASN1_item_dup(it, x)
    @ccall libwebsockets.ASN1_item_dup(it::Ptr{ASN1_ITEM}, x::Ptr{Cvoid})::Ptr{Cvoid}
end

function ASN1_item_sign_ex(it, algor1, algor2, signature, data, id, pkey, md, libctx, propq)
    @ccall libwebsockets.ASN1_item_sign_ex(it::Ptr{ASN1_ITEM}, algor1::Ptr{X509_ALGOR}, algor2::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cvoid}, id::Ptr{ASN1_OCTET_STRING}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function ASN1_item_verify_ex(it, alg, signature, data, id, pkey, libctx, propq)
    @ccall libwebsockets.ASN1_item_verify_ex(it::Ptr{ASN1_ITEM}, alg::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cvoid}, id::Ptr{ASN1_OCTET_STRING}, pkey::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function ASN1_item_d2i_fp_ex(it, in, x, libctx, propq)
    @ccall libwebsockets.ASN1_item_d2i_fp_ex(it::Ptr{ASN1_ITEM}, in::Ptr{Libc.FILE}, x::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{Cvoid}
end

function ASN1_item_d2i_fp(it, in, x)
    @ccall libwebsockets.ASN1_item_d2i_fp(it::Ptr{ASN1_ITEM}, in::Ptr{Libc.FILE}, x::Ptr{Cvoid})::Ptr{Cvoid}
end

function ASN1_item_i2d_fp(it, out, x)
    @ccall libwebsockets.ASN1_item_i2d_fp(it::Ptr{ASN1_ITEM}, out::Ptr{Libc.FILE}, x::Ptr{Cvoid})::Cint
end

function ASN1_STRING_print_ex_fp(fp, str, flags)
    @ccall libwebsockets.ASN1_STRING_print_ex_fp(fp::Ptr{Libc.FILE}, str::Ptr{ASN1_STRING}, flags::Culong)::Cint
end

function ASN1_STRING_to_UTF8(out, in)
    @ccall libwebsockets.ASN1_STRING_to_UTF8(out::Ptr{Ptr{Cuchar}}, in::Ptr{ASN1_STRING})::Cint
end

function ASN1_item_d2i_bio_ex(it, in, pval, libctx, propq)
    @ccall libwebsockets.ASN1_item_d2i_bio_ex(it::Ptr{ASN1_ITEM}, in::Ptr{BIO}, pval::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{Cvoid}
end

function ASN1_item_d2i_bio(it, in, pval)
    @ccall libwebsockets.ASN1_item_d2i_bio(it::Ptr{ASN1_ITEM}, in::Ptr{BIO}, pval::Ptr{Cvoid})::Ptr{Cvoid}
end

function ASN1_item_i2d_bio(it, out, x)
    @ccall libwebsockets.ASN1_item_i2d_bio(it::Ptr{ASN1_ITEM}, out::Ptr{BIO}, x::Ptr{Cvoid})::Cint
end

function ASN1_item_i2d_mem_bio(it, val)
    @ccall libwebsockets.ASN1_item_i2d_mem_bio(it::Ptr{ASN1_ITEM}, val::Ptr{ASN1_VALUE})::Ptr{BIO}
end

function ASN1_UTCTIME_print(fp, a)
    @ccall libwebsockets.ASN1_UTCTIME_print(fp::Ptr{BIO}, a::Ptr{ASN1_UTCTIME})::Cint
end

function ASN1_GENERALIZEDTIME_print(fp, a)
    @ccall libwebsockets.ASN1_GENERALIZEDTIME_print(fp::Ptr{BIO}, a::Ptr{ASN1_GENERALIZEDTIME})::Cint
end

function ASN1_TIME_print(bp, tm)
    @ccall libwebsockets.ASN1_TIME_print(bp::Ptr{BIO}, tm::Ptr{ASN1_TIME})::Cint
end

function ASN1_TIME_print_ex(bp, tm, flags)
    @ccall libwebsockets.ASN1_TIME_print_ex(bp::Ptr{BIO}, tm::Ptr{ASN1_TIME}, flags::Culong)::Cint
end

function ASN1_STRING_print(bp, v)
    @ccall libwebsockets.ASN1_STRING_print(bp::Ptr{BIO}, v::Ptr{ASN1_STRING})::Cint
end

function ASN1_STRING_print_ex(out, str, flags)
    @ccall libwebsockets.ASN1_STRING_print_ex(out::Ptr{BIO}, str::Ptr{ASN1_STRING}, flags::Culong)::Cint
end

function ASN1_buf_print(bp, buf, buflen, off)
    @ccall libwebsockets.ASN1_buf_print(bp::Ptr{BIO}, buf::Ptr{Cuchar}, buflen::Csize_t, off::Cint)::Cint
end

function ASN1_bn_print(bp, number, num, buf, off)
    @ccall libwebsockets.ASN1_bn_print(bp::Ptr{BIO}, number::Ptr{Cchar}, num::Ptr{BIGNUM}, buf::Ptr{Cuchar}, off::Cint)::Cint
end

function ASN1_parse(bp, pp, len, indent)
    @ccall libwebsockets.ASN1_parse(bp::Ptr{BIO}, pp::Ptr{Cuchar}, len::Clong, indent::Cint)::Cint
end

function ASN1_parse_dump(bp, pp, len, indent, dump)
    @ccall libwebsockets.ASN1_parse_dump(bp::Ptr{BIO}, pp::Ptr{Cuchar}, len::Clong, indent::Cint, dump::Cint)::Cint
end

function ASN1_tag2str(tag)
    @ccall libwebsockets.ASN1_tag2str(tag::Cint)::Ptr{Cchar}
end

function ASN1_UNIVERSALSTRING_to_string(s)
    @ccall libwebsockets.ASN1_UNIVERSALSTRING_to_string(s::Ptr{ASN1_UNIVERSALSTRING})::Cint
end

function ASN1_TYPE_set_octetstring(a, data, len)
    @ccall libwebsockets.ASN1_TYPE_set_octetstring(a::Ptr{ASN1_TYPE}, data::Ptr{Cuchar}, len::Cint)::Cint
end

function ASN1_TYPE_get_octetstring(a, data, max_len)
    @ccall libwebsockets.ASN1_TYPE_get_octetstring(a::Ptr{ASN1_TYPE}, data::Ptr{Cuchar}, max_len::Cint)::Cint
end

function ASN1_TYPE_set_int_octetstring(a, num, data, len)
    @ccall libwebsockets.ASN1_TYPE_set_int_octetstring(a::Ptr{ASN1_TYPE}, num::Clong, data::Ptr{Cuchar}, len::Cint)::Cint
end

function ASN1_TYPE_get_int_octetstring(a, num, data, max_len)
    @ccall libwebsockets.ASN1_TYPE_get_int_octetstring(a::Ptr{ASN1_TYPE}, num::Ptr{Clong}, data::Ptr{Cuchar}, max_len::Cint)::Cint
end

function ASN1_item_unpack(oct, it)
    @ccall libwebsockets.ASN1_item_unpack(oct::Ptr{ASN1_STRING}, it::Ptr{ASN1_ITEM})::Ptr{Cvoid}
end

function ASN1_item_pack(obj, it, oct)
    @ccall libwebsockets.ASN1_item_pack(obj::Ptr{Cvoid}, it::Ptr{ASN1_ITEM}, oct::Ptr{Ptr{ASN1_OCTET_STRING}})::Ptr{ASN1_STRING}
end

function ASN1_STRING_set_default_mask(mask)
    @ccall libwebsockets.ASN1_STRING_set_default_mask(mask::Culong)::Cvoid
end

function ASN1_STRING_set_default_mask_asc(p)
    @ccall libwebsockets.ASN1_STRING_set_default_mask_asc(p::Ptr{Cchar})::Cint
end

function ASN1_STRING_get_default_mask()
    @ccall libwebsockets.ASN1_STRING_get_default_mask()::Culong
end

function ASN1_mbstring_copy(out, in, len, inform, mask)
    @ccall libwebsockets.ASN1_mbstring_copy(out::Ptr{Ptr{ASN1_STRING}}, in::Ptr{Cuchar}, len::Cint, inform::Cint, mask::Culong)::Cint
end

function ASN1_mbstring_ncopy(out, in, len, inform, mask, minsize, maxsize)
    @ccall libwebsockets.ASN1_mbstring_ncopy(out::Ptr{Ptr{ASN1_STRING}}, in::Ptr{Cuchar}, len::Cint, inform::Cint, mask::Culong, minsize::Clong, maxsize::Clong)::Cint
end

function ASN1_STRING_set_by_NID(out, in, inlen, inform, nid)
    @ccall libwebsockets.ASN1_STRING_set_by_NID(out::Ptr{Ptr{ASN1_STRING}}, in::Ptr{Cuchar}, inlen::Cint, inform::Cint, nid::Cint)::Ptr{ASN1_STRING}
end

function ASN1_STRING_TABLE_get(nid)
    @ccall libwebsockets.ASN1_STRING_TABLE_get(nid::Cint)::Ptr{ASN1_STRING_TABLE}
end

function ASN1_STRING_TABLE_add(arg1, arg2, arg3, arg4, arg5)
    @ccall libwebsockets.ASN1_STRING_TABLE_add(arg1::Cint, arg2::Clong, arg3::Clong, arg4::Culong, arg5::Culong)::Cint
end

function ASN1_STRING_TABLE_cleanup()
    @ccall libwebsockets.ASN1_STRING_TABLE_cleanup()::Cvoid
end

function ASN1_item_new_ex(it, libctx, propq)
    @ccall libwebsockets.ASN1_item_new_ex(it::Ptr{ASN1_ITEM}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{ASN1_VALUE}
end

function ASN1_item_d2i_ex(val, in, len, it, libctx, propq)
    @ccall libwebsockets.ASN1_item_d2i_ex(val::Ptr{Ptr{ASN1_VALUE}}, in::Ptr{Ptr{Cuchar}}, len::Clong, it::Ptr{ASN1_ITEM}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{ASN1_VALUE}
end

function ASN1_item_d2i(val, in, len, it)
    @ccall libwebsockets.ASN1_item_d2i(val::Ptr{Ptr{ASN1_VALUE}}, in::Ptr{Ptr{Cuchar}}, len::Clong, it::Ptr{ASN1_ITEM})::Ptr{ASN1_VALUE}
end

function ASN1_item_i2d(val, out, it)
    @ccall libwebsockets.ASN1_item_i2d(val::Ptr{ASN1_VALUE}, out::Ptr{Ptr{Cuchar}}, it::Ptr{ASN1_ITEM})::Cint
end

function ASN1_item_ndef_i2d(val, out, it)
    @ccall libwebsockets.ASN1_item_ndef_i2d(val::Ptr{ASN1_VALUE}, out::Ptr{Ptr{Cuchar}}, it::Ptr{ASN1_ITEM})::Cint
end

function ASN1_add_oid_module()
    @ccall libwebsockets.ASN1_add_oid_module()::Cvoid
end

function ASN1_add_stable_module()
    @ccall libwebsockets.ASN1_add_stable_module()::Cvoid
end

function ASN1_generate_nconf(str, nconf)
    @ccall libwebsockets.ASN1_generate_nconf(str::Ptr{Cchar}, nconf::Ptr{CONF})::Ptr{ASN1_TYPE}
end

function ASN1_generate_v3(str, cnf)
    @ccall libwebsockets.ASN1_generate_v3(str::Ptr{Cchar}, cnf::Ptr{X509V3_CTX})::Ptr{ASN1_TYPE}
end

function ASN1_str2mask(str, pmask)
    @ccall libwebsockets.ASN1_str2mask(str::Ptr{Cchar}, pmask::Ptr{Culong})::Cint
end

function ASN1_item_print(out, ifld, indent, it, pctx)
    @ccall libwebsockets.ASN1_item_print(out::Ptr{BIO}, ifld::Ptr{ASN1_VALUE}, indent::Cint, it::Ptr{ASN1_ITEM}, pctx::Ptr{ASN1_PCTX})::Cint
end

function ASN1_PCTX_new()
    @ccall libwebsockets.ASN1_PCTX_new()::Ptr{ASN1_PCTX}
end

function ASN1_PCTX_free(p)
    @ccall libwebsockets.ASN1_PCTX_free(p::Ptr{ASN1_PCTX})::Cvoid
end

function ASN1_PCTX_get_flags(p)
    @ccall libwebsockets.ASN1_PCTX_get_flags(p::Ptr{ASN1_PCTX})::Culong
end

function ASN1_PCTX_set_flags(p, flags)
    @ccall libwebsockets.ASN1_PCTX_set_flags(p::Ptr{ASN1_PCTX}, flags::Culong)::Cvoid
end

function ASN1_PCTX_get_nm_flags(p)
    @ccall libwebsockets.ASN1_PCTX_get_nm_flags(p::Ptr{ASN1_PCTX})::Culong
end

function ASN1_PCTX_set_nm_flags(p, flags)
    @ccall libwebsockets.ASN1_PCTX_set_nm_flags(p::Ptr{ASN1_PCTX}, flags::Culong)::Cvoid
end

function ASN1_PCTX_get_cert_flags(p)
    @ccall libwebsockets.ASN1_PCTX_get_cert_flags(p::Ptr{ASN1_PCTX})::Culong
end

function ASN1_PCTX_set_cert_flags(p, flags)
    @ccall libwebsockets.ASN1_PCTX_set_cert_flags(p::Ptr{ASN1_PCTX}, flags::Culong)::Cvoid
end

function ASN1_PCTX_get_oid_flags(p)
    @ccall libwebsockets.ASN1_PCTX_get_oid_flags(p::Ptr{ASN1_PCTX})::Culong
end

function ASN1_PCTX_set_oid_flags(p, flags)
    @ccall libwebsockets.ASN1_PCTX_set_oid_flags(p::Ptr{ASN1_PCTX}, flags::Culong)::Cvoid
end

function ASN1_PCTX_get_str_flags(p)
    @ccall libwebsockets.ASN1_PCTX_get_str_flags(p::Ptr{ASN1_PCTX})::Culong
end

function ASN1_PCTX_set_str_flags(p, flags)
    @ccall libwebsockets.ASN1_PCTX_set_str_flags(p::Ptr{ASN1_PCTX}, flags::Culong)::Cvoid
end

function ASN1_SCTX_new(scan_cb)
    @ccall libwebsockets.ASN1_SCTX_new(scan_cb::Ptr{Cvoid})::Ptr{ASN1_SCTX}
end

function ASN1_SCTX_free(p)
    @ccall libwebsockets.ASN1_SCTX_free(p::Ptr{ASN1_SCTX})::Cvoid
end

function ASN1_SCTX_get_item(p)
    @ccall libwebsockets.ASN1_SCTX_get_item(p::Ptr{ASN1_SCTX})::Ptr{ASN1_ITEM}
end

function ASN1_SCTX_get_template(p)
    @ccall libwebsockets.ASN1_SCTX_get_template(p::Ptr{ASN1_SCTX})::Ptr{ASN1_TEMPLATE}
end

function ASN1_SCTX_get_flags(p)
    @ccall libwebsockets.ASN1_SCTX_get_flags(p::Ptr{ASN1_SCTX})::Culong
end

function ASN1_SCTX_set_app_data(p, data)
    @ccall libwebsockets.ASN1_SCTX_set_app_data(p::Ptr{ASN1_SCTX}, data::Ptr{Cvoid})::Cvoid
end

function ASN1_SCTX_get_app_data(p)
    @ccall libwebsockets.ASN1_SCTX_get_app_data(p::Ptr{ASN1_SCTX})::Ptr{Cvoid}
end

function BIO_f_asn1()
    @ccall libwebsockets.BIO_f_asn1()::Ptr{BIO_METHOD}
end

function BIO_new_NDEF(out, val, it)
    @ccall libwebsockets.BIO_new_NDEF(out::Ptr{BIO}, val::Ptr{ASN1_VALUE}, it::Ptr{ASN1_ITEM})::Ptr{BIO}
end

function i2d_ASN1_bio_stream(out, val, in, flags, it)
    @ccall libwebsockets.i2d_ASN1_bio_stream(out::Ptr{BIO}, val::Ptr{ASN1_VALUE}, in::Ptr{BIO}, flags::Cint, it::Ptr{ASN1_ITEM})::Cint
end

function PEM_write_bio_ASN1_stream(out, val, in, flags, hdr, it)
    @ccall libwebsockets.PEM_write_bio_ASN1_stream(out::Ptr{BIO}, val::Ptr{ASN1_VALUE}, in::Ptr{BIO}, flags::Cint, hdr::Ptr{Cchar}, it::Ptr{ASN1_ITEM})::Cint
end

function SMIME_write_ASN1(bio, val, data, flags, ctype_nid, econt_nid, mdalgs, it)
    @ccall libwebsockets.SMIME_write_ASN1(bio::Ptr{BIO}, val::Ptr{ASN1_VALUE}, data::Ptr{BIO}, flags::Cint, ctype_nid::Cint, econt_nid::Cint, mdalgs::Ptr{stack_st_X509_ALGOR}, it::Ptr{ASN1_ITEM})::Cint
end

function SMIME_write_ASN1_ex(bio, val, data, flags, ctype_nid, econt_nid, mdalgs, it, libctx, propq)
    @ccall libwebsockets.SMIME_write_ASN1_ex(bio::Ptr{BIO}, val::Ptr{ASN1_VALUE}, data::Ptr{BIO}, flags::Cint, ctype_nid::Cint, econt_nid::Cint, mdalgs::Ptr{stack_st_X509_ALGOR}, it::Ptr{ASN1_ITEM}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function SMIME_read_ASN1(bio, bcont, it)
    @ccall libwebsockets.SMIME_read_ASN1(bio::Ptr{BIO}, bcont::Ptr{Ptr{BIO}}, it::Ptr{ASN1_ITEM})::Ptr{ASN1_VALUE}
end

function SMIME_read_ASN1_ex(bio, flags, bcont, it, x, libctx, propq)
    @ccall libwebsockets.SMIME_read_ASN1_ex(bio::Ptr{BIO}, flags::Cint, bcont::Ptr{Ptr{BIO}}, it::Ptr{ASN1_ITEM}, x::Ptr{Ptr{ASN1_VALUE}}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{ASN1_VALUE}
end

function SMIME_crlf_copy(in, out, flags)
    @ccall libwebsockets.SMIME_crlf_copy(in::Ptr{BIO}, out::Ptr{BIO}, flags::Cint)::Cint
end

function SMIME_text(in, out)
    @ccall libwebsockets.SMIME_text(in::Ptr{BIO}, out::Ptr{BIO})::Cint
end

function ASN1_ITEM_lookup(name)
    @ccall libwebsockets.ASN1_ITEM_lookup(name::Ptr{Cchar})::Ptr{ASN1_ITEM}
end

function ASN1_ITEM_get(i)
    @ccall libwebsockets.ASN1_ITEM_get(i::Csize_t)::Ptr{ASN1_ITEM}
end

mutable struct obj_name_st
    type::Cint
    alias::Cint
    name::Ptr{Cchar}
    data::Ptr{Cchar}
    obj_name_st() = new()
end

const OBJ_NAME = obj_name_st

function OBJ_NAME_init()
    @ccall libwebsockets.OBJ_NAME_init()::Cint
end

function OBJ_NAME_new_index(hash_func, cmp_func, free_func)
    @ccall libwebsockets.OBJ_NAME_new_index(hash_func::Ptr{Cvoid}, cmp_func::Ptr{Cvoid}, free_func::Ptr{Cvoid})::Cint
end

function OBJ_NAME_get(name, type)
    @ccall libwebsockets.OBJ_NAME_get(name::Ptr{Cchar}, type::Cint)::Ptr{Cchar}
end

function OBJ_NAME_cleanup(type)
    @ccall libwebsockets.OBJ_NAME_cleanup(type::Cint)::Cvoid
end

function OBJ_NAME_do_all(type, fn, arg)
    @ccall libwebsockets.OBJ_NAME_do_all(type::Cint, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function OBJ_NAME_do_all_sorted(type, fn, arg)
    @ccall libwebsockets.OBJ_NAME_do_all_sorted(type::Cint, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function OBJ_dup(a)
    @ccall libwebsockets.OBJ_dup(a::Ptr{ASN1_OBJECT})::Ptr{ASN1_OBJECT}
end

function OBJ_nid2obj(n)
    @ccall libwebsockets.OBJ_nid2obj(n::Cint)::Ptr{ASN1_OBJECT}
end

function OBJ_nid2ln(n)
    @ccall libwebsockets.OBJ_nid2ln(n::Cint)::Ptr{Cchar}
end

function OBJ_txt2obj(s, no_name)
    @ccall libwebsockets.OBJ_txt2obj(s::Ptr{Cchar}, no_name::Cint)::Ptr{ASN1_OBJECT}
end

function OBJ_obj2txt(buf, buf_len, a, no_name)
    @ccall libwebsockets.OBJ_obj2txt(buf::Ptr{Cchar}, buf_len::Cint, a::Ptr{ASN1_OBJECT}, no_name::Cint)::Cint
end

function OBJ_txt2nid(s)
    @ccall libwebsockets.OBJ_txt2nid(s::Ptr{Cchar})::Cint
end

function OBJ_ln2nid(s)
    @ccall libwebsockets.OBJ_ln2nid(s::Ptr{Cchar})::Cint
end

function OBJ_sn2nid(s)
    @ccall libwebsockets.OBJ_sn2nid(s::Ptr{Cchar})::Cint
end

function OBJ_cmp(a, b)
    @ccall libwebsockets.OBJ_cmp(a::Ptr{ASN1_OBJECT}, b::Ptr{ASN1_OBJECT})::Cint
end

function OBJ_new_nid(num)
    @ccall libwebsockets.OBJ_new_nid(num::Cint)::Cint
end

function OBJ_add_object(obj)
    @ccall libwebsockets.OBJ_add_object(obj::Ptr{ASN1_OBJECT})::Cint
end

function OBJ_create_objects(in)
    @ccall libwebsockets.OBJ_create_objects(in::Ptr{BIO})::Cint
end

function OBJ_length(obj)
    @ccall libwebsockets.OBJ_length(obj::Ptr{ASN1_OBJECT})::Csize_t
end

function OBJ_get0_data(obj)
    @ccall libwebsockets.OBJ_get0_data(obj::Ptr{ASN1_OBJECT})::Ptr{Cuchar}
end

function OBJ_find_sigid_algs(signid, pdig_nid, ppkey_nid)
    @ccall libwebsockets.OBJ_find_sigid_algs(signid::Cint, pdig_nid::Ptr{Cint}, ppkey_nid::Ptr{Cint})::Cint
end

function OBJ_find_sigid_by_algs(psignid, dig_nid, pkey_nid)
    @ccall libwebsockets.OBJ_find_sigid_by_algs(psignid::Ptr{Cint}, dig_nid::Cint, pkey_nid::Cint)::Cint
end

function OBJ_add_sigid(signid, dig_id, pkey_id)
    @ccall libwebsockets.OBJ_add_sigid(signid::Cint, dig_id::Cint, pkey_id::Cint)::Cint
end

function OBJ_sigid_free()
    @ccall libwebsockets.OBJ_sigid_free()::Cvoid
end

function EVP_set_default_properties(libctx, propq)
    @ccall libwebsockets.EVP_set_default_properties(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function EVP_default_properties_is_fips_enabled(libctx)
    @ccall libwebsockets.EVP_default_properties_is_fips_enabled(libctx::Ptr{OSSL_LIB_CTX})::Cint
end

function EVP_default_properties_enable_fips(libctx, enable)
    @ccall libwebsockets.EVP_default_properties_enable_fips(libctx::Ptr{OSSL_LIB_CTX}, enable::Cint)::Cint
end

function EVP_MD_meth_new(md_type, pkey_type)
    @ccall libwebsockets.EVP_MD_meth_new(md_type::Cint, pkey_type::Cint)::Ptr{EVP_MD}
end

function EVP_MD_meth_dup(md)
    @ccall libwebsockets.EVP_MD_meth_dup(md::Ptr{EVP_MD})::Ptr{EVP_MD}
end

function EVP_MD_meth_free(md)
    @ccall libwebsockets.EVP_MD_meth_free(md::Ptr{EVP_MD})::Cvoid
end

function EVP_MD_meth_set_input_blocksize(md, blocksize)
    @ccall libwebsockets.EVP_MD_meth_set_input_blocksize(md::Ptr{EVP_MD}, blocksize::Cint)::Cint
end

function EVP_MD_meth_set_result_size(md, resultsize)
    @ccall libwebsockets.EVP_MD_meth_set_result_size(md::Ptr{EVP_MD}, resultsize::Cint)::Cint
end

function EVP_MD_meth_set_app_datasize(md, datasize)
    @ccall libwebsockets.EVP_MD_meth_set_app_datasize(md::Ptr{EVP_MD}, datasize::Cint)::Cint
end

function EVP_MD_meth_set_flags(md, flags)
    @ccall libwebsockets.EVP_MD_meth_set_flags(md::Ptr{EVP_MD}, flags::Culong)::Cint
end

function EVP_MD_meth_set_init(md, init)
    @ccall libwebsockets.EVP_MD_meth_set_init(md::Ptr{EVP_MD}, init::Ptr{Cvoid})::Cint
end

function EVP_MD_meth_set_update(md, update)
    @ccall libwebsockets.EVP_MD_meth_set_update(md::Ptr{EVP_MD}, update::Ptr{Cvoid})::Cint
end

function EVP_MD_meth_set_final(md, final)
    @ccall libwebsockets.EVP_MD_meth_set_final(md::Ptr{EVP_MD}, final::Ptr{Cvoid})::Cint
end

function EVP_MD_meth_set_copy(md, copy)
    @ccall libwebsockets.EVP_MD_meth_set_copy(md::Ptr{EVP_MD}, copy::Ptr{Cvoid})::Cint
end

function EVP_MD_meth_set_cleanup(md, cleanup)
    @ccall libwebsockets.EVP_MD_meth_set_cleanup(md::Ptr{EVP_MD}, cleanup::Ptr{Cvoid})::Cint
end

function EVP_MD_meth_set_ctrl(md, ctrl)
    @ccall libwebsockets.EVP_MD_meth_set_ctrl(md::Ptr{EVP_MD}, ctrl::Ptr{Cvoid})::Cint
end

function EVP_MD_meth_get_input_blocksize(md)
    @ccall libwebsockets.EVP_MD_meth_get_input_blocksize(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_meth_get_result_size(md)
    @ccall libwebsockets.EVP_MD_meth_get_result_size(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_meth_get_app_datasize(md)
    @ccall libwebsockets.EVP_MD_meth_get_app_datasize(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_meth_get_flags(md)
    @ccall libwebsockets.EVP_MD_meth_get_flags(md::Ptr{EVP_MD})::Culong
end

function EVP_MD_meth_get_init(md)
    @ccall libwebsockets.EVP_MD_meth_get_init(md::Ptr{EVP_MD})::Ptr{Cvoid}
end

function EVP_MD_meth_get_update(md)
    @ccall libwebsockets.EVP_MD_meth_get_update(md::Ptr{EVP_MD})::Ptr{Cvoid}
end

function EVP_MD_meth_get_final(md)
    @ccall libwebsockets.EVP_MD_meth_get_final(md::Ptr{EVP_MD})::Ptr{Cvoid}
end

function EVP_MD_meth_get_copy(md)
    @ccall libwebsockets.EVP_MD_meth_get_copy(md::Ptr{EVP_MD})::Ptr{Cvoid}
end

function EVP_MD_meth_get_cleanup(md)
    @ccall libwebsockets.EVP_MD_meth_get_cleanup(md::Ptr{EVP_MD})::Ptr{Cvoid}
end

function EVP_MD_meth_get_ctrl(md)
    @ccall libwebsockets.EVP_MD_meth_get_ctrl(md::Ptr{EVP_MD})::Ptr{Cvoid}
end

function EVP_CIPHER_meth_new(cipher_type, block_size, key_len)
    @ccall libwebsockets.EVP_CIPHER_meth_new(cipher_type::Cint, block_size::Cint, key_len::Cint)::Ptr{EVP_CIPHER}
end

function EVP_CIPHER_meth_dup(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_dup(cipher::Ptr{EVP_CIPHER})::Ptr{EVP_CIPHER}
end

function EVP_CIPHER_meth_free(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_free(cipher::Ptr{EVP_CIPHER})::Cvoid
end

function EVP_CIPHER_meth_set_iv_length(cipher, iv_len)
    @ccall libwebsockets.EVP_CIPHER_meth_set_iv_length(cipher::Ptr{EVP_CIPHER}, iv_len::Cint)::Cint
end

function EVP_CIPHER_meth_set_flags(cipher, flags)
    @ccall libwebsockets.EVP_CIPHER_meth_set_flags(cipher::Ptr{EVP_CIPHER}, flags::Culong)::Cint
end

function EVP_CIPHER_meth_set_impl_ctx_size(cipher, ctx_size)
    @ccall libwebsockets.EVP_CIPHER_meth_set_impl_ctx_size(cipher::Ptr{EVP_CIPHER}, ctx_size::Cint)::Cint
end

function EVP_CIPHER_meth_set_init(cipher, init)
    @ccall libwebsockets.EVP_CIPHER_meth_set_init(cipher::Ptr{EVP_CIPHER}, init::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_meth_set_do_cipher(cipher, do_cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_set_do_cipher(cipher::Ptr{EVP_CIPHER}, do_cipher::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_meth_set_cleanup(cipher, cleanup)
    @ccall libwebsockets.EVP_CIPHER_meth_set_cleanup(cipher::Ptr{EVP_CIPHER}, cleanup::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_meth_set_set_asn1_params(cipher, set_asn1_parameters)
    @ccall libwebsockets.EVP_CIPHER_meth_set_set_asn1_params(cipher::Ptr{EVP_CIPHER}, set_asn1_parameters::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_meth_set_get_asn1_params(cipher, get_asn1_parameters)
    @ccall libwebsockets.EVP_CIPHER_meth_set_get_asn1_params(cipher::Ptr{EVP_CIPHER}, get_asn1_parameters::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_meth_set_ctrl(cipher, ctrl)
    @ccall libwebsockets.EVP_CIPHER_meth_set_ctrl(cipher::Ptr{EVP_CIPHER}, ctrl::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_meth_get_init(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_get_init(cipher::Ptr{EVP_CIPHER})::Ptr{Cvoid}
end

function EVP_CIPHER_meth_get_do_cipher(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_get_do_cipher(cipher::Ptr{EVP_CIPHER})::Ptr{Cvoid}
end

function EVP_CIPHER_meth_get_cleanup(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_get_cleanup(cipher::Ptr{EVP_CIPHER})::Ptr{Cvoid}
end

function EVP_CIPHER_meth_get_set_asn1_params(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_get_set_asn1_params(cipher::Ptr{EVP_CIPHER})::Ptr{Cvoid}
end

function EVP_CIPHER_meth_get_get_asn1_params(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_get_get_asn1_params(cipher::Ptr{EVP_CIPHER})::Ptr{Cvoid}
end

function EVP_CIPHER_meth_get_ctrl(cipher)
    @ccall libwebsockets.EVP_CIPHER_meth_get_ctrl(cipher::Ptr{EVP_CIPHER})::Ptr{Cvoid}
end

mutable struct EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
    out::Ptr{Cuchar}
    inp::Ptr{Cuchar}
    len::Csize_t
    interleave::Cuint
    EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM() = new()
end

# typedef int ( EVP_PBE_KEYGEN ) ( EVP_CIPHER_CTX * ctx , const char * pass , int passlen , ASN1_TYPE * param , const EVP_CIPHER * cipher , const EVP_MD * md , int en_de )
const EVP_PBE_KEYGEN = Cvoid

# typedef int ( EVP_PBE_KEYGEN_EX ) ( EVP_CIPHER_CTX * ctx , const char * pass , int passlen , ASN1_TYPE * param , const EVP_CIPHER * cipher , const EVP_MD * md , int en_de , OSSL_LIB_CTX * libctx , const char * propq )
const EVP_PBE_KEYGEN_EX = Cvoid

function EVP_MD_get0_description(md)
    @ccall libwebsockets.EVP_MD_get0_description(md::Ptr{EVP_MD})::Ptr{Cchar}
end

function EVP_MD_is_a(md, name)
    @ccall libwebsockets.EVP_MD_is_a(md::Ptr{EVP_MD}, name::Ptr{Cchar})::Cint
end

function EVP_MD_names_do_all(md, fn, data)
    @ccall libwebsockets.EVP_MD_names_do_all(md::Ptr{EVP_MD}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_MD_get0_provider(md)
    @ccall libwebsockets.EVP_MD_get0_provider(md::Ptr{EVP_MD})::Ptr{OSSL_PROVIDER}
end

function EVP_MD_CTX_get1_md(ctx)
    @ccall libwebsockets.EVP_MD_CTX_get1_md(ctx::Ptr{EVP_MD_CTX})::Ptr{EVP_MD}
end

function EVP_MD_CTX_md(ctx)
    @ccall libwebsockets.EVP_MD_CTX_md(ctx::Ptr{EVP_MD_CTX})::Ptr{EVP_MD}
end

function EVP_MD_CTX_update_fn(ctx)
    @ccall libwebsockets.EVP_MD_CTX_update_fn(ctx::Ptr{EVP_MD_CTX})::Ptr{Cvoid}
end

function EVP_MD_CTX_set_update_fn(ctx, update)
    @ccall libwebsockets.EVP_MD_CTX_set_update_fn(ctx::Ptr{EVP_MD_CTX}, update::Ptr{Cvoid})::Cvoid
end

function EVP_MD_CTX_set_pkey_ctx(ctx, pctx)
    @ccall libwebsockets.EVP_MD_CTX_set_pkey_ctx(ctx::Ptr{EVP_MD_CTX}, pctx::Ptr{EVP_PKEY_CTX})::Cvoid
end

function EVP_CIPHER_get0_description(cipher)
    @ccall libwebsockets.EVP_CIPHER_get0_description(cipher::Ptr{EVP_CIPHER})::Ptr{Cchar}
end

function EVP_CIPHER_is_a(cipher, name)
    @ccall libwebsockets.EVP_CIPHER_is_a(cipher::Ptr{EVP_CIPHER}, name::Ptr{Cchar})::Cint
end

function EVP_CIPHER_names_do_all(cipher, fn, data)
    @ccall libwebsockets.EVP_CIPHER_names_do_all(cipher::Ptr{EVP_CIPHER}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_get0_provider(cipher)
    @ccall libwebsockets.EVP_CIPHER_get0_provider(cipher::Ptr{EVP_CIPHER})::Ptr{OSSL_PROVIDER}
end

function EVP_CIPHER_impl_ctx_size(cipher)
    @ccall libwebsockets.EVP_CIPHER_impl_ctx_size(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_CIPHER_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_CIPHER}
end

function EVP_CIPHER_up_ref(cipher)
    @ccall libwebsockets.EVP_CIPHER_up_ref(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_CIPHER_free(cipher)
    @ccall libwebsockets.EVP_CIPHER_free(cipher::Ptr{EVP_CIPHER})::Cvoid
end

function EVP_CIPHER_CTX_get1_cipher(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get1_cipher(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{EVP_CIPHER}
end

function EVP_CIPHER_CTX_cipher(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_cipher(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{EVP_CIPHER}
end

function EVP_CIPHER_CTX_iv(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_iv(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{Cuchar}
end

function EVP_CIPHER_CTX_original_iv(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_original_iv(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{Cuchar}
end

function EVP_CIPHER_CTX_iv_noconst(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_iv_noconst(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{Cuchar}
end

function EVP_CIPHER_CTX_get_updated_iv(ctx, buf, len)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_updated_iv(ctx::Ptr{EVP_CIPHER_CTX}, buf::Ptr{Cvoid}, len::Csize_t)::Cint
end

function EVP_CIPHER_CTX_get_original_iv(ctx, buf, len)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_original_iv(ctx::Ptr{EVP_CIPHER_CTX}, buf::Ptr{Cvoid}, len::Csize_t)::Cint
end

function EVP_CIPHER_CTX_buf_noconst(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_buf_noconst(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{Cuchar}
end

function EVP_CIPHER_CTX_set_num(ctx, num)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_num(ctx::Ptr{EVP_CIPHER_CTX}, num::Cint)::Cint
end

function EVP_CIPHER_CTX_copy(out, in)
    @ccall libwebsockets.EVP_CIPHER_CTX_copy(out::Ptr{EVP_CIPHER_CTX}, in::Ptr{EVP_CIPHER_CTX})::Cint
end

function EVP_CIPHER_CTX_get_app_data(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_app_data(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{Cvoid}
end

function EVP_CIPHER_CTX_set_app_data(ctx, data)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_app_data(ctx::Ptr{EVP_CIPHER_CTX}, data::Ptr{Cvoid})::Cvoid
end

function EVP_CIPHER_CTX_get_cipher_data(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_cipher_data(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{Cvoid}
end

function EVP_CIPHER_CTX_set_cipher_data(ctx, cipher_data)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_cipher_data(ctx::Ptr{EVP_CIPHER_CTX}, cipher_data::Ptr{Cvoid})::Ptr{Cvoid}
end

function EVP_Cipher(c, out, in, inl)
    @ccall libwebsockets.EVP_Cipher(c::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, in::Ptr{Cuchar}, inl::Cuint)::Cint
end

function EVP_MD_get_params(digest, params)
    @ccall libwebsockets.EVP_MD_get_params(digest::Ptr{EVP_MD}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MD_CTX_set_params(ctx, params)
    @ccall libwebsockets.EVP_MD_CTX_set_params(ctx::Ptr{EVP_MD_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MD_CTX_get_params(ctx, params)
    @ccall libwebsockets.EVP_MD_CTX_get_params(ctx::Ptr{EVP_MD_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MD_gettable_params(digest)
    @ccall libwebsockets.EVP_MD_gettable_params(digest::Ptr{EVP_MD})::Ptr{OSSL_PARAM}
end

function EVP_MD_settable_ctx_params(md)
    @ccall libwebsockets.EVP_MD_settable_ctx_params(md::Ptr{EVP_MD})::Ptr{OSSL_PARAM}
end

function EVP_MD_gettable_ctx_params(md)
    @ccall libwebsockets.EVP_MD_gettable_ctx_params(md::Ptr{EVP_MD})::Ptr{OSSL_PARAM}
end

function EVP_MD_CTX_settable_params(ctx)
    @ccall libwebsockets.EVP_MD_CTX_settable_params(ctx::Ptr{EVP_MD_CTX})::Ptr{OSSL_PARAM}
end

function EVP_MD_CTX_gettable_params(ctx)
    @ccall libwebsockets.EVP_MD_CTX_gettable_params(ctx::Ptr{EVP_MD_CTX})::Ptr{OSSL_PARAM}
end

function EVP_MD_CTX_ctrl(ctx, cmd, p1, p2)
    @ccall libwebsockets.EVP_MD_CTX_ctrl(ctx::Ptr{EVP_MD_CTX}, cmd::Cint, p1::Cint, p2::Ptr{Cvoid})::Cint
end

function EVP_MD_CTX_copy_ex(out, in)
    @ccall libwebsockets.EVP_MD_CTX_copy_ex(out::Ptr{EVP_MD_CTX}, in::Ptr{EVP_MD_CTX})::Cint
end

function EVP_MD_CTX_set_flags(ctx, flags)
    @ccall libwebsockets.EVP_MD_CTX_set_flags(ctx::Ptr{EVP_MD_CTX}, flags::Cint)::Cvoid
end

function EVP_MD_CTX_clear_flags(ctx, flags)
    @ccall libwebsockets.EVP_MD_CTX_clear_flags(ctx::Ptr{EVP_MD_CTX}, flags::Cint)::Cvoid
end

function EVP_MD_CTX_test_flags(ctx, flags)
    @ccall libwebsockets.EVP_MD_CTX_test_flags(ctx::Ptr{EVP_MD_CTX}, flags::Cint)::Cint
end

function EVP_DigestInit_ex2(ctx, type, params)
    @ccall libwebsockets.EVP_DigestInit_ex2(ctx::Ptr{EVP_MD_CTX}, type::Ptr{EVP_MD}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_DigestFinal_ex(ctx, md, s)
    @ccall libwebsockets.EVP_DigestFinal_ex(ctx::Ptr{EVP_MD_CTX}, md::Ptr{Cuchar}, s::Ptr{Cuint})::Cint
end

function EVP_Digest(data, count, md, size, type, impl)
    @ccall libwebsockets.EVP_Digest(data::Ptr{Cvoid}, count::Csize_t, md::Ptr{Cuchar}, size::Ptr{Cuint}, type::Ptr{EVP_MD}, impl::Ptr{ENGINE})::Cint
end

function EVP_Q_digest(libctx, name, propq, data, datalen, md, mdlen)
    @ccall libwebsockets.EVP_Q_digest(libctx::Ptr{OSSL_LIB_CTX}, name::Ptr{Cchar}, propq::Ptr{Cchar}, data::Ptr{Cvoid}, datalen::Csize_t, md::Ptr{Cuchar}, mdlen::Ptr{Csize_t})::Cint
end

function EVP_MD_CTX_copy(out, in)
    @ccall libwebsockets.EVP_MD_CTX_copy(out::Ptr{EVP_MD_CTX}, in::Ptr{EVP_MD_CTX})::Cint
end

function EVP_DigestFinal(ctx, md, s)
    @ccall libwebsockets.EVP_DigestFinal(ctx::Ptr{EVP_MD_CTX}, md::Ptr{Cuchar}, s::Ptr{Cuint})::Cint
end

function EVP_DigestFinalXOF(ctx, md, len)
    @ccall libwebsockets.EVP_DigestFinalXOF(ctx::Ptr{EVP_MD_CTX}, md::Ptr{Cuchar}, len::Csize_t)::Cint
end

function EVP_MD_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_MD_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_MD}
end

function EVP_MD_up_ref(md)
    @ccall libwebsockets.EVP_MD_up_ref(md::Ptr{EVP_MD})::Cint
end

function EVP_MD_free(md)
    @ccall libwebsockets.EVP_MD_free(md::Ptr{EVP_MD})::Cvoid
end

function EVP_read_pw_string(buf, length, prompt, verify)
    @ccall libwebsockets.EVP_read_pw_string(buf::Ptr{Cchar}, length::Cint, prompt::Ptr{Cchar}, verify::Cint)::Cint
end

function EVP_read_pw_string_min(buf, minlen, maxlen, prompt, verify)
    @ccall libwebsockets.EVP_read_pw_string_min(buf::Ptr{Cchar}, minlen::Cint, maxlen::Cint, prompt::Ptr{Cchar}, verify::Cint)::Cint
end

function EVP_set_pw_prompt(prompt)
    @ccall libwebsockets.EVP_set_pw_prompt(prompt::Ptr{Cchar})::Cvoid
end

function EVP_get_pw_prompt()
    @ccall libwebsockets.EVP_get_pw_prompt()::Ptr{Cchar}
end

function EVP_BytesToKey(type, md, salt, data, datal, count, key, iv)
    @ccall libwebsockets.EVP_BytesToKey(type::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, salt::Ptr{Cuchar}, data::Ptr{Cuchar}, datal::Cint, count::Cint, key::Ptr{Cuchar}, iv::Ptr{Cuchar})::Cint
end

function EVP_CIPHER_CTX_set_flags(ctx, flags)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_flags(ctx::Ptr{EVP_CIPHER_CTX}, flags::Cint)::Cvoid
end

function EVP_CIPHER_CTX_clear_flags(ctx, flags)
    @ccall libwebsockets.EVP_CIPHER_CTX_clear_flags(ctx::Ptr{EVP_CIPHER_CTX}, flags::Cint)::Cvoid
end

function EVP_CIPHER_CTX_test_flags(ctx, flags)
    @ccall libwebsockets.EVP_CIPHER_CTX_test_flags(ctx::Ptr{EVP_CIPHER_CTX}, flags::Cint)::Cint
end

function EVP_EncryptInit(ctx, cipher, key, iv)
    @ccall libwebsockets.EVP_EncryptInit(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, key::Ptr{Cuchar}, iv::Ptr{Cuchar})::Cint
end

function EVP_EncryptInit_ex(ctx, cipher, impl, key, iv)
    @ccall libwebsockets.EVP_EncryptInit_ex(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, impl::Ptr{ENGINE}, key::Ptr{Cuchar}, iv::Ptr{Cuchar})::Cint
end

function EVP_EncryptInit_ex2(ctx, cipher, key, iv, params)
    @ccall libwebsockets.EVP_EncryptInit_ex2(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, key::Ptr{Cuchar}, iv::Ptr{Cuchar}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_EncryptFinal_ex(ctx, out, outl)
    @ccall libwebsockets.EVP_EncryptFinal_ex(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_EncryptFinal(ctx, out, outl)
    @ccall libwebsockets.EVP_EncryptFinal(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_DecryptInit(ctx, cipher, key, iv)
    @ccall libwebsockets.EVP_DecryptInit(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, key::Ptr{Cuchar}, iv::Ptr{Cuchar})::Cint
end

function EVP_DecryptInit_ex(ctx, cipher, impl, key, iv)
    @ccall libwebsockets.EVP_DecryptInit_ex(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, impl::Ptr{ENGINE}, key::Ptr{Cuchar}, iv::Ptr{Cuchar})::Cint
end

function EVP_DecryptInit_ex2(ctx, cipher, key, iv, params)
    @ccall libwebsockets.EVP_DecryptInit_ex2(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, key::Ptr{Cuchar}, iv::Ptr{Cuchar}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_DecryptFinal(ctx, outm, outl)
    @ccall libwebsockets.EVP_DecryptFinal(ctx::Ptr{EVP_CIPHER_CTX}, outm::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_DecryptFinal_ex(ctx, outm, outl)
    @ccall libwebsockets.EVP_DecryptFinal_ex(ctx::Ptr{EVP_CIPHER_CTX}, outm::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_CipherInit(ctx, cipher, key, iv, enc)
    @ccall libwebsockets.EVP_CipherInit(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, key::Ptr{Cuchar}, iv::Ptr{Cuchar}, enc::Cint)::Cint
end

function EVP_CipherInit_ex(ctx, cipher, impl, key, iv, enc)
    @ccall libwebsockets.EVP_CipherInit_ex(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, impl::Ptr{ENGINE}, key::Ptr{Cuchar}, iv::Ptr{Cuchar}, enc::Cint)::Cint
end

function EVP_CipherInit_ex2(ctx, cipher, key, iv, enc, params)
    @ccall libwebsockets.EVP_CipherInit_ex2(ctx::Ptr{EVP_CIPHER_CTX}, cipher::Ptr{EVP_CIPHER}, key::Ptr{Cuchar}, iv::Ptr{Cuchar}, enc::Cint, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_CipherUpdate(ctx, out, outl, in, inl)
    @ccall libwebsockets.EVP_CipherUpdate(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint}, in::Ptr{Cuchar}, inl::Cint)::Cint
end

function EVP_CipherFinal(ctx, outm, outl)
    @ccall libwebsockets.EVP_CipherFinal(ctx::Ptr{EVP_CIPHER_CTX}, outm::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_CipherFinal_ex(ctx, outm, outl)
    @ccall libwebsockets.EVP_CipherFinal_ex(ctx::Ptr{EVP_CIPHER_CTX}, outm::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_SignFinal(ctx, md, s, pkey)
    @ccall libwebsockets.EVP_SignFinal(ctx::Ptr{EVP_MD_CTX}, md::Ptr{Cuchar}, s::Ptr{Cuint}, pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_SignFinal_ex(ctx, md, s, pkey, libctx, propq)
    @ccall libwebsockets.EVP_SignFinal_ex(ctx::Ptr{EVP_MD_CTX}, md::Ptr{Cuchar}, s::Ptr{Cuint}, pkey::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function EVP_DigestSign(ctx, sigret, siglen, tbs, tbslen)
    @ccall libwebsockets.EVP_DigestSign(ctx::Ptr{EVP_MD_CTX}, sigret::Ptr{Cuchar}, siglen::Ptr{Csize_t}, tbs::Ptr{Cuchar}, tbslen::Csize_t)::Cint
end

function EVP_VerifyFinal(ctx, sigbuf, siglen, pkey)
    @ccall libwebsockets.EVP_VerifyFinal(ctx::Ptr{EVP_MD_CTX}, sigbuf::Ptr{Cuchar}, siglen::Cuint, pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_VerifyFinal_ex(ctx, sigbuf, siglen, pkey, libctx, propq)
    @ccall libwebsockets.EVP_VerifyFinal_ex(ctx::Ptr{EVP_MD_CTX}, sigbuf::Ptr{Cuchar}, siglen::Cuint, pkey::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function EVP_DigestVerify(ctx, sigret, siglen, tbs, tbslen)
    @ccall libwebsockets.EVP_DigestVerify(ctx::Ptr{EVP_MD_CTX}, sigret::Ptr{Cuchar}, siglen::Csize_t, tbs::Ptr{Cuchar}, tbslen::Csize_t)::Cint
end

function EVP_DigestSignInit_ex(ctx, pctx, mdname, libctx, props, pkey, params)
    @ccall libwebsockets.EVP_DigestSignInit_ex(ctx::Ptr{EVP_MD_CTX}, pctx::Ptr{Ptr{EVP_PKEY_CTX}}, mdname::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, props::Ptr{Cchar}, pkey::Ptr{EVP_PKEY}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_DigestSignInit(ctx, pctx, type, e, pkey)
    @ccall libwebsockets.EVP_DigestSignInit(ctx::Ptr{EVP_MD_CTX}, pctx::Ptr{Ptr{EVP_PKEY_CTX}}, type::Ptr{EVP_MD}, e::Ptr{ENGINE}, pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_DigestSignUpdate(ctx, data, dsize)
    @ccall libwebsockets.EVP_DigestSignUpdate(ctx::Ptr{EVP_MD_CTX}, data::Ptr{Cvoid}, dsize::Csize_t)::Cint
end

function EVP_DigestSignFinal(ctx, sigret, siglen)
    @ccall libwebsockets.EVP_DigestSignFinal(ctx::Ptr{EVP_MD_CTX}, sigret::Ptr{Cuchar}, siglen::Ptr{Csize_t})::Cint
end

function EVP_DigestVerifyInit_ex(ctx, pctx, mdname, libctx, props, pkey, params)
    @ccall libwebsockets.EVP_DigestVerifyInit_ex(ctx::Ptr{EVP_MD_CTX}, pctx::Ptr{Ptr{EVP_PKEY_CTX}}, mdname::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, props::Ptr{Cchar}, pkey::Ptr{EVP_PKEY}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_DigestVerifyInit(ctx, pctx, type, e, pkey)
    @ccall libwebsockets.EVP_DigestVerifyInit(ctx::Ptr{EVP_MD_CTX}, pctx::Ptr{Ptr{EVP_PKEY_CTX}}, type::Ptr{EVP_MD}, e::Ptr{ENGINE}, pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_DigestVerifyUpdate(ctx, data, dsize)
    @ccall libwebsockets.EVP_DigestVerifyUpdate(ctx::Ptr{EVP_MD_CTX}, data::Ptr{Cvoid}, dsize::Csize_t)::Cint
end

function EVP_DigestVerifyFinal(ctx, sig, siglen)
    @ccall libwebsockets.EVP_DigestVerifyFinal(ctx::Ptr{EVP_MD_CTX}, sig::Ptr{Cuchar}, siglen::Csize_t)::Cint
end

function EVP_OpenInit(ctx, type, ek, ekl, iv, priv)
    @ccall libwebsockets.EVP_OpenInit(ctx::Ptr{EVP_CIPHER_CTX}, type::Ptr{EVP_CIPHER}, ek::Ptr{Cuchar}, ekl::Cint, iv::Ptr{Cuchar}, priv::Ptr{EVP_PKEY})::Cint
end

function EVP_OpenFinal(ctx, out, outl)
    @ccall libwebsockets.EVP_OpenFinal(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_SealInit(ctx, type, ek, ekl, iv, pubk, npubk)
    @ccall libwebsockets.EVP_SealInit(ctx::Ptr{EVP_CIPHER_CTX}, type::Ptr{EVP_CIPHER}, ek::Ptr{Ptr{Cuchar}}, ekl::Ptr{Cint}, iv::Ptr{Cuchar}, pubk::Ptr{Ptr{EVP_PKEY}}, npubk::Cint)::Cint
end

function EVP_SealFinal(ctx, out, outl)
    @ccall libwebsockets.EVP_SealFinal(ctx::Ptr{EVP_CIPHER_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_ENCODE_CTX_new()
    @ccall libwebsockets.EVP_ENCODE_CTX_new()::Ptr{EVP_ENCODE_CTX}
end

function EVP_ENCODE_CTX_free(ctx)
    @ccall libwebsockets.EVP_ENCODE_CTX_free(ctx::Ptr{EVP_ENCODE_CTX})::Cvoid
end

function EVP_ENCODE_CTX_copy(dctx, sctx)
    @ccall libwebsockets.EVP_ENCODE_CTX_copy(dctx::Ptr{EVP_ENCODE_CTX}, sctx::Ptr{EVP_ENCODE_CTX})::Cint
end

function EVP_ENCODE_CTX_num(ctx)
    @ccall libwebsockets.EVP_ENCODE_CTX_num(ctx::Ptr{EVP_ENCODE_CTX})::Cint
end

function EVP_EncodeInit(ctx)
    @ccall libwebsockets.EVP_EncodeInit(ctx::Ptr{EVP_ENCODE_CTX})::Cvoid
end

function EVP_EncodeUpdate(ctx, out, outl, in, inl)
    @ccall libwebsockets.EVP_EncodeUpdate(ctx::Ptr{EVP_ENCODE_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint}, in::Ptr{Cuchar}, inl::Cint)::Cint
end

function EVP_EncodeFinal(ctx, out, outl)
    @ccall libwebsockets.EVP_EncodeFinal(ctx::Ptr{EVP_ENCODE_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint})::Cvoid
end

function EVP_EncodeBlock(t, f, n)
    @ccall libwebsockets.EVP_EncodeBlock(t::Ptr{Cuchar}, f::Ptr{Cuchar}, n::Cint)::Cint
end

function EVP_DecodeInit(ctx)
    @ccall libwebsockets.EVP_DecodeInit(ctx::Ptr{EVP_ENCODE_CTX})::Cvoid
end

function EVP_DecodeUpdate(ctx, out, outl, in, inl)
    @ccall libwebsockets.EVP_DecodeUpdate(ctx::Ptr{EVP_ENCODE_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint}, in::Ptr{Cuchar}, inl::Cint)::Cint
end

function EVP_DecodeFinal(ctx, out, outl)
    @ccall libwebsockets.EVP_DecodeFinal(ctx::Ptr{EVP_ENCODE_CTX}, out::Ptr{Cuchar}, outl::Ptr{Cint})::Cint
end

function EVP_DecodeBlock(t, f, n)
    @ccall libwebsockets.EVP_DecodeBlock(t::Ptr{Cuchar}, f::Ptr{Cuchar}, n::Cint)::Cint
end

function EVP_CIPHER_CTX_new()
    @ccall libwebsockets.EVP_CIPHER_CTX_new()::Ptr{EVP_CIPHER_CTX}
end

function EVP_CIPHER_CTX_free(c)
    @ccall libwebsockets.EVP_CIPHER_CTX_free(c::Ptr{EVP_CIPHER_CTX})::Cvoid
end

function EVP_CIPHER_CTX_set_key_length(x, keylen)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_key_length(x::Ptr{EVP_CIPHER_CTX}, keylen::Cint)::Cint
end

function EVP_CIPHER_CTX_set_padding(c, pad)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_padding(c::Ptr{EVP_CIPHER_CTX}, pad::Cint)::Cint
end

function EVP_CIPHER_CTX_ctrl(ctx, type, arg, ptr)
    @ccall libwebsockets.EVP_CIPHER_CTX_ctrl(ctx::Ptr{EVP_CIPHER_CTX}, type::Cint, arg::Cint, ptr::Ptr{Cvoid})::Cint
end

function EVP_CIPHER_CTX_rand_key(ctx, key)
    @ccall libwebsockets.EVP_CIPHER_CTX_rand_key(ctx::Ptr{EVP_CIPHER_CTX}, key::Ptr{Cuchar})::Cint
end

function EVP_CIPHER_get_params(cipher, params)
    @ccall libwebsockets.EVP_CIPHER_get_params(cipher::Ptr{EVP_CIPHER}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_CIPHER_CTX_set_params(ctx, params)
    @ccall libwebsockets.EVP_CIPHER_CTX_set_params(ctx::Ptr{EVP_CIPHER_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_CIPHER_CTX_get_params(ctx, params)
    @ccall libwebsockets.EVP_CIPHER_CTX_get_params(ctx::Ptr{EVP_CIPHER_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_CIPHER_gettable_params(cipher)
    @ccall libwebsockets.EVP_CIPHER_gettable_params(cipher::Ptr{EVP_CIPHER})::Ptr{OSSL_PARAM}
end

function EVP_CIPHER_settable_ctx_params(cipher)
    @ccall libwebsockets.EVP_CIPHER_settable_ctx_params(cipher::Ptr{EVP_CIPHER})::Ptr{OSSL_PARAM}
end

function EVP_CIPHER_gettable_ctx_params(cipher)
    @ccall libwebsockets.EVP_CIPHER_gettable_ctx_params(cipher::Ptr{EVP_CIPHER})::Ptr{OSSL_PARAM}
end

function EVP_CIPHER_CTX_settable_params(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_settable_params(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{OSSL_PARAM}
end

function EVP_CIPHER_CTX_gettable_params(ctx)
    @ccall libwebsockets.EVP_CIPHER_CTX_gettable_params(ctx::Ptr{EVP_CIPHER_CTX})::Ptr{OSSL_PARAM}
end

function BIO_f_md()
    @ccall libwebsockets.BIO_f_md()::Ptr{BIO_METHOD}
end

function BIO_f_base64()
    @ccall libwebsockets.BIO_f_base64()::Ptr{BIO_METHOD}
end

function BIO_f_cipher()
    @ccall libwebsockets.BIO_f_cipher()::Ptr{BIO_METHOD}
end

function BIO_f_reliable()
    @ccall libwebsockets.BIO_f_reliable()::Ptr{BIO_METHOD}
end

function BIO_set_cipher(b, c, k, i, enc)
    @ccall libwebsockets.BIO_set_cipher(b::Ptr{BIO}, c::Ptr{EVP_CIPHER}, k::Ptr{Cuchar}, i::Ptr{Cuchar}, enc::Cint)::Cint
end

function EVP_md_null()
    @ccall libwebsockets.EVP_md_null()::Ptr{EVP_MD}
end

function EVP_md4()
    @ccall libwebsockets.EVP_md4()::Ptr{EVP_MD}
end

function EVP_md5()
    @ccall libwebsockets.EVP_md5()::Ptr{EVP_MD}
end

function EVP_md5_sha1()
    @ccall libwebsockets.EVP_md5_sha1()::Ptr{EVP_MD}
end

function EVP_blake2b512()
    @ccall libwebsockets.EVP_blake2b512()::Ptr{EVP_MD}
end

function EVP_blake2s256()
    @ccall libwebsockets.EVP_blake2s256()::Ptr{EVP_MD}
end

function EVP_sha1()
    @ccall libwebsockets.EVP_sha1()::Ptr{EVP_MD}
end

function EVP_sha224()
    @ccall libwebsockets.EVP_sha224()::Ptr{EVP_MD}
end

function EVP_sha256()
    @ccall libwebsockets.EVP_sha256()::Ptr{EVP_MD}
end

function EVP_sha384()
    @ccall libwebsockets.EVP_sha384()::Ptr{EVP_MD}
end

function EVP_sha512()
    @ccall libwebsockets.EVP_sha512()::Ptr{EVP_MD}
end

function EVP_sha512_224()
    @ccall libwebsockets.EVP_sha512_224()::Ptr{EVP_MD}
end

function EVP_sha512_256()
    @ccall libwebsockets.EVP_sha512_256()::Ptr{EVP_MD}
end

function EVP_sha3_224()
    @ccall libwebsockets.EVP_sha3_224()::Ptr{EVP_MD}
end

function EVP_sha3_256()
    @ccall libwebsockets.EVP_sha3_256()::Ptr{EVP_MD}
end

function EVP_sha3_384()
    @ccall libwebsockets.EVP_sha3_384()::Ptr{EVP_MD}
end

function EVP_sha3_512()
    @ccall libwebsockets.EVP_sha3_512()::Ptr{EVP_MD}
end

function EVP_shake128()
    @ccall libwebsockets.EVP_shake128()::Ptr{EVP_MD}
end

function EVP_shake256()
    @ccall libwebsockets.EVP_shake256()::Ptr{EVP_MD}
end

function EVP_mdc2()
    @ccall libwebsockets.EVP_mdc2()::Ptr{EVP_MD}
end

function EVP_ripemd160()
    @ccall libwebsockets.EVP_ripemd160()::Ptr{EVP_MD}
end

function EVP_whirlpool()
    @ccall libwebsockets.EVP_whirlpool()::Ptr{EVP_MD}
end

function EVP_sm3()
    @ccall libwebsockets.EVP_sm3()::Ptr{EVP_MD}
end

function EVP_enc_null()
    @ccall libwebsockets.EVP_enc_null()::Ptr{EVP_CIPHER}
end

function EVP_des_ecb()
    @ccall libwebsockets.EVP_des_ecb()::Ptr{EVP_CIPHER}
end

function EVP_des_ede()
    @ccall libwebsockets.EVP_des_ede()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3()
    @ccall libwebsockets.EVP_des_ede3()::Ptr{EVP_CIPHER}
end

function EVP_des_ede_ecb()
    @ccall libwebsockets.EVP_des_ede_ecb()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_ecb()
    @ccall libwebsockets.EVP_des_ede3_ecb()::Ptr{EVP_CIPHER}
end

function EVP_des_cfb1()
    @ccall libwebsockets.EVP_des_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_des_cfb8()
    @ccall libwebsockets.EVP_des_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_cfb1()
    @ccall libwebsockets.EVP_des_ede3_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_cfb8()
    @ccall libwebsockets.EVP_des_ede3_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_des_ofb()
    @ccall libwebsockets.EVP_des_ofb()::Ptr{EVP_CIPHER}
end

function EVP_des_ede_ofb()
    @ccall libwebsockets.EVP_des_ede_ofb()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_ofb()
    @ccall libwebsockets.EVP_des_ede3_ofb()::Ptr{EVP_CIPHER}
end

function EVP_des_cbc()
    @ccall libwebsockets.EVP_des_cbc()::Ptr{EVP_CIPHER}
end

function EVP_des_ede_cbc()
    @ccall libwebsockets.EVP_des_ede_cbc()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_cbc()
    @ccall libwebsockets.EVP_des_ede3_cbc()::Ptr{EVP_CIPHER}
end

function EVP_desx_cbc()
    @ccall libwebsockets.EVP_desx_cbc()::Ptr{EVP_CIPHER}
end

function EVP_des_ede3_wrap()
    @ccall libwebsockets.EVP_des_ede3_wrap()::Ptr{EVP_CIPHER}
end

function EVP_rc4()
    @ccall libwebsockets.EVP_rc4()::Ptr{EVP_CIPHER}
end

function EVP_rc4_40()
    @ccall libwebsockets.EVP_rc4_40()::Ptr{EVP_CIPHER}
end

function EVP_rc4_hmac_md5()
    @ccall libwebsockets.EVP_rc4_hmac_md5()::Ptr{EVP_CIPHER}
end

function EVP_idea_ecb()
    @ccall libwebsockets.EVP_idea_ecb()::Ptr{EVP_CIPHER}
end

function EVP_idea_ofb()
    @ccall libwebsockets.EVP_idea_ofb()::Ptr{EVP_CIPHER}
end

function EVP_idea_cbc()
    @ccall libwebsockets.EVP_idea_cbc()::Ptr{EVP_CIPHER}
end

function EVP_rc2_ecb()
    @ccall libwebsockets.EVP_rc2_ecb()::Ptr{EVP_CIPHER}
end

function EVP_rc2_cbc()
    @ccall libwebsockets.EVP_rc2_cbc()::Ptr{EVP_CIPHER}
end

function EVP_rc2_40_cbc()
    @ccall libwebsockets.EVP_rc2_40_cbc()::Ptr{EVP_CIPHER}
end

function EVP_rc2_64_cbc()
    @ccall libwebsockets.EVP_rc2_64_cbc()::Ptr{EVP_CIPHER}
end

function EVP_rc2_ofb()
    @ccall libwebsockets.EVP_rc2_ofb()::Ptr{EVP_CIPHER}
end

function EVP_bf_ecb()
    @ccall libwebsockets.EVP_bf_ecb()::Ptr{EVP_CIPHER}
end

function EVP_bf_cbc()
    @ccall libwebsockets.EVP_bf_cbc()::Ptr{EVP_CIPHER}
end

function EVP_bf_ofb()
    @ccall libwebsockets.EVP_bf_ofb()::Ptr{EVP_CIPHER}
end

function EVP_cast5_ecb()
    @ccall libwebsockets.EVP_cast5_ecb()::Ptr{EVP_CIPHER}
end

function EVP_cast5_cbc()
    @ccall libwebsockets.EVP_cast5_cbc()::Ptr{EVP_CIPHER}
end

function EVP_cast5_ofb()
    @ccall libwebsockets.EVP_cast5_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_ecb()
    @ccall libwebsockets.EVP_aes_128_ecb()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_cbc()
    @ccall libwebsockets.EVP_aes_128_cbc()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_cfb1()
    @ccall libwebsockets.EVP_aes_128_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_cfb8()
    @ccall libwebsockets.EVP_aes_128_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_ofb()
    @ccall libwebsockets.EVP_aes_128_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_ctr()
    @ccall libwebsockets.EVP_aes_128_ctr()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_ccm()
    @ccall libwebsockets.EVP_aes_128_ccm()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_gcm()
    @ccall libwebsockets.EVP_aes_128_gcm()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_xts()
    @ccall libwebsockets.EVP_aes_128_xts()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_wrap()
    @ccall libwebsockets.EVP_aes_128_wrap()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_wrap_pad()
    @ccall libwebsockets.EVP_aes_128_wrap_pad()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_ocb()
    @ccall libwebsockets.EVP_aes_128_ocb()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_ecb()
    @ccall libwebsockets.EVP_aes_192_ecb()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_cbc()
    @ccall libwebsockets.EVP_aes_192_cbc()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_cfb1()
    @ccall libwebsockets.EVP_aes_192_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_cfb8()
    @ccall libwebsockets.EVP_aes_192_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_ofb()
    @ccall libwebsockets.EVP_aes_192_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_ctr()
    @ccall libwebsockets.EVP_aes_192_ctr()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_ccm()
    @ccall libwebsockets.EVP_aes_192_ccm()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_gcm()
    @ccall libwebsockets.EVP_aes_192_gcm()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_wrap()
    @ccall libwebsockets.EVP_aes_192_wrap()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_wrap_pad()
    @ccall libwebsockets.EVP_aes_192_wrap_pad()::Ptr{EVP_CIPHER}
end

function EVP_aes_192_ocb()
    @ccall libwebsockets.EVP_aes_192_ocb()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_ecb()
    @ccall libwebsockets.EVP_aes_256_ecb()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_cbc()
    @ccall libwebsockets.EVP_aes_256_cbc()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_cfb1()
    @ccall libwebsockets.EVP_aes_256_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_cfb8()
    @ccall libwebsockets.EVP_aes_256_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_ofb()
    @ccall libwebsockets.EVP_aes_256_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_ctr()
    @ccall libwebsockets.EVP_aes_256_ctr()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_ccm()
    @ccall libwebsockets.EVP_aes_256_ccm()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_gcm()
    @ccall libwebsockets.EVP_aes_256_gcm()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_xts()
    @ccall libwebsockets.EVP_aes_256_xts()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_wrap()
    @ccall libwebsockets.EVP_aes_256_wrap()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_wrap_pad()
    @ccall libwebsockets.EVP_aes_256_wrap_pad()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_ocb()
    @ccall libwebsockets.EVP_aes_256_ocb()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_cbc_hmac_sha1()
    @ccall libwebsockets.EVP_aes_128_cbc_hmac_sha1()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_cbc_hmac_sha1()
    @ccall libwebsockets.EVP_aes_256_cbc_hmac_sha1()::Ptr{EVP_CIPHER}
end

function EVP_aes_128_cbc_hmac_sha256()
    @ccall libwebsockets.EVP_aes_128_cbc_hmac_sha256()::Ptr{EVP_CIPHER}
end

function EVP_aes_256_cbc_hmac_sha256()
    @ccall libwebsockets.EVP_aes_256_cbc_hmac_sha256()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_ecb()
    @ccall libwebsockets.EVP_aria_128_ecb()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_cbc()
    @ccall libwebsockets.EVP_aria_128_cbc()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_cfb1()
    @ccall libwebsockets.EVP_aria_128_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_cfb8()
    @ccall libwebsockets.EVP_aria_128_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_ctr()
    @ccall libwebsockets.EVP_aria_128_ctr()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_ofb()
    @ccall libwebsockets.EVP_aria_128_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_gcm()
    @ccall libwebsockets.EVP_aria_128_gcm()::Ptr{EVP_CIPHER}
end

function EVP_aria_128_ccm()
    @ccall libwebsockets.EVP_aria_128_ccm()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_ecb()
    @ccall libwebsockets.EVP_aria_192_ecb()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_cbc()
    @ccall libwebsockets.EVP_aria_192_cbc()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_cfb1()
    @ccall libwebsockets.EVP_aria_192_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_cfb8()
    @ccall libwebsockets.EVP_aria_192_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_ctr()
    @ccall libwebsockets.EVP_aria_192_ctr()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_ofb()
    @ccall libwebsockets.EVP_aria_192_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_gcm()
    @ccall libwebsockets.EVP_aria_192_gcm()::Ptr{EVP_CIPHER}
end

function EVP_aria_192_ccm()
    @ccall libwebsockets.EVP_aria_192_ccm()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_ecb()
    @ccall libwebsockets.EVP_aria_256_ecb()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_cbc()
    @ccall libwebsockets.EVP_aria_256_cbc()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_cfb1()
    @ccall libwebsockets.EVP_aria_256_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_cfb8()
    @ccall libwebsockets.EVP_aria_256_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_ctr()
    @ccall libwebsockets.EVP_aria_256_ctr()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_ofb()
    @ccall libwebsockets.EVP_aria_256_ofb()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_gcm()
    @ccall libwebsockets.EVP_aria_256_gcm()::Ptr{EVP_CIPHER}
end

function EVP_aria_256_ccm()
    @ccall libwebsockets.EVP_aria_256_ccm()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_ecb()
    @ccall libwebsockets.EVP_camellia_128_ecb()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_cbc()
    @ccall libwebsockets.EVP_camellia_128_cbc()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_cfb1()
    @ccall libwebsockets.EVP_camellia_128_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_cfb8()
    @ccall libwebsockets.EVP_camellia_128_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_ofb()
    @ccall libwebsockets.EVP_camellia_128_ofb()::Ptr{EVP_CIPHER}
end

function EVP_camellia_128_ctr()
    @ccall libwebsockets.EVP_camellia_128_ctr()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_ecb()
    @ccall libwebsockets.EVP_camellia_192_ecb()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_cbc()
    @ccall libwebsockets.EVP_camellia_192_cbc()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_cfb1()
    @ccall libwebsockets.EVP_camellia_192_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_cfb8()
    @ccall libwebsockets.EVP_camellia_192_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_ofb()
    @ccall libwebsockets.EVP_camellia_192_ofb()::Ptr{EVP_CIPHER}
end

function EVP_camellia_192_ctr()
    @ccall libwebsockets.EVP_camellia_192_ctr()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_ecb()
    @ccall libwebsockets.EVP_camellia_256_ecb()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_cbc()
    @ccall libwebsockets.EVP_camellia_256_cbc()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_cfb1()
    @ccall libwebsockets.EVP_camellia_256_cfb1()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_cfb8()
    @ccall libwebsockets.EVP_camellia_256_cfb8()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_ofb()
    @ccall libwebsockets.EVP_camellia_256_ofb()::Ptr{EVP_CIPHER}
end

function EVP_camellia_256_ctr()
    @ccall libwebsockets.EVP_camellia_256_ctr()::Ptr{EVP_CIPHER}
end

function EVP_chacha20()
    @ccall libwebsockets.EVP_chacha20()::Ptr{EVP_CIPHER}
end

function EVP_chacha20_poly1305()
    @ccall libwebsockets.EVP_chacha20_poly1305()::Ptr{EVP_CIPHER}
end

function EVP_seed_ecb()
    @ccall libwebsockets.EVP_seed_ecb()::Ptr{EVP_CIPHER}
end

function EVP_seed_cbc()
    @ccall libwebsockets.EVP_seed_cbc()::Ptr{EVP_CIPHER}
end

function EVP_seed_ofb()
    @ccall libwebsockets.EVP_seed_ofb()::Ptr{EVP_CIPHER}
end

function EVP_sm4_ecb()
    @ccall libwebsockets.EVP_sm4_ecb()::Ptr{EVP_CIPHER}
end

function EVP_sm4_cbc()
    @ccall libwebsockets.EVP_sm4_cbc()::Ptr{EVP_CIPHER}
end

function EVP_sm4_ofb()
    @ccall libwebsockets.EVP_sm4_ofb()::Ptr{EVP_CIPHER}
end

function EVP_sm4_ctr()
    @ccall libwebsockets.EVP_sm4_ctr()::Ptr{EVP_CIPHER}
end

function EVP_add_cipher(cipher)
    @ccall libwebsockets.EVP_add_cipher(cipher::Ptr{EVP_CIPHER})::Cint
end

function EVP_add_digest(digest)
    @ccall libwebsockets.EVP_add_digest(digest::Ptr{EVP_MD})::Cint
end

function EVP_CIPHER_do_all(fn, arg)
    @ccall libwebsockets.EVP_CIPHER_do_all(fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_CIPHER_do_all_sorted(fn, arg)
    @ccall libwebsockets.EVP_CIPHER_do_all_sorted(fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_CIPHER_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_CIPHER_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_MD_do_all(fn, arg)
    @ccall libwebsockets.EVP_MD_do_all(fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_MD_do_all_sorted(fn, arg)
    @ccall libwebsockets.EVP_MD_do_all_sorted(fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_MD_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_MD_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_MAC_fetch(libctx, algorithm, properties)
    @ccall libwebsockets.EVP_MAC_fetch(libctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_MAC}
end

function EVP_MAC_up_ref(mac)
    @ccall libwebsockets.EVP_MAC_up_ref(mac::Ptr{EVP_MAC})::Cint
end

function EVP_MAC_free(mac)
    @ccall libwebsockets.EVP_MAC_free(mac::Ptr{EVP_MAC})::Cvoid
end

function EVP_MAC_get0_name(mac)
    @ccall libwebsockets.EVP_MAC_get0_name(mac::Ptr{EVP_MAC})::Ptr{Cchar}
end

function EVP_MAC_get0_description(mac)
    @ccall libwebsockets.EVP_MAC_get0_description(mac::Ptr{EVP_MAC})::Ptr{Cchar}
end

function EVP_MAC_is_a(mac, name)
    @ccall libwebsockets.EVP_MAC_is_a(mac::Ptr{EVP_MAC}, name::Ptr{Cchar})::Cint
end

function EVP_MAC_get0_provider(mac)
    @ccall libwebsockets.EVP_MAC_get0_provider(mac::Ptr{EVP_MAC})::Ptr{OSSL_PROVIDER}
end

function EVP_MAC_get_params(mac, params)
    @ccall libwebsockets.EVP_MAC_get_params(mac::Ptr{EVP_MAC}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MAC_CTX_new(mac)
    @ccall libwebsockets.EVP_MAC_CTX_new(mac::Ptr{EVP_MAC})::Ptr{EVP_MAC_CTX}
end

function EVP_MAC_CTX_free(ctx)
    @ccall libwebsockets.EVP_MAC_CTX_free(ctx::Ptr{EVP_MAC_CTX})::Cvoid
end

function EVP_MAC_CTX_dup(src)
    @ccall libwebsockets.EVP_MAC_CTX_dup(src::Ptr{EVP_MAC_CTX})::Ptr{EVP_MAC_CTX}
end

function EVP_MAC_CTX_get0_mac(ctx)
    @ccall libwebsockets.EVP_MAC_CTX_get0_mac(ctx::Ptr{EVP_MAC_CTX})::Ptr{EVP_MAC}
end

function EVP_MAC_CTX_get_params(ctx, params)
    @ccall libwebsockets.EVP_MAC_CTX_get_params(ctx::Ptr{EVP_MAC_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MAC_CTX_set_params(ctx, params)
    @ccall libwebsockets.EVP_MAC_CTX_set_params(ctx::Ptr{EVP_MAC_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MAC_CTX_get_mac_size(ctx)
    @ccall libwebsockets.EVP_MAC_CTX_get_mac_size(ctx::Ptr{EVP_MAC_CTX})::Csize_t
end

function EVP_MAC_CTX_get_block_size(ctx)
    @ccall libwebsockets.EVP_MAC_CTX_get_block_size(ctx::Ptr{EVP_MAC_CTX})::Csize_t
end

function EVP_Q_mac(libctx, name, propq, subalg, params, key, keylen, data, datalen, out, outsize, outlen)
    @ccall libwebsockets.EVP_Q_mac(libctx::Ptr{OSSL_LIB_CTX}, name::Ptr{Cchar}, propq::Ptr{Cchar}, subalg::Ptr{Cchar}, params::Ptr{OSSL_PARAM}, key::Ptr{Cvoid}, keylen::Csize_t, data::Ptr{Cuchar}, datalen::Csize_t, out::Ptr{Cuchar}, outsize::Csize_t, outlen::Ptr{Csize_t})::Ptr{Cuchar}
end

function EVP_MAC_init(ctx, key, keylen, params)
    @ccall libwebsockets.EVP_MAC_init(ctx::Ptr{EVP_MAC_CTX}, key::Ptr{Cuchar}, keylen::Csize_t, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_MAC_update(ctx, data, datalen)
    @ccall libwebsockets.EVP_MAC_update(ctx::Ptr{EVP_MAC_CTX}, data::Ptr{Cuchar}, datalen::Csize_t)::Cint
end

function EVP_MAC_final(ctx, out, outl, outsize)
    @ccall libwebsockets.EVP_MAC_final(ctx::Ptr{EVP_MAC_CTX}, out::Ptr{Cuchar}, outl::Ptr{Csize_t}, outsize::Csize_t)::Cint
end

function EVP_MAC_finalXOF(ctx, out, outsize)
    @ccall libwebsockets.EVP_MAC_finalXOF(ctx::Ptr{EVP_MAC_CTX}, out::Ptr{Cuchar}, outsize::Csize_t)::Cint
end

function EVP_MAC_gettable_params(mac)
    @ccall libwebsockets.EVP_MAC_gettable_params(mac::Ptr{EVP_MAC})::Ptr{OSSL_PARAM}
end

function EVP_MAC_gettable_ctx_params(mac)
    @ccall libwebsockets.EVP_MAC_gettable_ctx_params(mac::Ptr{EVP_MAC})::Ptr{OSSL_PARAM}
end

function EVP_MAC_settable_ctx_params(mac)
    @ccall libwebsockets.EVP_MAC_settable_ctx_params(mac::Ptr{EVP_MAC})::Ptr{OSSL_PARAM}
end

function EVP_MAC_CTX_gettable_params(ctx)
    @ccall libwebsockets.EVP_MAC_CTX_gettable_params(ctx::Ptr{EVP_MAC_CTX})::Ptr{OSSL_PARAM}
end

function EVP_MAC_CTX_settable_params(ctx)
    @ccall libwebsockets.EVP_MAC_CTX_settable_params(ctx::Ptr{EVP_MAC_CTX})::Ptr{OSSL_PARAM}
end

function EVP_MAC_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_MAC_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_MAC_names_do_all(mac, fn, data)
    @ccall libwebsockets.EVP_MAC_names_do_all(mac::Ptr{EVP_MAC}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_RAND_fetch(libctx, algorithm, properties)
    @ccall libwebsockets.EVP_RAND_fetch(libctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_RAND}
end

function EVP_RAND_up_ref(rand)
    @ccall libwebsockets.EVP_RAND_up_ref(rand::Ptr{EVP_RAND})::Cint
end

function EVP_RAND_free(rand)
    @ccall libwebsockets.EVP_RAND_free(rand::Ptr{EVP_RAND})::Cvoid
end

function EVP_RAND_get0_name(rand)
    @ccall libwebsockets.EVP_RAND_get0_name(rand::Ptr{EVP_RAND})::Ptr{Cchar}
end

function EVP_RAND_get0_description(md)
    @ccall libwebsockets.EVP_RAND_get0_description(md::Ptr{EVP_RAND})::Ptr{Cchar}
end

function EVP_RAND_is_a(rand, name)
    @ccall libwebsockets.EVP_RAND_is_a(rand::Ptr{EVP_RAND}, name::Ptr{Cchar})::Cint
end

function EVP_RAND_get0_provider(rand)
    @ccall libwebsockets.EVP_RAND_get0_provider(rand::Ptr{EVP_RAND})::Ptr{OSSL_PROVIDER}
end

function EVP_RAND_get_params(rand, params)
    @ccall libwebsockets.EVP_RAND_get_params(rand::Ptr{EVP_RAND}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_RAND_CTX_new(rand, parent)
    @ccall libwebsockets.EVP_RAND_CTX_new(rand::Ptr{EVP_RAND}, parent::Ptr{EVP_RAND_CTX})::Ptr{EVP_RAND_CTX}
end

function EVP_RAND_CTX_free(ctx)
    @ccall libwebsockets.EVP_RAND_CTX_free(ctx::Ptr{EVP_RAND_CTX})::Cvoid
end

function EVP_RAND_CTX_get0_rand(ctx)
    @ccall libwebsockets.EVP_RAND_CTX_get0_rand(ctx::Ptr{EVP_RAND_CTX})::Ptr{EVP_RAND}
end

function EVP_RAND_CTX_get_params(ctx, params)
    @ccall libwebsockets.EVP_RAND_CTX_get_params(ctx::Ptr{EVP_RAND_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_RAND_CTX_set_params(ctx, params)
    @ccall libwebsockets.EVP_RAND_CTX_set_params(ctx::Ptr{EVP_RAND_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_RAND_gettable_params(rand)
    @ccall libwebsockets.EVP_RAND_gettable_params(rand::Ptr{EVP_RAND})::Ptr{OSSL_PARAM}
end

function EVP_RAND_gettable_ctx_params(rand)
    @ccall libwebsockets.EVP_RAND_gettable_ctx_params(rand::Ptr{EVP_RAND})::Ptr{OSSL_PARAM}
end

function EVP_RAND_settable_ctx_params(rand)
    @ccall libwebsockets.EVP_RAND_settable_ctx_params(rand::Ptr{EVP_RAND})::Ptr{OSSL_PARAM}
end

function EVP_RAND_CTX_gettable_params(ctx)
    @ccall libwebsockets.EVP_RAND_CTX_gettable_params(ctx::Ptr{EVP_RAND_CTX})::Ptr{OSSL_PARAM}
end

function EVP_RAND_CTX_settable_params(ctx)
    @ccall libwebsockets.EVP_RAND_CTX_settable_params(ctx::Ptr{EVP_RAND_CTX})::Ptr{OSSL_PARAM}
end

function EVP_RAND_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_RAND_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_RAND_names_do_all(rand, fn, data)
    @ccall libwebsockets.EVP_RAND_names_do_all(rand::Ptr{EVP_RAND}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_RAND_instantiate(ctx, strength, prediction_resistance, pstr, pstr_len, params)
    @ccall libwebsockets.EVP_RAND_instantiate(ctx::Ptr{EVP_RAND_CTX}, strength::Cuint, prediction_resistance::Cint, pstr::Ptr{Cuchar}, pstr_len::Csize_t, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_RAND_uninstantiate(ctx)
    @ccall libwebsockets.EVP_RAND_uninstantiate(ctx::Ptr{EVP_RAND_CTX})::Cint
end

function EVP_RAND_generate(ctx, out, outlen, strength, prediction_resistance, addin, addin_len)
    @ccall libwebsockets.EVP_RAND_generate(ctx::Ptr{EVP_RAND_CTX}, out::Ptr{Cuchar}, outlen::Csize_t, strength::Cuint, prediction_resistance::Cint, addin::Ptr{Cuchar}, addin_len::Csize_t)::Cint
end

function EVP_RAND_reseed(ctx, prediction_resistance, ent, ent_len, addin, addin_len)
    @ccall libwebsockets.EVP_RAND_reseed(ctx::Ptr{EVP_RAND_CTX}, prediction_resistance::Cint, ent::Ptr{Cuchar}, ent_len::Csize_t, addin::Ptr{Cuchar}, addin_len::Csize_t)::Cint
end

function EVP_RAND_nonce(ctx, out, outlen)
    @ccall libwebsockets.EVP_RAND_nonce(ctx::Ptr{EVP_RAND_CTX}, out::Ptr{Cuchar}, outlen::Csize_t)::Cint
end

function EVP_RAND_enable_locking(ctx)
    @ccall libwebsockets.EVP_RAND_enable_locking(ctx::Ptr{EVP_RAND_CTX})::Cint
end

function EVP_RAND_verify_zeroization(ctx)
    @ccall libwebsockets.EVP_RAND_verify_zeroization(ctx::Ptr{EVP_RAND_CTX})::Cint
end

function EVP_RAND_get_strength(ctx)
    @ccall libwebsockets.EVP_RAND_get_strength(ctx::Ptr{EVP_RAND_CTX})::Cuint
end

function EVP_RAND_get_state(ctx)
    @ccall libwebsockets.EVP_RAND_get_state(ctx::Ptr{EVP_RAND_CTX})::Cint
end

function EVP_PKEY_decrypt_old(dec_key, enc_key, enc_key_len, private_key)
    @ccall libwebsockets.EVP_PKEY_decrypt_old(dec_key::Ptr{Cuchar}, enc_key::Ptr{Cuchar}, enc_key_len::Cint, private_key::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_encrypt_old(enc_key, key, key_len, pub_key)
    @ccall libwebsockets.EVP_PKEY_encrypt_old(enc_key::Ptr{Cuchar}, key::Ptr{Cuchar}, key_len::Cint, pub_key::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_is_a(pkey, name)
    @ccall libwebsockets.EVP_PKEY_is_a(pkey::Ptr{EVP_PKEY}, name::Ptr{Cchar})::Cint
end

function EVP_PKEY_type_names_do_all(pkey, fn, data)
    @ccall libwebsockets.EVP_PKEY_type_names_do_all(pkey::Ptr{EVP_PKEY}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_PKEY_type(type)
    @ccall libwebsockets.EVP_PKEY_type(type::Cint)::Cint
end

function EVP_PKEY_can_sign(pkey)
    @ccall libwebsockets.EVP_PKEY_can_sign(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_set_type(pkey, type)
    @ccall libwebsockets.EVP_PKEY_set_type(pkey::Ptr{EVP_PKEY}, type::Cint)::Cint
end

function EVP_PKEY_set_type_str(pkey, str, len)
    @ccall libwebsockets.EVP_PKEY_set_type_str(pkey::Ptr{EVP_PKEY}, str::Ptr{Cchar}, len::Cint)::Cint
end

function EVP_PKEY_set_type_by_keymgmt(pkey, keymgmt)
    @ccall libwebsockets.EVP_PKEY_set_type_by_keymgmt(pkey::Ptr{EVP_PKEY}, keymgmt::Ptr{EVP_KEYMGMT})::Cint
end

function EVP_PKEY_set1_engine(pkey, e)
    @ccall libwebsockets.EVP_PKEY_set1_engine(pkey::Ptr{EVP_PKEY}, e::Ptr{ENGINE})::Cint
end

function EVP_PKEY_get0_engine(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_engine(pkey::Ptr{EVP_PKEY})::Ptr{ENGINE}
end

function EVP_PKEY_get0(pkey)
    @ccall libwebsockets.EVP_PKEY_get0(pkey::Ptr{EVP_PKEY})::Ptr{Cvoid}
end

function EVP_PKEY_get0_hmac(pkey, len)
    @ccall libwebsockets.EVP_PKEY_get0_hmac(pkey::Ptr{EVP_PKEY}, len::Ptr{Csize_t})::Ptr{Cuchar}
end

function EVP_PKEY_get0_poly1305(pkey, len)
    @ccall libwebsockets.EVP_PKEY_get0_poly1305(pkey::Ptr{EVP_PKEY}, len::Ptr{Csize_t})::Ptr{Cuchar}
end

function EVP_PKEY_get0_siphash(pkey, len)
    @ccall libwebsockets.EVP_PKEY_get0_siphash(pkey::Ptr{EVP_PKEY}, len::Ptr{Csize_t})::Ptr{Cuchar}
end

function EVP_PKEY_set1_RSA(pkey, key)
    @ccall libwebsockets.EVP_PKEY_set1_RSA(pkey::Ptr{EVP_PKEY}, key::Ptr{rsa_st})::Cint
end

function EVP_PKEY_get0_RSA(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_RSA(pkey::Ptr{EVP_PKEY})::Ptr{rsa_st}
end

function EVP_PKEY_get1_RSA(pkey)
    @ccall libwebsockets.EVP_PKEY_get1_RSA(pkey::Ptr{EVP_PKEY})::Ptr{rsa_st}
end

function EVP_PKEY_set1_DSA(pkey, key)
    @ccall libwebsockets.EVP_PKEY_set1_DSA(pkey::Ptr{EVP_PKEY}, key::Ptr{dsa_st})::Cint
end

function EVP_PKEY_get0_DSA(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_DSA(pkey::Ptr{EVP_PKEY})::Ptr{dsa_st}
end

function EVP_PKEY_get1_DSA(pkey)
    @ccall libwebsockets.EVP_PKEY_get1_DSA(pkey::Ptr{EVP_PKEY})::Ptr{dsa_st}
end

function EVP_PKEY_set1_DH(pkey, key)
    @ccall libwebsockets.EVP_PKEY_set1_DH(pkey::Ptr{EVP_PKEY}, key::Ptr{dh_st})::Cint
end

function EVP_PKEY_get0_DH(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_DH(pkey::Ptr{EVP_PKEY})::Ptr{dh_st}
end

function EVP_PKEY_get1_DH(pkey)
    @ccall libwebsockets.EVP_PKEY_get1_DH(pkey::Ptr{EVP_PKEY})::Ptr{dh_st}
end

function EVP_PKEY_set1_EC_KEY(pkey, key)
    @ccall libwebsockets.EVP_PKEY_set1_EC_KEY(pkey::Ptr{EVP_PKEY}, key::Ptr{ec_key_st})::Cint
end

function EVP_PKEY_get0_EC_KEY(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_EC_KEY(pkey::Ptr{EVP_PKEY})::Ptr{ec_key_st}
end

function EVP_PKEY_get1_EC_KEY(pkey)
    @ccall libwebsockets.EVP_PKEY_get1_EC_KEY(pkey::Ptr{EVP_PKEY})::Ptr{ec_key_st}
end

function EVP_PKEY_new()
    @ccall libwebsockets.EVP_PKEY_new()::Ptr{EVP_PKEY}
end

function EVP_PKEY_up_ref(pkey)
    @ccall libwebsockets.EVP_PKEY_up_ref(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_dup(pkey)
    @ccall libwebsockets.EVP_PKEY_dup(pkey::Ptr{EVP_PKEY})::Ptr{EVP_PKEY}
end

function EVP_PKEY_free(pkey)
    @ccall libwebsockets.EVP_PKEY_free(pkey::Ptr{EVP_PKEY})::Cvoid
end

function EVP_PKEY_get0_description(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_description(pkey::Ptr{EVP_PKEY})::Ptr{Cchar}
end

function EVP_PKEY_get0_provider(key)
    @ccall libwebsockets.EVP_PKEY_get0_provider(key::Ptr{EVP_PKEY})::Ptr{OSSL_PROVIDER}
end

function d2i_PublicKey(type, a, pp, length)
    @ccall libwebsockets.d2i_PublicKey(type::Cint, a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{EVP_PKEY}
end

function i2d_PublicKey(a, pp)
    @ccall libwebsockets.i2d_PublicKey(a::Ptr{EVP_PKEY}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_PrivateKey_ex(type, a, pp, length, libctx, propq)
    @ccall libwebsockets.d2i_PrivateKey_ex(type::Cint, a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function d2i_PrivateKey(type, a, pp, length)
    @ccall libwebsockets.d2i_PrivateKey(type::Cint, a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{EVP_PKEY}
end

function d2i_AutoPrivateKey_ex(a, pp, length, libctx, propq)
    @ccall libwebsockets.d2i_AutoPrivateKey_ex(a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function d2i_AutoPrivateKey(a, pp, length)
    @ccall libwebsockets.d2i_AutoPrivateKey(a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{EVP_PKEY}
end

function i2d_PrivateKey(a, pp)
    @ccall libwebsockets.i2d_PrivateKey(a::Ptr{EVP_PKEY}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function i2d_KeyParams(a, pp)
    @ccall libwebsockets.i2d_KeyParams(a::Ptr{EVP_PKEY}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_KeyParams(type, a, pp, length)
    @ccall libwebsockets.d2i_KeyParams(type::Cint, a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{EVP_PKEY}
end

function i2d_KeyParams_bio(bp, pkey)
    @ccall libwebsockets.i2d_KeyParams_bio(bp::Ptr{BIO}, pkey::Ptr{EVP_PKEY})::Cint
end

function d2i_KeyParams_bio(type, a, in)
    @ccall libwebsockets.d2i_KeyParams_bio(type::Cint, a::Ptr{Ptr{EVP_PKEY}}, in::Ptr{BIO})::Ptr{EVP_PKEY}
end

function EVP_PKEY_copy_parameters(to, from)
    @ccall libwebsockets.EVP_PKEY_copy_parameters(to::Ptr{EVP_PKEY}, from::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_missing_parameters(pkey)
    @ccall libwebsockets.EVP_PKEY_missing_parameters(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_save_parameters(pkey, mode)
    @ccall libwebsockets.EVP_PKEY_save_parameters(pkey::Ptr{EVP_PKEY}, mode::Cint)::Cint
end

function EVP_PKEY_parameters_eq(a, b)
    @ccall libwebsockets.EVP_PKEY_parameters_eq(a::Ptr{EVP_PKEY}, b::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_eq(a, b)
    @ccall libwebsockets.EVP_PKEY_eq(a::Ptr{EVP_PKEY}, b::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_cmp_parameters(a, b)
    @ccall libwebsockets.EVP_PKEY_cmp_parameters(a::Ptr{EVP_PKEY}, b::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_cmp(a, b)
    @ccall libwebsockets.EVP_PKEY_cmp(a::Ptr{EVP_PKEY}, b::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_print_public(out, pkey, indent, pctx)
    @ccall libwebsockets.EVP_PKEY_print_public(out::Ptr{BIO}, pkey::Ptr{EVP_PKEY}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function EVP_PKEY_print_private(out, pkey, indent, pctx)
    @ccall libwebsockets.EVP_PKEY_print_private(out::Ptr{BIO}, pkey::Ptr{EVP_PKEY}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function EVP_PKEY_print_params(out, pkey, indent, pctx)
    @ccall libwebsockets.EVP_PKEY_print_params(out::Ptr{BIO}, pkey::Ptr{EVP_PKEY}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function EVP_PKEY_print_public_fp(fp, pkey, indent, pctx)
    @ccall libwebsockets.EVP_PKEY_print_public_fp(fp::Ptr{Libc.FILE}, pkey::Ptr{EVP_PKEY}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function EVP_PKEY_print_private_fp(fp, pkey, indent, pctx)
    @ccall libwebsockets.EVP_PKEY_print_private_fp(fp::Ptr{Libc.FILE}, pkey::Ptr{EVP_PKEY}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function EVP_PKEY_print_params_fp(fp, pkey, indent, pctx)
    @ccall libwebsockets.EVP_PKEY_print_params_fp(fp::Ptr{Libc.FILE}, pkey::Ptr{EVP_PKEY}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function EVP_PKEY_get_default_digest_nid(pkey, pnid)
    @ccall libwebsockets.EVP_PKEY_get_default_digest_nid(pkey::Ptr{EVP_PKEY}, pnid::Ptr{Cint})::Cint
end

function EVP_PKEY_get_default_digest_name(pkey, mdname, mdname_sz)
    @ccall libwebsockets.EVP_PKEY_get_default_digest_name(pkey::Ptr{EVP_PKEY}, mdname::Ptr{Cchar}, mdname_sz::Csize_t)::Cint
end

function EVP_PKEY_digestsign_supports_digest(pkey, libctx, name, propq)
    @ccall libwebsockets.EVP_PKEY_digestsign_supports_digest(pkey::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, name::Ptr{Cchar}, propq::Ptr{Cchar})::Cint
end

function EVP_CIPHER_param_to_asn1(c, type)
    @ccall libwebsockets.EVP_CIPHER_param_to_asn1(c::Ptr{EVP_CIPHER_CTX}, type::Ptr{ASN1_TYPE})::Cint
end

function EVP_CIPHER_asn1_to_param(c, type)
    @ccall libwebsockets.EVP_CIPHER_asn1_to_param(c::Ptr{EVP_CIPHER_CTX}, type::Ptr{ASN1_TYPE})::Cint
end

function EVP_CIPHER_set_asn1_iv(c, type)
    @ccall libwebsockets.EVP_CIPHER_set_asn1_iv(c::Ptr{EVP_CIPHER_CTX}, type::Ptr{ASN1_TYPE})::Cint
end

function EVP_CIPHER_get_asn1_iv(c, type)
    @ccall libwebsockets.EVP_CIPHER_get_asn1_iv(c::Ptr{EVP_CIPHER_CTX}, type::Ptr{ASN1_TYPE})::Cint
end

function PKCS5_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de)
    @ccall libwebsockets.PKCS5_PBE_keyivgen(ctx::Ptr{EVP_CIPHER_CTX}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, cipher::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, en_de::Cint)::Cint
end

function PKCS5_PBE_keyivgen_ex(cctx, pass, passlen, param, cipher, md, en_de, libctx, propq)
    @ccall libwebsockets.PKCS5_PBE_keyivgen_ex(cctx::Ptr{EVP_CIPHER_CTX}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, cipher::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, en_de::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PKCS5_PBKDF2_HMAC_SHA1(pass, passlen, salt, saltlen, iter, keylen, out)
    @ccall libwebsockets.PKCS5_PBKDF2_HMAC_SHA1(pass::Ptr{Cchar}, passlen::Cint, salt::Ptr{Cuchar}, saltlen::Cint, iter::Cint, keylen::Cint, out::Ptr{Cuchar})::Cint
end

function PKCS5_PBKDF2_HMAC(pass, passlen, salt, saltlen, iter, digest, keylen, out)
    @ccall libwebsockets.PKCS5_PBKDF2_HMAC(pass::Ptr{Cchar}, passlen::Cint, salt::Ptr{Cuchar}, saltlen::Cint, iter::Cint, digest::Ptr{EVP_MD}, keylen::Cint, out::Ptr{Cuchar})::Cint
end

function PKCS5_v2_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de)
    @ccall libwebsockets.PKCS5_v2_PBE_keyivgen(ctx::Ptr{EVP_CIPHER_CTX}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, cipher::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, en_de::Cint)::Cint
end

function PKCS5_v2_PBE_keyivgen_ex(ctx, pass, passlen, param, cipher, md, en_de, libctx, propq)
    @ccall libwebsockets.PKCS5_v2_PBE_keyivgen_ex(ctx::Ptr{EVP_CIPHER_CTX}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, cipher::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, en_de::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function EVP_PBE_scrypt(pass, passlen, salt, saltlen, N, r, p, maxmem, key, keylen)
    @ccall libwebsockets.EVP_PBE_scrypt(pass::Ptr{Cchar}, passlen::Csize_t, salt::Ptr{Cuchar}, saltlen::Csize_t, N::UInt64, r::UInt64, p::UInt64, maxmem::UInt64, key::Ptr{Cuchar}, keylen::Csize_t)::Cint
end

function EVP_PBE_scrypt_ex(pass, passlen, salt, saltlen, N, r, p, maxmem, key, keylen, ctx, propq)
    @ccall libwebsockets.EVP_PBE_scrypt_ex(pass::Ptr{Cchar}, passlen::Csize_t, salt::Ptr{Cuchar}, saltlen::Csize_t, N::UInt64, r::UInt64, p::UInt64, maxmem::UInt64, key::Ptr{Cuchar}, keylen::Csize_t, ctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PKCS5_v2_scrypt_keyivgen(ctx, pass, passlen, param, c, md, en_de)
    @ccall libwebsockets.PKCS5_v2_scrypt_keyivgen(ctx::Ptr{EVP_CIPHER_CTX}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, c::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, en_de::Cint)::Cint
end

function PKCS5_v2_scrypt_keyivgen_ex(ctx, pass, passlen, param, c, md, en_de, libctx, propq)
    @ccall libwebsockets.PKCS5_v2_scrypt_keyivgen_ex(ctx::Ptr{EVP_CIPHER_CTX}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, c::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, en_de::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PKCS5_PBE_add()
    @ccall libwebsockets.PKCS5_PBE_add()::Cvoid
end

function EVP_PBE_CipherInit(pbe_obj, pass, passlen, param, ctx, en_de)
    @ccall libwebsockets.EVP_PBE_CipherInit(pbe_obj::Ptr{ASN1_OBJECT}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, ctx::Ptr{EVP_CIPHER_CTX}, en_de::Cint)::Cint
end

function EVP_PBE_CipherInit_ex(pbe_obj, pass, passlen, param, ctx, en_de, libctx, propq)
    @ccall libwebsockets.EVP_PBE_CipherInit_ex(pbe_obj::Ptr{ASN1_OBJECT}, pass::Ptr{Cchar}, passlen::Cint, param::Ptr{ASN1_TYPE}, ctx::Ptr{EVP_CIPHER_CTX}, en_de::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function EVP_PBE_alg_add_type(pbe_type, pbe_nid, cipher_nid, md_nid, keygen)
    @ccall libwebsockets.EVP_PBE_alg_add_type(pbe_type::Cint, pbe_nid::Cint, cipher_nid::Cint, md_nid::Cint, keygen::Ptr{EVP_PBE_KEYGEN})::Cint
end

function EVP_PBE_alg_add(nid, cipher, md, keygen)
    @ccall libwebsockets.EVP_PBE_alg_add(nid::Cint, cipher::Ptr{EVP_CIPHER}, md::Ptr{EVP_MD}, keygen::Ptr{EVP_PBE_KEYGEN})::Cint
end

function EVP_PBE_find(type, pbe_nid, pcnid, pmnid, pkeygen)
    @ccall libwebsockets.EVP_PBE_find(type::Cint, pbe_nid::Cint, pcnid::Ptr{Cint}, pmnid::Ptr{Cint}, pkeygen::Ptr{Ptr{EVP_PBE_KEYGEN}})::Cint
end

function EVP_PBE_find_ex(type, pbe_nid, pcnid, pmnid, pkeygen, pkeygen_ex)
    @ccall libwebsockets.EVP_PBE_find_ex(type::Cint, pbe_nid::Cint, pcnid::Ptr{Cint}, pmnid::Ptr{Cint}, pkeygen::Ptr{Ptr{EVP_PBE_KEYGEN}}, pkeygen_ex::Ptr{Ptr{EVP_PBE_KEYGEN_EX}})::Cint
end

function EVP_PBE_cleanup()
    @ccall libwebsockets.EVP_PBE_cleanup()::Cvoid
end

function EVP_PBE_get(ptype, ppbe_nid, num)
    @ccall libwebsockets.EVP_PBE_get(ptype::Ptr{Cint}, ppbe_nid::Ptr{Cint}, num::Csize_t)::Cint
end

function EVP_PKEY_asn1_get_count()
    @ccall libwebsockets.EVP_PKEY_asn1_get_count()::Cint
end

function EVP_PKEY_asn1_get0(idx)
    @ccall libwebsockets.EVP_PKEY_asn1_get0(idx::Cint)::Ptr{EVP_PKEY_ASN1_METHOD}
end

function EVP_PKEY_asn1_find(pe, type)
    @ccall libwebsockets.EVP_PKEY_asn1_find(pe::Ptr{Ptr{ENGINE}}, type::Cint)::Ptr{EVP_PKEY_ASN1_METHOD}
end

function EVP_PKEY_asn1_find_str(pe, str, len)
    @ccall libwebsockets.EVP_PKEY_asn1_find_str(pe::Ptr{Ptr{ENGINE}}, str::Ptr{Cchar}, len::Cint)::Ptr{EVP_PKEY_ASN1_METHOD}
end

function EVP_PKEY_asn1_add0(ameth)
    @ccall libwebsockets.EVP_PKEY_asn1_add0(ameth::Ptr{EVP_PKEY_ASN1_METHOD})::Cint
end

function EVP_PKEY_asn1_add_alias(to, from)
    @ccall libwebsockets.EVP_PKEY_asn1_add_alias(to::Cint, from::Cint)::Cint
end

function EVP_PKEY_asn1_get0_info(ppkey_id, pkey_base_id, ppkey_flags, pinfo, ppem_str, ameth)
    @ccall libwebsockets.EVP_PKEY_asn1_get0_info(ppkey_id::Ptr{Cint}, pkey_base_id::Ptr{Cint}, ppkey_flags::Ptr{Cint}, pinfo::Ptr{Ptr{Cchar}}, ppem_str::Ptr{Ptr{Cchar}}, ameth::Ptr{EVP_PKEY_ASN1_METHOD})::Cint
end

function EVP_PKEY_get0_asn1(pkey)
    @ccall libwebsockets.EVP_PKEY_get0_asn1(pkey::Ptr{EVP_PKEY})::Ptr{EVP_PKEY_ASN1_METHOD}
end

function EVP_PKEY_asn1_new(id, flags, pem_str, info)
    @ccall libwebsockets.EVP_PKEY_asn1_new(id::Cint, flags::Cint, pem_str::Ptr{Cchar}, info::Ptr{Cchar})::Ptr{EVP_PKEY_ASN1_METHOD}
end

function EVP_PKEY_asn1_copy(dst, src)
    @ccall libwebsockets.EVP_PKEY_asn1_copy(dst::Ptr{EVP_PKEY_ASN1_METHOD}, src::Ptr{EVP_PKEY_ASN1_METHOD})::Cvoid
end

function EVP_PKEY_asn1_free(ameth)
    @ccall libwebsockets.EVP_PKEY_asn1_free(ameth::Ptr{EVP_PKEY_ASN1_METHOD})::Cvoid
end

function EVP_PKEY_asn1_set_public(ameth, pub_decode, pub_encode, pub_cmp, pub_print, pkey_size, pkey_bits)
    @ccall libwebsockets.EVP_PKEY_asn1_set_public(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pub_decode::Ptr{Cvoid}, pub_encode::Ptr{Cvoid}, pub_cmp::Ptr{Cvoid}, pub_print::Ptr{Cvoid}, pkey_size::Ptr{Cvoid}, pkey_bits::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_private(ameth, priv_decode, priv_encode, priv_print)
    @ccall libwebsockets.EVP_PKEY_asn1_set_private(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, priv_decode::Ptr{Cvoid}, priv_encode::Ptr{Cvoid}, priv_print::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_param(ameth, param_decode, param_encode, param_missing, param_copy, param_cmp, param_print)
    @ccall libwebsockets.EVP_PKEY_asn1_set_param(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, param_decode::Ptr{Cvoid}, param_encode::Ptr{Cvoid}, param_missing::Ptr{Cvoid}, param_copy::Ptr{Cvoid}, param_cmp::Ptr{Cvoid}, param_print::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_free(ameth, pkey_free)
    @ccall libwebsockets.EVP_PKEY_asn1_set_free(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pkey_free::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_ctrl(ameth, pkey_ctrl)
    @ccall libwebsockets.EVP_PKEY_asn1_set_ctrl(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pkey_ctrl::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_item(ameth, item_verify, item_sign)
    @ccall libwebsockets.EVP_PKEY_asn1_set_item(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, item_verify::Ptr{Cvoid}, item_sign::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_siginf(ameth, siginf_set)
    @ccall libwebsockets.EVP_PKEY_asn1_set_siginf(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, siginf_set::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_check(ameth, pkey_check)
    @ccall libwebsockets.EVP_PKEY_asn1_set_check(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pkey_check::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_public_check(ameth, pkey_pub_check)
    @ccall libwebsockets.EVP_PKEY_asn1_set_public_check(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pkey_pub_check::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_param_check(ameth, pkey_param_check)
    @ccall libwebsockets.EVP_PKEY_asn1_set_param_check(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pkey_param_check::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_set_priv_key(ameth, set_priv_key)
    @ccall libwebsockets.EVP_PKEY_asn1_set_set_priv_key(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, set_priv_key::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_set_pub_key(ameth, set_pub_key)
    @ccall libwebsockets.EVP_PKEY_asn1_set_set_pub_key(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, set_pub_key::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_get_priv_key(ameth, get_priv_key)
    @ccall libwebsockets.EVP_PKEY_asn1_set_get_priv_key(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, get_priv_key::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_get_pub_key(ameth, get_pub_key)
    @ccall libwebsockets.EVP_PKEY_asn1_set_get_pub_key(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, get_pub_key::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_asn1_set_security_bits(ameth, pkey_security_bits)
    @ccall libwebsockets.EVP_PKEY_asn1_set_security_bits(ameth::Ptr{EVP_PKEY_ASN1_METHOD}, pkey_security_bits::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_CTX_get_signature_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_get_signature_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{Ptr{EVP_MD}})::Cint
end

function EVP_PKEY_CTX_set_signature_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_signature_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_set1_id(ctx, id, len)
    @ccall libwebsockets.EVP_PKEY_CTX_set1_id(ctx::Ptr{EVP_PKEY_CTX}, id::Ptr{Cvoid}, len::Cint)::Cint
end

function EVP_PKEY_CTX_get1_id(ctx, id)
    @ccall libwebsockets.EVP_PKEY_CTX_get1_id(ctx::Ptr{EVP_PKEY_CTX}, id::Ptr{Cvoid})::Cint
end

function EVP_PKEY_CTX_get1_id_len(ctx, id_len)
    @ccall libwebsockets.EVP_PKEY_CTX_get1_id_len(ctx::Ptr{EVP_PKEY_CTX}, id_len::Ptr{Csize_t})::Cint
end

function EVP_PKEY_CTX_set_kem_op(ctx, op)
    @ccall libwebsockets.EVP_PKEY_CTX_set_kem_op(ctx::Ptr{EVP_PKEY_CTX}, op::Ptr{Cchar})::Cint
end

function EVP_PKEY_get0_type_name(key)
    @ccall libwebsockets.EVP_PKEY_get0_type_name(key::Ptr{EVP_PKEY})::Ptr{Cchar}
end

function EVP_PKEY_CTX_set_mac_key(ctx, key, keylen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_mac_key(ctx::Ptr{EVP_PKEY_CTX}, key::Ptr{Cuchar}, keylen::Cint)::Cint
end

function EVP_PKEY_meth_find(type)
    @ccall libwebsockets.EVP_PKEY_meth_find(type::Cint)::Ptr{EVP_PKEY_METHOD}
end

function EVP_PKEY_meth_new(id, flags)
    @ccall libwebsockets.EVP_PKEY_meth_new(id::Cint, flags::Cint)::Ptr{EVP_PKEY_METHOD}
end

function EVP_PKEY_meth_get0_info(ppkey_id, pflags, meth)
    @ccall libwebsockets.EVP_PKEY_meth_get0_info(ppkey_id::Ptr{Cint}, pflags::Ptr{Cint}, meth::Ptr{EVP_PKEY_METHOD})::Cvoid
end

function EVP_PKEY_meth_copy(dst, src)
    @ccall libwebsockets.EVP_PKEY_meth_copy(dst::Ptr{EVP_PKEY_METHOD}, src::Ptr{EVP_PKEY_METHOD})::Cvoid
end

function EVP_PKEY_meth_free(pmeth)
    @ccall libwebsockets.EVP_PKEY_meth_free(pmeth::Ptr{EVP_PKEY_METHOD})::Cvoid
end

function EVP_PKEY_meth_add0(pmeth)
    @ccall libwebsockets.EVP_PKEY_meth_add0(pmeth::Ptr{EVP_PKEY_METHOD})::Cint
end

function EVP_PKEY_meth_remove(pmeth)
    @ccall libwebsockets.EVP_PKEY_meth_remove(pmeth::Ptr{EVP_PKEY_METHOD})::Cint
end

function EVP_PKEY_meth_get_count()
    @ccall libwebsockets.EVP_PKEY_meth_get_count()::Csize_t
end

function EVP_PKEY_meth_get0(idx)
    @ccall libwebsockets.EVP_PKEY_meth_get0(idx::Csize_t)::Ptr{EVP_PKEY_METHOD}
end

function EVP_KEYMGMT_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_KEYMGMT_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_KEYMGMT}
end

function EVP_KEYMGMT_up_ref(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_up_ref(keymgmt::Ptr{EVP_KEYMGMT})::Cint
end

function EVP_KEYMGMT_free(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_free(keymgmt::Ptr{EVP_KEYMGMT})::Cvoid
end

function EVP_KEYMGMT_get0_provider(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_get0_provider(keymgmt::Ptr{EVP_KEYMGMT})::Ptr{OSSL_PROVIDER}
end

function EVP_KEYMGMT_get0_name(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_get0_name(keymgmt::Ptr{EVP_KEYMGMT})::Ptr{Cchar}
end

function EVP_KEYMGMT_get0_description(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_get0_description(keymgmt::Ptr{EVP_KEYMGMT})::Ptr{Cchar}
end

function EVP_KEYMGMT_is_a(keymgmt, name)
    @ccall libwebsockets.EVP_KEYMGMT_is_a(keymgmt::Ptr{EVP_KEYMGMT}, name::Ptr{Cchar})::Cint
end

function EVP_KEYMGMT_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_KEYMGMT_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_KEYMGMT_names_do_all(keymgmt, fn, data)
    @ccall libwebsockets.EVP_KEYMGMT_names_do_all(keymgmt::Ptr{EVP_KEYMGMT}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_KEYMGMT_gettable_params(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_gettable_params(keymgmt::Ptr{EVP_KEYMGMT})::Ptr{OSSL_PARAM}
end

function EVP_KEYMGMT_settable_params(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_settable_params(keymgmt::Ptr{EVP_KEYMGMT})::Ptr{OSSL_PARAM}
end

function EVP_KEYMGMT_gen_settable_params(keymgmt)
    @ccall libwebsockets.EVP_KEYMGMT_gen_settable_params(keymgmt::Ptr{EVP_KEYMGMT})::Ptr{OSSL_PARAM}
end

function EVP_PKEY_CTX_new(pkey, e)
    @ccall libwebsockets.EVP_PKEY_CTX_new(pkey::Ptr{EVP_PKEY}, e::Ptr{ENGINE})::Ptr{EVP_PKEY_CTX}
end

function EVP_PKEY_CTX_new_id(id, e)
    @ccall libwebsockets.EVP_PKEY_CTX_new_id(id::Cint, e::Ptr{ENGINE})::Ptr{EVP_PKEY_CTX}
end

function EVP_PKEY_CTX_new_from_name(libctx, name, propquery)
    @ccall libwebsockets.EVP_PKEY_CTX_new_from_name(libctx::Ptr{OSSL_LIB_CTX}, name::Ptr{Cchar}, propquery::Ptr{Cchar})::Ptr{EVP_PKEY_CTX}
end

function EVP_PKEY_CTX_new_from_pkey(libctx, pkey, propquery)
    @ccall libwebsockets.EVP_PKEY_CTX_new_from_pkey(libctx::Ptr{OSSL_LIB_CTX}, pkey::Ptr{EVP_PKEY}, propquery::Ptr{Cchar})::Ptr{EVP_PKEY_CTX}
end

function EVP_PKEY_CTX_dup(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_dup(ctx::Ptr{EVP_PKEY_CTX})::Ptr{EVP_PKEY_CTX}
end

function EVP_PKEY_CTX_free(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_free(ctx::Ptr{EVP_PKEY_CTX})::Cvoid
end

function EVP_PKEY_CTX_is_a(ctx, keytype)
    @ccall libwebsockets.EVP_PKEY_CTX_is_a(ctx::Ptr{EVP_PKEY_CTX}, keytype::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_get_params(ctx, params)
    @ccall libwebsockets.EVP_PKEY_CTX_get_params(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_CTX_gettable_params(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_gettable_params(ctx::Ptr{EVP_PKEY_CTX})::Ptr{OSSL_PARAM}
end

function EVP_PKEY_CTX_set_params(ctx, params)
    @ccall libwebsockets.EVP_PKEY_CTX_set_params(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_CTX_settable_params(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_settable_params(ctx::Ptr{EVP_PKEY_CTX})::Ptr{OSSL_PARAM}
end

function EVP_PKEY_CTX_ctrl(ctx, keytype, optype, cmd, p1, p2)
    @ccall libwebsockets.EVP_PKEY_CTX_ctrl(ctx::Ptr{EVP_PKEY_CTX}, keytype::Cint, optype::Cint, cmd::Cint, p1::Cint, p2::Ptr{Cvoid})::Cint
end

function EVP_PKEY_CTX_ctrl_str(ctx, type, value)
    @ccall libwebsockets.EVP_PKEY_CTX_ctrl_str(ctx::Ptr{EVP_PKEY_CTX}, type::Ptr{Cchar}, value::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_ctrl_uint64(ctx, keytype, optype, cmd, value)
    @ccall libwebsockets.EVP_PKEY_CTX_ctrl_uint64(ctx::Ptr{EVP_PKEY_CTX}, keytype::Cint, optype::Cint, cmd::Cint, value::UInt64)::Cint
end

function EVP_PKEY_CTX_str2ctrl(ctx, cmd, str)
    @ccall libwebsockets.EVP_PKEY_CTX_str2ctrl(ctx::Ptr{EVP_PKEY_CTX}, cmd::Cint, str::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_hex2ctrl(ctx, cmd, hex)
    @ccall libwebsockets.EVP_PKEY_CTX_hex2ctrl(ctx::Ptr{EVP_PKEY_CTX}, cmd::Cint, hex::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_md(ctx, optype, cmd, md)
    @ccall libwebsockets.EVP_PKEY_CTX_md(ctx::Ptr{EVP_PKEY_CTX}, optype::Cint, cmd::Cint, md::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_get_operation(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_operation(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_CTX_set0_keygen_info(ctx, dat, datlen)
    @ccall libwebsockets.EVP_PKEY_CTX_set0_keygen_info(ctx::Ptr{EVP_PKEY_CTX}, dat::Ptr{Cint}, datlen::Cint)::Cvoid
end

function EVP_PKEY_new_mac_key(type, e, key, keylen)
    @ccall libwebsockets.EVP_PKEY_new_mac_key(type::Cint, e::Ptr{ENGINE}, key::Ptr{Cuchar}, keylen::Cint)::Ptr{EVP_PKEY}
end

function EVP_PKEY_new_raw_private_key_ex(libctx, keytype, propq, priv, len)
    @ccall libwebsockets.EVP_PKEY_new_raw_private_key_ex(libctx::Ptr{OSSL_LIB_CTX}, keytype::Ptr{Cchar}, propq::Ptr{Cchar}, priv::Ptr{Cuchar}, len::Csize_t)::Ptr{EVP_PKEY}
end

function EVP_PKEY_new_raw_private_key(type, e, priv, len)
    @ccall libwebsockets.EVP_PKEY_new_raw_private_key(type::Cint, e::Ptr{ENGINE}, priv::Ptr{Cuchar}, len::Csize_t)::Ptr{EVP_PKEY}
end

function EVP_PKEY_new_raw_public_key_ex(libctx, keytype, propq, pub, len)
    @ccall libwebsockets.EVP_PKEY_new_raw_public_key_ex(libctx::Ptr{OSSL_LIB_CTX}, keytype::Ptr{Cchar}, propq::Ptr{Cchar}, pub::Ptr{Cuchar}, len::Csize_t)::Ptr{EVP_PKEY}
end

function EVP_PKEY_new_raw_public_key(type, e, pub, len)
    @ccall libwebsockets.EVP_PKEY_new_raw_public_key(type::Cint, e::Ptr{ENGINE}, pub::Ptr{Cuchar}, len::Csize_t)::Ptr{EVP_PKEY}
end

function EVP_PKEY_get_raw_private_key(pkey, priv, len)
    @ccall libwebsockets.EVP_PKEY_get_raw_private_key(pkey::Ptr{EVP_PKEY}, priv::Ptr{Cuchar}, len::Ptr{Csize_t})::Cint
end

function EVP_PKEY_get_raw_public_key(pkey, pub, len)
    @ccall libwebsockets.EVP_PKEY_get_raw_public_key(pkey::Ptr{EVP_PKEY}, pub::Ptr{Cuchar}, len::Ptr{Csize_t})::Cint
end

function EVP_PKEY_new_CMAC_key(e, priv, len, cipher)
    @ccall libwebsockets.EVP_PKEY_new_CMAC_key(e::Ptr{ENGINE}, priv::Ptr{Cuchar}, len::Csize_t, cipher::Ptr{EVP_CIPHER})::Ptr{EVP_PKEY}
end

function EVP_PKEY_CTX_set_data(ctx, data)
    @ccall libwebsockets.EVP_PKEY_CTX_set_data(ctx::Ptr{EVP_PKEY_CTX}, data::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_CTX_get_data(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_data(ctx::Ptr{EVP_PKEY_CTX})::Ptr{Cvoid}
end

function EVP_PKEY_CTX_get0_pkey(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_pkey(ctx::Ptr{EVP_PKEY_CTX})::Ptr{EVP_PKEY}
end

function EVP_PKEY_CTX_get0_peerkey(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_peerkey(ctx::Ptr{EVP_PKEY_CTX})::Ptr{EVP_PKEY}
end

function EVP_PKEY_CTX_set_app_data(ctx, data)
    @ccall libwebsockets.EVP_PKEY_CTX_set_app_data(ctx::Ptr{EVP_PKEY_CTX}, data::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_CTX_get_app_data(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_app_data(ctx::Ptr{EVP_PKEY_CTX})::Ptr{Cvoid}
end

function EVP_SIGNATURE_free(signature)
    @ccall libwebsockets.EVP_SIGNATURE_free(signature::Ptr{EVP_SIGNATURE})::Cvoid
end

function EVP_SIGNATURE_up_ref(signature)
    @ccall libwebsockets.EVP_SIGNATURE_up_ref(signature::Ptr{EVP_SIGNATURE})::Cint
end

function EVP_SIGNATURE_get0_provider(signature)
    @ccall libwebsockets.EVP_SIGNATURE_get0_provider(signature::Ptr{EVP_SIGNATURE})::Ptr{OSSL_PROVIDER}
end

function EVP_SIGNATURE_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_SIGNATURE_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_SIGNATURE}
end

function EVP_SIGNATURE_is_a(signature, name)
    @ccall libwebsockets.EVP_SIGNATURE_is_a(signature::Ptr{EVP_SIGNATURE}, name::Ptr{Cchar})::Cint
end

function EVP_SIGNATURE_get0_name(signature)
    @ccall libwebsockets.EVP_SIGNATURE_get0_name(signature::Ptr{EVP_SIGNATURE})::Ptr{Cchar}
end

function EVP_SIGNATURE_get0_description(signature)
    @ccall libwebsockets.EVP_SIGNATURE_get0_description(signature::Ptr{EVP_SIGNATURE})::Ptr{Cchar}
end

function EVP_SIGNATURE_do_all_provided(libctx, fn, data)
    @ccall libwebsockets.EVP_SIGNATURE_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cvoid
end

function EVP_SIGNATURE_names_do_all(signature, fn, data)
    @ccall libwebsockets.EVP_SIGNATURE_names_do_all(signature::Ptr{EVP_SIGNATURE}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_SIGNATURE_gettable_ctx_params(sig)
    @ccall libwebsockets.EVP_SIGNATURE_gettable_ctx_params(sig::Ptr{EVP_SIGNATURE})::Ptr{OSSL_PARAM}
end

function EVP_SIGNATURE_settable_ctx_params(sig)
    @ccall libwebsockets.EVP_SIGNATURE_settable_ctx_params(sig::Ptr{EVP_SIGNATURE})::Ptr{OSSL_PARAM}
end

function EVP_ASYM_CIPHER_free(cipher)
    @ccall libwebsockets.EVP_ASYM_CIPHER_free(cipher::Ptr{EVP_ASYM_CIPHER})::Cvoid
end

function EVP_ASYM_CIPHER_up_ref(cipher)
    @ccall libwebsockets.EVP_ASYM_CIPHER_up_ref(cipher::Ptr{EVP_ASYM_CIPHER})::Cint
end

function EVP_ASYM_CIPHER_get0_provider(cipher)
    @ccall libwebsockets.EVP_ASYM_CIPHER_get0_provider(cipher::Ptr{EVP_ASYM_CIPHER})::Ptr{OSSL_PROVIDER}
end

function EVP_ASYM_CIPHER_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_ASYM_CIPHER_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_ASYM_CIPHER}
end

function EVP_ASYM_CIPHER_is_a(cipher, name)
    @ccall libwebsockets.EVP_ASYM_CIPHER_is_a(cipher::Ptr{EVP_ASYM_CIPHER}, name::Ptr{Cchar})::Cint
end

function EVP_ASYM_CIPHER_get0_name(cipher)
    @ccall libwebsockets.EVP_ASYM_CIPHER_get0_name(cipher::Ptr{EVP_ASYM_CIPHER})::Ptr{Cchar}
end

function EVP_ASYM_CIPHER_get0_description(cipher)
    @ccall libwebsockets.EVP_ASYM_CIPHER_get0_description(cipher::Ptr{EVP_ASYM_CIPHER})::Ptr{Cchar}
end

function EVP_ASYM_CIPHER_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_ASYM_CIPHER_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_ASYM_CIPHER_names_do_all(cipher, fn, data)
    @ccall libwebsockets.EVP_ASYM_CIPHER_names_do_all(cipher::Ptr{EVP_ASYM_CIPHER}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_ASYM_CIPHER_gettable_ctx_params(ciph)
    @ccall libwebsockets.EVP_ASYM_CIPHER_gettable_ctx_params(ciph::Ptr{EVP_ASYM_CIPHER})::Ptr{OSSL_PARAM}
end

function EVP_ASYM_CIPHER_settable_ctx_params(ciph)
    @ccall libwebsockets.EVP_ASYM_CIPHER_settable_ctx_params(ciph::Ptr{EVP_ASYM_CIPHER})::Ptr{OSSL_PARAM}
end

function EVP_KEM_free(wrap)
    @ccall libwebsockets.EVP_KEM_free(wrap::Ptr{EVP_KEM})::Cvoid
end

function EVP_KEM_up_ref(wrap)
    @ccall libwebsockets.EVP_KEM_up_ref(wrap::Ptr{EVP_KEM})::Cint
end

function EVP_KEM_get0_provider(wrap)
    @ccall libwebsockets.EVP_KEM_get0_provider(wrap::Ptr{EVP_KEM})::Ptr{OSSL_PROVIDER}
end

function EVP_KEM_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_KEM_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_KEM}
end

function EVP_KEM_is_a(wrap, name)
    @ccall libwebsockets.EVP_KEM_is_a(wrap::Ptr{EVP_KEM}, name::Ptr{Cchar})::Cint
end

function EVP_KEM_get0_name(wrap)
    @ccall libwebsockets.EVP_KEM_get0_name(wrap::Ptr{EVP_KEM})::Ptr{Cchar}
end

function EVP_KEM_get0_description(wrap)
    @ccall libwebsockets.EVP_KEM_get0_description(wrap::Ptr{EVP_KEM})::Ptr{Cchar}
end

function EVP_KEM_do_all_provided(libctx, fn, arg)
    @ccall libwebsockets.EVP_KEM_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function EVP_KEM_names_do_all(wrap, fn, data)
    @ccall libwebsockets.EVP_KEM_names_do_all(wrap::Ptr{EVP_KEM}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_KEM_gettable_ctx_params(kem)
    @ccall libwebsockets.EVP_KEM_gettable_ctx_params(kem::Ptr{EVP_KEM})::Ptr{OSSL_PARAM}
end

function EVP_KEM_settable_ctx_params(kem)
    @ccall libwebsockets.EVP_KEM_settable_ctx_params(kem::Ptr{EVP_KEM})::Ptr{OSSL_PARAM}
end

function EVP_PKEY_sign_init(ctx)
    @ccall libwebsockets.EVP_PKEY_sign_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_sign_init_ex(ctx, params)
    @ccall libwebsockets.EVP_PKEY_sign_init_ex(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_sign(ctx, sig, siglen, tbs, tbslen)
    @ccall libwebsockets.EVP_PKEY_sign(ctx::Ptr{EVP_PKEY_CTX}, sig::Ptr{Cuchar}, siglen::Ptr{Csize_t}, tbs::Ptr{Cuchar}, tbslen::Csize_t)::Cint
end

function EVP_PKEY_verify_init(ctx)
    @ccall libwebsockets.EVP_PKEY_verify_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_verify_init_ex(ctx, params)
    @ccall libwebsockets.EVP_PKEY_verify_init_ex(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_verify(ctx, sig, siglen, tbs, tbslen)
    @ccall libwebsockets.EVP_PKEY_verify(ctx::Ptr{EVP_PKEY_CTX}, sig::Ptr{Cuchar}, siglen::Csize_t, tbs::Ptr{Cuchar}, tbslen::Csize_t)::Cint
end

function EVP_PKEY_verify_recover_init(ctx)
    @ccall libwebsockets.EVP_PKEY_verify_recover_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_verify_recover_init_ex(ctx, params)
    @ccall libwebsockets.EVP_PKEY_verify_recover_init_ex(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_verify_recover(ctx, rout, routlen, sig, siglen)
    @ccall libwebsockets.EVP_PKEY_verify_recover(ctx::Ptr{EVP_PKEY_CTX}, rout::Ptr{Cuchar}, routlen::Ptr{Csize_t}, sig::Ptr{Cuchar}, siglen::Csize_t)::Cint
end

function EVP_PKEY_encrypt_init(ctx)
    @ccall libwebsockets.EVP_PKEY_encrypt_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_encrypt_init_ex(ctx, params)
    @ccall libwebsockets.EVP_PKEY_encrypt_init_ex(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_encrypt(ctx, out, outlen, in, inlen)
    @ccall libwebsockets.EVP_PKEY_encrypt(ctx::Ptr{EVP_PKEY_CTX}, out::Ptr{Cuchar}, outlen::Ptr{Csize_t}, in::Ptr{Cuchar}, inlen::Csize_t)::Cint
end

function EVP_PKEY_decrypt_init(ctx)
    @ccall libwebsockets.EVP_PKEY_decrypt_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_decrypt_init_ex(ctx, params)
    @ccall libwebsockets.EVP_PKEY_decrypt_init_ex(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_decrypt(ctx, out, outlen, in, inlen)
    @ccall libwebsockets.EVP_PKEY_decrypt(ctx::Ptr{EVP_PKEY_CTX}, out::Ptr{Cuchar}, outlen::Ptr{Csize_t}, in::Ptr{Cuchar}, inlen::Csize_t)::Cint
end

function EVP_PKEY_derive_init(ctx)
    @ccall libwebsockets.EVP_PKEY_derive_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_derive_init_ex(ctx, params)
    @ccall libwebsockets.EVP_PKEY_derive_init_ex(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_derive_set_peer_ex(ctx, peer, validate_peer)
    @ccall libwebsockets.EVP_PKEY_derive_set_peer_ex(ctx::Ptr{EVP_PKEY_CTX}, peer::Ptr{EVP_PKEY}, validate_peer::Cint)::Cint
end

function EVP_PKEY_derive_set_peer(ctx, peer)
    @ccall libwebsockets.EVP_PKEY_derive_set_peer(ctx::Ptr{EVP_PKEY_CTX}, peer::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_derive(ctx, key, keylen)
    @ccall libwebsockets.EVP_PKEY_derive(ctx::Ptr{EVP_PKEY_CTX}, key::Ptr{Cuchar}, keylen::Ptr{Csize_t})::Cint
end

function EVP_PKEY_encapsulate_init(ctx, params)
    @ccall libwebsockets.EVP_PKEY_encapsulate_init(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_encapsulate(ctx, wrappedkey, wrappedkeylen, genkey, genkeylen)
    @ccall libwebsockets.EVP_PKEY_encapsulate(ctx::Ptr{EVP_PKEY_CTX}, wrappedkey::Ptr{Cuchar}, wrappedkeylen::Ptr{Csize_t}, genkey::Ptr{Cuchar}, genkeylen::Ptr{Csize_t})::Cint
end

function EVP_PKEY_decapsulate_init(ctx, params)
    @ccall libwebsockets.EVP_PKEY_decapsulate_init(ctx::Ptr{EVP_PKEY_CTX}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_decapsulate(ctx, unwrapped, unwrappedlen, wrapped, wrappedlen)
    @ccall libwebsockets.EVP_PKEY_decapsulate(ctx::Ptr{EVP_PKEY_CTX}, unwrapped::Ptr{Cuchar}, unwrappedlen::Ptr{Csize_t}, wrapped::Ptr{Cuchar}, wrappedlen::Csize_t)::Cint
end

# typedef int EVP_PKEY_gen_cb ( EVP_PKEY_CTX * ctx )
const EVP_PKEY_gen_cb = Cvoid

function EVP_PKEY_fromdata_init(ctx)
    @ccall libwebsockets.EVP_PKEY_fromdata_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_fromdata(ctx, ppkey, selection, param)
    @ccall libwebsockets.EVP_PKEY_fromdata(ctx::Ptr{EVP_PKEY_CTX}, ppkey::Ptr{Ptr{EVP_PKEY}}, selection::Cint, param::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_fromdata_settable(ctx, selection)
    @ccall libwebsockets.EVP_PKEY_fromdata_settable(ctx::Ptr{EVP_PKEY_CTX}, selection::Cint)::Ptr{OSSL_PARAM}
end

function EVP_PKEY_todata(pkey, selection, params)
    @ccall libwebsockets.EVP_PKEY_todata(pkey::Ptr{EVP_PKEY}, selection::Cint, params::Ptr{Ptr{OSSL_PARAM}})::Cint
end

function EVP_PKEY_export(pkey, selection, export_cb, export_cbarg)
    @ccall libwebsockets.EVP_PKEY_export(pkey::Ptr{EVP_PKEY}, selection::Cint, export_cb::Ptr{OSSL_CALLBACK}, export_cbarg::Ptr{Cvoid})::Cint
end

function EVP_PKEY_gettable_params(pkey)
    @ccall libwebsockets.EVP_PKEY_gettable_params(pkey::Ptr{EVP_PKEY})::Ptr{OSSL_PARAM}
end

function EVP_PKEY_get_params(pkey, params)
    @ccall libwebsockets.EVP_PKEY_get_params(pkey::Ptr{EVP_PKEY}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_get_int_param(pkey, key_name, out)
    @ccall libwebsockets.EVP_PKEY_get_int_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, out::Ptr{Cint})::Cint
end

function EVP_PKEY_get_size_t_param(pkey, key_name, out)
    @ccall libwebsockets.EVP_PKEY_get_size_t_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, out::Ptr{Csize_t})::Cint
end

function EVP_PKEY_get_bn_param(pkey, key_name, bn)
    @ccall libwebsockets.EVP_PKEY_get_bn_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, bn::Ptr{Ptr{BIGNUM}})::Cint
end

function EVP_PKEY_get_utf8_string_param(pkey, key_name, str, max_buf_sz, out_sz)
    @ccall libwebsockets.EVP_PKEY_get_utf8_string_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, str::Ptr{Cchar}, max_buf_sz::Csize_t, out_sz::Ptr{Csize_t})::Cint
end

function EVP_PKEY_get_octet_string_param(pkey, key_name, buf, max_buf_sz, out_sz)
    @ccall libwebsockets.EVP_PKEY_get_octet_string_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, buf::Ptr{Cuchar}, max_buf_sz::Csize_t, out_sz::Ptr{Csize_t})::Cint
end

function EVP_PKEY_settable_params(pkey)
    @ccall libwebsockets.EVP_PKEY_settable_params(pkey::Ptr{EVP_PKEY})::Ptr{OSSL_PARAM}
end

function EVP_PKEY_set_params(pkey, params)
    @ccall libwebsockets.EVP_PKEY_set_params(pkey::Ptr{EVP_PKEY}, params::Ptr{OSSL_PARAM})::Cint
end

function EVP_PKEY_set_int_param(pkey, key_name, in)
    @ccall libwebsockets.EVP_PKEY_set_int_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, in::Cint)::Cint
end

function EVP_PKEY_set_size_t_param(pkey, key_name, in)
    @ccall libwebsockets.EVP_PKEY_set_size_t_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, in::Csize_t)::Cint
end

function EVP_PKEY_set_bn_param(pkey, key_name, bn)
    @ccall libwebsockets.EVP_PKEY_set_bn_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, bn::Ptr{BIGNUM})::Cint
end

function EVP_PKEY_set_utf8_string_param(pkey, key_name, str)
    @ccall libwebsockets.EVP_PKEY_set_utf8_string_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, str::Ptr{Cchar})::Cint
end

function EVP_PKEY_set_octet_string_param(pkey, key_name, buf, bsize)
    @ccall libwebsockets.EVP_PKEY_set_octet_string_param(pkey::Ptr{EVP_PKEY}, key_name::Ptr{Cchar}, buf::Ptr{Cuchar}, bsize::Csize_t)::Cint
end

function EVP_PKEY_get_ec_point_conv_form(pkey)
    @ccall libwebsockets.EVP_PKEY_get_ec_point_conv_form(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_get_field_type(pkey)
    @ccall libwebsockets.EVP_PKEY_get_field_type(pkey::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_paramgen_init(ctx)
    @ccall libwebsockets.EVP_PKEY_paramgen_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_paramgen(ctx, ppkey)
    @ccall libwebsockets.EVP_PKEY_paramgen(ctx::Ptr{EVP_PKEY_CTX}, ppkey::Ptr{Ptr{EVP_PKEY}})::Cint
end

function EVP_PKEY_keygen_init(ctx)
    @ccall libwebsockets.EVP_PKEY_keygen_init(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_keygen(ctx, ppkey)
    @ccall libwebsockets.EVP_PKEY_keygen(ctx::Ptr{EVP_PKEY_CTX}, ppkey::Ptr{Ptr{EVP_PKEY}})::Cint
end

function EVP_PKEY_generate(ctx, ppkey)
    @ccall libwebsockets.EVP_PKEY_generate(ctx::Ptr{EVP_PKEY_CTX}, ppkey::Ptr{Ptr{EVP_PKEY}})::Cint
end

function EVP_PKEY_check(ctx)
    @ccall libwebsockets.EVP_PKEY_check(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_public_check(ctx)
    @ccall libwebsockets.EVP_PKEY_public_check(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_public_check_quick(ctx)
    @ccall libwebsockets.EVP_PKEY_public_check_quick(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_param_check(ctx)
    @ccall libwebsockets.EVP_PKEY_param_check(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_param_check_quick(ctx)
    @ccall libwebsockets.EVP_PKEY_param_check_quick(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_private_check(ctx)
    @ccall libwebsockets.EVP_PKEY_private_check(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_pairwise_check(ctx)
    @ccall libwebsockets.EVP_PKEY_pairwise_check(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_set_ex_data(key, idx, arg)
    @ccall libwebsockets.EVP_PKEY_set_ex_data(key::Ptr{EVP_PKEY}, idx::Cint, arg::Ptr{Cvoid})::Cint
end

function EVP_PKEY_get_ex_data(key, idx)
    @ccall libwebsockets.EVP_PKEY_get_ex_data(key::Ptr{EVP_PKEY}, idx::Cint)::Ptr{Cvoid}
end

function EVP_PKEY_CTX_set_cb(ctx, cb)
    @ccall libwebsockets.EVP_PKEY_CTX_set_cb(ctx::Ptr{EVP_PKEY_CTX}, cb::Ptr{EVP_PKEY_gen_cb})::Cvoid
end

function EVP_PKEY_CTX_get_cb(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_cb(ctx::Ptr{EVP_PKEY_CTX})::Ptr{EVP_PKEY_gen_cb}
end

function EVP_PKEY_CTX_get_keygen_info(ctx, idx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_keygen_info(ctx::Ptr{EVP_PKEY_CTX}, idx::Cint)::Cint
end

function EVP_PKEY_meth_set_init(pmeth, init)
    @ccall libwebsockets.EVP_PKEY_meth_set_init(pmeth::Ptr{EVP_PKEY_METHOD}, init::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_copy(pmeth, copy)
    @ccall libwebsockets.EVP_PKEY_meth_set_copy(pmeth::Ptr{EVP_PKEY_METHOD}, copy::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_cleanup(pmeth, cleanup)
    @ccall libwebsockets.EVP_PKEY_meth_set_cleanup(pmeth::Ptr{EVP_PKEY_METHOD}, cleanup::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_paramgen(pmeth, paramgen_init, paramgen)
    @ccall libwebsockets.EVP_PKEY_meth_set_paramgen(pmeth::Ptr{EVP_PKEY_METHOD}, paramgen_init::Ptr{Cvoid}, paramgen::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_keygen(pmeth, keygen_init, keygen)
    @ccall libwebsockets.EVP_PKEY_meth_set_keygen(pmeth::Ptr{EVP_PKEY_METHOD}, keygen_init::Ptr{Cvoid}, keygen::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_sign(pmeth, sign_init, sign)
    @ccall libwebsockets.EVP_PKEY_meth_set_sign(pmeth::Ptr{EVP_PKEY_METHOD}, sign_init::Ptr{Cvoid}, sign::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_verify(pmeth, verify_init, verify)
    @ccall libwebsockets.EVP_PKEY_meth_set_verify(pmeth::Ptr{EVP_PKEY_METHOD}, verify_init::Ptr{Cvoid}, verify::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_verify_recover(pmeth, verify_recover_init, verify_recover)
    @ccall libwebsockets.EVP_PKEY_meth_set_verify_recover(pmeth::Ptr{EVP_PKEY_METHOD}, verify_recover_init::Ptr{Cvoid}, verify_recover::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_signctx(pmeth, signctx_init, signctx)
    @ccall libwebsockets.EVP_PKEY_meth_set_signctx(pmeth::Ptr{EVP_PKEY_METHOD}, signctx_init::Ptr{Cvoid}, signctx::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_verifyctx(pmeth, verifyctx_init, verifyctx)
    @ccall libwebsockets.EVP_PKEY_meth_set_verifyctx(pmeth::Ptr{EVP_PKEY_METHOD}, verifyctx_init::Ptr{Cvoid}, verifyctx::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_encrypt(pmeth, encrypt_init, encryptfn)
    @ccall libwebsockets.EVP_PKEY_meth_set_encrypt(pmeth::Ptr{EVP_PKEY_METHOD}, encrypt_init::Ptr{Cvoid}, encryptfn::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_decrypt(pmeth, decrypt_init, decrypt)
    @ccall libwebsockets.EVP_PKEY_meth_set_decrypt(pmeth::Ptr{EVP_PKEY_METHOD}, decrypt_init::Ptr{Cvoid}, decrypt::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_derive(pmeth, derive_init, derive)
    @ccall libwebsockets.EVP_PKEY_meth_set_derive(pmeth::Ptr{EVP_PKEY_METHOD}, derive_init::Ptr{Cvoid}, derive::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_ctrl(pmeth, ctrl, ctrl_str)
    @ccall libwebsockets.EVP_PKEY_meth_set_ctrl(pmeth::Ptr{EVP_PKEY_METHOD}, ctrl::Ptr{Cvoid}, ctrl_str::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_digestsign(pmeth, digestsign)
    @ccall libwebsockets.EVP_PKEY_meth_set_digestsign(pmeth::Ptr{EVP_PKEY_METHOD}, digestsign::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_digestverify(pmeth, digestverify)
    @ccall libwebsockets.EVP_PKEY_meth_set_digestverify(pmeth::Ptr{EVP_PKEY_METHOD}, digestverify::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_check(pmeth, check)
    @ccall libwebsockets.EVP_PKEY_meth_set_check(pmeth::Ptr{EVP_PKEY_METHOD}, check::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_public_check(pmeth, check)
    @ccall libwebsockets.EVP_PKEY_meth_set_public_check(pmeth::Ptr{EVP_PKEY_METHOD}, check::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_param_check(pmeth, check)
    @ccall libwebsockets.EVP_PKEY_meth_set_param_check(pmeth::Ptr{EVP_PKEY_METHOD}, check::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_set_digest_custom(pmeth, digest_custom)
    @ccall libwebsockets.EVP_PKEY_meth_set_digest_custom(pmeth::Ptr{EVP_PKEY_METHOD}, digest_custom::Ptr{Cvoid})::Cvoid
end

function EVP_PKEY_meth_get_init(pmeth, pinit)
    @ccall libwebsockets.EVP_PKEY_meth_get_init(pmeth::Ptr{EVP_PKEY_METHOD}, pinit::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_copy(pmeth, pcopy)
    @ccall libwebsockets.EVP_PKEY_meth_get_copy(pmeth::Ptr{EVP_PKEY_METHOD}, pcopy::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_cleanup(pmeth, pcleanup)
    @ccall libwebsockets.EVP_PKEY_meth_get_cleanup(pmeth::Ptr{EVP_PKEY_METHOD}, pcleanup::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_paramgen(pmeth, pparamgen_init, pparamgen)
    @ccall libwebsockets.EVP_PKEY_meth_get_paramgen(pmeth::Ptr{EVP_PKEY_METHOD}, pparamgen_init::Ptr{Ptr{Cvoid}}, pparamgen::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_keygen(pmeth, pkeygen_init, pkeygen)
    @ccall libwebsockets.EVP_PKEY_meth_get_keygen(pmeth::Ptr{EVP_PKEY_METHOD}, pkeygen_init::Ptr{Ptr{Cvoid}}, pkeygen::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_sign(pmeth, psign_init, psign)
    @ccall libwebsockets.EVP_PKEY_meth_get_sign(pmeth::Ptr{EVP_PKEY_METHOD}, psign_init::Ptr{Ptr{Cvoid}}, psign::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_verify(pmeth, pverify_init, pverify)
    @ccall libwebsockets.EVP_PKEY_meth_get_verify(pmeth::Ptr{EVP_PKEY_METHOD}, pverify_init::Ptr{Ptr{Cvoid}}, pverify::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_verify_recover(pmeth, pverify_recover_init, pverify_recover)
    @ccall libwebsockets.EVP_PKEY_meth_get_verify_recover(pmeth::Ptr{EVP_PKEY_METHOD}, pverify_recover_init::Ptr{Ptr{Cvoid}}, pverify_recover::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_signctx(pmeth, psignctx_init, psignctx)
    @ccall libwebsockets.EVP_PKEY_meth_get_signctx(pmeth::Ptr{EVP_PKEY_METHOD}, psignctx_init::Ptr{Ptr{Cvoid}}, psignctx::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_verifyctx(pmeth, pverifyctx_init, pverifyctx)
    @ccall libwebsockets.EVP_PKEY_meth_get_verifyctx(pmeth::Ptr{EVP_PKEY_METHOD}, pverifyctx_init::Ptr{Ptr{Cvoid}}, pverifyctx::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_encrypt(pmeth, pencrypt_init, pencryptfn)
    @ccall libwebsockets.EVP_PKEY_meth_get_encrypt(pmeth::Ptr{EVP_PKEY_METHOD}, pencrypt_init::Ptr{Ptr{Cvoid}}, pencryptfn::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_decrypt(pmeth, pdecrypt_init, pdecrypt)
    @ccall libwebsockets.EVP_PKEY_meth_get_decrypt(pmeth::Ptr{EVP_PKEY_METHOD}, pdecrypt_init::Ptr{Ptr{Cvoid}}, pdecrypt::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_derive(pmeth, pderive_init, pderive)
    @ccall libwebsockets.EVP_PKEY_meth_get_derive(pmeth::Ptr{EVP_PKEY_METHOD}, pderive_init::Ptr{Ptr{Cvoid}}, pderive::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_ctrl(pmeth, pctrl, pctrl_str)
    @ccall libwebsockets.EVP_PKEY_meth_get_ctrl(pmeth::Ptr{EVP_PKEY_METHOD}, pctrl::Ptr{Ptr{Cvoid}}, pctrl_str::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_digestsign(pmeth, digestsign)
    @ccall libwebsockets.EVP_PKEY_meth_get_digestsign(pmeth::Ptr{EVP_PKEY_METHOD}, digestsign::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_digestverify(pmeth, digestverify)
    @ccall libwebsockets.EVP_PKEY_meth_get_digestverify(pmeth::Ptr{EVP_PKEY_METHOD}, digestverify::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_check(pmeth, pcheck)
    @ccall libwebsockets.EVP_PKEY_meth_get_check(pmeth::Ptr{EVP_PKEY_METHOD}, pcheck::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_public_check(pmeth, pcheck)
    @ccall libwebsockets.EVP_PKEY_meth_get_public_check(pmeth::Ptr{EVP_PKEY_METHOD}, pcheck::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_param_check(pmeth, pcheck)
    @ccall libwebsockets.EVP_PKEY_meth_get_param_check(pmeth::Ptr{EVP_PKEY_METHOD}, pcheck::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_meth_get_digest_custom(pmeth, pdigest_custom)
    @ccall libwebsockets.EVP_PKEY_meth_get_digest_custom(pmeth::Ptr{EVP_PKEY_METHOD}, pdigest_custom::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_KEYEXCH_free(exchange)
    @ccall libwebsockets.EVP_KEYEXCH_free(exchange::Ptr{EVP_KEYEXCH})::Cvoid
end

function EVP_KEYEXCH_up_ref(exchange)
    @ccall libwebsockets.EVP_KEYEXCH_up_ref(exchange::Ptr{EVP_KEYEXCH})::Cint
end

function EVP_KEYEXCH_fetch(ctx, algorithm, properties)
    @ccall libwebsockets.EVP_KEYEXCH_fetch(ctx::Ptr{OSSL_LIB_CTX}, algorithm::Ptr{Cchar}, properties::Ptr{Cchar})::Ptr{EVP_KEYEXCH}
end

function EVP_KEYEXCH_get0_provider(exchange)
    @ccall libwebsockets.EVP_KEYEXCH_get0_provider(exchange::Ptr{EVP_KEYEXCH})::Ptr{OSSL_PROVIDER}
end

function EVP_KEYEXCH_is_a(keyexch, name)
    @ccall libwebsockets.EVP_KEYEXCH_is_a(keyexch::Ptr{EVP_KEYEXCH}, name::Ptr{Cchar})::Cint
end

function EVP_KEYEXCH_get0_name(keyexch)
    @ccall libwebsockets.EVP_KEYEXCH_get0_name(keyexch::Ptr{EVP_KEYEXCH})::Ptr{Cchar}
end

function EVP_KEYEXCH_get0_description(keyexch)
    @ccall libwebsockets.EVP_KEYEXCH_get0_description(keyexch::Ptr{EVP_KEYEXCH})::Ptr{Cchar}
end

function EVP_KEYEXCH_do_all_provided(libctx, fn, data)
    @ccall libwebsockets.EVP_KEYEXCH_do_all_provided(libctx::Ptr{OSSL_LIB_CTX}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cvoid
end

function EVP_KEYEXCH_names_do_all(keyexch, fn, data)
    @ccall libwebsockets.EVP_KEYEXCH_names_do_all(keyexch::Ptr{EVP_KEYEXCH}, fn::Ptr{Cvoid}, data::Ptr{Cvoid})::Cint
end

function EVP_KEYEXCH_gettable_ctx_params(keyexch)
    @ccall libwebsockets.EVP_KEYEXCH_gettable_ctx_params(keyexch::Ptr{EVP_KEYEXCH})::Ptr{OSSL_PARAM}
end

function EVP_KEYEXCH_settable_ctx_params(keyexch)
    @ccall libwebsockets.EVP_KEYEXCH_settable_ctx_params(keyexch::Ptr{EVP_KEYEXCH})::Ptr{OSSL_PARAM}
end

function EVP_add_alg_module()
    @ccall libwebsockets.EVP_add_alg_module()::Cvoid
end

function EVP_PKEY_CTX_set_group_name(ctx, name)
    @ccall libwebsockets.EVP_PKEY_CTX_set_group_name(ctx::Ptr{EVP_PKEY_CTX}, name::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_get_group_name(ctx, name, namelen)
    @ccall libwebsockets.EVP_PKEY_CTX_get_group_name(ctx::Ptr{EVP_PKEY_CTX}, name::Ptr{Cchar}, namelen::Csize_t)::Cint
end

function EVP_PKEY_get_group_name(pkey, name, name_sz, gname_len)
    @ccall libwebsockets.EVP_PKEY_get_group_name(pkey::Ptr{EVP_PKEY}, name::Ptr{Cchar}, name_sz::Csize_t, gname_len::Ptr{Csize_t})::Cint
end

function EVP_PKEY_CTX_get0_libctx(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_libctx(ctx::Ptr{EVP_PKEY_CTX})::Ptr{OSSL_LIB_CTX}
end

function EVP_PKEY_CTX_get0_propq(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_propq(ctx::Ptr{EVP_PKEY_CTX})::Ptr{Cchar}
end

function EVP_PKEY_CTX_get0_provider(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_provider(ctx::Ptr{EVP_PKEY_CTX})::Ptr{OSSL_PROVIDER}
end

function EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx, nid)
    @ccall libwebsockets.EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx::Ptr{EVP_PKEY_CTX}, nid::Cint)::Cint
end

function EVP_PKEY_CTX_set_ec_param_enc(ctx, param_enc)
    @ccall libwebsockets.EVP_PKEY_CTX_set_ec_param_enc(ctx::Ptr{EVP_PKEY_CTX}, param_enc::Cint)::Cint
end

function EVP_PKEY_CTX_set_ecdh_cofactor_mode(ctx, cofactor_mode)
    @ccall libwebsockets.EVP_PKEY_CTX_set_ecdh_cofactor_mode(ctx::Ptr{EVP_PKEY_CTX}, cofactor_mode::Cint)::Cint
end

function EVP_PKEY_CTX_get_ecdh_cofactor_mode(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_ecdh_cofactor_mode(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_CTX_set_ecdh_kdf_type(ctx, kdf)
    @ccall libwebsockets.EVP_PKEY_CTX_set_ecdh_kdf_type(ctx::Ptr{EVP_PKEY_CTX}, kdf::Cint)::Cint
end

function EVP_PKEY_CTX_get_ecdh_kdf_type(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_ecdh_kdf_type(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_CTX_set_ecdh_kdf_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_ecdh_kdf_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_get_ecdh_kdf_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_get_ecdh_kdf_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{Ptr{EVP_MD}})::Cint
end

function EVP_PKEY_CTX_set_ecdh_kdf_outlen(ctx, len)
    @ccall libwebsockets.EVP_PKEY_CTX_set_ecdh_kdf_outlen(ctx::Ptr{EVP_PKEY_CTX}, len::Cint)::Cint
end

function EVP_PKEY_CTX_get_ecdh_kdf_outlen(ctx, len)
    @ccall libwebsockets.EVP_PKEY_CTX_get_ecdh_kdf_outlen(ctx::Ptr{EVP_PKEY_CTX}, len::Ptr{Cint})::Cint
end

function EVP_PKEY_CTX_set0_ecdh_kdf_ukm(ctx, ukm, len)
    @ccall libwebsockets.EVP_PKEY_CTX_set0_ecdh_kdf_ukm(ctx::Ptr{EVP_PKEY_CTX}, ukm::Ptr{Cuchar}, len::Cint)::Cint
end

function EVP_PKEY_CTX_get0_ecdh_kdf_ukm(ctx, ukm)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_ecdh_kdf_ukm(ctx::Ptr{EVP_PKEY_CTX}, ukm::Ptr{Ptr{Cuchar}})::Cint
end

const point_conversion_form_t = UInt32
const POINT_CONVERSION_COMPRESSED = 2 % UInt32
const POINT_CONVERSION_UNCOMPRESSED = 4 % UInt32
const POINT_CONVERSION_HYBRID = 6 % UInt32

function OSSL_EC_curve_nid2name(nid)
    @ccall libwebsockets.OSSL_EC_curve_nid2name(nid::Cint)::Ptr{Cchar}
end

mutable struct ec_method_st end

const EC_METHOD = ec_method_st

mutable struct ec_point_st end

const EC_POINT = ec_point_st

mutable struct ecpk_parameters_st end

const ECPKPARAMETERS = ecpk_parameters_st

mutable struct ec_parameters_st end

const ECPARAMETERS = ec_parameters_st

function EC_GFp_simple_method()
    @ccall libwebsockets.EC_GFp_simple_method()::Ptr{EC_METHOD}
end

function EC_GFp_mont_method()
    @ccall libwebsockets.EC_GFp_mont_method()::Ptr{EC_METHOD}
end

function EC_GFp_nist_method()
    @ccall libwebsockets.EC_GFp_nist_method()::Ptr{EC_METHOD}
end

function EC_GF2m_simple_method()
    @ccall libwebsockets.EC_GF2m_simple_method()::Ptr{EC_METHOD}
end

function EC_GROUP_new(meth)
    @ccall libwebsockets.EC_GROUP_new(meth::Ptr{EC_METHOD})::Ptr{EC_GROUP}
end

function EC_GROUP_clear_free(group)
    @ccall libwebsockets.EC_GROUP_clear_free(group::Ptr{EC_GROUP})::Cvoid
end

function EC_GROUP_method_of(group)
    @ccall libwebsockets.EC_GROUP_method_of(group::Ptr{EC_GROUP})::Ptr{EC_METHOD}
end

function EC_METHOD_get_field_type(meth)
    @ccall libwebsockets.EC_METHOD_get_field_type(meth::Ptr{EC_METHOD})::Cint
end

function EC_GROUP_free(group)
    @ccall libwebsockets.EC_GROUP_free(group::Ptr{EC_GROUP})::Cvoid
end

function EC_GROUP_copy(dst, src)
    @ccall libwebsockets.EC_GROUP_copy(dst::Ptr{EC_GROUP}, src::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_dup(src)
    @ccall libwebsockets.EC_GROUP_dup(src::Ptr{EC_GROUP})::Ptr{EC_GROUP}
end

function EC_GROUP_set_generator(group, generator, order, cofactor)
    @ccall libwebsockets.EC_GROUP_set_generator(group::Ptr{EC_GROUP}, generator::Ptr{EC_POINT}, order::Ptr{BIGNUM}, cofactor::Ptr{BIGNUM})::Cint
end

function EC_GROUP_get0_generator(group)
    @ccall libwebsockets.EC_GROUP_get0_generator(group::Ptr{EC_GROUP})::Ptr{EC_POINT}
end

function EC_GROUP_get_mont_data(group)
    @ccall libwebsockets.EC_GROUP_get_mont_data(group::Ptr{EC_GROUP})::Ptr{BN_MONT_CTX}
end

function EC_GROUP_get_order(group, order, ctx)
    @ccall libwebsockets.EC_GROUP_get_order(group::Ptr{EC_GROUP}, order::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_get0_order(group)
    @ccall libwebsockets.EC_GROUP_get0_order(group::Ptr{EC_GROUP})::Ptr{BIGNUM}
end

function EC_GROUP_order_bits(group)
    @ccall libwebsockets.EC_GROUP_order_bits(group::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_get_cofactor(group, cofactor, ctx)
    @ccall libwebsockets.EC_GROUP_get_cofactor(group::Ptr{EC_GROUP}, cofactor::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_get0_cofactor(group)
    @ccall libwebsockets.EC_GROUP_get0_cofactor(group::Ptr{EC_GROUP})::Ptr{BIGNUM}
end

function EC_GROUP_set_curve_name(group, nid)
    @ccall libwebsockets.EC_GROUP_set_curve_name(group::Ptr{EC_GROUP}, nid::Cint)::Cvoid
end

function EC_GROUP_get_curve_name(group)
    @ccall libwebsockets.EC_GROUP_get_curve_name(group::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_get0_field(group)
    @ccall libwebsockets.EC_GROUP_get0_field(group::Ptr{EC_GROUP})::Ptr{BIGNUM}
end

function EC_GROUP_get_field_type(group)
    @ccall libwebsockets.EC_GROUP_get_field_type(group::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_set_asn1_flag(group, flag)
    @ccall libwebsockets.EC_GROUP_set_asn1_flag(group::Ptr{EC_GROUP}, flag::Cint)::Cvoid
end

function EC_GROUP_get_asn1_flag(group)
    @ccall libwebsockets.EC_GROUP_get_asn1_flag(group::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_set_point_conversion_form(group, form)
    @ccall libwebsockets.EC_GROUP_set_point_conversion_form(group::Ptr{EC_GROUP}, form::point_conversion_form_t)::Cvoid
end

function EC_GROUP_get_point_conversion_form(arg1)
    @ccall libwebsockets.EC_GROUP_get_point_conversion_form(arg1::Ptr{EC_GROUP})::point_conversion_form_t
end

function EC_GROUP_get0_seed(x)
    @ccall libwebsockets.EC_GROUP_get0_seed(x::Ptr{EC_GROUP})::Ptr{Cuchar}
end

function EC_GROUP_get_seed_len(arg1)
    @ccall libwebsockets.EC_GROUP_get_seed_len(arg1::Ptr{EC_GROUP})::Csize_t
end

function EC_GROUP_set_seed(arg1, arg2, len)
    @ccall libwebsockets.EC_GROUP_set_seed(arg1::Ptr{EC_GROUP}, arg2::Ptr{Cuchar}, len::Csize_t)::Csize_t
end

function EC_GROUP_set_curve(group, p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_set_curve(group::Ptr{EC_GROUP}, p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_get_curve(group, p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_get_curve(group::Ptr{EC_GROUP}, p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_set_curve_GFp(group, p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_set_curve_GFp(group::Ptr{EC_GROUP}, p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_get_curve_GFp(group, p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_get_curve_GFp(group::Ptr{EC_GROUP}, p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_set_curve_GF2m(group, p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_set_curve_GF2m(group::Ptr{EC_GROUP}, p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_get_curve_GF2m(group, p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_get_curve_GF2m(group::Ptr{EC_GROUP}, p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_get_degree(group)
    @ccall libwebsockets.EC_GROUP_get_degree(group::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_check(group, ctx)
    @ccall libwebsockets.EC_GROUP_check(group::Ptr{EC_GROUP}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_check_discriminant(group, ctx)
    @ccall libwebsockets.EC_GROUP_check_discriminant(group::Ptr{EC_GROUP}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_cmp(a, b, ctx)
    @ccall libwebsockets.EC_GROUP_cmp(a::Ptr{EC_GROUP}, b::Ptr{EC_GROUP}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_new_curve_GFp(p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_new_curve_GFp(p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Ptr{EC_GROUP}
end

function EC_GROUP_new_curve_GF2m(p, a, b, ctx)
    @ccall libwebsockets.EC_GROUP_new_curve_GF2m(p::Ptr{BIGNUM}, a::Ptr{BIGNUM}, b::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Ptr{EC_GROUP}
end

function EC_GROUP_new_from_params(params, libctx, propq)
    @ccall libwebsockets.EC_GROUP_new_from_params(params::Ptr{OSSL_PARAM}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EC_GROUP}
end

function EC_GROUP_new_by_curve_name_ex(libctx, propq, nid)
    @ccall libwebsockets.EC_GROUP_new_by_curve_name_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar}, nid::Cint)::Ptr{EC_GROUP}
end

function EC_GROUP_new_by_curve_name(nid)
    @ccall libwebsockets.EC_GROUP_new_by_curve_name(nid::Cint)::Ptr{EC_GROUP}
end

function EC_GROUP_new_from_ecparameters(params)
    @ccall libwebsockets.EC_GROUP_new_from_ecparameters(params::Ptr{ECPARAMETERS})::Ptr{EC_GROUP}
end

function EC_GROUP_get_ecparameters(group, params)
    @ccall libwebsockets.EC_GROUP_get_ecparameters(group::Ptr{EC_GROUP}, params::Ptr{ECPARAMETERS})::Ptr{ECPARAMETERS}
end

function EC_GROUP_new_from_ecpkparameters(params)
    @ccall libwebsockets.EC_GROUP_new_from_ecpkparameters(params::Ptr{ECPKPARAMETERS})::Ptr{EC_GROUP}
end

function EC_GROUP_get_ecpkparameters(group, params)
    @ccall libwebsockets.EC_GROUP_get_ecpkparameters(group::Ptr{EC_GROUP}, params::Ptr{ECPKPARAMETERS})::Ptr{ECPKPARAMETERS}
end

mutable struct EC_builtin_curve
    nid::Cint
    comment::Ptr{Cchar}
    EC_builtin_curve() = new()
end

function EC_get_builtin_curves(r, nitems)
    @ccall libwebsockets.EC_get_builtin_curves(r::Ptr{EC_builtin_curve}, nitems::Csize_t)::Csize_t
end

function EC_curve_nid2nist(nid)
    @ccall libwebsockets.EC_curve_nid2nist(nid::Cint)::Ptr{Cchar}
end

function EC_curve_nist2nid(name)
    @ccall libwebsockets.EC_curve_nist2nid(name::Ptr{Cchar})::Cint
end

function EC_GROUP_check_named_curve(group, nist_only, ctx)
    @ccall libwebsockets.EC_GROUP_check_named_curve(group::Ptr{EC_GROUP}, nist_only::Cint, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_new(group)
    @ccall libwebsockets.EC_POINT_new(group::Ptr{EC_GROUP})::Ptr{EC_POINT}
end

function EC_POINT_free(point)
    @ccall libwebsockets.EC_POINT_free(point::Ptr{EC_POINT})::Cvoid
end

function EC_POINT_clear_free(point)
    @ccall libwebsockets.EC_POINT_clear_free(point::Ptr{EC_POINT})::Cvoid
end

function EC_POINT_copy(dst, src)
    @ccall libwebsockets.EC_POINT_copy(dst::Ptr{EC_POINT}, src::Ptr{EC_POINT})::Cint
end

function EC_POINT_dup(src, group)
    @ccall libwebsockets.EC_POINT_dup(src::Ptr{EC_POINT}, group::Ptr{EC_GROUP})::Ptr{EC_POINT}
end

function EC_POINT_set_to_infinity(group, point)
    @ccall libwebsockets.EC_POINT_set_to_infinity(group::Ptr{EC_GROUP}, point::Ptr{EC_POINT})::Cint
end

function EC_POINT_method_of(point)
    @ccall libwebsockets.EC_POINT_method_of(point::Ptr{EC_POINT})::Ptr{EC_METHOD}
end

function EC_POINT_set_Jprojective_coordinates_GFp(group, p, x, y, z, ctx)
    @ccall libwebsockets.EC_POINT_set_Jprojective_coordinates_GFp(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, z::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_get_Jprojective_coordinates_GFp(group, p, x, y, z, ctx)
    @ccall libwebsockets.EC_POINT_get_Jprojective_coordinates_GFp(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, z::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_set_affine_coordinates(group, p, x, y, ctx)
    @ccall libwebsockets.EC_POINT_set_affine_coordinates(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_get_affine_coordinates(group, p, x, y, ctx)
    @ccall libwebsockets.EC_POINT_get_affine_coordinates(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_set_affine_coordinates_GFp(group, p, x, y, ctx)
    @ccall libwebsockets.EC_POINT_set_affine_coordinates_GFp(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_get_affine_coordinates_GFp(group, p, x, y, ctx)
    @ccall libwebsockets.EC_POINT_get_affine_coordinates_GFp(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_set_compressed_coordinates(group, p, x, y_bit, ctx)
    @ccall libwebsockets.EC_POINT_set_compressed_coordinates(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y_bit::Cint, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_set_compressed_coordinates_GFp(group, p, x, y_bit, ctx)
    @ccall libwebsockets.EC_POINT_set_compressed_coordinates_GFp(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y_bit::Cint, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_set_affine_coordinates_GF2m(group, p, x, y, ctx)
    @ccall libwebsockets.EC_POINT_set_affine_coordinates_GF2m(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_get_affine_coordinates_GF2m(group, p, x, y, ctx)
    @ccall libwebsockets.EC_POINT_get_affine_coordinates_GF2m(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_set_compressed_coordinates_GF2m(group, p, x, y_bit, ctx)
    @ccall libwebsockets.EC_POINT_set_compressed_coordinates_GF2m(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, x::Ptr{BIGNUM}, y_bit::Cint, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_point2oct(group, p, form, buf, len, ctx)
    @ccall libwebsockets.EC_POINT_point2oct(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, form::point_conversion_form_t, buf::Ptr{Cuchar}, len::Csize_t, ctx::Ptr{BN_CTX})::Csize_t
end

function EC_POINT_oct2point(group, p, buf, len, ctx)
    @ccall libwebsockets.EC_POINT_oct2point(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT}, buf::Ptr{Cuchar}, len::Csize_t, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_point2buf(group, point, form, pbuf, ctx)
    @ccall libwebsockets.EC_POINT_point2buf(group::Ptr{EC_GROUP}, point::Ptr{EC_POINT}, form::point_conversion_form_t, pbuf::Ptr{Ptr{Cuchar}}, ctx::Ptr{BN_CTX})::Csize_t
end

function EC_POINT_point2bn(arg1, arg2, form, arg4, arg5)
    @ccall libwebsockets.EC_POINT_point2bn(arg1::Ptr{EC_GROUP}, arg2::Ptr{EC_POINT}, form::point_conversion_form_t, arg4::Ptr{BIGNUM}, arg5::Ptr{BN_CTX})::Ptr{BIGNUM}
end

function EC_POINT_bn2point(arg1, arg2, arg3, arg4)
    @ccall libwebsockets.EC_POINT_bn2point(arg1::Ptr{EC_GROUP}, arg2::Ptr{BIGNUM}, arg3::Ptr{EC_POINT}, arg4::Ptr{BN_CTX})::Ptr{EC_POINT}
end

function EC_POINT_point2hex(arg1, arg2, form, arg4)
    @ccall libwebsockets.EC_POINT_point2hex(arg1::Ptr{EC_GROUP}, arg2::Ptr{EC_POINT}, form::point_conversion_form_t, arg4::Ptr{BN_CTX})::Ptr{Cchar}
end

function EC_POINT_hex2point(arg1, arg2, arg3, arg4)
    @ccall libwebsockets.EC_POINT_hex2point(arg1::Ptr{EC_GROUP}, arg2::Ptr{Cchar}, arg3::Ptr{EC_POINT}, arg4::Ptr{BN_CTX})::Ptr{EC_POINT}
end

function EC_POINT_add(group, r, a, b, ctx)
    @ccall libwebsockets.EC_POINT_add(group::Ptr{EC_GROUP}, r::Ptr{EC_POINT}, a::Ptr{EC_POINT}, b::Ptr{EC_POINT}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_dbl(group, r, a, ctx)
    @ccall libwebsockets.EC_POINT_dbl(group::Ptr{EC_GROUP}, r::Ptr{EC_POINT}, a::Ptr{EC_POINT}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_invert(group, a, ctx)
    @ccall libwebsockets.EC_POINT_invert(group::Ptr{EC_GROUP}, a::Ptr{EC_POINT}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_is_at_infinity(group, p)
    @ccall libwebsockets.EC_POINT_is_at_infinity(group::Ptr{EC_GROUP}, p::Ptr{EC_POINT})::Cint
end

function EC_POINT_is_on_curve(group, point, ctx)
    @ccall libwebsockets.EC_POINT_is_on_curve(group::Ptr{EC_GROUP}, point::Ptr{EC_POINT}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_cmp(group, a, b, ctx)
    @ccall libwebsockets.EC_POINT_cmp(group::Ptr{EC_GROUP}, a::Ptr{EC_POINT}, b::Ptr{EC_POINT}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_make_affine(group, point, ctx)
    @ccall libwebsockets.EC_POINT_make_affine(group::Ptr{EC_GROUP}, point::Ptr{EC_POINT}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINTs_make_affine(group, num, points, ctx)
    @ccall libwebsockets.EC_POINTs_make_affine(group::Ptr{EC_GROUP}, num::Csize_t, points::Ptr{Ptr{EC_POINT}}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINTs_mul(group, r, n, num, p, m, ctx)
    @ccall libwebsockets.EC_POINTs_mul(group::Ptr{EC_GROUP}, r::Ptr{EC_POINT}, n::Ptr{BIGNUM}, num::Csize_t, p::Ptr{Ptr{EC_POINT}}, m::Ptr{Ptr{BIGNUM}}, ctx::Ptr{BN_CTX})::Cint
end

function EC_POINT_mul(group, r, n, q, m, ctx)
    @ccall libwebsockets.EC_POINT_mul(group::Ptr{EC_GROUP}, r::Ptr{EC_POINT}, n::Ptr{BIGNUM}, q::Ptr{EC_POINT}, m::Ptr{BIGNUM}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_precompute_mult(group, ctx)
    @ccall libwebsockets.EC_GROUP_precompute_mult(group::Ptr{EC_GROUP}, ctx::Ptr{BN_CTX})::Cint
end

function EC_GROUP_have_precompute_mult(group)
    @ccall libwebsockets.EC_GROUP_have_precompute_mult(group::Ptr{EC_GROUP})::Cint
end

function ECPKPARAMETERS_it()
    @ccall libwebsockets.ECPKPARAMETERS_it()::Ptr{ASN1_ITEM}
end

function ECPKPARAMETERS_new()
    @ccall libwebsockets.ECPKPARAMETERS_new()::Ptr{ECPKPARAMETERS}
end

function ECPKPARAMETERS_free(a)
    @ccall libwebsockets.ECPKPARAMETERS_free(a::Ptr{ECPKPARAMETERS})::Cvoid
end

function ECPARAMETERS_it()
    @ccall libwebsockets.ECPARAMETERS_it()::Ptr{ASN1_ITEM}
end

function ECPARAMETERS_new()
    @ccall libwebsockets.ECPARAMETERS_new()::Ptr{ECPARAMETERS}
end

function ECPARAMETERS_free(a)
    @ccall libwebsockets.ECPARAMETERS_free(a::Ptr{ECPARAMETERS})::Cvoid
end

function EC_GROUP_get_basis_type(arg1)
    @ccall libwebsockets.EC_GROUP_get_basis_type(arg1::Ptr{EC_GROUP})::Cint
end

function EC_GROUP_get_trinomial_basis(arg1, k)
    @ccall libwebsockets.EC_GROUP_get_trinomial_basis(arg1::Ptr{EC_GROUP}, k::Ptr{Cuint})::Cint
end

function EC_GROUP_get_pentanomial_basis(arg1, k1, k2, k3)
    @ccall libwebsockets.EC_GROUP_get_pentanomial_basis(arg1::Ptr{EC_GROUP}, k1::Ptr{Cuint}, k2::Ptr{Cuint}, k3::Ptr{Cuint})::Cint
end

function ECPKParameters_print(bp, x, off)
    @ccall libwebsockets.ECPKParameters_print(bp::Ptr{BIO}, x::Ptr{EC_GROUP}, off::Cint)::Cint
end

function ECPKParameters_print_fp(fp, x, off)
    @ccall libwebsockets.ECPKParameters_print_fp(fp::Ptr{Libc.FILE}, x::Ptr{EC_GROUP}, off::Cint)::Cint
end

function EC_KEY_new_ex(ctx, propq)
    @ccall libwebsockets.EC_KEY_new_ex(ctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EC_KEY}
end

function EC_KEY_new()
    @ccall libwebsockets.EC_KEY_new()::Ptr{EC_KEY}
end

function EC_KEY_get_flags(key)
    @ccall libwebsockets.EC_KEY_get_flags(key::Ptr{EC_KEY})::Cint
end

function EC_KEY_set_flags(key, flags)
    @ccall libwebsockets.EC_KEY_set_flags(key::Ptr{EC_KEY}, flags::Cint)::Cvoid
end

function EC_KEY_clear_flags(key, flags)
    @ccall libwebsockets.EC_KEY_clear_flags(key::Ptr{EC_KEY}, flags::Cint)::Cvoid
end

function EC_KEY_decoded_from_explicit_params(key)
    @ccall libwebsockets.EC_KEY_decoded_from_explicit_params(key::Ptr{EC_KEY})::Cint
end

function EC_KEY_new_by_curve_name_ex(ctx, propq, nid)
    @ccall libwebsockets.EC_KEY_new_by_curve_name_ex(ctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar}, nid::Cint)::Ptr{EC_KEY}
end

function EC_KEY_new_by_curve_name(nid)
    @ccall libwebsockets.EC_KEY_new_by_curve_name(nid::Cint)::Ptr{EC_KEY}
end

function EC_KEY_free(key)
    @ccall libwebsockets.EC_KEY_free(key::Ptr{EC_KEY})::Cvoid
end

function EC_KEY_copy(dst, src)
    @ccall libwebsockets.EC_KEY_copy(dst::Ptr{EC_KEY}, src::Ptr{EC_KEY})::Ptr{EC_KEY}
end

function EC_KEY_dup(src)
    @ccall libwebsockets.EC_KEY_dup(src::Ptr{EC_KEY})::Ptr{EC_KEY}
end

function EC_KEY_up_ref(key)
    @ccall libwebsockets.EC_KEY_up_ref(key::Ptr{EC_KEY})::Cint
end

function EC_KEY_get0_engine(eckey)
    @ccall libwebsockets.EC_KEY_get0_engine(eckey::Ptr{EC_KEY})::Ptr{ENGINE}
end

function EC_KEY_get0_group(key)
    @ccall libwebsockets.EC_KEY_get0_group(key::Ptr{EC_KEY})::Ptr{EC_GROUP}
end

function EC_KEY_set_group(key, group)
    @ccall libwebsockets.EC_KEY_set_group(key::Ptr{EC_KEY}, group::Ptr{EC_GROUP})::Cint
end

function EC_KEY_get0_private_key(key)
    @ccall libwebsockets.EC_KEY_get0_private_key(key::Ptr{EC_KEY})::Ptr{BIGNUM}
end

function EC_KEY_set_private_key(key, prv)
    @ccall libwebsockets.EC_KEY_set_private_key(key::Ptr{EC_KEY}, prv::Ptr{BIGNUM})::Cint
end

function EC_KEY_get0_public_key(key)
    @ccall libwebsockets.EC_KEY_get0_public_key(key::Ptr{EC_KEY})::Ptr{EC_POINT}
end

function EC_KEY_set_public_key(key, pub)
    @ccall libwebsockets.EC_KEY_set_public_key(key::Ptr{EC_KEY}, pub::Ptr{EC_POINT})::Cint
end

function EC_KEY_get_enc_flags(key)
    @ccall libwebsockets.EC_KEY_get_enc_flags(key::Ptr{EC_KEY})::Cuint
end

function EC_KEY_set_enc_flags(eckey, flags)
    @ccall libwebsockets.EC_KEY_set_enc_flags(eckey::Ptr{EC_KEY}, flags::Cuint)::Cvoid
end

function EC_KEY_get_conv_form(key)
    @ccall libwebsockets.EC_KEY_get_conv_form(key::Ptr{EC_KEY})::point_conversion_form_t
end

function EC_KEY_set_conv_form(eckey, cform)
    @ccall libwebsockets.EC_KEY_set_conv_form(eckey::Ptr{EC_KEY}, cform::point_conversion_form_t)::Cvoid
end

function EC_KEY_set_ex_data(key, idx, arg)
    @ccall libwebsockets.EC_KEY_set_ex_data(key::Ptr{EC_KEY}, idx::Cint, arg::Ptr{Cvoid})::Cint
end

function EC_KEY_get_ex_data(key, idx)
    @ccall libwebsockets.EC_KEY_get_ex_data(key::Ptr{EC_KEY}, idx::Cint)::Ptr{Cvoid}
end

function EC_KEY_set_asn1_flag(eckey, asn1_flag)
    @ccall libwebsockets.EC_KEY_set_asn1_flag(eckey::Ptr{EC_KEY}, asn1_flag::Cint)::Cvoid
end

function EC_KEY_precompute_mult(key, ctx)
    @ccall libwebsockets.EC_KEY_precompute_mult(key::Ptr{EC_KEY}, ctx::Ptr{BN_CTX})::Cint
end

function EC_KEY_generate_key(key)
    @ccall libwebsockets.EC_KEY_generate_key(key::Ptr{EC_KEY})::Cint
end

function EC_KEY_check_key(key)
    @ccall libwebsockets.EC_KEY_check_key(key::Ptr{EC_KEY})::Cint
end

function EC_KEY_can_sign(eckey)
    @ccall libwebsockets.EC_KEY_can_sign(eckey::Ptr{EC_KEY})::Cint
end

function EC_KEY_set_public_key_affine_coordinates(key, x, y)
    @ccall libwebsockets.EC_KEY_set_public_key_affine_coordinates(key::Ptr{EC_KEY}, x::Ptr{BIGNUM}, y::Ptr{BIGNUM})::Cint
end

function EC_KEY_key2buf(key, form, pbuf, ctx)
    @ccall libwebsockets.EC_KEY_key2buf(key::Ptr{EC_KEY}, form::point_conversion_form_t, pbuf::Ptr{Ptr{Cuchar}}, ctx::Ptr{BN_CTX})::Csize_t
end

function EC_KEY_oct2key(key, buf, len, ctx)
    @ccall libwebsockets.EC_KEY_oct2key(key::Ptr{EC_KEY}, buf::Ptr{Cuchar}, len::Csize_t, ctx::Ptr{BN_CTX})::Cint
end

function EC_KEY_oct2priv(key, buf, len)
    @ccall libwebsockets.EC_KEY_oct2priv(key::Ptr{EC_KEY}, buf::Ptr{Cuchar}, len::Csize_t)::Cint
end

function EC_KEY_priv2oct(key, buf, len)
    @ccall libwebsockets.EC_KEY_priv2oct(key::Ptr{EC_KEY}, buf::Ptr{Cuchar}, len::Csize_t)::Csize_t
end

function EC_KEY_priv2buf(eckey, pbuf)
    @ccall libwebsockets.EC_KEY_priv2buf(eckey::Ptr{EC_KEY}, pbuf::Ptr{Ptr{Cuchar}})::Csize_t
end

function d2i_ECPrivateKey(key, in, len)
    @ccall libwebsockets.d2i_ECPrivateKey(key::Ptr{Ptr{EC_KEY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{EC_KEY}
end

function i2d_ECPrivateKey(key, out)
    @ccall libwebsockets.i2d_ECPrivateKey(key::Ptr{EC_KEY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function o2i_ECPublicKey(key, in, len)
    @ccall libwebsockets.o2i_ECPublicKey(key::Ptr{Ptr{EC_KEY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{EC_KEY}
end

function i2o_ECPublicKey(key, out)
    @ccall libwebsockets.i2o_ECPublicKey(key::Ptr{EC_KEY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ECParameters_print(bp, key)
    @ccall libwebsockets.ECParameters_print(bp::Ptr{BIO}, key::Ptr{EC_KEY})::Cint
end

function EC_KEY_print(bp, key, off)
    @ccall libwebsockets.EC_KEY_print(bp::Ptr{BIO}, key::Ptr{EC_KEY}, off::Cint)::Cint
end

function ECParameters_print_fp(fp, key)
    @ccall libwebsockets.ECParameters_print_fp(fp::Ptr{Libc.FILE}, key::Ptr{EC_KEY})::Cint
end

function EC_KEY_print_fp(fp, key, off)
    @ccall libwebsockets.EC_KEY_print_fp(fp::Ptr{Libc.FILE}, key::Ptr{EC_KEY}, off::Cint)::Cint
end

function EC_KEY_OpenSSL()
    @ccall libwebsockets.EC_KEY_OpenSSL()::Ptr{EC_KEY_METHOD}
end

function EC_KEY_get_default_method()
    @ccall libwebsockets.EC_KEY_get_default_method()::Ptr{EC_KEY_METHOD}
end

function EC_KEY_set_default_method(meth)
    @ccall libwebsockets.EC_KEY_set_default_method(meth::Ptr{EC_KEY_METHOD})::Cvoid
end

function EC_KEY_get_method(key)
    @ccall libwebsockets.EC_KEY_get_method(key::Ptr{EC_KEY})::Ptr{EC_KEY_METHOD}
end

function EC_KEY_set_method(key, meth)
    @ccall libwebsockets.EC_KEY_set_method(key::Ptr{EC_KEY}, meth::Ptr{EC_KEY_METHOD})::Cint
end

function EC_KEY_new_method(engine)
    @ccall libwebsockets.EC_KEY_new_method(engine::Ptr{ENGINE})::Ptr{EC_KEY}
end

function ECDH_KDF_X9_62(out, outlen, Z, Zlen, sinfo, sinfolen, md)
    @ccall libwebsockets.ECDH_KDF_X9_62(out::Ptr{Cuchar}, outlen::Csize_t, Z::Ptr{Cuchar}, Zlen::Csize_t, sinfo::Ptr{Cuchar}, sinfolen::Csize_t, md::Ptr{EVP_MD})::Cint
end

function ECDH_compute_key(out, outlen, pub_key, ecdh, KDF)
    @ccall libwebsockets.ECDH_compute_key(out::Ptr{Cvoid}, outlen::Csize_t, pub_key::Ptr{EC_POINT}, ecdh::Ptr{EC_KEY}, KDF::Ptr{Cvoid})::Cint
end

mutable struct ECDSA_SIG_st end

const ECDSA_SIG = ECDSA_SIG_st

function ECDSA_SIG_new()
    @ccall libwebsockets.ECDSA_SIG_new()::Ptr{ECDSA_SIG}
end

function ECDSA_SIG_free(sig)
    @ccall libwebsockets.ECDSA_SIG_free(sig::Ptr{ECDSA_SIG})::Cvoid
end

function d2i_ECDSA_SIG(a, in, len)
    @ccall libwebsockets.d2i_ECDSA_SIG(a::Ptr{Ptr{ECDSA_SIG}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{ECDSA_SIG}
end

function i2d_ECDSA_SIG(a, out)
    @ccall libwebsockets.i2d_ECDSA_SIG(a::Ptr{ECDSA_SIG}, out::Ptr{Ptr{Cuchar}})::Cint
end

function ECDSA_SIG_get0(sig, pr, ps)
    @ccall libwebsockets.ECDSA_SIG_get0(sig::Ptr{ECDSA_SIG}, pr::Ptr{Ptr{BIGNUM}}, ps::Ptr{Ptr{BIGNUM}})::Cvoid
end

function ECDSA_SIG_get0_r(sig)
    @ccall libwebsockets.ECDSA_SIG_get0_r(sig::Ptr{ECDSA_SIG})::Ptr{BIGNUM}
end

function ECDSA_SIG_get0_s(sig)
    @ccall libwebsockets.ECDSA_SIG_get0_s(sig::Ptr{ECDSA_SIG})::Ptr{BIGNUM}
end

function ECDSA_SIG_set0(sig, r, s)
    @ccall libwebsockets.ECDSA_SIG_set0(sig::Ptr{ECDSA_SIG}, r::Ptr{BIGNUM}, s::Ptr{BIGNUM})::Cint
end

function ECDSA_do_sign(dgst, dgst_len, eckey)
    @ccall libwebsockets.ECDSA_do_sign(dgst::Ptr{Cuchar}, dgst_len::Cint, eckey::Ptr{EC_KEY})::Ptr{ECDSA_SIG}
end

function ECDSA_do_sign_ex(dgst, dgstlen, kinv, rp, eckey)
    @ccall libwebsockets.ECDSA_do_sign_ex(dgst::Ptr{Cuchar}, dgstlen::Cint, kinv::Ptr{BIGNUM}, rp::Ptr{BIGNUM}, eckey::Ptr{EC_KEY})::Ptr{ECDSA_SIG}
end

function ECDSA_do_verify(dgst, dgst_len, sig, eckey)
    @ccall libwebsockets.ECDSA_do_verify(dgst::Ptr{Cuchar}, dgst_len::Cint, sig::Ptr{ECDSA_SIG}, eckey::Ptr{EC_KEY})::Cint
end

function ECDSA_sign_setup(eckey, ctx, kinv, rp)
    @ccall libwebsockets.ECDSA_sign_setup(eckey::Ptr{EC_KEY}, ctx::Ptr{BN_CTX}, kinv::Ptr{Ptr{BIGNUM}}, rp::Ptr{Ptr{BIGNUM}})::Cint
end

function ECDSA_sign(type, dgst, dgstlen, sig, siglen, eckey)
    @ccall libwebsockets.ECDSA_sign(type::Cint, dgst::Ptr{Cuchar}, dgstlen::Cint, sig::Ptr{Cuchar}, siglen::Ptr{Cuint}, eckey::Ptr{EC_KEY})::Cint
end

function ECDSA_sign_ex(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey)
    @ccall libwebsockets.ECDSA_sign_ex(type::Cint, dgst::Ptr{Cuchar}, dgstlen::Cint, sig::Ptr{Cuchar}, siglen::Ptr{Cuint}, kinv::Ptr{BIGNUM}, rp::Ptr{BIGNUM}, eckey::Ptr{EC_KEY})::Cint
end

function ECDSA_verify(type, dgst, dgstlen, sig, siglen, eckey)
    @ccall libwebsockets.ECDSA_verify(type::Cint, dgst::Ptr{Cuchar}, dgstlen::Cint, sig::Ptr{Cuchar}, siglen::Cint, eckey::Ptr{EC_KEY})::Cint
end

function ECDSA_size(eckey)
    @ccall libwebsockets.ECDSA_size(eckey::Ptr{EC_KEY})::Cint
end

function EC_KEY_METHOD_new(meth)
    @ccall libwebsockets.EC_KEY_METHOD_new(meth::Ptr{EC_KEY_METHOD})::Ptr{EC_KEY_METHOD}
end

function EC_KEY_METHOD_free(meth)
    @ccall libwebsockets.EC_KEY_METHOD_free(meth::Ptr{EC_KEY_METHOD})::Cvoid
end

function EC_KEY_METHOD_set_init(meth, init, finish, copy, set_group, set_private, set_public)
    @ccall libwebsockets.EC_KEY_METHOD_set_init(meth::Ptr{EC_KEY_METHOD}, init::Ptr{Cvoid}, finish::Ptr{Cvoid}, copy::Ptr{Cvoid}, set_group::Ptr{Cvoid}, set_private::Ptr{Cvoid}, set_public::Ptr{Cvoid})::Cvoid
end

function EC_KEY_METHOD_set_keygen(meth, keygen)
    @ccall libwebsockets.EC_KEY_METHOD_set_keygen(meth::Ptr{EC_KEY_METHOD}, keygen::Ptr{Cvoid})::Cvoid
end

function EC_KEY_METHOD_set_compute_key(meth, ckey)
    @ccall libwebsockets.EC_KEY_METHOD_set_compute_key(meth::Ptr{EC_KEY_METHOD}, ckey::Ptr{Cvoid})::Cvoid
end

function EC_KEY_METHOD_set_sign(meth, sign, sign_setup, sign_sig)
    @ccall libwebsockets.EC_KEY_METHOD_set_sign(meth::Ptr{EC_KEY_METHOD}, sign::Ptr{Cvoid}, sign_setup::Ptr{Cvoid}, sign_sig::Ptr{Cvoid})::Cvoid
end

function EC_KEY_METHOD_set_verify(meth, verify, verify_sig)
    @ccall libwebsockets.EC_KEY_METHOD_set_verify(meth::Ptr{EC_KEY_METHOD}, verify::Ptr{Cvoid}, verify_sig::Ptr{Cvoid})::Cvoid
end

function EC_KEY_METHOD_get_init(meth, pinit, pfinish, pcopy, pset_group, pset_private, pset_public)
    @ccall libwebsockets.EC_KEY_METHOD_get_init(meth::Ptr{EC_KEY_METHOD}, pinit::Ptr{Ptr{Cvoid}}, pfinish::Ptr{Ptr{Cvoid}}, pcopy::Ptr{Ptr{Cvoid}}, pset_group::Ptr{Ptr{Cvoid}}, pset_private::Ptr{Ptr{Cvoid}}, pset_public::Ptr{Ptr{Cvoid}})::Cvoid
end

function EC_KEY_METHOD_get_keygen(meth, pkeygen)
    @ccall libwebsockets.EC_KEY_METHOD_get_keygen(meth::Ptr{EC_KEY_METHOD}, pkeygen::Ptr{Ptr{Cvoid}})::Cvoid
end

function EC_KEY_METHOD_get_compute_key(meth, pck)
    @ccall libwebsockets.EC_KEY_METHOD_get_compute_key(meth::Ptr{EC_KEY_METHOD}, pck::Ptr{Ptr{Cvoid}})::Cvoid
end

function EC_KEY_METHOD_get_sign(meth, psign, psign_setup, psign_sig)
    @ccall libwebsockets.EC_KEY_METHOD_get_sign(meth::Ptr{EC_KEY_METHOD}, psign::Ptr{Ptr{Cvoid}}, psign_setup::Ptr{Ptr{Cvoid}}, psign_sig::Ptr{Ptr{Cvoid}})::Cvoid
end

function EC_KEY_METHOD_get_verify(meth, pverify, pverify_sig)
    @ccall libwebsockets.EC_KEY_METHOD_get_verify(meth::Ptr{EC_KEY_METHOD}, pverify::Ptr{Ptr{Cvoid}}, pverify_sig::Ptr{Ptr{Cvoid}})::Cvoid
end

function EVP_PKEY_CTX_set_rsa_padding(ctx, pad_mode)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_padding(ctx::Ptr{EVP_PKEY_CTX}, pad_mode::Cint)::Cint
end

function EVP_PKEY_CTX_get_rsa_padding(ctx, pad_mode)
    @ccall libwebsockets.EVP_PKEY_CTX_get_rsa_padding(ctx::Ptr{EVP_PKEY_CTX}, pad_mode::Ptr{Cint})::Cint
end

function EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx, saltlen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx::Ptr{EVP_PKEY_CTX}, saltlen::Cint)::Cint
end

function EVP_PKEY_CTX_get_rsa_pss_saltlen(ctx, saltlen)
    @ccall libwebsockets.EVP_PKEY_CTX_get_rsa_pss_saltlen(ctx::Ptr{EVP_PKEY_CTX}, saltlen::Ptr{Cint})::Cint
end

function EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, bits)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_keygen_bits(ctx::Ptr{EVP_PKEY_CTX}, bits::Cint)::Cint
end

function EVP_PKEY_CTX_set1_rsa_keygen_pubexp(ctx, pubexp)
    @ccall libwebsockets.EVP_PKEY_CTX_set1_rsa_keygen_pubexp(ctx::Ptr{EVP_PKEY_CTX}, pubexp::Ptr{BIGNUM})::Cint
end

function EVP_PKEY_CTX_set_rsa_keygen_primes(ctx, primes)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_keygen_primes(ctx::Ptr{EVP_PKEY_CTX}, primes::Cint)::Cint
end

function EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(ctx, saltlen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(ctx::Ptr{EVP_PKEY_CTX}, saltlen::Cint)::Cint
end

function EVP_PKEY_CTX_set_rsa_keygen_pubexp(ctx, pubexp)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_keygen_pubexp(ctx::Ptr{EVP_PKEY_CTX}, pubexp::Ptr{BIGNUM})::Cint
end

function EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_mgf1_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_set_rsa_mgf1_md_name(ctx, mdname, mdprops)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_mgf1_md_name(ctx::Ptr{EVP_PKEY_CTX}, mdname::Ptr{Cchar}, mdprops::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_get_rsa_mgf1_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_get_rsa_mgf1_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{Ptr{EVP_MD}})::Cint
end

function EVP_PKEY_CTX_get_rsa_mgf1_md_name(ctx, name, namelen)
    @ccall libwebsockets.EVP_PKEY_CTX_get_rsa_mgf1_md_name(ctx::Ptr{EVP_PKEY_CTX}, name::Ptr{Cchar}, namelen::Csize_t)::Cint
end

function EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(ctx, mdname)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(ctx::Ptr{EVP_PKEY_CTX}, mdname::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_set_rsa_pss_keygen_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_pss_keygen_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(ctx, mdname, mdprops)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(ctx::Ptr{EVP_PKEY_CTX}, mdname::Ptr{Cchar}, mdprops::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_set_rsa_oaep_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_oaep_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_set_rsa_oaep_md_name(ctx, mdname, mdprops)
    @ccall libwebsockets.EVP_PKEY_CTX_set_rsa_oaep_md_name(ctx::Ptr{EVP_PKEY_CTX}, mdname::Ptr{Cchar}, mdprops::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_get_rsa_oaep_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_get_rsa_oaep_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{Ptr{EVP_MD}})::Cint
end

function EVP_PKEY_CTX_get_rsa_oaep_md_name(ctx, name, namelen)
    @ccall libwebsockets.EVP_PKEY_CTX_get_rsa_oaep_md_name(ctx::Ptr{EVP_PKEY_CTX}, name::Ptr{Cchar}, namelen::Csize_t)::Cint
end

function EVP_PKEY_CTX_set0_rsa_oaep_label(ctx, label, llen)
    @ccall libwebsockets.EVP_PKEY_CTX_set0_rsa_oaep_label(ctx::Ptr{EVP_PKEY_CTX}, label::Ptr{Cvoid}, llen::Cint)::Cint
end

function EVP_PKEY_CTX_get0_rsa_oaep_label(ctx, label)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_rsa_oaep_label(ctx::Ptr{EVP_PKEY_CTX}, label::Ptr{Ptr{Cuchar}})::Cint
end

function RSA_new()
    @ccall libwebsockets.RSA_new()::Ptr{RSA}
end

function RSA_new_method(engine)
    @ccall libwebsockets.RSA_new_method(engine::Ptr{ENGINE})::Ptr{RSA}
end

function RSA_bits(rsa)
    @ccall libwebsockets.RSA_bits(rsa::Ptr{RSA})::Cint
end

function RSA_size(rsa)
    @ccall libwebsockets.RSA_size(rsa::Ptr{RSA})::Cint
end

function RSA_security_bits(rsa)
    @ccall libwebsockets.RSA_security_bits(rsa::Ptr{RSA})::Cint
end

function RSA_set0_key(r, n, e, d)
    @ccall libwebsockets.RSA_set0_key(r::Ptr{RSA}, n::Ptr{BIGNUM}, e::Ptr{BIGNUM}, d::Ptr{BIGNUM})::Cint
end

function RSA_set0_factors(r, p, q)
    @ccall libwebsockets.RSA_set0_factors(r::Ptr{RSA}, p::Ptr{BIGNUM}, q::Ptr{BIGNUM})::Cint
end

function RSA_set0_crt_params(r, dmp1, dmq1, iqmp)
    @ccall libwebsockets.RSA_set0_crt_params(r::Ptr{RSA}, dmp1::Ptr{BIGNUM}, dmq1::Ptr{BIGNUM}, iqmp::Ptr{BIGNUM})::Cint
end

function RSA_set0_multi_prime_params(r, primes, exps, coeffs, pnum)
    @ccall libwebsockets.RSA_set0_multi_prime_params(r::Ptr{RSA}, primes::Ptr{Ptr{BIGNUM}}, exps::Ptr{Ptr{BIGNUM}}, coeffs::Ptr{Ptr{BIGNUM}}, pnum::Cint)::Cint
end

function RSA_get0_key(r, n, e, d)
    @ccall libwebsockets.RSA_get0_key(r::Ptr{RSA}, n::Ptr{Ptr{BIGNUM}}, e::Ptr{Ptr{BIGNUM}}, d::Ptr{Ptr{BIGNUM}})::Cvoid
end

function RSA_get0_factors(r, p, q)
    @ccall libwebsockets.RSA_get0_factors(r::Ptr{RSA}, p::Ptr{Ptr{BIGNUM}}, q::Ptr{Ptr{BIGNUM}})::Cvoid
end

function RSA_get_multi_prime_extra_count(r)
    @ccall libwebsockets.RSA_get_multi_prime_extra_count(r::Ptr{RSA})::Cint
end

function RSA_get0_multi_prime_factors(r, primes)
    @ccall libwebsockets.RSA_get0_multi_prime_factors(r::Ptr{RSA}, primes::Ptr{Ptr{BIGNUM}})::Cint
end

function RSA_get0_crt_params(r, dmp1, dmq1, iqmp)
    @ccall libwebsockets.RSA_get0_crt_params(r::Ptr{RSA}, dmp1::Ptr{Ptr{BIGNUM}}, dmq1::Ptr{Ptr{BIGNUM}}, iqmp::Ptr{Ptr{BIGNUM}})::Cvoid
end

function RSA_get0_multi_prime_crt_params(r, exps, coeffs)
    @ccall libwebsockets.RSA_get0_multi_prime_crt_params(r::Ptr{RSA}, exps::Ptr{Ptr{BIGNUM}}, coeffs::Ptr{Ptr{BIGNUM}})::Cint
end

function RSA_get0_n(d)
    @ccall libwebsockets.RSA_get0_n(d::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_e(d)
    @ccall libwebsockets.RSA_get0_e(d::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_d(d)
    @ccall libwebsockets.RSA_get0_d(d::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_p(d)
    @ccall libwebsockets.RSA_get0_p(d::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_q(d)
    @ccall libwebsockets.RSA_get0_q(d::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_dmp1(r)
    @ccall libwebsockets.RSA_get0_dmp1(r::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_dmq1(r)
    @ccall libwebsockets.RSA_get0_dmq1(r::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_iqmp(r)
    @ccall libwebsockets.RSA_get0_iqmp(r::Ptr{RSA})::Ptr{BIGNUM}
end

function RSA_get0_pss_params(r)
    @ccall libwebsockets.RSA_get0_pss_params(r::Ptr{RSA})::Ptr{RSA_PSS_PARAMS}
end

function RSA_clear_flags(r, flags)
    @ccall libwebsockets.RSA_clear_flags(r::Ptr{RSA}, flags::Cint)::Cvoid
end

function RSA_test_flags(r, flags)
    @ccall libwebsockets.RSA_test_flags(r::Ptr{RSA}, flags::Cint)::Cint
end

function RSA_set_flags(r, flags)
    @ccall libwebsockets.RSA_set_flags(r::Ptr{RSA}, flags::Cint)::Cvoid
end

function RSA_get_version(r)
    @ccall libwebsockets.RSA_get_version(r::Ptr{RSA})::Cint
end

function RSA_get0_engine(r)
    @ccall libwebsockets.RSA_get0_engine(r::Ptr{RSA})::Ptr{ENGINE}
end

function RSA_generate_key(bits, e, callback, cb_arg)
    @ccall libwebsockets.RSA_generate_key(bits::Cint, e::Culong, callback::Ptr{Cvoid}, cb_arg::Ptr{Cvoid})::Ptr{RSA}
end

function RSA_generate_key_ex(rsa, bits, e, cb)
    @ccall libwebsockets.RSA_generate_key_ex(rsa::Ptr{RSA}, bits::Cint, e::Ptr{BIGNUM}, cb::Ptr{BN_GENCB})::Cint
end

function RSA_generate_multi_prime_key(rsa, bits, primes, e, cb)
    @ccall libwebsockets.RSA_generate_multi_prime_key(rsa::Ptr{RSA}, bits::Cint, primes::Cint, e::Ptr{BIGNUM}, cb::Ptr{BN_GENCB})::Cint
end

function RSA_X931_derive_ex(rsa, p1, p2, q1, q2, Xp1, Xp2, Xp, Xq1, Xq2, Xq, e, cb)
    @ccall libwebsockets.RSA_X931_derive_ex(rsa::Ptr{RSA}, p1::Ptr{BIGNUM}, p2::Ptr{BIGNUM}, q1::Ptr{BIGNUM}, q2::Ptr{BIGNUM}, Xp1::Ptr{BIGNUM}, Xp2::Ptr{BIGNUM}, Xp::Ptr{BIGNUM}, Xq1::Ptr{BIGNUM}, Xq2::Ptr{BIGNUM}, Xq::Ptr{BIGNUM}, e::Ptr{BIGNUM}, cb::Ptr{BN_GENCB})::Cint
end

function RSA_X931_generate_key_ex(rsa, bits, e, cb)
    @ccall libwebsockets.RSA_X931_generate_key_ex(rsa::Ptr{RSA}, bits::Cint, e::Ptr{BIGNUM}, cb::Ptr{BN_GENCB})::Cint
end

function RSA_check_key(arg1)
    @ccall libwebsockets.RSA_check_key(arg1::Ptr{RSA})::Cint
end

function RSA_check_key_ex(arg1, cb)
    @ccall libwebsockets.RSA_check_key_ex(arg1::Ptr{RSA}, cb::Ptr{BN_GENCB})::Cint
end

function RSA_public_encrypt(flen, from, to, rsa, padding)
    @ccall libwebsockets.RSA_public_encrypt(flen::Cint, from::Ptr{Cuchar}, to::Ptr{Cuchar}, rsa::Ptr{RSA}, padding::Cint)::Cint
end

function RSA_private_encrypt(flen, from, to, rsa, padding)
    @ccall libwebsockets.RSA_private_encrypt(flen::Cint, from::Ptr{Cuchar}, to::Ptr{Cuchar}, rsa::Ptr{RSA}, padding::Cint)::Cint
end

function RSA_public_decrypt(flen, from, to, rsa, padding)
    @ccall libwebsockets.RSA_public_decrypt(flen::Cint, from::Ptr{Cuchar}, to::Ptr{Cuchar}, rsa::Ptr{RSA}, padding::Cint)::Cint
end

function RSA_private_decrypt(flen, from, to, rsa, padding)
    @ccall libwebsockets.RSA_private_decrypt(flen::Cint, from::Ptr{Cuchar}, to::Ptr{Cuchar}, rsa::Ptr{RSA}, padding::Cint)::Cint
end

function RSA_free(r)
    @ccall libwebsockets.RSA_free(r::Ptr{RSA})::Cvoid
end

function RSA_up_ref(r)
    @ccall libwebsockets.RSA_up_ref(r::Ptr{RSA})::Cint
end

function RSA_flags(r)
    @ccall libwebsockets.RSA_flags(r::Ptr{RSA})::Cint
end

function RSA_set_default_method(meth)
    @ccall libwebsockets.RSA_set_default_method(meth::Ptr{RSA_METHOD})::Cvoid
end

function RSA_get_default_method()
    @ccall libwebsockets.RSA_get_default_method()::Ptr{RSA_METHOD}
end

function RSA_null_method()
    @ccall libwebsockets.RSA_null_method()::Ptr{RSA_METHOD}
end

function RSA_get_method(rsa)
    @ccall libwebsockets.RSA_get_method(rsa::Ptr{RSA})::Ptr{RSA_METHOD}
end

function RSA_set_method(rsa, meth)
    @ccall libwebsockets.RSA_set_method(rsa::Ptr{RSA}, meth::Ptr{RSA_METHOD})::Cint
end

function RSA_PKCS1_OpenSSL()
    @ccall libwebsockets.RSA_PKCS1_OpenSSL()::Ptr{RSA_METHOD}
end

function d2i_RSAPublicKey(a, in, len)
    @ccall libwebsockets.d2i_RSAPublicKey(a::Ptr{Ptr{RSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{RSA}
end

function i2d_RSAPublicKey(a, out)
    @ccall libwebsockets.i2d_RSAPublicKey(a::Ptr{RSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function RSAPublicKey_it()
    @ccall libwebsockets.RSAPublicKey_it()::Ptr{ASN1_ITEM}
end

function d2i_RSAPrivateKey(a, in, len)
    @ccall libwebsockets.d2i_RSAPrivateKey(a::Ptr{Ptr{RSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{RSA}
end

function i2d_RSAPrivateKey(a, out)
    @ccall libwebsockets.i2d_RSAPrivateKey(a::Ptr{RSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function RSAPrivateKey_it()
    @ccall libwebsockets.RSAPrivateKey_it()::Ptr{ASN1_ITEM}
end

function RSA_pkey_ctx_ctrl(ctx, optype, cmd, p1, p2)
    @ccall libwebsockets.RSA_pkey_ctx_ctrl(ctx::Ptr{EVP_PKEY_CTX}, optype::Cint, cmd::Cint, p1::Cint, p2::Ptr{Cvoid})::Cint
end

function RSA_PSS_PARAMS_new()
    @ccall libwebsockets.RSA_PSS_PARAMS_new()::Ptr{RSA_PSS_PARAMS}
end

function RSA_PSS_PARAMS_free(a)
    @ccall libwebsockets.RSA_PSS_PARAMS_free(a::Ptr{RSA_PSS_PARAMS})::Cvoid
end

function d2i_RSA_PSS_PARAMS(a, in, len)
    @ccall libwebsockets.d2i_RSA_PSS_PARAMS(a::Ptr{Ptr{RSA_PSS_PARAMS}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{RSA_PSS_PARAMS}
end

function i2d_RSA_PSS_PARAMS(a, out)
    @ccall libwebsockets.i2d_RSA_PSS_PARAMS(a::Ptr{RSA_PSS_PARAMS}, out::Ptr{Ptr{Cuchar}})::Cint
end

function RSA_PSS_PARAMS_it()
    @ccall libwebsockets.RSA_PSS_PARAMS_it()::Ptr{ASN1_ITEM}
end

function RSA_PSS_PARAMS_dup(a)
    @ccall libwebsockets.RSA_PSS_PARAMS_dup(a::Ptr{RSA_PSS_PARAMS})::Ptr{RSA_PSS_PARAMS}
end

mutable struct rsa_oaep_params_st
    hashFunc::Ptr{X509_ALGOR}
    maskGenFunc::Ptr{X509_ALGOR}
    pSourceFunc::Ptr{X509_ALGOR}
    maskHash::Ptr{X509_ALGOR}
    rsa_oaep_params_st() = new()
end

const RSA_OAEP_PARAMS = rsa_oaep_params_st

function RSA_OAEP_PARAMS_new()
    @ccall libwebsockets.RSA_OAEP_PARAMS_new()::Ptr{RSA_OAEP_PARAMS}
end

function RSA_OAEP_PARAMS_free(a)
    @ccall libwebsockets.RSA_OAEP_PARAMS_free(a::Ptr{RSA_OAEP_PARAMS})::Cvoid
end

function d2i_RSA_OAEP_PARAMS(a, in, len)
    @ccall libwebsockets.d2i_RSA_OAEP_PARAMS(a::Ptr{Ptr{RSA_OAEP_PARAMS}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{RSA_OAEP_PARAMS}
end

function i2d_RSA_OAEP_PARAMS(a, out)
    @ccall libwebsockets.i2d_RSA_OAEP_PARAMS(a::Ptr{RSA_OAEP_PARAMS}, out::Ptr{Ptr{Cuchar}})::Cint
end

function RSA_OAEP_PARAMS_it()
    @ccall libwebsockets.RSA_OAEP_PARAMS_it()::Ptr{ASN1_ITEM}
end

function RSA_print_fp(fp, r, offset)
    @ccall libwebsockets.RSA_print_fp(fp::Ptr{Libc.FILE}, r::Ptr{RSA}, offset::Cint)::Cint
end

function RSA_print(bp, r, offset)
    @ccall libwebsockets.RSA_print(bp::Ptr{BIO}, r::Ptr{RSA}, offset::Cint)::Cint
end

function RSA_sign(type, m, m_length, sigret, siglen, rsa)
    @ccall libwebsockets.RSA_sign(type::Cint, m::Ptr{Cuchar}, m_length::Cuint, sigret::Ptr{Cuchar}, siglen::Ptr{Cuint}, rsa::Ptr{RSA})::Cint
end

function RSA_verify(type, m, m_length, sigbuf, siglen, rsa)
    @ccall libwebsockets.RSA_verify(type::Cint, m::Ptr{Cuchar}, m_length::Cuint, sigbuf::Ptr{Cuchar}, siglen::Cuint, rsa::Ptr{RSA})::Cint
end

function RSA_sign_ASN1_OCTET_STRING(type, m, m_length, sigret, siglen, rsa)
    @ccall libwebsockets.RSA_sign_ASN1_OCTET_STRING(type::Cint, m::Ptr{Cuchar}, m_length::Cuint, sigret::Ptr{Cuchar}, siglen::Ptr{Cuint}, rsa::Ptr{RSA})::Cint
end

function RSA_verify_ASN1_OCTET_STRING(type, m, m_length, sigbuf, siglen, rsa)
    @ccall libwebsockets.RSA_verify_ASN1_OCTET_STRING(type::Cint, m::Ptr{Cuchar}, m_length::Cuint, sigbuf::Ptr{Cuchar}, siglen::Cuint, rsa::Ptr{RSA})::Cint
end

function RSA_blinding_on(rsa, ctx)
    @ccall libwebsockets.RSA_blinding_on(rsa::Ptr{RSA}, ctx::Ptr{BN_CTX})::Cint
end

function RSA_blinding_off(rsa)
    @ccall libwebsockets.RSA_blinding_off(rsa::Ptr{RSA})::Cvoid
end

function RSA_setup_blinding(rsa, ctx)
    @ccall libwebsockets.RSA_setup_blinding(rsa::Ptr{RSA}, ctx::Ptr{BN_CTX})::Ptr{BN_BLINDING}
end

function RSA_padding_add_PKCS1_type_1(to, tlen, f, fl)
    @ccall libwebsockets.RSA_padding_add_PKCS1_type_1(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint)::Cint
end

function RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len)
    @ccall libwebsockets.RSA_padding_check_PKCS1_type_1(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint, rsa_len::Cint)::Cint
end

function RSA_padding_add_PKCS1_type_2(to, tlen, f, fl)
    @ccall libwebsockets.RSA_padding_add_PKCS1_type_2(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint)::Cint
end

function RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len)
    @ccall libwebsockets.RSA_padding_check_PKCS1_type_2(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint, rsa_len::Cint)::Cint
end

function PKCS1_MGF1(mask, len, seed, seedlen, dgst)
    @ccall libwebsockets.PKCS1_MGF1(mask::Ptr{Cuchar}, len::Clong, seed::Ptr{Cuchar}, seedlen::Clong, dgst::Ptr{EVP_MD})::Cint
end

function RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl)
    @ccall libwebsockets.RSA_padding_add_PKCS1_OAEP(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint, p::Ptr{Cuchar}, pl::Cint)::Cint
end

function RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl)
    @ccall libwebsockets.RSA_padding_check_PKCS1_OAEP(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint, rsa_len::Cint, p::Ptr{Cuchar}, pl::Cint)::Cint
end

function RSA_padding_add_PKCS1_OAEP_mgf1(to, tlen, from, flen, param, plen, md, mgf1md)
    @ccall libwebsockets.RSA_padding_add_PKCS1_OAEP_mgf1(to::Ptr{Cuchar}, tlen::Cint, from::Ptr{Cuchar}, flen::Cint, param::Ptr{Cuchar}, plen::Cint, md::Ptr{EVP_MD}, mgf1md::Ptr{EVP_MD})::Cint
end

function RSA_padding_check_PKCS1_OAEP_mgf1(to, tlen, from, flen, num, param, plen, md, mgf1md)
    @ccall libwebsockets.RSA_padding_check_PKCS1_OAEP_mgf1(to::Ptr{Cuchar}, tlen::Cint, from::Ptr{Cuchar}, flen::Cint, num::Cint, param::Ptr{Cuchar}, plen::Cint, md::Ptr{EVP_MD}, mgf1md::Ptr{EVP_MD})::Cint
end

function RSA_padding_add_none(to, tlen, f, fl)
    @ccall libwebsockets.RSA_padding_add_none(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint)::Cint
end

function RSA_padding_check_none(to, tlen, f, fl, rsa_len)
    @ccall libwebsockets.RSA_padding_check_none(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint, rsa_len::Cint)::Cint
end

function RSA_padding_add_X931(to, tlen, f, fl)
    @ccall libwebsockets.RSA_padding_add_X931(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint)::Cint
end

function RSA_padding_check_X931(to, tlen, f, fl, rsa_len)
    @ccall libwebsockets.RSA_padding_check_X931(to::Ptr{Cuchar}, tlen::Cint, f::Ptr{Cuchar}, fl::Cint, rsa_len::Cint)::Cint
end

function RSA_X931_hash_id(nid)
    @ccall libwebsockets.RSA_X931_hash_id(nid::Cint)::Cint
end

function RSA_verify_PKCS1_PSS(rsa, mHash, Hash, EM, sLen)
    @ccall libwebsockets.RSA_verify_PKCS1_PSS(rsa::Ptr{RSA}, mHash::Ptr{Cuchar}, Hash::Ptr{EVP_MD}, EM::Ptr{Cuchar}, sLen::Cint)::Cint
end

function RSA_padding_add_PKCS1_PSS(rsa, EM, mHash, Hash, sLen)
    @ccall libwebsockets.RSA_padding_add_PKCS1_PSS(rsa::Ptr{RSA}, EM::Ptr{Cuchar}, mHash::Ptr{Cuchar}, Hash::Ptr{EVP_MD}, sLen::Cint)::Cint
end

function RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, mgf1Hash, EM, sLen)
    @ccall libwebsockets.RSA_verify_PKCS1_PSS_mgf1(rsa::Ptr{RSA}, mHash::Ptr{Cuchar}, Hash::Ptr{EVP_MD}, mgf1Hash::Ptr{EVP_MD}, EM::Ptr{Cuchar}, sLen::Cint)::Cint
end

function RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, mgf1Hash, sLen)
    @ccall libwebsockets.RSA_padding_add_PKCS1_PSS_mgf1(rsa::Ptr{RSA}, EM::Ptr{Cuchar}, mHash::Ptr{Cuchar}, Hash::Ptr{EVP_MD}, mgf1Hash::Ptr{EVP_MD}, sLen::Cint)::Cint
end

function RSAPublicKey_dup(a)
    @ccall libwebsockets.RSAPublicKey_dup(a::Ptr{RSA})::Ptr{RSA}
end

function RSAPrivateKey_dup(a)
    @ccall libwebsockets.RSAPrivateKey_dup(a::Ptr{RSA})::Ptr{RSA}
end

function RSA_meth_new(name, flags)
    @ccall libwebsockets.RSA_meth_new(name::Ptr{Cchar}, flags::Cint)::Ptr{RSA_METHOD}
end

function RSA_meth_free(meth)
    @ccall libwebsockets.RSA_meth_free(meth::Ptr{RSA_METHOD})::Cvoid
end

function RSA_meth_dup(meth)
    @ccall libwebsockets.RSA_meth_dup(meth::Ptr{RSA_METHOD})::Ptr{RSA_METHOD}
end

function RSA_meth_get0_name(meth)
    @ccall libwebsockets.RSA_meth_get0_name(meth::Ptr{RSA_METHOD})::Ptr{Cchar}
end

function RSA_meth_set1_name(meth, name)
    @ccall libwebsockets.RSA_meth_set1_name(meth::Ptr{RSA_METHOD}, name::Ptr{Cchar})::Cint
end

function RSA_meth_get_flags(meth)
    @ccall libwebsockets.RSA_meth_get_flags(meth::Ptr{RSA_METHOD})::Cint
end

function RSA_meth_set_flags(meth, flags)
    @ccall libwebsockets.RSA_meth_set_flags(meth::Ptr{RSA_METHOD}, flags::Cint)::Cint
end

function RSA_meth_get0_app_data(meth)
    @ccall libwebsockets.RSA_meth_get0_app_data(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set0_app_data(meth, app_data)
    @ccall libwebsockets.RSA_meth_set0_app_data(meth::Ptr{RSA_METHOD}, app_data::Ptr{Cvoid})::Cint
end

function RSA_meth_get_pub_enc(meth)
    @ccall libwebsockets.RSA_meth_get_pub_enc(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_pub_enc(rsa, pub_enc)
    @ccall libwebsockets.RSA_meth_set_pub_enc(rsa::Ptr{RSA_METHOD}, pub_enc::Ptr{Cvoid})::Cint
end

function RSA_meth_get_pub_dec(meth)
    @ccall libwebsockets.RSA_meth_get_pub_dec(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_pub_dec(rsa, pub_dec)
    @ccall libwebsockets.RSA_meth_set_pub_dec(rsa::Ptr{RSA_METHOD}, pub_dec::Ptr{Cvoid})::Cint
end

function RSA_meth_get_priv_enc(meth)
    @ccall libwebsockets.RSA_meth_get_priv_enc(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_priv_enc(rsa, priv_enc)
    @ccall libwebsockets.RSA_meth_set_priv_enc(rsa::Ptr{RSA_METHOD}, priv_enc::Ptr{Cvoid})::Cint
end

function RSA_meth_get_priv_dec(meth)
    @ccall libwebsockets.RSA_meth_get_priv_dec(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_priv_dec(rsa, priv_dec)
    @ccall libwebsockets.RSA_meth_set_priv_dec(rsa::Ptr{RSA_METHOD}, priv_dec::Ptr{Cvoid})::Cint
end

function RSA_meth_get_mod_exp(meth)
    @ccall libwebsockets.RSA_meth_get_mod_exp(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_mod_exp(rsa, mod_exp)
    @ccall libwebsockets.RSA_meth_set_mod_exp(rsa::Ptr{RSA_METHOD}, mod_exp::Ptr{Cvoid})::Cint
end

function RSA_meth_get_bn_mod_exp(meth)
    @ccall libwebsockets.RSA_meth_get_bn_mod_exp(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_bn_mod_exp(rsa, bn_mod_exp)
    @ccall libwebsockets.RSA_meth_set_bn_mod_exp(rsa::Ptr{RSA_METHOD}, bn_mod_exp::Ptr{Cvoid})::Cint
end

function RSA_meth_get_init(meth)
    @ccall libwebsockets.RSA_meth_get_init(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_init(rsa, init)
    @ccall libwebsockets.RSA_meth_set_init(rsa::Ptr{RSA_METHOD}, init::Ptr{Cvoid})::Cint
end

function RSA_meth_get_finish(meth)
    @ccall libwebsockets.RSA_meth_get_finish(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_finish(rsa, finish)
    @ccall libwebsockets.RSA_meth_set_finish(rsa::Ptr{RSA_METHOD}, finish::Ptr{Cvoid})::Cint
end

function RSA_meth_get_sign(meth)
    @ccall libwebsockets.RSA_meth_get_sign(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_sign(rsa, sign)
    @ccall libwebsockets.RSA_meth_set_sign(rsa::Ptr{RSA_METHOD}, sign::Ptr{Cvoid})::Cint
end

function RSA_meth_get_verify(meth)
    @ccall libwebsockets.RSA_meth_get_verify(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_verify(rsa, verify)
    @ccall libwebsockets.RSA_meth_set_verify(rsa::Ptr{RSA_METHOD}, verify::Ptr{Cvoid})::Cint
end

function RSA_meth_get_keygen(meth)
    @ccall libwebsockets.RSA_meth_get_keygen(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_keygen(rsa, keygen)
    @ccall libwebsockets.RSA_meth_set_keygen(rsa::Ptr{RSA_METHOD}, keygen::Ptr{Cvoid})::Cint
end

function RSA_meth_get_multi_prime_keygen(meth)
    @ccall libwebsockets.RSA_meth_get_multi_prime_keygen(meth::Ptr{RSA_METHOD})::Ptr{Cvoid}
end

function RSA_meth_set_multi_prime_keygen(meth, keygen)
    @ccall libwebsockets.RSA_meth_set_multi_prime_keygen(meth::Ptr{RSA_METHOD}, keygen::Ptr{Cvoid})::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, nbits)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx::Ptr{EVP_PKEY_CTX}, nbits::Cint)::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_q_bits(ctx, qbits)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_q_bits(ctx::Ptr{EVP_PKEY_CTX}, qbits::Cint)::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_md_props(ctx, md_name, md_properties)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_md_props(ctx::Ptr{EVP_PKEY_CTX}, md_name::Ptr{Cchar}, md_properties::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_gindex(ctx, gindex)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_gindex(ctx::Ptr{EVP_PKEY_CTX}, gindex::Cint)::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_type(ctx, name)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_type(ctx::Ptr{EVP_PKEY_CTX}, name::Ptr{Cchar})::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_seed(ctx, seed, seedlen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_seed(ctx::Ptr{EVP_PKEY_CTX}, seed::Ptr{Cuchar}, seedlen::Csize_t)::Cint
end

function EVP_PKEY_CTX_set_dsa_paramgen_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dsa_paramgen_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_set_dh_paramgen_type(ctx, typ)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_paramgen_type(ctx::Ptr{EVP_PKEY_CTX}, typ::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_paramgen_gindex(ctx, gindex)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_paramgen_gindex(ctx::Ptr{EVP_PKEY_CTX}, gindex::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_paramgen_seed(ctx, seed, seedlen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_paramgen_seed(ctx::Ptr{EVP_PKEY_CTX}, seed::Ptr{Cuchar}, seedlen::Csize_t)::Cint
end

function EVP_PKEY_CTX_set_dh_paramgen_prime_len(ctx, pbits)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_paramgen_prime_len(ctx::Ptr{EVP_PKEY_CTX}, pbits::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_paramgen_subprime_len(ctx, qlen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_paramgen_subprime_len(ctx::Ptr{EVP_PKEY_CTX}, qlen::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_paramgen_generator(ctx, gen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_paramgen_generator(ctx::Ptr{EVP_PKEY_CTX}, gen::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_nid(ctx, nid)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_nid(ctx::Ptr{EVP_PKEY_CTX}, nid::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_rfc5114(ctx, gen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_rfc5114(ctx::Ptr{EVP_PKEY_CTX}, gen::Cint)::Cint
end

function EVP_PKEY_CTX_set_dhx_rfc5114(ctx, gen)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dhx_rfc5114(ctx::Ptr{EVP_PKEY_CTX}, gen::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_pad(ctx, pad)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_pad(ctx::Ptr{EVP_PKEY_CTX}, pad::Cint)::Cint
end

function EVP_PKEY_CTX_set_dh_kdf_type(ctx, kdf)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_kdf_type(ctx::Ptr{EVP_PKEY_CTX}, kdf::Cint)::Cint
end

function EVP_PKEY_CTX_get_dh_kdf_type(ctx)
    @ccall libwebsockets.EVP_PKEY_CTX_get_dh_kdf_type(ctx::Ptr{EVP_PKEY_CTX})::Cint
end

function EVP_PKEY_CTX_set0_dh_kdf_oid(ctx, oid)
    @ccall libwebsockets.EVP_PKEY_CTX_set0_dh_kdf_oid(ctx::Ptr{EVP_PKEY_CTX}, oid::Ptr{ASN1_OBJECT})::Cint
end

function EVP_PKEY_CTX_get0_dh_kdf_oid(ctx, oid)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_dh_kdf_oid(ctx::Ptr{EVP_PKEY_CTX}, oid::Ptr{Ptr{ASN1_OBJECT}})::Cint
end

function EVP_PKEY_CTX_set_dh_kdf_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_kdf_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{EVP_MD})::Cint
end

function EVP_PKEY_CTX_get_dh_kdf_md(ctx, md)
    @ccall libwebsockets.EVP_PKEY_CTX_get_dh_kdf_md(ctx::Ptr{EVP_PKEY_CTX}, md::Ptr{Ptr{EVP_MD}})::Cint
end

function EVP_PKEY_CTX_set_dh_kdf_outlen(ctx, len)
    @ccall libwebsockets.EVP_PKEY_CTX_set_dh_kdf_outlen(ctx::Ptr{EVP_PKEY_CTX}, len::Cint)::Cint
end

function EVP_PKEY_CTX_get_dh_kdf_outlen(ctx, len)
    @ccall libwebsockets.EVP_PKEY_CTX_get_dh_kdf_outlen(ctx::Ptr{EVP_PKEY_CTX}, len::Ptr{Cint})::Cint
end

function EVP_PKEY_CTX_set0_dh_kdf_ukm(ctx, ukm, len)
    @ccall libwebsockets.EVP_PKEY_CTX_set0_dh_kdf_ukm(ctx::Ptr{EVP_PKEY_CTX}, ukm::Ptr{Cuchar}, len::Cint)::Cint
end

function EVP_PKEY_CTX_get0_dh_kdf_ukm(ctx, ukm)
    @ccall libwebsockets.EVP_PKEY_CTX_get0_dh_kdf_ukm(ctx::Ptr{EVP_PKEY_CTX}, ukm::Ptr{Ptr{Cuchar}})::Cint
end

function DHparams_it()
    @ccall libwebsockets.DHparams_it()::Ptr{ASN1_ITEM}
end

function DHparams_dup(a)
    @ccall libwebsockets.DHparams_dup(a::Ptr{DH})::Ptr{DH}
end

function DH_OpenSSL()
    @ccall libwebsockets.DH_OpenSSL()::Ptr{DH_METHOD}
end

function DH_set_default_method(meth)
    @ccall libwebsockets.DH_set_default_method(meth::Ptr{DH_METHOD})::Cvoid
end

function DH_get_default_method()
    @ccall libwebsockets.DH_get_default_method()::Ptr{DH_METHOD}
end

function DH_set_method(dh, meth)
    @ccall libwebsockets.DH_set_method(dh::Ptr{DH}, meth::Ptr{DH_METHOD})::Cint
end

function DH_new_method(engine)
    @ccall libwebsockets.DH_new_method(engine::Ptr{ENGINE})::Ptr{DH}
end

function DH_free(dh)
    @ccall libwebsockets.DH_free(dh::Ptr{DH})::Cvoid
end

function DH_up_ref(dh)
    @ccall libwebsockets.DH_up_ref(dh::Ptr{DH})::Cint
end

function DH_bits(dh)
    @ccall libwebsockets.DH_bits(dh::Ptr{DH})::Cint
end

function DH_size(dh)
    @ccall libwebsockets.DH_size(dh::Ptr{DH})::Cint
end

function DH_security_bits(dh)
    @ccall libwebsockets.DH_security_bits(dh::Ptr{DH})::Cint
end

function DH_set_ex_data(d, idx, arg)
    @ccall libwebsockets.DH_set_ex_data(d::Ptr{DH}, idx::Cint, arg::Ptr{Cvoid})::Cint
end

function DH_get_ex_data(d, idx)
    @ccall libwebsockets.DH_get_ex_data(d::Ptr{DH}, idx::Cint)::Ptr{Cvoid}
end

function DH_generate_parameters_ex(dh, prime_len, generator, cb)
    @ccall libwebsockets.DH_generate_parameters_ex(dh::Ptr{DH}, prime_len::Cint, generator::Cint, cb::Ptr{BN_GENCB})::Cint
end

function DH_check_params_ex(dh)
    @ccall libwebsockets.DH_check_params_ex(dh::Ptr{DH})::Cint
end

function DH_check_ex(dh)
    @ccall libwebsockets.DH_check_ex(dh::Ptr{DH})::Cint
end

function DH_check_pub_key_ex(dh, pub_key)
    @ccall libwebsockets.DH_check_pub_key_ex(dh::Ptr{DH}, pub_key::Ptr{BIGNUM})::Cint
end

function DH_check_params(dh, ret)
    @ccall libwebsockets.DH_check_params(dh::Ptr{DH}, ret::Ptr{Cint})::Cint
end

function DH_check(dh, codes)
    @ccall libwebsockets.DH_check(dh::Ptr{DH}, codes::Ptr{Cint})::Cint
end

function DH_check_pub_key(dh, pub_key, codes)
    @ccall libwebsockets.DH_check_pub_key(dh::Ptr{DH}, pub_key::Ptr{BIGNUM}, codes::Ptr{Cint})::Cint
end

function DH_generate_key(dh)
    @ccall libwebsockets.DH_generate_key(dh::Ptr{DH})::Cint
end

function DH_compute_key(key, pub_key, dh)
    @ccall libwebsockets.DH_compute_key(key::Ptr{Cuchar}, pub_key::Ptr{BIGNUM}, dh::Ptr{DH})::Cint
end

function DH_compute_key_padded(key, pub_key, dh)
    @ccall libwebsockets.DH_compute_key_padded(key::Ptr{Cuchar}, pub_key::Ptr{BIGNUM}, dh::Ptr{DH})::Cint
end

function DHparams_print_fp(fp, x)
    @ccall libwebsockets.DHparams_print_fp(fp::Ptr{Libc.FILE}, x::Ptr{DH})::Cint
end

function DHparams_print(bp, x)
    @ccall libwebsockets.DHparams_print(bp::Ptr{BIO}, x::Ptr{DH})::Cint
end

function DH_get_1024_160()
    @ccall libwebsockets.DH_get_1024_160()::Ptr{DH}
end

function DH_get_2048_224()
    @ccall libwebsockets.DH_get_2048_224()::Ptr{DH}
end

function DH_get_2048_256()
    @ccall libwebsockets.DH_get_2048_256()::Ptr{DH}
end

function DH_new_by_nid(nid)
    @ccall libwebsockets.DH_new_by_nid(nid::Cint)::Ptr{DH}
end

function DH_get_nid(dh)
    @ccall libwebsockets.DH_get_nid(dh::Ptr{DH})::Cint
end

function DH_KDF_X9_42(out, outlen, Z, Zlen, key_oid, ukm, ukmlen, md)
    @ccall libwebsockets.DH_KDF_X9_42(out::Ptr{Cuchar}, outlen::Csize_t, Z::Ptr{Cuchar}, Zlen::Csize_t, key_oid::Ptr{ASN1_OBJECT}, ukm::Ptr{Cuchar}, ukmlen::Csize_t, md::Ptr{EVP_MD})::Cint
end

function DH_get0_pqg(dh, p, q, g)
    @ccall libwebsockets.DH_get0_pqg(dh::Ptr{DH}, p::Ptr{Ptr{BIGNUM}}, q::Ptr{Ptr{BIGNUM}}, g::Ptr{Ptr{BIGNUM}})::Cvoid
end

function DH_set0_pqg(dh, p, q, g)
    @ccall libwebsockets.DH_set0_pqg(dh::Ptr{DH}, p::Ptr{BIGNUM}, q::Ptr{BIGNUM}, g::Ptr{BIGNUM})::Cint
end

function DH_get0_key(dh, pub_key, priv_key)
    @ccall libwebsockets.DH_get0_key(dh::Ptr{DH}, pub_key::Ptr{Ptr{BIGNUM}}, priv_key::Ptr{Ptr{BIGNUM}})::Cvoid
end

function DH_set0_key(dh, pub_key, priv_key)
    @ccall libwebsockets.DH_set0_key(dh::Ptr{DH}, pub_key::Ptr{BIGNUM}, priv_key::Ptr{BIGNUM})::Cint
end

function DH_get0_p(dh)
    @ccall libwebsockets.DH_get0_p(dh::Ptr{DH})::Ptr{BIGNUM}
end

function DH_get0_q(dh)
    @ccall libwebsockets.DH_get0_q(dh::Ptr{DH})::Ptr{BIGNUM}
end

function DH_get0_g(dh)
    @ccall libwebsockets.DH_get0_g(dh::Ptr{DH})::Ptr{BIGNUM}
end

function DH_get0_priv_key(dh)
    @ccall libwebsockets.DH_get0_priv_key(dh::Ptr{DH})::Ptr{BIGNUM}
end

function DH_get0_pub_key(dh)
    @ccall libwebsockets.DH_get0_pub_key(dh::Ptr{DH})::Ptr{BIGNUM}
end

function DH_clear_flags(dh, flags)
    @ccall libwebsockets.DH_clear_flags(dh::Ptr{DH}, flags::Cint)::Cvoid
end

function DH_test_flags(dh, flags)
    @ccall libwebsockets.DH_test_flags(dh::Ptr{DH}, flags::Cint)::Cint
end

function DH_set_flags(dh, flags)
    @ccall libwebsockets.DH_set_flags(dh::Ptr{DH}, flags::Cint)::Cvoid
end

function DH_get0_engine(d)
    @ccall libwebsockets.DH_get0_engine(d::Ptr{DH})::Ptr{ENGINE}
end

function DH_get_length(dh)
    @ccall libwebsockets.DH_get_length(dh::Ptr{DH})::Clong
end

function DH_set_length(dh, length)
    @ccall libwebsockets.DH_set_length(dh::Ptr{DH}, length::Clong)::Cint
end

function DH_meth_new(name, flags)
    @ccall libwebsockets.DH_meth_new(name::Ptr{Cchar}, flags::Cint)::Ptr{DH_METHOD}
end

function DH_meth_free(dhm)
    @ccall libwebsockets.DH_meth_free(dhm::Ptr{DH_METHOD})::Cvoid
end

function DH_meth_dup(dhm)
    @ccall libwebsockets.DH_meth_dup(dhm::Ptr{DH_METHOD})::Ptr{DH_METHOD}
end

function DH_meth_get0_name(dhm)
    @ccall libwebsockets.DH_meth_get0_name(dhm::Ptr{DH_METHOD})::Ptr{Cchar}
end

function DH_meth_set1_name(dhm, name)
    @ccall libwebsockets.DH_meth_set1_name(dhm::Ptr{DH_METHOD}, name::Ptr{Cchar})::Cint
end

function DH_meth_get_flags(dhm)
    @ccall libwebsockets.DH_meth_get_flags(dhm::Ptr{DH_METHOD})::Cint
end

function DH_meth_set_flags(dhm, flags)
    @ccall libwebsockets.DH_meth_set_flags(dhm::Ptr{DH_METHOD}, flags::Cint)::Cint
end

function DH_meth_get0_app_data(dhm)
    @ccall libwebsockets.DH_meth_get0_app_data(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set0_app_data(dhm, app_data)
    @ccall libwebsockets.DH_meth_set0_app_data(dhm::Ptr{DH_METHOD}, app_data::Ptr{Cvoid})::Cint
end

function DH_meth_get_generate_key(dhm)
    @ccall libwebsockets.DH_meth_get_generate_key(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set_generate_key(dhm, generate_key)
    @ccall libwebsockets.DH_meth_set_generate_key(dhm::Ptr{DH_METHOD}, generate_key::Ptr{Cvoid})::Cint
end

function DH_meth_get_compute_key(dhm)
    @ccall libwebsockets.DH_meth_get_compute_key(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set_compute_key(dhm, compute_key)
    @ccall libwebsockets.DH_meth_set_compute_key(dhm::Ptr{DH_METHOD}, compute_key::Ptr{Cvoid})::Cint
end

function DH_meth_get_bn_mod_exp(dhm)
    @ccall libwebsockets.DH_meth_get_bn_mod_exp(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set_bn_mod_exp(dhm, bn_mod_exp)
    @ccall libwebsockets.DH_meth_set_bn_mod_exp(dhm::Ptr{DH_METHOD}, bn_mod_exp::Ptr{Cvoid})::Cint
end

function DH_meth_get_init(dhm)
    @ccall libwebsockets.DH_meth_get_init(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set_init(dhm, init)
    @ccall libwebsockets.DH_meth_set_init(dhm::Ptr{DH_METHOD}, init::Ptr{Cvoid})::Cint
end

function DH_meth_get_finish(dhm)
    @ccall libwebsockets.DH_meth_get_finish(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set_finish(dhm, finish)
    @ccall libwebsockets.DH_meth_set_finish(dhm::Ptr{DH_METHOD}, finish::Ptr{Cvoid})::Cint
end

function DH_meth_get_generate_params(dhm)
    @ccall libwebsockets.DH_meth_get_generate_params(dhm::Ptr{DH_METHOD})::Ptr{Cvoid}
end

function DH_meth_set_generate_params(dhm, generate_params)
    @ccall libwebsockets.DH_meth_set_generate_params(dhm::Ptr{DH_METHOD}, generate_params::Ptr{Cvoid})::Cint
end

function DH_generate_parameters(prime_len, generator, callback, cb_arg)
    @ccall libwebsockets.DH_generate_parameters(prime_len::Cint, generator::Cint, callback::Ptr{Cvoid}, cb_arg::Ptr{Cvoid})::Ptr{DH}
end

mutable struct DSA_SIG_st end

const DSA_SIG = DSA_SIG_st

function DSA_SIG_new()
    @ccall libwebsockets.DSA_SIG_new()::Ptr{DSA_SIG}
end

function DSA_SIG_free(a)
    @ccall libwebsockets.DSA_SIG_free(a::Ptr{DSA_SIG})::Cvoid
end

function d2i_DSA_SIG(a, in, len)
    @ccall libwebsockets.d2i_DSA_SIG(a::Ptr{Ptr{DSA_SIG}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DSA_SIG}
end

function i2d_DSA_SIG(a, out)
    @ccall libwebsockets.i2d_DSA_SIG(a::Ptr{DSA_SIG}, out::Ptr{Ptr{Cuchar}})::Cint
end

function DSA_SIG_get0(sig, pr, ps)
    @ccall libwebsockets.DSA_SIG_get0(sig::Ptr{DSA_SIG}, pr::Ptr{Ptr{BIGNUM}}, ps::Ptr{Ptr{BIGNUM}})::Cvoid
end

function DSA_SIG_set0(sig, r, s)
    @ccall libwebsockets.DSA_SIG_set0(sig::Ptr{DSA_SIG}, r::Ptr{BIGNUM}, s::Ptr{BIGNUM})::Cint
end

function DSAparams_dup(a)
    @ccall libwebsockets.DSAparams_dup(a::Ptr{DSA})::Ptr{DSA}
end

function DSA_do_sign(dgst, dlen, dsa)
    @ccall libwebsockets.DSA_do_sign(dgst::Ptr{Cuchar}, dlen::Cint, dsa::Ptr{DSA})::Ptr{DSA_SIG}
end

function DSA_do_verify(dgst, dgst_len, sig, dsa)
    @ccall libwebsockets.DSA_do_verify(dgst::Ptr{Cuchar}, dgst_len::Cint, sig::Ptr{DSA_SIG}, dsa::Ptr{DSA})::Cint
end

function DSA_OpenSSL()
    @ccall libwebsockets.DSA_OpenSSL()::Ptr{DSA_METHOD}
end

function DSA_set_default_method(arg1)
    @ccall libwebsockets.DSA_set_default_method(arg1::Ptr{DSA_METHOD})::Cvoid
end

function DSA_get_default_method()
    @ccall libwebsockets.DSA_get_default_method()::Ptr{DSA_METHOD}
end

function DSA_set_method(dsa, arg2)
    @ccall libwebsockets.DSA_set_method(dsa::Ptr{DSA}, arg2::Ptr{DSA_METHOD})::Cint
end

function DSA_get_method(d)
    @ccall libwebsockets.DSA_get_method(d::Ptr{DSA})::Ptr{DSA_METHOD}
end

function DSA_new_method(engine)
    @ccall libwebsockets.DSA_new_method(engine::Ptr{ENGINE})::Ptr{DSA}
end

function DSA_free(r)
    @ccall libwebsockets.DSA_free(r::Ptr{DSA})::Cvoid
end

function DSA_up_ref(r)
    @ccall libwebsockets.DSA_up_ref(r::Ptr{DSA})::Cint
end

function DSA_size(arg1)
    @ccall libwebsockets.DSA_size(arg1::Ptr{DSA})::Cint
end

function DSA_bits(d)
    @ccall libwebsockets.DSA_bits(d::Ptr{DSA})::Cint
end

function DSA_security_bits(d)
    @ccall libwebsockets.DSA_security_bits(d::Ptr{DSA})::Cint
end

function DSA_sign_setup(dsa, ctx_in, kinvp, rp)
    @ccall libwebsockets.DSA_sign_setup(dsa::Ptr{DSA}, ctx_in::Ptr{BN_CTX}, kinvp::Ptr{Ptr{BIGNUM}}, rp::Ptr{Ptr{BIGNUM}})::Cint
end

function DSA_sign(type, dgst, dlen, sig, siglen, dsa)
    @ccall libwebsockets.DSA_sign(type::Cint, dgst::Ptr{Cuchar}, dlen::Cint, sig::Ptr{Cuchar}, siglen::Ptr{Cuint}, dsa::Ptr{DSA})::Cint
end

function DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa)
    @ccall libwebsockets.DSA_verify(type::Cint, dgst::Ptr{Cuchar}, dgst_len::Cint, sigbuf::Ptr{Cuchar}, siglen::Cint, dsa::Ptr{DSA})::Cint
end

function DSA_set_ex_data(d, idx, arg)
    @ccall libwebsockets.DSA_set_ex_data(d::Ptr{DSA}, idx::Cint, arg::Ptr{Cvoid})::Cint
end

function DSA_get_ex_data(d, idx)
    @ccall libwebsockets.DSA_get_ex_data(d::Ptr{DSA}, idx::Cint)::Ptr{Cvoid}
end

function d2i_DSAPublicKey(a, in, len)
    @ccall libwebsockets.d2i_DSAPublicKey(a::Ptr{Ptr{DSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DSA}
end

function i2d_DSAPublicKey(a, out)
    @ccall libwebsockets.i2d_DSAPublicKey(a::Ptr{DSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_DSAPrivateKey(a, in, len)
    @ccall libwebsockets.d2i_DSAPrivateKey(a::Ptr{Ptr{DSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DSA}
end

function i2d_DSAPrivateKey(a, out)
    @ccall libwebsockets.i2d_DSAPrivateKey(a::Ptr{DSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function DSA_generate_parameters(bits, seed, seed_len, counter_ret, h_ret, callback, cb_arg)
    @ccall libwebsockets.DSA_generate_parameters(bits::Cint, seed::Ptr{Cuchar}, seed_len::Cint, counter_ret::Ptr{Cint}, h_ret::Ptr{Culong}, callback::Ptr{Cvoid}, cb_arg::Ptr{Cvoid})::Ptr{DSA}
end

function DSA_generate_parameters_ex(dsa, bits, seed, seed_len, counter_ret, h_ret, cb)
    @ccall libwebsockets.DSA_generate_parameters_ex(dsa::Ptr{DSA}, bits::Cint, seed::Ptr{Cuchar}, seed_len::Cint, counter_ret::Ptr{Cint}, h_ret::Ptr{Culong}, cb::Ptr{BN_GENCB})::Cint
end

function DSA_generate_key(a)
    @ccall libwebsockets.DSA_generate_key(a::Ptr{DSA})::Cint
end

function DSAparams_print(bp, x)
    @ccall libwebsockets.DSAparams_print(bp::Ptr{BIO}, x::Ptr{DSA})::Cint
end

function DSA_print(bp, x, off)
    @ccall libwebsockets.DSA_print(bp::Ptr{BIO}, x::Ptr{DSA}, off::Cint)::Cint
end

function DSAparams_print_fp(fp, x)
    @ccall libwebsockets.DSAparams_print_fp(fp::Ptr{Libc.FILE}, x::Ptr{DSA})::Cint
end

function DSA_print_fp(bp, x, off)
    @ccall libwebsockets.DSA_print_fp(bp::Ptr{Libc.FILE}, x::Ptr{DSA}, off::Cint)::Cint
end

function DSA_dup_DH(r)
    @ccall libwebsockets.DSA_dup_DH(r::Ptr{DSA})::Ptr{DH}
end

function DSA_get0_pqg(d, p, q, g)
    @ccall libwebsockets.DSA_get0_pqg(d::Ptr{DSA}, p::Ptr{Ptr{BIGNUM}}, q::Ptr{Ptr{BIGNUM}}, g::Ptr{Ptr{BIGNUM}})::Cvoid
end

function DSA_set0_pqg(d, p, q, g)
    @ccall libwebsockets.DSA_set0_pqg(d::Ptr{DSA}, p::Ptr{BIGNUM}, q::Ptr{BIGNUM}, g::Ptr{BIGNUM})::Cint
end

function DSA_get0_key(d, pub_key, priv_key)
    @ccall libwebsockets.DSA_get0_key(d::Ptr{DSA}, pub_key::Ptr{Ptr{BIGNUM}}, priv_key::Ptr{Ptr{BIGNUM}})::Cvoid
end

function DSA_set0_key(d, pub_key, priv_key)
    @ccall libwebsockets.DSA_set0_key(d::Ptr{DSA}, pub_key::Ptr{BIGNUM}, priv_key::Ptr{BIGNUM})::Cint
end

function DSA_get0_p(d)
    @ccall libwebsockets.DSA_get0_p(d::Ptr{DSA})::Ptr{BIGNUM}
end

function DSA_get0_q(d)
    @ccall libwebsockets.DSA_get0_q(d::Ptr{DSA})::Ptr{BIGNUM}
end

function DSA_get0_g(d)
    @ccall libwebsockets.DSA_get0_g(d::Ptr{DSA})::Ptr{BIGNUM}
end

function DSA_get0_pub_key(d)
    @ccall libwebsockets.DSA_get0_pub_key(d::Ptr{DSA})::Ptr{BIGNUM}
end

function DSA_get0_priv_key(d)
    @ccall libwebsockets.DSA_get0_priv_key(d::Ptr{DSA})::Ptr{BIGNUM}
end

function DSA_clear_flags(d, flags)
    @ccall libwebsockets.DSA_clear_flags(d::Ptr{DSA}, flags::Cint)::Cvoid
end

function DSA_test_flags(d, flags)
    @ccall libwebsockets.DSA_test_flags(d::Ptr{DSA}, flags::Cint)::Cint
end

function DSA_set_flags(d, flags)
    @ccall libwebsockets.DSA_set_flags(d::Ptr{DSA}, flags::Cint)::Cvoid
end

function DSA_get0_engine(d)
    @ccall libwebsockets.DSA_get0_engine(d::Ptr{DSA})::Ptr{ENGINE}
end

function DSA_meth_new(name, flags)
    @ccall libwebsockets.DSA_meth_new(name::Ptr{Cchar}, flags::Cint)::Ptr{DSA_METHOD}
end

function DSA_meth_free(dsam)
    @ccall libwebsockets.DSA_meth_free(dsam::Ptr{DSA_METHOD})::Cvoid
end

function DSA_meth_dup(dsam)
    @ccall libwebsockets.DSA_meth_dup(dsam::Ptr{DSA_METHOD})::Ptr{DSA_METHOD}
end

function DSA_meth_get0_name(dsam)
    @ccall libwebsockets.DSA_meth_get0_name(dsam::Ptr{DSA_METHOD})::Ptr{Cchar}
end

function DSA_meth_set1_name(dsam, name)
    @ccall libwebsockets.DSA_meth_set1_name(dsam::Ptr{DSA_METHOD}, name::Ptr{Cchar})::Cint
end

function DSA_meth_get_flags(dsam)
    @ccall libwebsockets.DSA_meth_get_flags(dsam::Ptr{DSA_METHOD})::Cint
end

function DSA_meth_set_flags(dsam, flags)
    @ccall libwebsockets.DSA_meth_set_flags(dsam::Ptr{DSA_METHOD}, flags::Cint)::Cint
end

function DSA_meth_get0_app_data(dsam)
    @ccall libwebsockets.DSA_meth_get0_app_data(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set0_app_data(dsam, app_data)
    @ccall libwebsockets.DSA_meth_set0_app_data(dsam::Ptr{DSA_METHOD}, app_data::Ptr{Cvoid})::Cint
end

function DSA_meth_get_sign(dsam)
    @ccall libwebsockets.DSA_meth_get_sign(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_sign(dsam, sign)
    @ccall libwebsockets.DSA_meth_set_sign(dsam::Ptr{DSA_METHOD}, sign::Ptr{Cvoid})::Cint
end

function DSA_meth_get_sign_setup(dsam)
    @ccall libwebsockets.DSA_meth_get_sign_setup(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_sign_setup(dsam, sign_setup)
    @ccall libwebsockets.DSA_meth_set_sign_setup(dsam::Ptr{DSA_METHOD}, sign_setup::Ptr{Cvoid})::Cint
end

function DSA_meth_get_verify(dsam)
    @ccall libwebsockets.DSA_meth_get_verify(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_verify(dsam, verify)
    @ccall libwebsockets.DSA_meth_set_verify(dsam::Ptr{DSA_METHOD}, verify::Ptr{Cvoid})::Cint
end

function DSA_meth_get_mod_exp(dsam)
    @ccall libwebsockets.DSA_meth_get_mod_exp(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_mod_exp(dsam, mod_exp)
    @ccall libwebsockets.DSA_meth_set_mod_exp(dsam::Ptr{DSA_METHOD}, mod_exp::Ptr{Cvoid})::Cint
end

function DSA_meth_get_bn_mod_exp(dsam)
    @ccall libwebsockets.DSA_meth_get_bn_mod_exp(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_bn_mod_exp(dsam, bn_mod_exp)
    @ccall libwebsockets.DSA_meth_set_bn_mod_exp(dsam::Ptr{DSA_METHOD}, bn_mod_exp::Ptr{Cvoid})::Cint
end

function DSA_meth_get_init(dsam)
    @ccall libwebsockets.DSA_meth_get_init(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_init(dsam, init)
    @ccall libwebsockets.DSA_meth_set_init(dsam::Ptr{DSA_METHOD}, init::Ptr{Cvoid})::Cint
end

function DSA_meth_get_finish(dsam)
    @ccall libwebsockets.DSA_meth_get_finish(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_finish(dsam, finish)
    @ccall libwebsockets.DSA_meth_set_finish(dsam::Ptr{DSA_METHOD}, finish::Ptr{Cvoid})::Cint
end

function DSA_meth_get_paramgen(dsam)
    @ccall libwebsockets.DSA_meth_get_paramgen(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_paramgen(dsam, paramgen)
    @ccall libwebsockets.DSA_meth_set_paramgen(dsam::Ptr{DSA_METHOD}, paramgen::Ptr{Cvoid})::Cint
end

function DSA_meth_get_keygen(dsam)
    @ccall libwebsockets.DSA_meth_get_keygen(dsam::Ptr{DSA_METHOD})::Ptr{Cvoid}
end

function DSA_meth_set_keygen(dsam, keygen)
    @ccall libwebsockets.DSA_meth_set_keygen(dsam::Ptr{DSA_METHOD}, keygen::Ptr{Cvoid})::Cint
end

mutable struct SHAstate_st
    h0::Cuint
    h1::Cuint
    h2::Cuint
    h3::Cuint
    h4::Cuint
    Nl::Cuint
    Nh::Cuint
    data::NTuple{16, Cuint}
    num::Cuint
    SHAstate_st() = new()
end

const SHA_CTX = SHAstate_st

function SHA1_Init(c)
    @ccall libwebsockets.SHA1_Init(c::Ptr{SHA_CTX})::Cint
end

function SHA1_Update(c, data, len)
    @ccall libwebsockets.SHA1_Update(c::Ptr{SHA_CTX}, data::Ptr{Cvoid}, len::Csize_t)::Cint
end

function SHA1_Final(md, c)
    @ccall libwebsockets.SHA1_Final(md::Ptr{Cuchar}, c::Ptr{SHA_CTX})::Cint
end

function SHA1_Transform(c, data)
    @ccall libwebsockets.SHA1_Transform(c::Ptr{SHA_CTX}, data::Ptr{Cuchar})::Cvoid
end

function SHA1(d, n, md)
    @ccall libwebsockets.SHA1(d::Ptr{Cuchar}, n::Csize_t, md::Ptr{Cuchar})::Ptr{Cuchar}
end

mutable struct SHA256state_st
    h::NTuple{8, Cuint}
    Nl::Cuint
    Nh::Cuint
    data::NTuple{16, Cuint}
    num::Cuint
    md_len::Cuint
    SHA256state_st() = new()
end

const SHA256_CTX = SHA256state_st

function SHA224_Init(c)
    @ccall libwebsockets.SHA224_Init(c::Ptr{SHA256_CTX})::Cint
end

function SHA224_Update(c, data, len)
    @ccall libwebsockets.SHA224_Update(c::Ptr{SHA256_CTX}, data::Ptr{Cvoid}, len::Csize_t)::Cint
end

function SHA224_Final(md, c)
    @ccall libwebsockets.SHA224_Final(md::Ptr{Cuchar}, c::Ptr{SHA256_CTX})::Cint
end

function SHA256_Init(c)
    @ccall libwebsockets.SHA256_Init(c::Ptr{SHA256_CTX})::Cint
end

function SHA256_Update(c, data, len)
    @ccall libwebsockets.SHA256_Update(c::Ptr{SHA256_CTX}, data::Ptr{Cvoid}, len::Csize_t)::Cint
end

function SHA256_Final(md, c)
    @ccall libwebsockets.SHA256_Final(md::Ptr{Cuchar}, c::Ptr{SHA256_CTX})::Cint
end

function SHA256_Transform(c, data)
    @ccall libwebsockets.SHA256_Transform(c::Ptr{SHA256_CTX}, data::Ptr{Cuchar})::Cvoid
end

function SHA224(d, n, md)
    @ccall libwebsockets.SHA224(d::Ptr{Cuchar}, n::Csize_t, md::Ptr{Cuchar})::Ptr{Cuchar}
end

function SHA256(d, n, md)
    @ccall libwebsockets.SHA256(d::Ptr{Cuchar}, n::Csize_t, md::Ptr{Cuchar})::Ptr{Cuchar}
end

struct __JL_Ctag_82
    data::NTuple{128, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_82}, f::Symbol)
    f === :d && return Ptr{NTuple{16, Culonglong}}(x + 0)
    f === :p && return Ptr{NTuple{128, Cuchar}}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_82, f::Symbol)
    r = Ref{__JL_Ctag_82}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_82}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_82}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct SHA512state_st
    data::NTuple{216, UInt8}
end

function Base.getproperty(x::Ptr{SHA512state_st}, f::Symbol)
    f === :h && return Ptr{NTuple{8, Culonglong}}(x + 0)
    f === :Nl && return Ptr{Culonglong}(x + 64)
    f === :Nh && return Ptr{Culonglong}(x + 72)
    f === :u && return Ptr{__JL_Ctag_82}(x + 80)
    f === :num && return Ptr{Cuint}(x + 208)
    f === :md_len && return Ptr{Cuint}(x + 212)
    return getfield(x, f)
end

function Base.getproperty(x::SHA512state_st, f::Symbol)
    r = Ref{SHA512state_st}(x)
    ptr = Base.unsafe_convert(Ptr{SHA512state_st}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{SHA512state_st}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const SHA512_CTX = SHA512state_st

function SHA384_Init(c)
    @ccall libwebsockets.SHA384_Init(c::Ptr{SHA512_CTX})::Cint
end

function SHA384_Update(c, data, len)
    @ccall libwebsockets.SHA384_Update(c::Ptr{SHA512_CTX}, data::Ptr{Cvoid}, len::Csize_t)::Cint
end

function SHA384_Final(md, c)
    @ccall libwebsockets.SHA384_Final(md::Ptr{Cuchar}, c::Ptr{SHA512_CTX})::Cint
end

function SHA512_Init(c)
    @ccall libwebsockets.SHA512_Init(c::Ptr{SHA512_CTX})::Cint
end

function SHA512_Update(c, data, len)
    @ccall libwebsockets.SHA512_Update(c::Ptr{SHA512_CTX}, data::Ptr{Cvoid}, len::Csize_t)::Cint
end

function SHA512_Final(md, c)
    @ccall libwebsockets.SHA512_Final(md::Ptr{Cuchar}, c::Ptr{SHA512_CTX})::Cint
end

function SHA512_Transform(c, data)
    @ccall libwebsockets.SHA512_Transform(c::Ptr{SHA512_CTX}, data::Ptr{Cuchar})::Cvoid
end

function SHA384(d, n, md)
    @ccall libwebsockets.SHA384(d::Ptr{Cuchar}, n::Csize_t, md::Ptr{Cuchar})::Ptr{Cuchar}
end

function SHA512(d, n, md)
    @ccall libwebsockets.SHA512(d::Ptr{Cuchar}, n::Csize_t, md::Ptr{Cuchar})::Ptr{Cuchar}
end

const X509_ALGORS = stack_st_X509_ALGOR

mutable struct X509_val_st
    notBefore::Ptr{ASN1_TIME}
    notAfter::Ptr{ASN1_TIME}
    X509_val_st() = new()
end

const X509_VAL = X509_val_st

mutable struct X509_sig_st end

const X509_SIG = X509_sig_st

const X509_EXTENSIONS = stack_st_X509_EXTENSION

mutable struct X509_req_info_st end

const X509_REQ_INFO = X509_req_info_st

mutable struct x509_cert_aux_st end

const X509_CERT_AUX = x509_cert_aux_st

mutable struct x509_cinf_st end

const X509_CINF = x509_cinf_st

mutable struct X509_crl_info_st end

const X509_CRL_INFO = X509_crl_info_st

struct Netscape_spkac_st
    pubkey::Ptr{X509_PUBKEY}
    challenge::Ptr{ASN1_IA5STRING}
end

const NETSCAPE_SPKAC = Netscape_spkac_st

mutable struct Netscape_spki_st
    spkac::Ptr{NETSCAPE_SPKAC}
    sig_algor::X509_ALGOR
    signature::Ptr{ASN1_BIT_STRING}
    Netscape_spki_st() = new()
end

const NETSCAPE_SPKI = Netscape_spki_st

mutable struct Netscape_certificate_sequence
    type::Ptr{ASN1_OBJECT}
    certs::Ptr{stack_st_X509}
    Netscape_certificate_sequence() = new()
end

const NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence

mutable struct PBEPARAM_st
    salt::Ptr{ASN1_OCTET_STRING}
    iter::Ptr{ASN1_INTEGER}
    PBEPARAM_st() = new()
end

const PBEPARAM = PBEPARAM_st

mutable struct PBE2PARAM_st
    keyfunc::Ptr{X509_ALGOR}
    encryption::Ptr{X509_ALGOR}
    PBE2PARAM_st() = new()
end

const PBE2PARAM = PBE2PARAM_st

mutable struct PBKDF2PARAM_st
    salt::Ptr{ASN1_TYPE}
    iter::Ptr{ASN1_INTEGER}
    keylength::Ptr{ASN1_INTEGER}
    prf::Ptr{X509_ALGOR}
    PBKDF2PARAM_st() = new()
end

const PBKDF2PARAM = PBKDF2PARAM_st

mutable struct SCRYPT_PARAMS_st
    salt::Ptr{ASN1_OCTET_STRING}
    costParameter::Ptr{ASN1_INTEGER}
    blockSize::Ptr{ASN1_INTEGER}
    parallelizationParameter::Ptr{ASN1_INTEGER}
    keyLength::Ptr{ASN1_INTEGER}
    SCRYPT_PARAMS_st() = new()
end

const SCRYPT_PARAMS = SCRYPT_PARAMS_st

function X509_TRUST_set(t, trust)
    @ccall libwebsockets.X509_TRUST_set(t::Ptr{Cint}, trust::Cint)::Cint
end

function X509_TRUST_get_count()
    @ccall libwebsockets.X509_TRUST_get_count()::Cint
end

function X509_TRUST_get0(idx)
    @ccall libwebsockets.X509_TRUST_get0(idx::Cint)::Ptr{X509_TRUST}
end

function X509_TRUST_get_by_id(id)
    @ccall libwebsockets.X509_TRUST_get_by_id(id::Cint)::Cint
end

function X509_TRUST_add(id, flags, ck, name, arg1, arg2)
    @ccall libwebsockets.X509_TRUST_add(id::Cint, flags::Cint, ck::Ptr{Cvoid}, name::Ptr{Cchar}, arg1::Cint, arg2::Ptr{Cvoid})::Cint
end

function X509_TRUST_cleanup()
    @ccall libwebsockets.X509_TRUST_cleanup()::Cvoid
end

function X509_TRUST_get_flags(xp)
    @ccall libwebsockets.X509_TRUST_get_flags(xp::Ptr{X509_TRUST})::Cint
end

function X509_TRUST_get0_name(xp)
    @ccall libwebsockets.X509_TRUST_get0_name(xp::Ptr{X509_TRUST})::Ptr{Cchar}
end

function X509_TRUST_get_trust(xp)
    @ccall libwebsockets.X509_TRUST_get_trust(xp::Ptr{X509_TRUST})::Cint
end

function X509_trusted(x)
    @ccall libwebsockets.X509_trusted(x::Ptr{X509})::Cint
end

function X509_add1_trust_object(x, obj)
    @ccall libwebsockets.X509_add1_trust_object(x::Ptr{X509}, obj::Ptr{ASN1_OBJECT})::Cint
end

function X509_add1_reject_object(x, obj)
    @ccall libwebsockets.X509_add1_reject_object(x::Ptr{X509}, obj::Ptr{ASN1_OBJECT})::Cint
end

function X509_trust_clear(x)
    @ccall libwebsockets.X509_trust_clear(x::Ptr{X509})::Cvoid
end

function X509_reject_clear(x)
    @ccall libwebsockets.X509_reject_clear(x::Ptr{X509})::Cvoid
end

function X509_get0_trust_objects(x)
    @ccall libwebsockets.X509_get0_trust_objects(x::Ptr{X509})::Ptr{stack_st_ASN1_OBJECT}
end

function X509_get0_reject_objects(x)
    @ccall libwebsockets.X509_get0_reject_objects(x::Ptr{X509})::Ptr{stack_st_ASN1_OBJECT}
end

function X509_TRUST_set_default(trust)
    @ccall libwebsockets.X509_TRUST_set_default(trust::Ptr{Cvoid})::Ptr{Cvoid}
end

function X509_check_trust(x, id, flags)
    @ccall libwebsockets.X509_check_trust(x::Ptr{X509}, id::Cint, flags::Cint)::Cint
end

function X509_verify_cert(ctx)
    @ccall libwebsockets.X509_verify_cert(ctx::Ptr{X509_STORE_CTX})::Cint
end

function X509_STORE_CTX_verify(ctx)
    @ccall libwebsockets.X509_STORE_CTX_verify(ctx::Ptr{X509_STORE_CTX})::Cint
end

function X509_build_chain(target, certs, store, with_self_signed, libctx, propq)
    @ccall libwebsockets.X509_build_chain(target::Ptr{X509}, certs::Ptr{stack_st_X509}, store::Ptr{X509_STORE}, with_self_signed::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{stack_st_X509}
end

function X509_STORE_set_depth(store, depth)
    @ccall libwebsockets.X509_STORE_set_depth(store::Ptr{X509_STORE}, depth::Cint)::Cint
end

function X509_STORE_CTX_print_verify_cb(ok, ctx)
    @ccall libwebsockets.X509_STORE_CTX_print_verify_cb(ok::Cint, ctx::Ptr{X509_STORE_CTX})::Cint
end

# typedef int ( * X509_STORE_CTX_get_issuer_fn ) ( X509 * * issuer , X509_STORE_CTX * ctx , X509 * x )
const X509_STORE_CTX_get_issuer_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_check_issued_fn ) ( X509_STORE_CTX * ctx , X509 * x , X509 * issuer )
const X509_STORE_CTX_check_issued_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_check_revocation_fn ) ( X509_STORE_CTX * ctx )
const X509_STORE_CTX_check_revocation_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_get_crl_fn ) ( X509_STORE_CTX * ctx , X509_CRL * * crl , X509 * x )
const X509_STORE_CTX_get_crl_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_check_crl_fn ) ( X509_STORE_CTX * ctx , X509_CRL * crl )
const X509_STORE_CTX_check_crl_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_cert_crl_fn ) ( X509_STORE_CTX * ctx , X509_CRL * crl , X509 * x )
const X509_STORE_CTX_cert_crl_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_check_policy_fn ) ( X509_STORE_CTX * ctx )
const X509_STORE_CTX_check_policy_fn = Ptr{Cvoid}

# typedef STACK_OF ( X509 ) * ( * X509_STORE_CTX_lookup_certs_fn ) ( X509_STORE_CTX * ctx , const X509_NAME * nm )
const X509_STORE_CTX_lookup_certs_fn = Ptr{Cvoid}

# typedef int ( * X509_STORE_CTX_cleanup_fn ) ( X509_STORE_CTX * ctx )
const X509_STORE_CTX_cleanup_fn = Ptr{Cvoid}

function X509_STORE_CTX_set_depth(ctx, depth)
    @ccall libwebsockets.X509_STORE_CTX_set_depth(ctx::Ptr{X509_STORE_CTX}, depth::Cint)::Cvoid
end

function X509_OBJECT_idx_by_subject(h, type, name)
    @ccall libwebsockets.X509_OBJECT_idx_by_subject(h::Ptr{stack_st_X509_OBJECT}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME})::Cint
end

function X509_OBJECT_retrieve_by_subject(h, type, name)
    @ccall libwebsockets.X509_OBJECT_retrieve_by_subject(h::Ptr{stack_st_X509_OBJECT}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME})::Ptr{X509_OBJECT}
end

function X509_OBJECT_retrieve_match(h, x)
    @ccall libwebsockets.X509_OBJECT_retrieve_match(h::Ptr{stack_st_X509_OBJECT}, x::Ptr{X509_OBJECT})::Ptr{X509_OBJECT}
end

function X509_OBJECT_up_ref_count(a)
    @ccall libwebsockets.X509_OBJECT_up_ref_count(a::Ptr{X509_OBJECT})::Cint
end

function X509_OBJECT_new()
    @ccall libwebsockets.X509_OBJECT_new()::Ptr{X509_OBJECT}
end

function X509_OBJECT_free(a)
    @ccall libwebsockets.X509_OBJECT_free(a::Ptr{X509_OBJECT})::Cvoid
end

function X509_OBJECT_get_type(a)
    @ccall libwebsockets.X509_OBJECT_get_type(a::Ptr{X509_OBJECT})::X509_LOOKUP_TYPE
end

function X509_OBJECT_get0_X509(a)
    @ccall libwebsockets.X509_OBJECT_get0_X509(a::Ptr{X509_OBJECT})::Ptr{X509}
end

function X509_OBJECT_set1_X509(a, obj)
    @ccall libwebsockets.X509_OBJECT_set1_X509(a::Ptr{X509_OBJECT}, obj::Ptr{X509})::Cint
end

function X509_OBJECT_get0_X509_CRL(a)
    @ccall libwebsockets.X509_OBJECT_get0_X509_CRL(a::Ptr{X509_OBJECT})::Ptr{X509_CRL}
end

function X509_OBJECT_set1_X509_CRL(a, obj)
    @ccall libwebsockets.X509_OBJECT_set1_X509_CRL(a::Ptr{X509_OBJECT}, obj::Ptr{X509_CRL})::Cint
end

function X509_STORE_new()
    @ccall libwebsockets.X509_STORE_new()::Ptr{X509_STORE}
end

function X509_STORE_free(v)
    @ccall libwebsockets.X509_STORE_free(v::Ptr{X509_STORE})::Cvoid
end

function X509_STORE_lock(ctx)
    @ccall libwebsockets.X509_STORE_lock(ctx::Ptr{X509_STORE})::Cint
end

function X509_STORE_unlock(ctx)
    @ccall libwebsockets.X509_STORE_unlock(ctx::Ptr{X509_STORE})::Cint
end

function X509_STORE_up_ref(v)
    @ccall libwebsockets.X509_STORE_up_ref(v::Ptr{X509_STORE})::Cint
end

function X509_STORE_get0_objects(v)
    @ccall libwebsockets.X509_STORE_get0_objects(v::Ptr{X509_STORE})::Ptr{stack_st_X509_OBJECT}
end

function X509_STORE_get1_all_certs(st)
    @ccall libwebsockets.X509_STORE_get1_all_certs(st::Ptr{X509_STORE})::Ptr{stack_st_X509}
end

function X509_STORE_set_flags(ctx, flags)
    @ccall libwebsockets.X509_STORE_set_flags(ctx::Ptr{X509_STORE}, flags::Culong)::Cint
end

function X509_STORE_set_purpose(ctx, purpose)
    @ccall libwebsockets.X509_STORE_set_purpose(ctx::Ptr{X509_STORE}, purpose::Cint)::Cint
end

function X509_STORE_set_trust(ctx, trust)
    @ccall libwebsockets.X509_STORE_set_trust(ctx::Ptr{X509_STORE}, trust::Cint)::Cint
end

function X509_STORE_set1_param(ctx, pm)
    @ccall libwebsockets.X509_STORE_set1_param(ctx::Ptr{X509_STORE}, pm::Ptr{X509_VERIFY_PARAM})::Cint
end

function X509_STORE_get0_param(ctx)
    @ccall libwebsockets.X509_STORE_get0_param(ctx::Ptr{X509_STORE})::Ptr{X509_VERIFY_PARAM}
end

function X509_STORE_CTX_set_verify(ctx, verify)
    @ccall libwebsockets.X509_STORE_CTX_set_verify(ctx::Ptr{X509_STORE_CTX}, verify::X509_STORE_CTX_verify_fn)::Cvoid
end

function X509_STORE_get_verify(ctx)
    @ccall libwebsockets.X509_STORE_get_verify(ctx::Ptr{X509_STORE})::X509_STORE_CTX_verify_fn
end

function X509_STORE_get_verify_cb(ctx)
    @ccall libwebsockets.X509_STORE_get_verify_cb(ctx::Ptr{X509_STORE})::X509_STORE_CTX_verify_cb
end

function X509_STORE_set_get_issuer(ctx, get_issuer)
    @ccall libwebsockets.X509_STORE_set_get_issuer(ctx::Ptr{X509_STORE}, get_issuer::X509_STORE_CTX_get_issuer_fn)::Cvoid
end

function X509_STORE_get_get_issuer(ctx)
    @ccall libwebsockets.X509_STORE_get_get_issuer(ctx::Ptr{X509_STORE})::X509_STORE_CTX_get_issuer_fn
end

function X509_STORE_set_check_issued(ctx, check_issued)
    @ccall libwebsockets.X509_STORE_set_check_issued(ctx::Ptr{X509_STORE}, check_issued::X509_STORE_CTX_check_issued_fn)::Cvoid
end

function X509_STORE_get_check_issued(ctx)
    @ccall libwebsockets.X509_STORE_get_check_issued(ctx::Ptr{X509_STORE})::X509_STORE_CTX_check_issued_fn
end

function X509_STORE_set_check_revocation(ctx, check_revocation)
    @ccall libwebsockets.X509_STORE_set_check_revocation(ctx::Ptr{X509_STORE}, check_revocation::X509_STORE_CTX_check_revocation_fn)::Cvoid
end

function X509_STORE_get_check_revocation(ctx)
    @ccall libwebsockets.X509_STORE_get_check_revocation(ctx::Ptr{X509_STORE})::X509_STORE_CTX_check_revocation_fn
end

function X509_STORE_set_get_crl(ctx, get_crl)
    @ccall libwebsockets.X509_STORE_set_get_crl(ctx::Ptr{X509_STORE}, get_crl::X509_STORE_CTX_get_crl_fn)::Cvoid
end

function X509_STORE_get_get_crl(ctx)
    @ccall libwebsockets.X509_STORE_get_get_crl(ctx::Ptr{X509_STORE})::X509_STORE_CTX_get_crl_fn
end

function X509_STORE_set_check_crl(ctx, check_crl)
    @ccall libwebsockets.X509_STORE_set_check_crl(ctx::Ptr{X509_STORE}, check_crl::X509_STORE_CTX_check_crl_fn)::Cvoid
end

function X509_STORE_get_check_crl(ctx)
    @ccall libwebsockets.X509_STORE_get_check_crl(ctx::Ptr{X509_STORE})::X509_STORE_CTX_check_crl_fn
end

function X509_STORE_set_cert_crl(ctx, cert_crl)
    @ccall libwebsockets.X509_STORE_set_cert_crl(ctx::Ptr{X509_STORE}, cert_crl::X509_STORE_CTX_cert_crl_fn)::Cvoid
end

function X509_STORE_get_cert_crl(ctx)
    @ccall libwebsockets.X509_STORE_get_cert_crl(ctx::Ptr{X509_STORE})::X509_STORE_CTX_cert_crl_fn
end

function X509_STORE_set_check_policy(ctx, check_policy)
    @ccall libwebsockets.X509_STORE_set_check_policy(ctx::Ptr{X509_STORE}, check_policy::X509_STORE_CTX_check_policy_fn)::Cvoid
end

function X509_STORE_get_check_policy(ctx)
    @ccall libwebsockets.X509_STORE_get_check_policy(ctx::Ptr{X509_STORE})::X509_STORE_CTX_check_policy_fn
end

function X509_STORE_set_lookup_certs(ctx, lookup_certs)
    @ccall libwebsockets.X509_STORE_set_lookup_certs(ctx::Ptr{X509_STORE}, lookup_certs::X509_STORE_CTX_lookup_certs_fn)::Cvoid
end

function X509_STORE_get_lookup_certs(ctx)
    @ccall libwebsockets.X509_STORE_get_lookup_certs(ctx::Ptr{X509_STORE})::X509_STORE_CTX_lookup_certs_fn
end

function X509_STORE_get_lookup_crls(ctx)
    @ccall libwebsockets.X509_STORE_get_lookup_crls(ctx::Ptr{X509_STORE})::X509_STORE_CTX_lookup_crls_fn
end

function X509_STORE_set_cleanup(ctx, cleanup)
    @ccall libwebsockets.X509_STORE_set_cleanup(ctx::Ptr{X509_STORE}, cleanup::X509_STORE_CTX_cleanup_fn)::Cvoid
end

function X509_STORE_get_cleanup(ctx)
    @ccall libwebsockets.X509_STORE_get_cleanup(ctx::Ptr{X509_STORE})::X509_STORE_CTX_cleanup_fn
end

function X509_STORE_set_ex_data(ctx, idx, data)
    @ccall libwebsockets.X509_STORE_set_ex_data(ctx::Ptr{X509_STORE}, idx::Cint, data::Ptr{Cvoid})::Cint
end

function X509_STORE_get_ex_data(ctx, idx)
    @ccall libwebsockets.X509_STORE_get_ex_data(ctx::Ptr{X509_STORE}, idx::Cint)::Ptr{Cvoid}
end

function X509_STORE_CTX_new_ex(libctx, propq)
    @ccall libwebsockets.X509_STORE_CTX_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{X509_STORE_CTX}
end

function X509_STORE_CTX_new()
    @ccall libwebsockets.X509_STORE_CTX_new()::Ptr{X509_STORE_CTX}
end

function X509_STORE_CTX_get1_issuer(issuer, ctx, x)
    @ccall libwebsockets.X509_STORE_CTX_get1_issuer(issuer::Ptr{Ptr{X509}}, ctx::Ptr{X509_STORE_CTX}, x::Ptr{X509})::Cint
end

function X509_STORE_CTX_free(ctx)
    @ccall libwebsockets.X509_STORE_CTX_free(ctx::Ptr{X509_STORE_CTX})::Cvoid
end

function X509_STORE_CTX_init(ctx, trust_store, target, untrusted)
    @ccall libwebsockets.X509_STORE_CTX_init(ctx::Ptr{X509_STORE_CTX}, trust_store::Ptr{X509_STORE}, target::Ptr{X509}, untrusted::Ptr{stack_st_X509})::Cint
end

function X509_STORE_CTX_cleanup(ctx)
    @ccall libwebsockets.X509_STORE_CTX_cleanup(ctx::Ptr{X509_STORE_CTX})::Cvoid
end

function X509_STORE_CTX_get0_store(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_store(ctx::Ptr{X509_STORE_CTX})::Ptr{X509_STORE}
end

function X509_STORE_CTX_get0_cert(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_cert(ctx::Ptr{X509_STORE_CTX})::Ptr{X509}
end

function X509_STORE_CTX_get0_untrusted(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_untrusted(ctx::Ptr{X509_STORE_CTX})::Ptr{stack_st_X509}
end

function X509_STORE_CTX_set_verify_cb(ctx, verify)
    @ccall libwebsockets.X509_STORE_CTX_set_verify_cb(ctx::Ptr{X509_STORE_CTX}, verify::X509_STORE_CTX_verify_cb)::Cvoid
end

function X509_STORE_CTX_get_verify_cb(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_verify_cb(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_verify_cb
end

function X509_STORE_CTX_get_verify(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_verify(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_verify_fn
end

function X509_STORE_CTX_get_get_issuer(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_get_issuer(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_get_issuer_fn
end

function X509_STORE_CTX_get_check_issued(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_check_issued(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_check_issued_fn
end

function X509_STORE_CTX_get_check_revocation(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_check_revocation(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_check_revocation_fn
end

function X509_STORE_CTX_get_get_crl(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_get_crl(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_get_crl_fn
end

function X509_STORE_CTX_get_check_crl(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_check_crl(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_check_crl_fn
end

function X509_STORE_CTX_get_cert_crl(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_cert_crl(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_cert_crl_fn
end

function X509_STORE_CTX_get_check_policy(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_check_policy(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_check_policy_fn
end

function X509_STORE_CTX_get_lookup_certs(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_lookup_certs(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_lookup_certs_fn
end

function X509_STORE_CTX_get_lookup_crls(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_lookup_crls(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_lookup_crls_fn
end

function X509_STORE_CTX_get_cleanup(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_cleanup(ctx::Ptr{X509_STORE_CTX})::X509_STORE_CTX_cleanup_fn
end

function X509_STORE_add_lookup(v, m)
    @ccall libwebsockets.X509_STORE_add_lookup(v::Ptr{X509_STORE}, m::Ptr{X509_LOOKUP_METHOD})::Ptr{X509_LOOKUP}
end

function X509_LOOKUP_hash_dir()
    @ccall libwebsockets.X509_LOOKUP_hash_dir()::Ptr{X509_LOOKUP_METHOD}
end

function X509_LOOKUP_file()
    @ccall libwebsockets.X509_LOOKUP_file()::Ptr{X509_LOOKUP_METHOD}
end

function X509_LOOKUP_store()
    @ccall libwebsockets.X509_LOOKUP_store()::Ptr{X509_LOOKUP_METHOD}
end

# typedef int ( * X509_LOOKUP_ctrl_fn ) ( X509_LOOKUP * ctx , int cmd , const char * argc , long argl , char * * ret )
const X509_LOOKUP_ctrl_fn = Ptr{Cvoid}

# typedef int ( * X509_LOOKUP_ctrl_ex_fn ) ( X509_LOOKUP * ctx , int cmd , const char * argc , long argl , char * * ret , OSSL_LIB_CTX * libctx , const char * propq )
const X509_LOOKUP_ctrl_ex_fn = Ptr{Cvoid}

# typedef int ( * X509_LOOKUP_get_by_subject_fn ) ( X509_LOOKUP * ctx , X509_LOOKUP_TYPE type , const X509_NAME * name , X509_OBJECT * ret )
const X509_LOOKUP_get_by_subject_fn = Ptr{Cvoid}

# typedef int ( * X509_LOOKUP_get_by_subject_ex_fn ) ( X509_LOOKUP * ctx , X509_LOOKUP_TYPE type , const X509_NAME * name , X509_OBJECT * ret , OSSL_LIB_CTX * libctx , const char * propq )
const X509_LOOKUP_get_by_subject_ex_fn = Ptr{Cvoid}

# typedef int ( * X509_LOOKUP_get_by_issuer_serial_fn ) ( X509_LOOKUP * ctx , X509_LOOKUP_TYPE type , const X509_NAME * name , const ASN1_INTEGER * serial , X509_OBJECT * ret )
const X509_LOOKUP_get_by_issuer_serial_fn = Ptr{Cvoid}

# typedef int ( * X509_LOOKUP_get_by_fingerprint_fn ) ( X509_LOOKUP * ctx , X509_LOOKUP_TYPE type , const unsigned char * bytes , int len , X509_OBJECT * ret )
const X509_LOOKUP_get_by_fingerprint_fn = Ptr{Cvoid}

# typedef int ( * X509_LOOKUP_get_by_alias_fn ) ( X509_LOOKUP * ctx , X509_LOOKUP_TYPE type , const char * str , int len , X509_OBJECT * ret )
const X509_LOOKUP_get_by_alias_fn = Ptr{Cvoid}

function X509_LOOKUP_meth_new(name)
    @ccall libwebsockets.X509_LOOKUP_meth_new(name::Ptr{Cchar})::Ptr{X509_LOOKUP_METHOD}
end

function X509_LOOKUP_meth_free(method)
    @ccall libwebsockets.X509_LOOKUP_meth_free(method::Ptr{X509_LOOKUP_METHOD})::Cvoid
end

function X509_LOOKUP_meth_set_new_item(method, new_item)
    @ccall libwebsockets.X509_LOOKUP_meth_set_new_item(method::Ptr{X509_LOOKUP_METHOD}, new_item::Ptr{Cvoid})::Cint
end

function X509_LOOKUP_meth_get_new_item(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_new_item(method::Ptr{X509_LOOKUP_METHOD})::Ptr{Cvoid}
end

function X509_LOOKUP_meth_set_free(method, free_fn)
    @ccall libwebsockets.X509_LOOKUP_meth_set_free(method::Ptr{X509_LOOKUP_METHOD}, free_fn::Ptr{Cvoid})::Cint
end

function X509_LOOKUP_meth_get_free(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_free(method::Ptr{X509_LOOKUP_METHOD})::Ptr{Cvoid}
end

function X509_LOOKUP_meth_set_init(method, init)
    @ccall libwebsockets.X509_LOOKUP_meth_set_init(method::Ptr{X509_LOOKUP_METHOD}, init::Ptr{Cvoid})::Cint
end

function X509_LOOKUP_meth_get_init(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_init(method::Ptr{X509_LOOKUP_METHOD})::Ptr{Cvoid}
end

function X509_LOOKUP_meth_set_shutdown(method, shutdown)
    @ccall libwebsockets.X509_LOOKUP_meth_set_shutdown(method::Ptr{X509_LOOKUP_METHOD}, shutdown::Ptr{Cvoid})::Cint
end

function X509_LOOKUP_meth_get_shutdown(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_shutdown(method::Ptr{X509_LOOKUP_METHOD})::Ptr{Cvoid}
end

function X509_LOOKUP_meth_set_ctrl(method, ctrl_fn)
    @ccall libwebsockets.X509_LOOKUP_meth_set_ctrl(method::Ptr{X509_LOOKUP_METHOD}, ctrl_fn::X509_LOOKUP_ctrl_fn)::Cint
end

function X509_LOOKUP_meth_get_ctrl(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_ctrl(method::Ptr{X509_LOOKUP_METHOD})::X509_LOOKUP_ctrl_fn
end

function X509_LOOKUP_meth_set_get_by_subject(method, fn)
    @ccall libwebsockets.X509_LOOKUP_meth_set_get_by_subject(method::Ptr{X509_LOOKUP_METHOD}, fn::X509_LOOKUP_get_by_subject_fn)::Cint
end

function X509_LOOKUP_meth_get_get_by_subject(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_get_by_subject(method::Ptr{X509_LOOKUP_METHOD})::X509_LOOKUP_get_by_subject_fn
end

function X509_LOOKUP_meth_set_get_by_issuer_serial(method, fn)
    @ccall libwebsockets.X509_LOOKUP_meth_set_get_by_issuer_serial(method::Ptr{X509_LOOKUP_METHOD}, fn::X509_LOOKUP_get_by_issuer_serial_fn)::Cint
end

function X509_LOOKUP_meth_get_get_by_issuer_serial(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_get_by_issuer_serial(method::Ptr{X509_LOOKUP_METHOD})::X509_LOOKUP_get_by_issuer_serial_fn
end

function X509_LOOKUP_meth_set_get_by_fingerprint(method, fn)
    @ccall libwebsockets.X509_LOOKUP_meth_set_get_by_fingerprint(method::Ptr{X509_LOOKUP_METHOD}, fn::X509_LOOKUP_get_by_fingerprint_fn)::Cint
end

function X509_LOOKUP_meth_get_get_by_fingerprint(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_get_by_fingerprint(method::Ptr{X509_LOOKUP_METHOD})::X509_LOOKUP_get_by_fingerprint_fn
end

function X509_LOOKUP_meth_set_get_by_alias(method, fn)
    @ccall libwebsockets.X509_LOOKUP_meth_set_get_by_alias(method::Ptr{X509_LOOKUP_METHOD}, fn::X509_LOOKUP_get_by_alias_fn)::Cint
end

function X509_LOOKUP_meth_get_get_by_alias(method)
    @ccall libwebsockets.X509_LOOKUP_meth_get_get_by_alias(method::Ptr{X509_LOOKUP_METHOD})::X509_LOOKUP_get_by_alias_fn
end

function X509_STORE_add_cert(ctx, x)
    @ccall libwebsockets.X509_STORE_add_cert(ctx::Ptr{X509_STORE}, x::Ptr{X509})::Cint
end

function X509_STORE_add_crl(ctx, x)
    @ccall libwebsockets.X509_STORE_add_crl(ctx::Ptr{X509_STORE}, x::Ptr{X509_CRL})::Cint
end

function X509_STORE_CTX_get_obj_by_subject(vs, type, name)
    @ccall libwebsockets.X509_STORE_CTX_get_obj_by_subject(vs::Ptr{X509_STORE_CTX}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME})::Ptr{X509_OBJECT}
end

function X509_load_cert_file(ctx, file, type)
    @ccall libwebsockets.X509_load_cert_file(ctx::Ptr{X509_LOOKUP}, file::Ptr{Cchar}, type::Cint)::Cint
end

function X509_load_cert_file_ex(ctx, file, type, libctx, propq)
    @ccall libwebsockets.X509_load_cert_file_ex(ctx::Ptr{X509_LOOKUP}, file::Ptr{Cchar}, type::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_load_crl_file(ctx, file, type)
    @ccall libwebsockets.X509_load_crl_file(ctx::Ptr{X509_LOOKUP}, file::Ptr{Cchar}, type::Cint)::Cint
end

function X509_load_cert_crl_file(ctx, file, type)
    @ccall libwebsockets.X509_load_cert_crl_file(ctx::Ptr{X509_LOOKUP}, file::Ptr{Cchar}, type::Cint)::Cint
end

function X509_load_cert_crl_file_ex(ctx, file, type, libctx, propq)
    @ccall libwebsockets.X509_load_cert_crl_file_ex(ctx::Ptr{X509_LOOKUP}, file::Ptr{Cchar}, type::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_LOOKUP_new(method)
    @ccall libwebsockets.X509_LOOKUP_new(method::Ptr{X509_LOOKUP_METHOD})::Ptr{X509_LOOKUP}
end

function X509_LOOKUP_free(ctx)
    @ccall libwebsockets.X509_LOOKUP_free(ctx::Ptr{X509_LOOKUP})::Cvoid
end

function X509_LOOKUP_init(ctx)
    @ccall libwebsockets.X509_LOOKUP_init(ctx::Ptr{X509_LOOKUP})::Cint
end

function X509_LOOKUP_by_subject(ctx, type, name, ret)
    @ccall libwebsockets.X509_LOOKUP_by_subject(ctx::Ptr{X509_LOOKUP}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME}, ret::Ptr{X509_OBJECT})::Cint
end

function X509_LOOKUP_by_subject_ex(ctx, type, name, ret, libctx, propq)
    @ccall libwebsockets.X509_LOOKUP_by_subject_ex(ctx::Ptr{X509_LOOKUP}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME}, ret::Ptr{X509_OBJECT}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret)
    @ccall libwebsockets.X509_LOOKUP_by_issuer_serial(ctx::Ptr{X509_LOOKUP}, type::X509_LOOKUP_TYPE, name::Ptr{X509_NAME}, serial::Ptr{ASN1_INTEGER}, ret::Ptr{X509_OBJECT})::Cint
end

function X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret)
    @ccall libwebsockets.X509_LOOKUP_by_fingerprint(ctx::Ptr{X509_LOOKUP}, type::X509_LOOKUP_TYPE, bytes::Ptr{Cuchar}, len::Cint, ret::Ptr{X509_OBJECT})::Cint
end

function X509_LOOKUP_by_alias(ctx, type, str, len, ret)
    @ccall libwebsockets.X509_LOOKUP_by_alias(ctx::Ptr{X509_LOOKUP}, type::X509_LOOKUP_TYPE, str::Ptr{Cchar}, len::Cint, ret::Ptr{X509_OBJECT})::Cint
end

function X509_LOOKUP_set_method_data(ctx, data)
    @ccall libwebsockets.X509_LOOKUP_set_method_data(ctx::Ptr{X509_LOOKUP}, data::Ptr{Cvoid})::Cint
end

function X509_LOOKUP_get_method_data(ctx)
    @ccall libwebsockets.X509_LOOKUP_get_method_data(ctx::Ptr{X509_LOOKUP})::Ptr{Cvoid}
end

function X509_LOOKUP_get_store(ctx)
    @ccall libwebsockets.X509_LOOKUP_get_store(ctx::Ptr{X509_LOOKUP})::Ptr{X509_STORE}
end

function X509_LOOKUP_shutdown(ctx)
    @ccall libwebsockets.X509_LOOKUP_shutdown(ctx::Ptr{X509_LOOKUP})::Cint
end

function X509_STORE_load_file(ctx, file)
    @ccall libwebsockets.X509_STORE_load_file(ctx::Ptr{X509_STORE}, file::Ptr{Cchar})::Cint
end

function X509_STORE_load_path(ctx, path)
    @ccall libwebsockets.X509_STORE_load_path(ctx::Ptr{X509_STORE}, path::Ptr{Cchar})::Cint
end

function X509_STORE_load_store(ctx, store)
    @ccall libwebsockets.X509_STORE_load_store(ctx::Ptr{X509_STORE}, store::Ptr{Cchar})::Cint
end

function X509_STORE_load_locations(ctx, file, dir)
    @ccall libwebsockets.X509_STORE_load_locations(ctx::Ptr{X509_STORE}, file::Ptr{Cchar}, dir::Ptr{Cchar})::Cint
end

function X509_STORE_set_default_paths(ctx)
    @ccall libwebsockets.X509_STORE_set_default_paths(ctx::Ptr{X509_STORE})::Cint
end

function X509_STORE_load_file_ex(ctx, file, libctx, propq)
    @ccall libwebsockets.X509_STORE_load_file_ex(ctx::Ptr{X509_STORE}, file::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_STORE_load_store_ex(ctx, store, libctx, propq)
    @ccall libwebsockets.X509_STORE_load_store_ex(ctx::Ptr{X509_STORE}, store::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_STORE_load_locations_ex(ctx, file, dir, libctx, propq)
    @ccall libwebsockets.X509_STORE_load_locations_ex(ctx::Ptr{X509_STORE}, file::Ptr{Cchar}, dir::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_STORE_set_default_paths_ex(ctx, libctx, propq)
    @ccall libwebsockets.X509_STORE_set_default_paths_ex(ctx::Ptr{X509_STORE}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_STORE_CTX_get_error(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_error(ctx::Ptr{X509_STORE_CTX})::Cint
end

function X509_STORE_CTX_set_error(ctx, s)
    @ccall libwebsockets.X509_STORE_CTX_set_error(ctx::Ptr{X509_STORE_CTX}, s::Cint)::Cvoid
end

function X509_STORE_CTX_get_error_depth(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_error_depth(ctx::Ptr{X509_STORE_CTX})::Cint
end

function X509_STORE_CTX_set_error_depth(ctx, depth)
    @ccall libwebsockets.X509_STORE_CTX_set_error_depth(ctx::Ptr{X509_STORE_CTX}, depth::Cint)::Cvoid
end

function X509_STORE_CTX_get_current_cert(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_current_cert(ctx::Ptr{X509_STORE_CTX})::Ptr{X509}
end

function X509_STORE_CTX_set_current_cert(ctx, x)
    @ccall libwebsockets.X509_STORE_CTX_set_current_cert(ctx::Ptr{X509_STORE_CTX}, x::Ptr{X509})::Cvoid
end

function X509_STORE_CTX_get0_current_issuer(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_current_issuer(ctx::Ptr{X509_STORE_CTX})::Ptr{X509}
end

function X509_STORE_CTX_get0_current_crl(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_current_crl(ctx::Ptr{X509_STORE_CTX})::Ptr{X509_CRL}
end

function X509_STORE_CTX_get0_parent_ctx(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_parent_ctx(ctx::Ptr{X509_STORE_CTX})::Ptr{X509_STORE_CTX}
end

function X509_STORE_CTX_get1_chain(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get1_chain(ctx::Ptr{X509_STORE_CTX})::Ptr{stack_st_X509}
end

function X509_STORE_CTX_set_cert(ctx, target)
    @ccall libwebsockets.X509_STORE_CTX_set_cert(ctx::Ptr{X509_STORE_CTX}, target::Ptr{X509})::Cvoid
end

function X509_STORE_CTX_set0_verified_chain(c, sk)
    @ccall libwebsockets.X509_STORE_CTX_set0_verified_chain(c::Ptr{X509_STORE_CTX}, sk::Ptr{stack_st_X509})::Cvoid
end

function X509_STORE_CTX_set0_crls(ctx, sk)
    @ccall libwebsockets.X509_STORE_CTX_set0_crls(ctx::Ptr{X509_STORE_CTX}, sk::Ptr{stack_st_X509_CRL})::Cvoid
end

function X509_STORE_CTX_set_purpose(ctx, purpose)
    @ccall libwebsockets.X509_STORE_CTX_set_purpose(ctx::Ptr{X509_STORE_CTX}, purpose::Cint)::Cint
end

function X509_STORE_CTX_set_trust(ctx, trust)
    @ccall libwebsockets.X509_STORE_CTX_set_trust(ctx::Ptr{X509_STORE_CTX}, trust::Cint)::Cint
end

function X509_STORE_CTX_purpose_inherit(ctx, def_purpose, purpose, trust)
    @ccall libwebsockets.X509_STORE_CTX_purpose_inherit(ctx::Ptr{X509_STORE_CTX}, def_purpose::Cint, purpose::Cint, trust::Cint)::Cint
end

function X509_STORE_CTX_set_flags(ctx, flags)
    @ccall libwebsockets.X509_STORE_CTX_set_flags(ctx::Ptr{X509_STORE_CTX}, flags::Culong)::Cvoid
end

function X509_STORE_CTX_set_time(ctx, flags, t)
    @ccall libwebsockets.X509_STORE_CTX_set_time(ctx::Ptr{X509_STORE_CTX}, flags::Culong, t::time_t)::Cvoid
end

function X509_STORE_CTX_get0_policy_tree(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_policy_tree(ctx::Ptr{X509_STORE_CTX})::Ptr{X509_POLICY_TREE}
end

function X509_STORE_CTX_get_explicit_policy(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_explicit_policy(ctx::Ptr{X509_STORE_CTX})::Cint
end

function X509_STORE_CTX_get_num_untrusted(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get_num_untrusted(ctx::Ptr{X509_STORE_CTX})::Cint
end

function X509_STORE_CTX_get0_param(ctx)
    @ccall libwebsockets.X509_STORE_CTX_get0_param(ctx::Ptr{X509_STORE_CTX})::Ptr{X509_VERIFY_PARAM}
end

function X509_STORE_CTX_set0_param(ctx, param)
    @ccall libwebsockets.X509_STORE_CTX_set0_param(ctx::Ptr{X509_STORE_CTX}, param::Ptr{X509_VERIFY_PARAM})::Cvoid
end

function X509_STORE_CTX_set_default(ctx, name)
    @ccall libwebsockets.X509_STORE_CTX_set_default(ctx::Ptr{X509_STORE_CTX}, name::Ptr{Cchar})::Cint
end

function X509_STORE_CTX_set0_dane(ctx, dane)
    @ccall libwebsockets.X509_STORE_CTX_set0_dane(ctx::Ptr{X509_STORE_CTX}, dane::Ptr{SSL_DANE})::Cvoid
end

function X509_VERIFY_PARAM_new()
    @ccall libwebsockets.X509_VERIFY_PARAM_new()::Ptr{X509_VERIFY_PARAM}
end

function X509_VERIFY_PARAM_free(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_free(param::Ptr{X509_VERIFY_PARAM})::Cvoid
end

function X509_VERIFY_PARAM_inherit(to, from)
    @ccall libwebsockets.X509_VERIFY_PARAM_inherit(to::Ptr{X509_VERIFY_PARAM}, from::Ptr{X509_VERIFY_PARAM})::Cint
end

function X509_VERIFY_PARAM_set1(to, from)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1(to::Ptr{X509_VERIFY_PARAM}, from::Ptr{X509_VERIFY_PARAM})::Cint
end

function X509_VERIFY_PARAM_set1_name(param, name)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1_name(param::Ptr{X509_VERIFY_PARAM}, name::Ptr{Cchar})::Cint
end

function X509_VERIFY_PARAM_set_flags(param, flags)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_flags(param::Ptr{X509_VERIFY_PARAM}, flags::Culong)::Cint
end

function X509_VERIFY_PARAM_clear_flags(param, flags)
    @ccall libwebsockets.X509_VERIFY_PARAM_clear_flags(param::Ptr{X509_VERIFY_PARAM}, flags::Culong)::Cint
end

function X509_VERIFY_PARAM_get_flags(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get_flags(param::Ptr{X509_VERIFY_PARAM})::Culong
end

function X509_VERIFY_PARAM_set_purpose(param, purpose)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_purpose(param::Ptr{X509_VERIFY_PARAM}, purpose::Cint)::Cint
end

function X509_VERIFY_PARAM_set_trust(param, trust)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_trust(param::Ptr{X509_VERIFY_PARAM}, trust::Cint)::Cint
end

function X509_VERIFY_PARAM_set_depth(param, depth)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_depth(param::Ptr{X509_VERIFY_PARAM}, depth::Cint)::Cvoid
end

function X509_VERIFY_PARAM_set_auth_level(param, auth_level)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_auth_level(param::Ptr{X509_VERIFY_PARAM}, auth_level::Cint)::Cvoid
end

function X509_VERIFY_PARAM_get_time(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get_time(param::Ptr{X509_VERIFY_PARAM})::time_t
end

function X509_VERIFY_PARAM_set_time(param, t)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_time(param::Ptr{X509_VERIFY_PARAM}, t::time_t)::Cvoid
end

function X509_VERIFY_PARAM_add0_policy(param, policy)
    @ccall libwebsockets.X509_VERIFY_PARAM_add0_policy(param::Ptr{X509_VERIFY_PARAM}, policy::Ptr{ASN1_OBJECT})::Cint
end

function X509_VERIFY_PARAM_set1_policies(param, policies)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1_policies(param::Ptr{X509_VERIFY_PARAM}, policies::Ptr{stack_st_ASN1_OBJECT})::Cint
end

function X509_VERIFY_PARAM_set_inh_flags(param, flags)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_inh_flags(param::Ptr{X509_VERIFY_PARAM}, flags::UInt32)::Cint
end

function X509_VERIFY_PARAM_get_inh_flags(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get_inh_flags(param::Ptr{X509_VERIFY_PARAM})::UInt32
end

function X509_VERIFY_PARAM_get0_host(param, idx)
    @ccall libwebsockets.X509_VERIFY_PARAM_get0_host(param::Ptr{X509_VERIFY_PARAM}, idx::Cint)::Ptr{Cchar}
end

function X509_VERIFY_PARAM_set1_host(param, name, namelen)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1_host(param::Ptr{X509_VERIFY_PARAM}, name::Ptr{Cchar}, namelen::Csize_t)::Cint
end

function X509_VERIFY_PARAM_add1_host(param, name, namelen)
    @ccall libwebsockets.X509_VERIFY_PARAM_add1_host(param::Ptr{X509_VERIFY_PARAM}, name::Ptr{Cchar}, namelen::Csize_t)::Cint
end

function X509_VERIFY_PARAM_set_hostflags(param, flags)
    @ccall libwebsockets.X509_VERIFY_PARAM_set_hostflags(param::Ptr{X509_VERIFY_PARAM}, flags::Cuint)::Cvoid
end

function X509_VERIFY_PARAM_get_hostflags(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get_hostflags(param::Ptr{X509_VERIFY_PARAM})::Cuint
end

function X509_VERIFY_PARAM_get0_peername(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get0_peername(param::Ptr{X509_VERIFY_PARAM})::Ptr{Cchar}
end

function X509_VERIFY_PARAM_move_peername(arg1, arg2)
    @ccall libwebsockets.X509_VERIFY_PARAM_move_peername(arg1::Ptr{X509_VERIFY_PARAM}, arg2::Ptr{X509_VERIFY_PARAM})::Cvoid
end

function X509_VERIFY_PARAM_get0_email(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get0_email(param::Ptr{X509_VERIFY_PARAM})::Ptr{Cchar}
end

function X509_VERIFY_PARAM_set1_email(param, email, emaillen)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1_email(param::Ptr{X509_VERIFY_PARAM}, email::Ptr{Cchar}, emaillen::Csize_t)::Cint
end

function X509_VERIFY_PARAM_get1_ip_asc(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get1_ip_asc(param::Ptr{X509_VERIFY_PARAM})::Ptr{Cchar}
end

function X509_VERIFY_PARAM_set1_ip(param, ip, iplen)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1_ip(param::Ptr{X509_VERIFY_PARAM}, ip::Ptr{Cuchar}, iplen::Csize_t)::Cint
end

function X509_VERIFY_PARAM_set1_ip_asc(param, ipasc)
    @ccall libwebsockets.X509_VERIFY_PARAM_set1_ip_asc(param::Ptr{X509_VERIFY_PARAM}, ipasc::Ptr{Cchar})::Cint
end

function X509_VERIFY_PARAM_get_depth(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get_depth(param::Ptr{X509_VERIFY_PARAM})::Cint
end

function X509_VERIFY_PARAM_get_auth_level(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get_auth_level(param::Ptr{X509_VERIFY_PARAM})::Cint
end

function X509_VERIFY_PARAM_get0_name(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_get0_name(param::Ptr{X509_VERIFY_PARAM})::Ptr{Cchar}
end

function X509_VERIFY_PARAM_add0_table(param)
    @ccall libwebsockets.X509_VERIFY_PARAM_add0_table(param::Ptr{X509_VERIFY_PARAM})::Cint
end

function X509_VERIFY_PARAM_get_count()
    @ccall libwebsockets.X509_VERIFY_PARAM_get_count()::Cint
end

function X509_VERIFY_PARAM_get0(id)
    @ccall libwebsockets.X509_VERIFY_PARAM_get0(id::Cint)::Ptr{X509_VERIFY_PARAM}
end

function X509_VERIFY_PARAM_lookup(name)
    @ccall libwebsockets.X509_VERIFY_PARAM_lookup(name::Ptr{Cchar})::Ptr{X509_VERIFY_PARAM}
end

function X509_VERIFY_PARAM_table_cleanup()
    @ccall libwebsockets.X509_VERIFY_PARAM_table_cleanup()::Cvoid
end

function X509_policy_check(ptree, pexplicit_policy, certs, policy_oids, flags)
    @ccall libwebsockets.X509_policy_check(ptree::Ptr{Ptr{X509_POLICY_TREE}}, pexplicit_policy::Ptr{Cint}, certs::Ptr{stack_st_X509}, policy_oids::Ptr{stack_st_ASN1_OBJECT}, flags::Cuint)::Cint
end

function X509_policy_tree_free(tree)
    @ccall libwebsockets.X509_policy_tree_free(tree::Ptr{X509_POLICY_TREE})::Cvoid
end

function X509_policy_tree_level_count(tree)
    @ccall libwebsockets.X509_policy_tree_level_count(tree::Ptr{X509_POLICY_TREE})::Cint
end

function X509_policy_tree_get0_level(tree, i)
    @ccall libwebsockets.X509_policy_tree_get0_level(tree::Ptr{X509_POLICY_TREE}, i::Cint)::Ptr{X509_POLICY_LEVEL}
end

mutable struct stack_st_X509_POLICY_NODE end

function X509_policy_tree_get0_policies(tree)
    @ccall libwebsockets.X509_policy_tree_get0_policies(tree::Ptr{X509_POLICY_TREE})::Ptr{stack_st_X509_POLICY_NODE}
end

function X509_policy_tree_get0_user_policies(tree)
    @ccall libwebsockets.X509_policy_tree_get0_user_policies(tree::Ptr{X509_POLICY_TREE})::Ptr{stack_st_X509_POLICY_NODE}
end

function X509_policy_level_node_count(level)
    @ccall libwebsockets.X509_policy_level_node_count(level::Ptr{X509_POLICY_LEVEL})::Cint
end

function X509_policy_level_get0_node(level, i)
    @ccall libwebsockets.X509_policy_level_get0_node(level::Ptr{X509_POLICY_LEVEL}, i::Cint)::Ptr{X509_POLICY_NODE}
end

function X509_policy_node_get0_policy(node)
    @ccall libwebsockets.X509_policy_node_get0_policy(node::Ptr{X509_POLICY_NODE})::Ptr{ASN1_OBJECT}
end

mutable struct stack_st_POLICYQUALINFO end

function X509_policy_node_get0_qualifiers(node)
    @ccall libwebsockets.X509_policy_node_get0_qualifiers(node::Ptr{X509_POLICY_NODE})::Ptr{stack_st_POLICYQUALINFO}
end

function X509_policy_node_get0_parent(node)
    @ccall libwebsockets.X509_policy_node_get0_parent(node::Ptr{X509_POLICY_NODE})::Ptr{X509_POLICY_NODE}
end

mutable struct pkcs7_signed_st
    version::Ptr{ASN1_INTEGER}
    md_algs::Ptr{stack_st_X509_ALGOR}
    cert::Ptr{stack_st_X509}
    crl::Ptr{stack_st_X509_CRL}
    signer_info::Ptr{stack_st_PKCS7_SIGNER_INFO}
    contents::Ptr{pkcs7_st}
    pkcs7_signed_st() = new()
end

const PKCS7_SIGNED = pkcs7_signed_st

struct pkcs7_enc_content_st
    content_type::Ptr{ASN1_OBJECT}
    algorithm::Ptr{X509_ALGOR}
    enc_data::Ptr{ASN1_OCTET_STRING}
    cipher::Ptr{EVP_CIPHER}
    ctx::Ptr{PKCS7_CTX}
end

const PKCS7_ENC_CONTENT = pkcs7_enc_content_st

mutable struct pkcs7_enveloped_st
    version::Ptr{ASN1_INTEGER}
    recipientinfo::Ptr{stack_st_PKCS7_RECIP_INFO}
    enc_data::Ptr{PKCS7_ENC_CONTENT}
    pkcs7_enveloped_st() = new()
end

const PKCS7_ENVELOPE = pkcs7_enveloped_st

mutable struct pkcs7_signedandenveloped_st
    version::Ptr{ASN1_INTEGER}
    md_algs::Ptr{stack_st_X509_ALGOR}
    cert::Ptr{stack_st_X509}
    crl::Ptr{stack_st_X509_CRL}
    signer_info::Ptr{stack_st_PKCS7_SIGNER_INFO}
    enc_data::Ptr{PKCS7_ENC_CONTENT}
    recipientinfo::Ptr{stack_st_PKCS7_RECIP_INFO}
    pkcs7_signedandenveloped_st() = new()
end

const PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st

mutable struct pkcs7_digest_st
    version::Ptr{ASN1_INTEGER}
    md::Ptr{X509_ALGOR}
    contents::Ptr{pkcs7_st}
    digest::Ptr{ASN1_OCTET_STRING}
    pkcs7_digest_st() = new()
end

const PKCS7_DIGEST = pkcs7_digest_st

mutable struct pkcs7_encrypted_st
    version::Ptr{ASN1_INTEGER}
    enc_data::Ptr{PKCS7_ENC_CONTENT}
    pkcs7_encrypted_st() = new()
end

const PKCS7_ENCRYPT = pkcs7_encrypted_st

function PKCS7_ISSUER_AND_SERIAL_new()
    @ccall libwebsockets.PKCS7_ISSUER_AND_SERIAL_new()::Ptr{PKCS7_ISSUER_AND_SERIAL}
end

function PKCS7_ISSUER_AND_SERIAL_free(a)
    @ccall libwebsockets.PKCS7_ISSUER_AND_SERIAL_free(a::Ptr{PKCS7_ISSUER_AND_SERIAL})::Cvoid
end

function d2i_PKCS7_ISSUER_AND_SERIAL(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_ISSUER_AND_SERIAL(a::Ptr{Ptr{PKCS7_ISSUER_AND_SERIAL}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_ISSUER_AND_SERIAL}
end

function i2d_PKCS7_ISSUER_AND_SERIAL(a, out)
    @ccall libwebsockets.i2d_PKCS7_ISSUER_AND_SERIAL(a::Ptr{PKCS7_ISSUER_AND_SERIAL}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_ISSUER_AND_SERIAL_it()
    @ccall libwebsockets.PKCS7_ISSUER_AND_SERIAL_it()::Ptr{ASN1_ITEM}
end

function PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len)
    @ccall libwebsockets.PKCS7_ISSUER_AND_SERIAL_digest(data::Ptr{PKCS7_ISSUER_AND_SERIAL}, type::Ptr{EVP_MD}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function d2i_PKCS7_fp(fp, p7)
    @ccall libwebsockets.d2i_PKCS7_fp(fp::Ptr{Libc.FILE}, p7::Ptr{Ptr{PKCS7}})::Ptr{PKCS7}
end

function i2d_PKCS7_fp(fp, p7)
    @ccall libwebsockets.i2d_PKCS7_fp(fp::Ptr{Libc.FILE}, p7::Ptr{PKCS7})::Cint
end

function PKCS7_dup(a)
    @ccall libwebsockets.PKCS7_dup(a::Ptr{PKCS7})::Ptr{PKCS7}
end

function d2i_PKCS7_bio(bp, p7)
    @ccall libwebsockets.d2i_PKCS7_bio(bp::Ptr{BIO}, p7::Ptr{Ptr{PKCS7}})::Ptr{PKCS7}
end

function i2d_PKCS7_bio(bp, p7)
    @ccall libwebsockets.i2d_PKCS7_bio(bp::Ptr{BIO}, p7::Ptr{PKCS7})::Cint
end

function i2d_PKCS7_bio_stream(out, p7, in, flags)
    @ccall libwebsockets.i2d_PKCS7_bio_stream(out::Ptr{BIO}, p7::Ptr{PKCS7}, in::Ptr{BIO}, flags::Cint)::Cint
end

function PEM_write_bio_PKCS7_stream(out, p7, in, flags)
    @ccall libwebsockets.PEM_write_bio_PKCS7_stream(out::Ptr{BIO}, p7::Ptr{PKCS7}, in::Ptr{BIO}, flags::Cint)::Cint
end

function PKCS7_SIGNER_INFO_new()
    @ccall libwebsockets.PKCS7_SIGNER_INFO_new()::Ptr{PKCS7_SIGNER_INFO}
end

function PKCS7_SIGNER_INFO_free(a)
    @ccall libwebsockets.PKCS7_SIGNER_INFO_free(a::Ptr{PKCS7_SIGNER_INFO})::Cvoid
end

function d2i_PKCS7_SIGNER_INFO(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_SIGNER_INFO(a::Ptr{Ptr{PKCS7_SIGNER_INFO}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_SIGNER_INFO}
end

function i2d_PKCS7_SIGNER_INFO(a, out)
    @ccall libwebsockets.i2d_PKCS7_SIGNER_INFO(a::Ptr{PKCS7_SIGNER_INFO}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_SIGNER_INFO_it()
    @ccall libwebsockets.PKCS7_SIGNER_INFO_it()::Ptr{ASN1_ITEM}
end

function PKCS7_RECIP_INFO_new()
    @ccall libwebsockets.PKCS7_RECIP_INFO_new()::Ptr{PKCS7_RECIP_INFO}
end

function PKCS7_RECIP_INFO_free(a)
    @ccall libwebsockets.PKCS7_RECIP_INFO_free(a::Ptr{PKCS7_RECIP_INFO})::Cvoid
end

function d2i_PKCS7_RECIP_INFO(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_RECIP_INFO(a::Ptr{Ptr{PKCS7_RECIP_INFO}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_RECIP_INFO}
end

function i2d_PKCS7_RECIP_INFO(a, out)
    @ccall libwebsockets.i2d_PKCS7_RECIP_INFO(a::Ptr{PKCS7_RECIP_INFO}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_RECIP_INFO_it()
    @ccall libwebsockets.PKCS7_RECIP_INFO_it()::Ptr{ASN1_ITEM}
end

function PKCS7_SIGNED_new()
    @ccall libwebsockets.PKCS7_SIGNED_new()::Ptr{PKCS7_SIGNED}
end

function PKCS7_SIGNED_free(a)
    @ccall libwebsockets.PKCS7_SIGNED_free(a::Ptr{PKCS7_SIGNED})::Cvoid
end

function d2i_PKCS7_SIGNED(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_SIGNED(a::Ptr{Ptr{PKCS7_SIGNED}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_SIGNED}
end

function i2d_PKCS7_SIGNED(a, out)
    @ccall libwebsockets.i2d_PKCS7_SIGNED(a::Ptr{PKCS7_SIGNED}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_SIGNED_it()
    @ccall libwebsockets.PKCS7_SIGNED_it()::Ptr{ASN1_ITEM}
end

function PKCS7_ENC_CONTENT_new()
    @ccall libwebsockets.PKCS7_ENC_CONTENT_new()::Ptr{PKCS7_ENC_CONTENT}
end

function PKCS7_ENC_CONTENT_free(a)
    @ccall libwebsockets.PKCS7_ENC_CONTENT_free(a::Ptr{PKCS7_ENC_CONTENT})::Cvoid
end

function d2i_PKCS7_ENC_CONTENT(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_ENC_CONTENT(a::Ptr{Ptr{PKCS7_ENC_CONTENT}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_ENC_CONTENT}
end

function i2d_PKCS7_ENC_CONTENT(a, out)
    @ccall libwebsockets.i2d_PKCS7_ENC_CONTENT(a::Ptr{PKCS7_ENC_CONTENT}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_ENC_CONTENT_it()
    @ccall libwebsockets.PKCS7_ENC_CONTENT_it()::Ptr{ASN1_ITEM}
end

function PKCS7_ENVELOPE_new()
    @ccall libwebsockets.PKCS7_ENVELOPE_new()::Ptr{PKCS7_ENVELOPE}
end

function PKCS7_ENVELOPE_free(a)
    @ccall libwebsockets.PKCS7_ENVELOPE_free(a::Ptr{PKCS7_ENVELOPE})::Cvoid
end

function d2i_PKCS7_ENVELOPE(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_ENVELOPE(a::Ptr{Ptr{PKCS7_ENVELOPE}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_ENVELOPE}
end

function i2d_PKCS7_ENVELOPE(a, out)
    @ccall libwebsockets.i2d_PKCS7_ENVELOPE(a::Ptr{PKCS7_ENVELOPE}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_ENVELOPE_it()
    @ccall libwebsockets.PKCS7_ENVELOPE_it()::Ptr{ASN1_ITEM}
end

function PKCS7_SIGN_ENVELOPE_new()
    @ccall libwebsockets.PKCS7_SIGN_ENVELOPE_new()::Ptr{PKCS7_SIGN_ENVELOPE}
end

function PKCS7_SIGN_ENVELOPE_free(a)
    @ccall libwebsockets.PKCS7_SIGN_ENVELOPE_free(a::Ptr{PKCS7_SIGN_ENVELOPE})::Cvoid
end

function d2i_PKCS7_SIGN_ENVELOPE(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_SIGN_ENVELOPE(a::Ptr{Ptr{PKCS7_SIGN_ENVELOPE}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_SIGN_ENVELOPE}
end

function i2d_PKCS7_SIGN_ENVELOPE(a, out)
    @ccall libwebsockets.i2d_PKCS7_SIGN_ENVELOPE(a::Ptr{PKCS7_SIGN_ENVELOPE}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_SIGN_ENVELOPE_it()
    @ccall libwebsockets.PKCS7_SIGN_ENVELOPE_it()::Ptr{ASN1_ITEM}
end

function PKCS7_DIGEST_new()
    @ccall libwebsockets.PKCS7_DIGEST_new()::Ptr{PKCS7_DIGEST}
end

function PKCS7_DIGEST_free(a)
    @ccall libwebsockets.PKCS7_DIGEST_free(a::Ptr{PKCS7_DIGEST})::Cvoid
end

function d2i_PKCS7_DIGEST(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_DIGEST(a::Ptr{Ptr{PKCS7_DIGEST}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_DIGEST}
end

function i2d_PKCS7_DIGEST(a, out)
    @ccall libwebsockets.i2d_PKCS7_DIGEST(a::Ptr{PKCS7_DIGEST}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_DIGEST_it()
    @ccall libwebsockets.PKCS7_DIGEST_it()::Ptr{ASN1_ITEM}
end

function PKCS7_ENCRYPT_new()
    @ccall libwebsockets.PKCS7_ENCRYPT_new()::Ptr{PKCS7_ENCRYPT}
end

function PKCS7_ENCRYPT_free(a)
    @ccall libwebsockets.PKCS7_ENCRYPT_free(a::Ptr{PKCS7_ENCRYPT})::Cvoid
end

function d2i_PKCS7_ENCRYPT(a, in, len)
    @ccall libwebsockets.d2i_PKCS7_ENCRYPT(a::Ptr{Ptr{PKCS7_ENCRYPT}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7_ENCRYPT}
end

function i2d_PKCS7_ENCRYPT(a, out)
    @ccall libwebsockets.i2d_PKCS7_ENCRYPT(a::Ptr{PKCS7_ENCRYPT}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_ENCRYPT_it()
    @ccall libwebsockets.PKCS7_ENCRYPT_it()::Ptr{ASN1_ITEM}
end

function PKCS7_new()
    @ccall libwebsockets.PKCS7_new()::Ptr{PKCS7}
end

function PKCS7_free(a)
    @ccall libwebsockets.PKCS7_free(a::Ptr{PKCS7})::Cvoid
end

function d2i_PKCS7(a, in, len)
    @ccall libwebsockets.d2i_PKCS7(a::Ptr{Ptr{PKCS7}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS7}
end

function i2d_PKCS7(a, out)
    @ccall libwebsockets.i2d_PKCS7(a::Ptr{PKCS7}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_it()
    @ccall libwebsockets.PKCS7_it()::Ptr{ASN1_ITEM}
end

function PKCS7_new_ex(libctx, propq)
    @ccall libwebsockets.PKCS7_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{PKCS7}
end

function PKCS7_ATTR_SIGN_it()
    @ccall libwebsockets.PKCS7_ATTR_SIGN_it()::Ptr{ASN1_ITEM}
end

function PKCS7_ATTR_VERIFY_it()
    @ccall libwebsockets.PKCS7_ATTR_VERIFY_it()::Ptr{ASN1_ITEM}
end

function i2d_PKCS7_NDEF(a, out)
    @ccall libwebsockets.i2d_PKCS7_NDEF(a::Ptr{PKCS7}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS7_print_ctx(out, x, indent, pctx)
    @ccall libwebsockets.PKCS7_print_ctx(out::Ptr{BIO}, x::Ptr{PKCS7}, indent::Cint, pctx::Ptr{ASN1_PCTX})::Cint
end

function PKCS7_type_is_other(p7)
    @ccall libwebsockets.PKCS7_type_is_other(p7::Ptr{PKCS7})::Cint
end

function PKCS7_set_type(p7, type)
    @ccall libwebsockets.PKCS7_set_type(p7::Ptr{PKCS7}, type::Cint)::Cint
end

function PKCS7_set0_type_other(p7, type, other)
    @ccall libwebsockets.PKCS7_set0_type_other(p7::Ptr{PKCS7}, type::Cint, other::Ptr{ASN1_TYPE})::Cint
end

function PKCS7_set_content(p7, p7_data)
    @ccall libwebsockets.PKCS7_set_content(p7::Ptr{PKCS7}, p7_data::Ptr{PKCS7})::Cint
end

function PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst)
    @ccall libwebsockets.PKCS7_SIGNER_INFO_set(p7i::Ptr{PKCS7_SIGNER_INFO}, x509::Ptr{X509}, pkey::Ptr{EVP_PKEY}, dgst::Ptr{EVP_MD})::Cint
end

function PKCS7_SIGNER_INFO_sign(si)
    @ccall libwebsockets.PKCS7_SIGNER_INFO_sign(si::Ptr{PKCS7_SIGNER_INFO})::Cint
end

function PKCS7_add_signer(p7, p7i)
    @ccall libwebsockets.PKCS7_add_signer(p7::Ptr{PKCS7}, p7i::Ptr{PKCS7_SIGNER_INFO})::Cint
end

function PKCS7_add_certificate(p7, x509)
    @ccall libwebsockets.PKCS7_add_certificate(p7::Ptr{PKCS7}, x509::Ptr{X509})::Cint
end

function PKCS7_add_crl(p7, x509)
    @ccall libwebsockets.PKCS7_add_crl(p7::Ptr{PKCS7}, x509::Ptr{X509_CRL})::Cint
end

function PKCS7_content_new(p7, nid)
    @ccall libwebsockets.PKCS7_content_new(p7::Ptr{PKCS7}, nid::Cint)::Cint
end

function PKCS7_dataVerify(cert_store, ctx, bio, p7, si)
    @ccall libwebsockets.PKCS7_dataVerify(cert_store::Ptr{X509_STORE}, ctx::Ptr{X509_STORE_CTX}, bio::Ptr{BIO}, p7::Ptr{PKCS7}, si::Ptr{PKCS7_SIGNER_INFO})::Cint
end

function PKCS7_signatureVerify(bio, p7, si, x509)
    @ccall libwebsockets.PKCS7_signatureVerify(bio::Ptr{BIO}, p7::Ptr{PKCS7}, si::Ptr{PKCS7_SIGNER_INFO}, x509::Ptr{X509})::Cint
end

function PKCS7_dataInit(p7, bio)
    @ccall libwebsockets.PKCS7_dataInit(p7::Ptr{PKCS7}, bio::Ptr{BIO})::Ptr{BIO}
end

function PKCS7_dataFinal(p7, bio)
    @ccall libwebsockets.PKCS7_dataFinal(p7::Ptr{PKCS7}, bio::Ptr{BIO})::Cint
end

function PKCS7_dataDecode(p7, pkey, in_bio, pcert)
    @ccall libwebsockets.PKCS7_dataDecode(p7::Ptr{PKCS7}, pkey::Ptr{EVP_PKEY}, in_bio::Ptr{BIO}, pcert::Ptr{X509})::Ptr{BIO}
end

function PKCS7_add_signature(p7, x509, pkey, dgst)
    @ccall libwebsockets.PKCS7_add_signature(p7::Ptr{PKCS7}, x509::Ptr{X509}, pkey::Ptr{EVP_PKEY}, dgst::Ptr{EVP_MD})::Ptr{PKCS7_SIGNER_INFO}
end

function PKCS7_cert_from_signer_info(p7, si)
    @ccall libwebsockets.PKCS7_cert_from_signer_info(p7::Ptr{PKCS7}, si::Ptr{PKCS7_SIGNER_INFO})::Ptr{X509}
end

function PKCS7_set_digest(p7, md)
    @ccall libwebsockets.PKCS7_set_digest(p7::Ptr{PKCS7}, md::Ptr{EVP_MD})::Cint
end

function PKCS7_get_signer_info(p7)
    @ccall libwebsockets.PKCS7_get_signer_info(p7::Ptr{PKCS7})::Ptr{stack_st_PKCS7_SIGNER_INFO}
end

function PKCS7_add_recipient(p7, x509)
    @ccall libwebsockets.PKCS7_add_recipient(p7::Ptr{PKCS7}, x509::Ptr{X509})::Ptr{PKCS7_RECIP_INFO}
end

function PKCS7_SIGNER_INFO_get0_algs(si, pk, pdig, psig)
    @ccall libwebsockets.PKCS7_SIGNER_INFO_get0_algs(si::Ptr{PKCS7_SIGNER_INFO}, pk::Ptr{Ptr{EVP_PKEY}}, pdig::Ptr{Ptr{X509_ALGOR}}, psig::Ptr{Ptr{X509_ALGOR}})::Cvoid
end

function PKCS7_RECIP_INFO_get0_alg(ri, penc)
    @ccall libwebsockets.PKCS7_RECIP_INFO_get0_alg(ri::Ptr{PKCS7_RECIP_INFO}, penc::Ptr{Ptr{X509_ALGOR}})::Cvoid
end

function PKCS7_add_recipient_info(p7, ri)
    @ccall libwebsockets.PKCS7_add_recipient_info(p7::Ptr{PKCS7}, ri::Ptr{PKCS7_RECIP_INFO})::Cint
end

function PKCS7_RECIP_INFO_set(p7i, x509)
    @ccall libwebsockets.PKCS7_RECIP_INFO_set(p7i::Ptr{PKCS7_RECIP_INFO}, x509::Ptr{X509})::Cint
end

function PKCS7_set_cipher(p7, cipher)
    @ccall libwebsockets.PKCS7_set_cipher(p7::Ptr{PKCS7}, cipher::Ptr{EVP_CIPHER})::Cint
end

function PKCS7_stream(boundary, p7)
    @ccall libwebsockets.PKCS7_stream(boundary::Ptr{Ptr{Ptr{Cuchar}}}, p7::Ptr{PKCS7})::Cint
end

function PKCS7_get_issuer_and_serial(p7, idx)
    @ccall libwebsockets.PKCS7_get_issuer_and_serial(p7::Ptr{PKCS7}, idx::Cint)::Ptr{PKCS7_ISSUER_AND_SERIAL}
end

function PKCS7_get_octet_string(p7)
    @ccall libwebsockets.PKCS7_get_octet_string(p7::Ptr{PKCS7})::Ptr{ASN1_OCTET_STRING}
end

function PKCS7_digest_from_attributes(sk)
    @ccall libwebsockets.PKCS7_digest_from_attributes(sk::Ptr{stack_st_X509_ATTRIBUTE})::Ptr{ASN1_OCTET_STRING}
end

function PKCS7_add_signed_attribute(p7si, nid, type, data)
    @ccall libwebsockets.PKCS7_add_signed_attribute(p7si::Ptr{PKCS7_SIGNER_INFO}, nid::Cint, type::Cint, data::Ptr{Cvoid})::Cint
end

function PKCS7_add_attribute(p7si, nid, atrtype, value)
    @ccall libwebsockets.PKCS7_add_attribute(p7si::Ptr{PKCS7_SIGNER_INFO}, nid::Cint, atrtype::Cint, value::Ptr{Cvoid})::Cint
end

function PKCS7_get_attribute(si, nid)
    @ccall libwebsockets.PKCS7_get_attribute(si::Ptr{PKCS7_SIGNER_INFO}, nid::Cint)::Ptr{ASN1_TYPE}
end

function PKCS7_get_signed_attribute(si, nid)
    @ccall libwebsockets.PKCS7_get_signed_attribute(si::Ptr{PKCS7_SIGNER_INFO}, nid::Cint)::Ptr{ASN1_TYPE}
end

function PKCS7_set_signed_attributes(p7si, sk)
    @ccall libwebsockets.PKCS7_set_signed_attributes(p7si::Ptr{PKCS7_SIGNER_INFO}, sk::Ptr{stack_st_X509_ATTRIBUTE})::Cint
end

function PKCS7_set_attributes(p7si, sk)
    @ccall libwebsockets.PKCS7_set_attributes(p7si::Ptr{PKCS7_SIGNER_INFO}, sk::Ptr{stack_st_X509_ATTRIBUTE})::Cint
end

function PKCS7_sign(signcert, pkey, certs, data, flags)
    @ccall libwebsockets.PKCS7_sign(signcert::Ptr{X509}, pkey::Ptr{EVP_PKEY}, certs::Ptr{stack_st_X509}, data::Ptr{BIO}, flags::Cint)::Ptr{PKCS7}
end

function PKCS7_sign_ex(signcert, pkey, certs, data, flags, libctx, propq)
    @ccall libwebsockets.PKCS7_sign_ex(signcert::Ptr{X509}, pkey::Ptr{EVP_PKEY}, certs::Ptr{stack_st_X509}, data::Ptr{BIO}, flags::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{PKCS7}
end

function PKCS7_sign_add_signer(p7, signcert, pkey, md, flags)
    @ccall libwebsockets.PKCS7_sign_add_signer(p7::Ptr{PKCS7}, signcert::Ptr{X509}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD}, flags::Cint)::Ptr{PKCS7_SIGNER_INFO}
end

function PKCS7_final(p7, data, flags)
    @ccall libwebsockets.PKCS7_final(p7::Ptr{PKCS7}, data::Ptr{BIO}, flags::Cint)::Cint
end

function PKCS7_verify(p7, certs, store, indata, out, flags)
    @ccall libwebsockets.PKCS7_verify(p7::Ptr{PKCS7}, certs::Ptr{stack_st_X509}, store::Ptr{X509_STORE}, indata::Ptr{BIO}, out::Ptr{BIO}, flags::Cint)::Cint
end

function PKCS7_get0_signers(p7, certs, flags)
    @ccall libwebsockets.PKCS7_get0_signers(p7::Ptr{PKCS7}, certs::Ptr{stack_st_X509}, flags::Cint)::Ptr{stack_st_X509}
end

function PKCS7_encrypt(certs, in, cipher, flags)
    @ccall libwebsockets.PKCS7_encrypt(certs::Ptr{stack_st_X509}, in::Ptr{BIO}, cipher::Ptr{EVP_CIPHER}, flags::Cint)::Ptr{PKCS7}
end

function PKCS7_encrypt_ex(certs, in, cipher, flags, libctx, propq)
    @ccall libwebsockets.PKCS7_encrypt_ex(certs::Ptr{stack_st_X509}, in::Ptr{BIO}, cipher::Ptr{EVP_CIPHER}, flags::Cint, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{PKCS7}
end

function PKCS7_decrypt(p7, pkey, cert, data, flags)
    @ccall libwebsockets.PKCS7_decrypt(p7::Ptr{PKCS7}, pkey::Ptr{EVP_PKEY}, cert::Ptr{X509}, data::Ptr{BIO}, flags::Cint)::Cint
end

function PKCS7_add_attrib_smimecap(si, cap)
    @ccall libwebsockets.PKCS7_add_attrib_smimecap(si::Ptr{PKCS7_SIGNER_INFO}, cap::Ptr{stack_st_X509_ALGOR})::Cint
end

function PKCS7_get_smimecap(si)
    @ccall libwebsockets.PKCS7_get_smimecap(si::Ptr{PKCS7_SIGNER_INFO})::Ptr{stack_st_X509_ALGOR}
end

function PKCS7_simple_smimecap(sk, nid, arg)
    @ccall libwebsockets.PKCS7_simple_smimecap(sk::Ptr{stack_st_X509_ALGOR}, nid::Cint, arg::Cint)::Cint
end

function PKCS7_add_attrib_content_type(si, coid)
    @ccall libwebsockets.PKCS7_add_attrib_content_type(si::Ptr{PKCS7_SIGNER_INFO}, coid::Ptr{ASN1_OBJECT})::Cint
end

function PKCS7_add0_attrib_signing_time(si, t)
    @ccall libwebsockets.PKCS7_add0_attrib_signing_time(si::Ptr{PKCS7_SIGNER_INFO}, t::Ptr{ASN1_TIME})::Cint
end

function PKCS7_add1_attrib_digest(si, md, mdlen)
    @ccall libwebsockets.PKCS7_add1_attrib_digest(si::Ptr{PKCS7_SIGNER_INFO}, md::Ptr{Cuchar}, mdlen::Cint)::Cint
end

function SMIME_write_PKCS7(bio, p7, data, flags)
    @ccall libwebsockets.SMIME_write_PKCS7(bio::Ptr{BIO}, p7::Ptr{PKCS7}, data::Ptr{BIO}, flags::Cint)::Cint
end

function SMIME_read_PKCS7_ex(bio, bcont, p7)
    @ccall libwebsockets.SMIME_read_PKCS7_ex(bio::Ptr{BIO}, bcont::Ptr{Ptr{BIO}}, p7::Ptr{Ptr{PKCS7}})::Ptr{PKCS7}
end

function SMIME_read_PKCS7(bio, bcont)
    @ccall libwebsockets.SMIME_read_PKCS7(bio::Ptr{BIO}, bcont::Ptr{Ptr{BIO}})::Ptr{PKCS7}
end

function BIO_new_PKCS7(out, p7)
    @ccall libwebsockets.BIO_new_PKCS7(out::Ptr{BIO}, p7::Ptr{PKCS7})::Ptr{BIO}
end

function X509_CRL_set_default_method(meth)
    @ccall libwebsockets.X509_CRL_set_default_method(meth::Ptr{X509_CRL_METHOD})::Cvoid
end

function X509_CRL_METHOD_new(crl_init, crl_free, crl_lookup, crl_verify)
    @ccall libwebsockets.X509_CRL_METHOD_new(crl_init::Ptr{Cvoid}, crl_free::Ptr{Cvoid}, crl_lookup::Ptr{Cvoid}, crl_verify::Ptr{Cvoid})::Ptr{X509_CRL_METHOD}
end

function X509_CRL_METHOD_free(m)
    @ccall libwebsockets.X509_CRL_METHOD_free(m::Ptr{X509_CRL_METHOD})::Cvoid
end

function X509_CRL_set_meth_data(crl, dat)
    @ccall libwebsockets.X509_CRL_set_meth_data(crl::Ptr{X509_CRL}, dat::Ptr{Cvoid})::Cvoid
end

function X509_CRL_get_meth_data(crl)
    @ccall libwebsockets.X509_CRL_get_meth_data(crl::Ptr{X509_CRL})::Ptr{Cvoid}
end

function X509_verify_cert_error_string(n)
    @ccall libwebsockets.X509_verify_cert_error_string(n::Clong)::Ptr{Cchar}
end

function X509_verify(a, r)
    @ccall libwebsockets.X509_verify(a::Ptr{X509}, r::Ptr{EVP_PKEY})::Cint
end

function X509_self_signed(cert, verify_signature)
    @ccall libwebsockets.X509_self_signed(cert::Ptr{X509}, verify_signature::Cint)::Cint
end

function X509_REQ_verify_ex(a, r, libctx, propq)
    @ccall libwebsockets.X509_REQ_verify_ex(a::Ptr{X509_REQ}, r::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function X509_REQ_verify(a, r)
    @ccall libwebsockets.X509_REQ_verify(a::Ptr{X509_REQ}, r::Ptr{EVP_PKEY})::Cint
end

function X509_CRL_verify(a, r)
    @ccall libwebsockets.X509_CRL_verify(a::Ptr{X509_CRL}, r::Ptr{EVP_PKEY})::Cint
end

function NETSCAPE_SPKI_verify(a, r)
    @ccall libwebsockets.NETSCAPE_SPKI_verify(a::Ptr{NETSCAPE_SPKI}, r::Ptr{EVP_PKEY})::Cint
end

function NETSCAPE_SPKI_b64_decode(str, len)
    @ccall libwebsockets.NETSCAPE_SPKI_b64_decode(str::Ptr{Cchar}, len::Cint)::Ptr{NETSCAPE_SPKI}
end

function NETSCAPE_SPKI_b64_encode(x)
    @ccall libwebsockets.NETSCAPE_SPKI_b64_encode(x::Ptr{NETSCAPE_SPKI})::Ptr{Cchar}
end

function NETSCAPE_SPKI_get_pubkey(x)
    @ccall libwebsockets.NETSCAPE_SPKI_get_pubkey(x::Ptr{NETSCAPE_SPKI})::Ptr{EVP_PKEY}
end

function NETSCAPE_SPKI_set_pubkey(x, pkey)
    @ccall libwebsockets.NETSCAPE_SPKI_set_pubkey(x::Ptr{NETSCAPE_SPKI}, pkey::Ptr{EVP_PKEY})::Cint
end

function NETSCAPE_SPKI_print(out, spki)
    @ccall libwebsockets.NETSCAPE_SPKI_print(out::Ptr{BIO}, spki::Ptr{NETSCAPE_SPKI})::Cint
end

function X509_signature_dump(bp, sig, indent)
    @ccall libwebsockets.X509_signature_dump(bp::Ptr{BIO}, sig::Ptr{ASN1_STRING}, indent::Cint)::Cint
end

function X509_signature_print(bp, alg, sig)
    @ccall libwebsockets.X509_signature_print(bp::Ptr{BIO}, alg::Ptr{X509_ALGOR}, sig::Ptr{ASN1_STRING})::Cint
end

function X509_sign(x, pkey, md)
    @ccall libwebsockets.X509_sign(x::Ptr{X509}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD})::Cint
end

function X509_sign_ctx(x, ctx)
    @ccall libwebsockets.X509_sign_ctx(x::Ptr{X509}, ctx::Ptr{EVP_MD_CTX})::Cint
end

function X509_REQ_sign(x, pkey, md)
    @ccall libwebsockets.X509_REQ_sign(x::Ptr{X509_REQ}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD})::Cint
end

function X509_REQ_sign_ctx(x, ctx)
    @ccall libwebsockets.X509_REQ_sign_ctx(x::Ptr{X509_REQ}, ctx::Ptr{EVP_MD_CTX})::Cint
end

function X509_CRL_sign(x, pkey, md)
    @ccall libwebsockets.X509_CRL_sign(x::Ptr{X509_CRL}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD})::Cint
end

function X509_CRL_sign_ctx(x, ctx)
    @ccall libwebsockets.X509_CRL_sign_ctx(x::Ptr{X509_CRL}, ctx::Ptr{EVP_MD_CTX})::Cint
end

function NETSCAPE_SPKI_sign(x, pkey, md)
    @ccall libwebsockets.NETSCAPE_SPKI_sign(x::Ptr{NETSCAPE_SPKI}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD})::Cint
end

function X509_pubkey_digest(data, type, md, len)
    @ccall libwebsockets.X509_pubkey_digest(data::Ptr{X509}, type::Ptr{EVP_MD}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function X509_digest(data, type, md, len)
    @ccall libwebsockets.X509_digest(data::Ptr{X509}, type::Ptr{EVP_MD}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function X509_digest_sig(cert, md_used, md_is_fallback)
    @ccall libwebsockets.X509_digest_sig(cert::Ptr{X509}, md_used::Ptr{Ptr{EVP_MD}}, md_is_fallback::Ptr{Cint})::Ptr{ASN1_OCTET_STRING}
end

function X509_CRL_digest(data, type, md, len)
    @ccall libwebsockets.X509_CRL_digest(data::Ptr{X509_CRL}, type::Ptr{EVP_MD}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function X509_REQ_digest(data, type, md, len)
    @ccall libwebsockets.X509_REQ_digest(data::Ptr{X509_REQ}, type::Ptr{EVP_MD}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function X509_NAME_digest(data, type, md, len)
    @ccall libwebsockets.X509_NAME_digest(data::Ptr{X509_NAME}, type::Ptr{EVP_MD}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function X509_load_http(url, bio, rbio, timeout)
    @ccall libwebsockets.X509_load_http(url::Ptr{Cchar}, bio::Ptr{BIO}, rbio::Ptr{BIO}, timeout::Cint)::Ptr{X509}
end

function X509_CRL_load_http(url, bio, rbio, timeout)
    @ccall libwebsockets.X509_CRL_load_http(url::Ptr{Cchar}, bio::Ptr{BIO}, rbio::Ptr{BIO}, timeout::Cint)::Ptr{X509_CRL}
end

mutable struct conf_imodule_st end

const CONF_IMODULE = conf_imodule_st

mutable struct conf_module_st end

const CONF_MODULE = conf_module_st

mutable struct stack_st_CONF_MODULE end

mutable struct stack_st_CONF_IMODULE end

# typedef int conf_init_func ( CONF_IMODULE * md , const CONF * cnf )
const conf_init_func = Cvoid

# typedef void conf_finish_func ( CONF_IMODULE * md )
const conf_finish_func = Cvoid

function CONF_set_default_method(meth)
    @ccall libwebsockets.CONF_set_default_method(meth::Ptr{CONF_METHOD})::Cint
end

function CONF_set_nconf(conf, hash)
    @ccall libwebsockets.CONF_set_nconf(conf::Ptr{CONF}, hash::Ptr{lhash_st_CONF_VALUE})::Cvoid
end

function CONF_load(conf, file, eline)
    @ccall libwebsockets.CONF_load(conf::Ptr{lhash_st_CONF_VALUE}, file::Ptr{Cchar}, eline::Ptr{Clong})::Ptr{lhash_st_CONF_VALUE}
end

function CONF_load_fp(conf, fp, eline)
    @ccall libwebsockets.CONF_load_fp(conf::Ptr{lhash_st_CONF_VALUE}, fp::Ptr{Libc.FILE}, eline::Ptr{Clong})::Ptr{lhash_st_CONF_VALUE}
end

function CONF_load_bio(conf, bp, eline)
    @ccall libwebsockets.CONF_load_bio(conf::Ptr{lhash_st_CONF_VALUE}, bp::Ptr{BIO}, eline::Ptr{Clong})::Ptr{lhash_st_CONF_VALUE}
end

function CONF_get_section(conf, section)
    @ccall libwebsockets.CONF_get_section(conf::Ptr{lhash_st_CONF_VALUE}, section::Ptr{Cchar})::Ptr{stack_st_CONF_VALUE}
end

function CONF_get_string(conf, group, name)
    @ccall libwebsockets.CONF_get_string(conf::Ptr{lhash_st_CONF_VALUE}, group::Ptr{Cchar}, name::Ptr{Cchar})::Ptr{Cchar}
end

function CONF_get_number(conf, group, name)
    @ccall libwebsockets.CONF_get_number(conf::Ptr{lhash_st_CONF_VALUE}, group::Ptr{Cchar}, name::Ptr{Cchar})::Clong
end

function CONF_free(conf)
    @ccall libwebsockets.CONF_free(conf::Ptr{lhash_st_CONF_VALUE})::Cvoid
end

function CONF_dump_fp(conf, out)
    @ccall libwebsockets.CONF_dump_fp(conf::Ptr{lhash_st_CONF_VALUE}, out::Ptr{Libc.FILE})::Cint
end

function CONF_dump_bio(conf, out)
    @ccall libwebsockets.CONF_dump_bio(conf::Ptr{lhash_st_CONF_VALUE}, out::Ptr{BIO})::Cint
end

function OPENSSL_config(config_name)
    @ccall libwebsockets.OPENSSL_config(config_name::Ptr{Cchar})::Cvoid
end

function NCONF_new_ex(libctx, meth)
    @ccall libwebsockets.NCONF_new_ex(libctx::Ptr{OSSL_LIB_CTX}, meth::Ptr{CONF_METHOD})::Ptr{CONF}
end

function NCONF_get0_libctx(conf)
    @ccall libwebsockets.NCONF_get0_libctx(conf::Ptr{CONF})::Ptr{OSSL_LIB_CTX}
end

function NCONF_new(meth)
    @ccall libwebsockets.NCONF_new(meth::Ptr{CONF_METHOD})::Ptr{CONF}
end

function NCONF_default()
    @ccall libwebsockets.NCONF_default()::Ptr{CONF_METHOD}
end

function NCONF_WIN32()
    @ccall libwebsockets.NCONF_WIN32()::Ptr{CONF_METHOD}
end

function NCONF_free(conf)
    @ccall libwebsockets.NCONF_free(conf::Ptr{CONF})::Cvoid
end

function NCONF_free_data(conf)
    @ccall libwebsockets.NCONF_free_data(conf::Ptr{CONF})::Cvoid
end

function NCONF_load(conf, file, eline)
    @ccall libwebsockets.NCONF_load(conf::Ptr{CONF}, file::Ptr{Cchar}, eline::Ptr{Clong})::Cint
end

function NCONF_load_fp(conf, fp, eline)
    @ccall libwebsockets.NCONF_load_fp(conf::Ptr{CONF}, fp::Ptr{Libc.FILE}, eline::Ptr{Clong})::Cint
end

function NCONF_load_bio(conf, bp, eline)
    @ccall libwebsockets.NCONF_load_bio(conf::Ptr{CONF}, bp::Ptr{BIO}, eline::Ptr{Clong})::Cint
end

function NCONF_get_section_names(conf)
    @ccall libwebsockets.NCONF_get_section_names(conf::Ptr{CONF})::Ptr{stack_st_OPENSSL_CSTRING}
end

function NCONF_get_section(conf, section)
    @ccall libwebsockets.NCONF_get_section(conf::Ptr{CONF}, section::Ptr{Cchar})::Ptr{stack_st_CONF_VALUE}
end

function NCONF_get_string(conf, group, name)
    @ccall libwebsockets.NCONF_get_string(conf::Ptr{CONF}, group::Ptr{Cchar}, name::Ptr{Cchar})::Ptr{Cchar}
end

function NCONF_dump_fp(conf, out)
    @ccall libwebsockets.NCONF_dump_fp(conf::Ptr{CONF}, out::Ptr{Libc.FILE})::Cint
end

function NCONF_dump_bio(conf, out)
    @ccall libwebsockets.NCONF_dump_bio(conf::Ptr{CONF}, out::Ptr{BIO})::Cint
end

function CONF_modules_load(cnf, appname, flags)
    @ccall libwebsockets.CONF_modules_load(cnf::Ptr{CONF}, appname::Ptr{Cchar}, flags::Culong)::Cint
end

function CONF_modules_load_file_ex(libctx, filename, appname, flags)
    @ccall libwebsockets.CONF_modules_load_file_ex(libctx::Ptr{OSSL_LIB_CTX}, filename::Ptr{Cchar}, appname::Ptr{Cchar}, flags::Culong)::Cint
end

function CONF_modules_load_file(filename, appname, flags)
    @ccall libwebsockets.CONF_modules_load_file(filename::Ptr{Cchar}, appname::Ptr{Cchar}, flags::Culong)::Cint
end

function CONF_modules_unload(all)
    @ccall libwebsockets.CONF_modules_unload(all::Cint)::Cvoid
end

function CONF_modules_finish()
    @ccall libwebsockets.CONF_modules_finish()::Cvoid
end

function CONF_module_add(name, ifunc, ffunc)
    @ccall libwebsockets.CONF_module_add(name::Ptr{Cchar}, ifunc::Ptr{conf_init_func}, ffunc::Ptr{conf_finish_func})::Cint
end

function CONF_imodule_get_name(md)
    @ccall libwebsockets.CONF_imodule_get_name(md::Ptr{CONF_IMODULE})::Ptr{Cchar}
end

function CONF_imodule_get_value(md)
    @ccall libwebsockets.CONF_imodule_get_value(md::Ptr{CONF_IMODULE})::Ptr{Cchar}
end

function CONF_imodule_get_usr_data(md)
    @ccall libwebsockets.CONF_imodule_get_usr_data(md::Ptr{CONF_IMODULE})::Ptr{Cvoid}
end

function CONF_imodule_set_usr_data(md, usr_data)
    @ccall libwebsockets.CONF_imodule_set_usr_data(md::Ptr{CONF_IMODULE}, usr_data::Ptr{Cvoid})::Cvoid
end

function CONF_imodule_get_module(md)
    @ccall libwebsockets.CONF_imodule_get_module(md::Ptr{CONF_IMODULE})::Ptr{CONF_MODULE}
end

function CONF_imodule_get_flags(md)
    @ccall libwebsockets.CONF_imodule_get_flags(md::Ptr{CONF_IMODULE})::Culong
end

function CONF_imodule_set_flags(md, flags)
    @ccall libwebsockets.CONF_imodule_set_flags(md::Ptr{CONF_IMODULE}, flags::Culong)::Cvoid
end

function CONF_module_get_usr_data(pmod)
    @ccall libwebsockets.CONF_module_get_usr_data(pmod::Ptr{CONF_MODULE})::Ptr{Cvoid}
end

function CONF_module_set_usr_data(pmod, usr_data)
    @ccall libwebsockets.CONF_module_set_usr_data(pmod::Ptr{CONF_MODULE}, usr_data::Ptr{Cvoid})::Cvoid
end

function CONF_get1_default_config_file()
    @ccall libwebsockets.CONF_get1_default_config_file()::Ptr{Cchar}
end

function CONF_parse_list(list, sep, nospc, list_cb, arg)
    @ccall libwebsockets.CONF_parse_list(list::Ptr{Cchar}, sep::Cint, nospc::Cint, list_cb::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cint
end

function OPENSSL_load_builtin_modules()
    @ccall libwebsockets.OPENSSL_load_builtin_modules()::Cvoid
end

function OSSL_HTTP_REQ_CTX_new(wbio, rbio, buf_size)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_new(wbio::Ptr{BIO}, rbio::Ptr{BIO}, buf_size::Cint)::Ptr{OSSL_HTTP_REQ_CTX}
end

function OSSL_HTTP_REQ_CTX_free(rctx)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_free(rctx::Ptr{OSSL_HTTP_REQ_CTX})::Cvoid
end

function OSSL_HTTP_REQ_CTX_set_request_line(rctx, method_POST, server, port, path)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_set_request_line(rctx::Ptr{OSSL_HTTP_REQ_CTX}, method_POST::Cint, server::Ptr{Cchar}, port::Ptr{Cchar}, path::Ptr{Cchar})::Cint
end

function OSSL_HTTP_REQ_CTX_add1_header(rctx, name, value)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_add1_header(rctx::Ptr{OSSL_HTTP_REQ_CTX}, name::Ptr{Cchar}, value::Ptr{Cchar})::Cint
end

function OSSL_HTTP_REQ_CTX_set_expected(rctx, content_type, asn1, timeout, keep_alive)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_set_expected(rctx::Ptr{OSSL_HTTP_REQ_CTX}, content_type::Ptr{Cchar}, asn1::Cint, timeout::Cint, keep_alive::Cint)::Cint
end

function OSSL_HTTP_REQ_CTX_set1_req(rctx, content_type, it, req)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_set1_req(rctx::Ptr{OSSL_HTTP_REQ_CTX}, content_type::Ptr{Cchar}, it::Ptr{ASN1_ITEM}, req::Ptr{ASN1_VALUE})::Cint
end

function OSSL_HTTP_REQ_CTX_nbio(rctx)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_nbio(rctx::Ptr{OSSL_HTTP_REQ_CTX})::Cint
end

function OSSL_HTTP_REQ_CTX_exchange(rctx)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_exchange(rctx::Ptr{OSSL_HTTP_REQ_CTX})::Ptr{BIO}
end

function OSSL_HTTP_REQ_CTX_get0_mem_bio(rctx)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_get0_mem_bio(rctx::Ptr{OSSL_HTTP_REQ_CTX})::Ptr{BIO}
end

function OSSL_HTTP_REQ_CTX_get_resp_len(rctx)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_get_resp_len(rctx::Ptr{OSSL_HTTP_REQ_CTX})::Csize_t
end

function OSSL_HTTP_REQ_CTX_set_max_response_length(rctx, len)
    @ccall libwebsockets.OSSL_HTTP_REQ_CTX_set_max_response_length(rctx::Ptr{OSSL_HTTP_REQ_CTX}, len::Culong)::Cvoid
end

function OSSL_HTTP_is_alive(rctx)
    @ccall libwebsockets.OSSL_HTTP_is_alive(rctx::Ptr{OSSL_HTTP_REQ_CTX})::Cint
end

# typedef BIO * ( * OSSL_HTTP_bio_cb_t ) ( BIO * bio , void * arg , int connect , int detail )
const OSSL_HTTP_bio_cb_t = Ptr{Cvoid}

function OSSL_HTTP_open(server, port, proxy, no_proxy, use_ssl, bio, rbio, bio_update_fn, arg, buf_size, overall_timeout)
    @ccall libwebsockets.OSSL_HTTP_open(server::Ptr{Cchar}, port::Ptr{Cchar}, proxy::Ptr{Cchar}, no_proxy::Ptr{Cchar}, use_ssl::Cint, bio::Ptr{BIO}, rbio::Ptr{BIO}, bio_update_fn::OSSL_HTTP_bio_cb_t, arg::Ptr{Cvoid}, buf_size::Cint, overall_timeout::Cint)::Ptr{OSSL_HTTP_REQ_CTX}
end

function OSSL_HTTP_proxy_connect(bio, server, port, proxyuser, proxypass, timeout, bio_err, prog)
    @ccall libwebsockets.OSSL_HTTP_proxy_connect(bio::Ptr{BIO}, server::Ptr{Cchar}, port::Ptr{Cchar}, proxyuser::Ptr{Cchar}, proxypass::Ptr{Cchar}, timeout::Cint, bio_err::Ptr{BIO}, prog::Ptr{Cchar})::Cint
end

function OSSL_HTTP_set1_request(rctx, path, headers, content_type, req, expected_content_type, expect_asn1, max_resp_len, timeout, keep_alive)
    @ccall libwebsockets.OSSL_HTTP_set1_request(rctx::Ptr{OSSL_HTTP_REQ_CTX}, path::Ptr{Cchar}, headers::Ptr{stack_st_CONF_VALUE}, content_type::Ptr{Cchar}, req::Ptr{BIO}, expected_content_type::Ptr{Cchar}, expect_asn1::Cint, max_resp_len::Csize_t, timeout::Cint, keep_alive::Cint)::Cint
end

function OSSL_HTTP_exchange(rctx, redirection_url)
    @ccall libwebsockets.OSSL_HTTP_exchange(rctx::Ptr{OSSL_HTTP_REQ_CTX}, redirection_url::Ptr{Ptr{Cchar}})::Ptr{BIO}
end

function OSSL_HTTP_get(url, proxy, no_proxy, bio, rbio, bio_update_fn, arg, buf_size, headers, expected_content_type, expect_asn1, max_resp_len, timeout)
    @ccall libwebsockets.OSSL_HTTP_get(url::Ptr{Cchar}, proxy::Ptr{Cchar}, no_proxy::Ptr{Cchar}, bio::Ptr{BIO}, rbio::Ptr{BIO}, bio_update_fn::OSSL_HTTP_bio_cb_t, arg::Ptr{Cvoid}, buf_size::Cint, headers::Ptr{stack_st_CONF_VALUE}, expected_content_type::Ptr{Cchar}, expect_asn1::Cint, max_resp_len::Csize_t, timeout::Cint)::Ptr{BIO}
end

function OSSL_HTTP_transfer(prctx, server, port, path, use_ssl, proxy, no_proxy, bio, rbio, bio_update_fn, arg, buf_size, headers, content_type, req, expected_content_type, expect_asn1, max_resp_len, timeout, keep_alive)
    @ccall libwebsockets.OSSL_HTTP_transfer(prctx::Ptr{Ptr{OSSL_HTTP_REQ_CTX}}, server::Ptr{Cchar}, port::Ptr{Cchar}, path::Ptr{Cchar}, use_ssl::Cint, proxy::Ptr{Cchar}, no_proxy::Ptr{Cchar}, bio::Ptr{BIO}, rbio::Ptr{BIO}, bio_update_fn::OSSL_HTTP_bio_cb_t, arg::Ptr{Cvoid}, buf_size::Cint, headers::Ptr{stack_st_CONF_VALUE}, content_type::Ptr{Cchar}, req::Ptr{BIO}, expected_content_type::Ptr{Cchar}, expect_asn1::Cint, max_resp_len::Csize_t, timeout::Cint, keep_alive::Cint)::Ptr{BIO}
end

function OSSL_HTTP_close(rctx, ok)
    @ccall libwebsockets.OSSL_HTTP_close(rctx::Ptr{OSSL_HTTP_REQ_CTX}, ok::Cint)::Cint
end

function OSSL_parse_url(url, pscheme, puser, phost, pport, pport_num, ppath, pquery, pfrag)
    @ccall libwebsockets.OSSL_parse_url(url::Ptr{Cchar}, pscheme::Ptr{Ptr{Cchar}}, puser::Ptr{Ptr{Cchar}}, phost::Ptr{Ptr{Cchar}}, pport::Ptr{Ptr{Cchar}}, pport_num::Ptr{Cint}, ppath::Ptr{Ptr{Cchar}}, pquery::Ptr{Ptr{Cchar}}, pfrag::Ptr{Ptr{Cchar}})::Cint
end

function OSSL_HTTP_parse_url(url, pssl, puser, phost, pport, pport_num, ppath, pquery, pfrag)
    @ccall libwebsockets.OSSL_HTTP_parse_url(url::Ptr{Cchar}, pssl::Ptr{Cint}, puser::Ptr{Ptr{Cchar}}, phost::Ptr{Ptr{Cchar}}, pport::Ptr{Ptr{Cchar}}, pport_num::Ptr{Cint}, ppath::Ptr{Ptr{Cchar}}, pquery::Ptr{Ptr{Cchar}}, pfrag::Ptr{Ptr{Cchar}})::Cint
end

function OSSL_HTTP_adapt_proxy(proxy, no_proxy, server, use_ssl)
    @ccall libwebsockets.OSSL_HTTP_adapt_proxy(proxy::Ptr{Cchar}, no_proxy::Ptr{Cchar}, server::Ptr{Cchar}, use_ssl::Cint)::Ptr{Cchar}
end

function d2i_X509_fp(fp, x509)
    @ccall libwebsockets.d2i_X509_fp(fp::Ptr{Libc.FILE}, x509::Ptr{Ptr{X509}})::Ptr{X509}
end

function i2d_X509_fp(fp, x509)
    @ccall libwebsockets.i2d_X509_fp(fp::Ptr{Libc.FILE}, x509::Ptr{X509})::Cint
end

function d2i_X509_CRL_fp(fp, crl)
    @ccall libwebsockets.d2i_X509_CRL_fp(fp::Ptr{Libc.FILE}, crl::Ptr{Ptr{X509_CRL}})::Ptr{X509_CRL}
end

function i2d_X509_CRL_fp(fp, crl)
    @ccall libwebsockets.i2d_X509_CRL_fp(fp::Ptr{Libc.FILE}, crl::Ptr{X509_CRL})::Cint
end

function d2i_X509_REQ_fp(fp, req)
    @ccall libwebsockets.d2i_X509_REQ_fp(fp::Ptr{Libc.FILE}, req::Ptr{Ptr{X509_REQ}})::Ptr{X509_REQ}
end

function i2d_X509_REQ_fp(fp, req)
    @ccall libwebsockets.i2d_X509_REQ_fp(fp::Ptr{Libc.FILE}, req::Ptr{X509_REQ})::Cint
end

function d2i_RSAPrivateKey_fp(fp, rsa)
    @ccall libwebsockets.d2i_RSAPrivateKey_fp(fp::Ptr{Libc.FILE}, rsa::Ptr{Ptr{RSA}})::Ptr{RSA}
end

function i2d_RSAPrivateKey_fp(fp, rsa)
    @ccall libwebsockets.i2d_RSAPrivateKey_fp(fp::Ptr{Libc.FILE}, rsa::Ptr{RSA})::Cint
end

function d2i_RSAPublicKey_fp(fp, rsa)
    @ccall libwebsockets.d2i_RSAPublicKey_fp(fp::Ptr{Libc.FILE}, rsa::Ptr{Ptr{RSA}})::Ptr{RSA}
end

function i2d_RSAPublicKey_fp(fp, rsa)
    @ccall libwebsockets.i2d_RSAPublicKey_fp(fp::Ptr{Libc.FILE}, rsa::Ptr{RSA})::Cint
end

function d2i_RSA_PUBKEY_fp(fp, rsa)
    @ccall libwebsockets.d2i_RSA_PUBKEY_fp(fp::Ptr{Libc.FILE}, rsa::Ptr{Ptr{RSA}})::Ptr{RSA}
end

function i2d_RSA_PUBKEY_fp(fp, rsa)
    @ccall libwebsockets.i2d_RSA_PUBKEY_fp(fp::Ptr{Libc.FILE}, rsa::Ptr{RSA})::Cint
end

function d2i_DSA_PUBKEY_fp(fp, dsa)
    @ccall libwebsockets.d2i_DSA_PUBKEY_fp(fp::Ptr{Libc.FILE}, dsa::Ptr{Ptr{DSA}})::Ptr{DSA}
end

function i2d_DSA_PUBKEY_fp(fp, dsa)
    @ccall libwebsockets.i2d_DSA_PUBKEY_fp(fp::Ptr{Libc.FILE}, dsa::Ptr{DSA})::Cint
end

function d2i_DSAPrivateKey_fp(fp, dsa)
    @ccall libwebsockets.d2i_DSAPrivateKey_fp(fp::Ptr{Libc.FILE}, dsa::Ptr{Ptr{DSA}})::Ptr{DSA}
end

function i2d_DSAPrivateKey_fp(fp, dsa)
    @ccall libwebsockets.i2d_DSAPrivateKey_fp(fp::Ptr{Libc.FILE}, dsa::Ptr{DSA})::Cint
end

function d2i_EC_PUBKEY_fp(fp, eckey)
    @ccall libwebsockets.d2i_EC_PUBKEY_fp(fp::Ptr{Libc.FILE}, eckey::Ptr{Ptr{EC_KEY}})::Ptr{EC_KEY}
end

function i2d_EC_PUBKEY_fp(fp, eckey)
    @ccall libwebsockets.i2d_EC_PUBKEY_fp(fp::Ptr{Libc.FILE}, eckey::Ptr{EC_KEY})::Cint
end

function d2i_ECPrivateKey_fp(fp, eckey)
    @ccall libwebsockets.d2i_ECPrivateKey_fp(fp::Ptr{Libc.FILE}, eckey::Ptr{Ptr{EC_KEY}})::Ptr{EC_KEY}
end

function i2d_ECPrivateKey_fp(fp, eckey)
    @ccall libwebsockets.i2d_ECPrivateKey_fp(fp::Ptr{Libc.FILE}, eckey::Ptr{EC_KEY})::Cint
end

function d2i_PKCS8_fp(fp, p8)
    @ccall libwebsockets.d2i_PKCS8_fp(fp::Ptr{Libc.FILE}, p8::Ptr{Ptr{X509_SIG}})::Ptr{X509_SIG}
end

function i2d_PKCS8_fp(fp, p8)
    @ccall libwebsockets.i2d_PKCS8_fp(fp::Ptr{Libc.FILE}, p8::Ptr{X509_SIG})::Cint
end

function d2i_X509_PUBKEY_fp(fp, xpk)
    @ccall libwebsockets.d2i_X509_PUBKEY_fp(fp::Ptr{Libc.FILE}, xpk::Ptr{Ptr{X509_PUBKEY}})::Ptr{X509_PUBKEY}
end

function i2d_X509_PUBKEY_fp(fp, xpk)
    @ccall libwebsockets.i2d_X509_PUBKEY_fp(fp::Ptr{Libc.FILE}, xpk::Ptr{X509_PUBKEY})::Cint
end

function d2i_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf)
    @ccall libwebsockets.d2i_PKCS8_PRIV_KEY_INFO_fp(fp::Ptr{Libc.FILE}, p8inf::Ptr{Ptr{PKCS8_PRIV_KEY_INFO}})::Ptr{PKCS8_PRIV_KEY_INFO}
end

function i2d_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf)
    @ccall libwebsockets.i2d_PKCS8_PRIV_KEY_INFO_fp(fp::Ptr{Libc.FILE}, p8inf::Ptr{PKCS8_PRIV_KEY_INFO})::Cint
end

function i2d_PKCS8PrivateKeyInfo_fp(fp, key)
    @ccall libwebsockets.i2d_PKCS8PrivateKeyInfo_fp(fp::Ptr{Libc.FILE}, key::Ptr{EVP_PKEY})::Cint
end

function i2d_PrivateKey_fp(fp, pkey)
    @ccall libwebsockets.i2d_PrivateKey_fp(fp::Ptr{Libc.FILE}, pkey::Ptr{EVP_PKEY})::Cint
end

function d2i_PrivateKey_ex_fp(fp, a, libctx, propq)
    @ccall libwebsockets.d2i_PrivateKey_ex_fp(fp::Ptr{Libc.FILE}, a::Ptr{Ptr{EVP_PKEY}}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function d2i_PrivateKey_fp(fp, a)
    @ccall libwebsockets.d2i_PrivateKey_fp(fp::Ptr{Libc.FILE}, a::Ptr{Ptr{EVP_PKEY}})::Ptr{EVP_PKEY}
end

function i2d_PUBKEY_fp(fp, pkey)
    @ccall libwebsockets.i2d_PUBKEY_fp(fp::Ptr{Libc.FILE}, pkey::Ptr{EVP_PKEY})::Cint
end

function d2i_PUBKEY_fp(fp, a)
    @ccall libwebsockets.d2i_PUBKEY_fp(fp::Ptr{Libc.FILE}, a::Ptr{Ptr{EVP_PKEY}})::Ptr{EVP_PKEY}
end

function d2i_X509_bio(bp, x509)
    @ccall libwebsockets.d2i_X509_bio(bp::Ptr{BIO}, x509::Ptr{Ptr{X509}})::Ptr{X509}
end

function i2d_X509_bio(bp, x509)
    @ccall libwebsockets.i2d_X509_bio(bp::Ptr{BIO}, x509::Ptr{X509})::Cint
end

function d2i_X509_CRL_bio(bp, crl)
    @ccall libwebsockets.d2i_X509_CRL_bio(bp::Ptr{BIO}, crl::Ptr{Ptr{X509_CRL}})::Ptr{X509_CRL}
end

function i2d_X509_CRL_bio(bp, crl)
    @ccall libwebsockets.i2d_X509_CRL_bio(bp::Ptr{BIO}, crl::Ptr{X509_CRL})::Cint
end

function d2i_X509_REQ_bio(bp, req)
    @ccall libwebsockets.d2i_X509_REQ_bio(bp::Ptr{BIO}, req::Ptr{Ptr{X509_REQ}})::Ptr{X509_REQ}
end

function i2d_X509_REQ_bio(bp, req)
    @ccall libwebsockets.i2d_X509_REQ_bio(bp::Ptr{BIO}, req::Ptr{X509_REQ})::Cint
end

function d2i_RSAPrivateKey_bio(bp, rsa)
    @ccall libwebsockets.d2i_RSAPrivateKey_bio(bp::Ptr{BIO}, rsa::Ptr{Ptr{RSA}})::Ptr{RSA}
end

function i2d_RSAPrivateKey_bio(bp, rsa)
    @ccall libwebsockets.i2d_RSAPrivateKey_bio(bp::Ptr{BIO}, rsa::Ptr{RSA})::Cint
end

function d2i_RSAPublicKey_bio(bp, rsa)
    @ccall libwebsockets.d2i_RSAPublicKey_bio(bp::Ptr{BIO}, rsa::Ptr{Ptr{RSA}})::Ptr{RSA}
end

function i2d_RSAPublicKey_bio(bp, rsa)
    @ccall libwebsockets.i2d_RSAPublicKey_bio(bp::Ptr{BIO}, rsa::Ptr{RSA})::Cint
end

function d2i_RSA_PUBKEY_bio(bp, rsa)
    @ccall libwebsockets.d2i_RSA_PUBKEY_bio(bp::Ptr{BIO}, rsa::Ptr{Ptr{RSA}})::Ptr{RSA}
end

function i2d_RSA_PUBKEY_bio(bp, rsa)
    @ccall libwebsockets.i2d_RSA_PUBKEY_bio(bp::Ptr{BIO}, rsa::Ptr{RSA})::Cint
end

function d2i_DSA_PUBKEY_bio(bp, dsa)
    @ccall libwebsockets.d2i_DSA_PUBKEY_bio(bp::Ptr{BIO}, dsa::Ptr{Ptr{DSA}})::Ptr{DSA}
end

function i2d_DSA_PUBKEY_bio(bp, dsa)
    @ccall libwebsockets.i2d_DSA_PUBKEY_bio(bp::Ptr{BIO}, dsa::Ptr{DSA})::Cint
end

function d2i_DSAPrivateKey_bio(bp, dsa)
    @ccall libwebsockets.d2i_DSAPrivateKey_bio(bp::Ptr{BIO}, dsa::Ptr{Ptr{DSA}})::Ptr{DSA}
end

function i2d_DSAPrivateKey_bio(bp, dsa)
    @ccall libwebsockets.i2d_DSAPrivateKey_bio(bp::Ptr{BIO}, dsa::Ptr{DSA})::Cint
end

function d2i_EC_PUBKEY_bio(bp, eckey)
    @ccall libwebsockets.d2i_EC_PUBKEY_bio(bp::Ptr{BIO}, eckey::Ptr{Ptr{EC_KEY}})::Ptr{EC_KEY}
end

function i2d_EC_PUBKEY_bio(bp, eckey)
    @ccall libwebsockets.i2d_EC_PUBKEY_bio(bp::Ptr{BIO}, eckey::Ptr{EC_KEY})::Cint
end

function d2i_ECPrivateKey_bio(bp, eckey)
    @ccall libwebsockets.d2i_ECPrivateKey_bio(bp::Ptr{BIO}, eckey::Ptr{Ptr{EC_KEY}})::Ptr{EC_KEY}
end

function i2d_ECPrivateKey_bio(bp, eckey)
    @ccall libwebsockets.i2d_ECPrivateKey_bio(bp::Ptr{BIO}, eckey::Ptr{EC_KEY})::Cint
end

function d2i_PKCS8_bio(bp, p8)
    @ccall libwebsockets.d2i_PKCS8_bio(bp::Ptr{BIO}, p8::Ptr{Ptr{X509_SIG}})::Ptr{X509_SIG}
end

function i2d_PKCS8_bio(bp, p8)
    @ccall libwebsockets.i2d_PKCS8_bio(bp::Ptr{BIO}, p8::Ptr{X509_SIG})::Cint
end

function d2i_X509_PUBKEY_bio(bp, xpk)
    @ccall libwebsockets.d2i_X509_PUBKEY_bio(bp::Ptr{BIO}, xpk::Ptr{Ptr{X509_PUBKEY}})::Ptr{X509_PUBKEY}
end

function i2d_X509_PUBKEY_bio(bp, xpk)
    @ccall libwebsockets.i2d_X509_PUBKEY_bio(bp::Ptr{BIO}, xpk::Ptr{X509_PUBKEY})::Cint
end

function d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf)
    @ccall libwebsockets.d2i_PKCS8_PRIV_KEY_INFO_bio(bp::Ptr{BIO}, p8inf::Ptr{Ptr{PKCS8_PRIV_KEY_INFO}})::Ptr{PKCS8_PRIV_KEY_INFO}
end

function i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf)
    @ccall libwebsockets.i2d_PKCS8_PRIV_KEY_INFO_bio(bp::Ptr{BIO}, p8inf::Ptr{PKCS8_PRIV_KEY_INFO})::Cint
end

function i2d_PKCS8PrivateKeyInfo_bio(bp, key)
    @ccall libwebsockets.i2d_PKCS8PrivateKeyInfo_bio(bp::Ptr{BIO}, key::Ptr{EVP_PKEY})::Cint
end

function i2d_PrivateKey_bio(bp, pkey)
    @ccall libwebsockets.i2d_PrivateKey_bio(bp::Ptr{BIO}, pkey::Ptr{EVP_PKEY})::Cint
end

function d2i_PrivateKey_ex_bio(bp, a, libctx, propq)
    @ccall libwebsockets.d2i_PrivateKey_ex_bio(bp::Ptr{BIO}, a::Ptr{Ptr{EVP_PKEY}}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function d2i_PrivateKey_bio(bp, a)
    @ccall libwebsockets.d2i_PrivateKey_bio(bp::Ptr{BIO}, a::Ptr{Ptr{EVP_PKEY}})::Ptr{EVP_PKEY}
end

function i2d_PUBKEY_bio(bp, pkey)
    @ccall libwebsockets.i2d_PUBKEY_bio(bp::Ptr{BIO}, pkey::Ptr{EVP_PKEY})::Cint
end

function d2i_PUBKEY_bio(bp, a)
    @ccall libwebsockets.d2i_PUBKEY_bio(bp::Ptr{BIO}, a::Ptr{Ptr{EVP_PKEY}})::Ptr{EVP_PKEY}
end

function X509_dup(a)
    @ccall libwebsockets.X509_dup(a::Ptr{X509})::Ptr{X509}
end

function X509_ALGOR_dup(a)
    @ccall libwebsockets.X509_ALGOR_dup(a::Ptr{X509_ALGOR})::Ptr{X509_ALGOR}
end

function X509_ATTRIBUTE_dup(a)
    @ccall libwebsockets.X509_ATTRIBUTE_dup(a::Ptr{X509_ATTRIBUTE})::Ptr{X509_ATTRIBUTE}
end

function X509_CRL_dup(a)
    @ccall libwebsockets.X509_CRL_dup(a::Ptr{X509_CRL})::Ptr{X509_CRL}
end

function X509_EXTENSION_dup(a)
    @ccall libwebsockets.X509_EXTENSION_dup(a::Ptr{X509_EXTENSION})::Ptr{X509_EXTENSION}
end

function X509_PUBKEY_dup(a)
    @ccall libwebsockets.X509_PUBKEY_dup(a::Ptr{X509_PUBKEY})::Ptr{X509_PUBKEY}
end

function X509_REQ_dup(a)
    @ccall libwebsockets.X509_REQ_dup(a::Ptr{X509_REQ})::Ptr{X509_REQ}
end

function X509_REVOKED_dup(a)
    @ccall libwebsockets.X509_REVOKED_dup(a::Ptr{X509_REVOKED})::Ptr{X509_REVOKED}
end

function X509_ALGOR_set0(alg, aobj, ptype, pval)
    @ccall libwebsockets.X509_ALGOR_set0(alg::Ptr{X509_ALGOR}, aobj::Ptr{ASN1_OBJECT}, ptype::Cint, pval::Ptr{Cvoid})::Cint
end

function X509_ALGOR_get0(paobj, pptype, ppval, algor)
    @ccall libwebsockets.X509_ALGOR_get0(paobj::Ptr{Ptr{ASN1_OBJECT}}, pptype::Ptr{Cint}, ppval::Ptr{Ptr{Cvoid}}, algor::Ptr{X509_ALGOR})::Cvoid
end

function X509_ALGOR_set_md(alg, md)
    @ccall libwebsockets.X509_ALGOR_set_md(alg::Ptr{X509_ALGOR}, md::Ptr{EVP_MD})::Cvoid
end

function X509_ALGOR_cmp(a, b)
    @ccall libwebsockets.X509_ALGOR_cmp(a::Ptr{X509_ALGOR}, b::Ptr{X509_ALGOR})::Cint
end

function X509_ALGOR_copy(dest, src)
    @ccall libwebsockets.X509_ALGOR_copy(dest::Ptr{X509_ALGOR}, src::Ptr{X509_ALGOR})::Cint
end

function X509_NAME_dup(a)
    @ccall libwebsockets.X509_NAME_dup(a::Ptr{X509_NAME})::Ptr{X509_NAME}
end

function X509_NAME_ENTRY_dup(a)
    @ccall libwebsockets.X509_NAME_ENTRY_dup(a::Ptr{X509_NAME_ENTRY})::Ptr{X509_NAME_ENTRY}
end

function X509_cmp_time(s, t)
    @ccall libwebsockets.X509_cmp_time(s::Ptr{ASN1_TIME}, t::Ptr{time_t})::Cint
end

function X509_cmp_current_time(s)
    @ccall libwebsockets.X509_cmp_current_time(s::Ptr{ASN1_TIME})::Cint
end

function X509_cmp_timeframe(vpm, start, _end)
    @ccall libwebsockets.X509_cmp_timeframe(vpm::Ptr{X509_VERIFY_PARAM}, start::Ptr{ASN1_TIME}, _end::Ptr{ASN1_TIME})::Cint
end

function X509_time_adj(s, adj, t)
    @ccall libwebsockets.X509_time_adj(s::Ptr{ASN1_TIME}, adj::Clong, t::Ptr{time_t})::Ptr{ASN1_TIME}
end

function X509_time_adj_ex(s, offset_day, offset_sec, t)
    @ccall libwebsockets.X509_time_adj_ex(s::Ptr{ASN1_TIME}, offset_day::Cint, offset_sec::Clong, t::Ptr{time_t})::Ptr{ASN1_TIME}
end

function X509_gmtime_adj(s, adj)
    @ccall libwebsockets.X509_gmtime_adj(s::Ptr{ASN1_TIME}, adj::Clong)::Ptr{ASN1_TIME}
end

function X509_get_default_cert_area()
    @ccall libwebsockets.X509_get_default_cert_area()::Ptr{Cchar}
end

function X509_get_default_cert_dir()
    @ccall libwebsockets.X509_get_default_cert_dir()::Ptr{Cchar}
end

function X509_get_default_cert_file()
    @ccall libwebsockets.X509_get_default_cert_file()::Ptr{Cchar}
end

function X509_get_default_cert_dir_env()
    @ccall libwebsockets.X509_get_default_cert_dir_env()::Ptr{Cchar}
end

function X509_get_default_cert_file_env()
    @ccall libwebsockets.X509_get_default_cert_file_env()::Ptr{Cchar}
end

function X509_get_default_private_dir()
    @ccall libwebsockets.X509_get_default_private_dir()::Ptr{Cchar}
end

function X509_to_X509_REQ(x, pkey, md)
    @ccall libwebsockets.X509_to_X509_REQ(x::Ptr{X509}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD})::Ptr{X509_REQ}
end

function X509_REQ_to_X509(r, days, pkey)
    @ccall libwebsockets.X509_REQ_to_X509(r::Ptr{X509_REQ}, days::Cint, pkey::Ptr{EVP_PKEY})::Ptr{X509}
end

function X509_ALGOR_new()
    @ccall libwebsockets.X509_ALGOR_new()::Ptr{X509_ALGOR}
end

function X509_ALGOR_free(a)
    @ccall libwebsockets.X509_ALGOR_free(a::Ptr{X509_ALGOR})::Cvoid
end

function d2i_X509_ALGOR(a, in, len)
    @ccall libwebsockets.d2i_X509_ALGOR(a::Ptr{Ptr{X509_ALGOR}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_ALGOR}
end

function i2d_X509_ALGOR(a, out)
    @ccall libwebsockets.i2d_X509_ALGOR(a::Ptr{X509_ALGOR}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_ALGOR_it()
    @ccall libwebsockets.X509_ALGOR_it()::Ptr{ASN1_ITEM}
end

function d2i_X509_ALGORS(a, in, len)
    @ccall libwebsockets.d2i_X509_ALGORS(a::Ptr{Ptr{X509_ALGORS}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_ALGORS}
end

function i2d_X509_ALGORS(a, out)
    @ccall libwebsockets.i2d_X509_ALGORS(a::Ptr{X509_ALGORS}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_ALGORS_it()
    @ccall libwebsockets.X509_ALGORS_it()::Ptr{ASN1_ITEM}
end

function X509_VAL_new()
    @ccall libwebsockets.X509_VAL_new()::Ptr{X509_VAL}
end

function X509_VAL_free(a)
    @ccall libwebsockets.X509_VAL_free(a::Ptr{X509_VAL})::Cvoid
end

function d2i_X509_VAL(a, in, len)
    @ccall libwebsockets.d2i_X509_VAL(a::Ptr{Ptr{X509_VAL}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_VAL}
end

function i2d_X509_VAL(a, out)
    @ccall libwebsockets.i2d_X509_VAL(a::Ptr{X509_VAL}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_VAL_it()
    @ccall libwebsockets.X509_VAL_it()::Ptr{ASN1_ITEM}
end

function X509_PUBKEY_new()
    @ccall libwebsockets.X509_PUBKEY_new()::Ptr{X509_PUBKEY}
end

function X509_PUBKEY_free(a)
    @ccall libwebsockets.X509_PUBKEY_free(a::Ptr{X509_PUBKEY})::Cvoid
end

function d2i_X509_PUBKEY(a, in, len)
    @ccall libwebsockets.d2i_X509_PUBKEY(a::Ptr{Ptr{X509_PUBKEY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_PUBKEY}
end

function i2d_X509_PUBKEY(a, out)
    @ccall libwebsockets.i2d_X509_PUBKEY(a::Ptr{X509_PUBKEY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_PUBKEY_it()
    @ccall libwebsockets.X509_PUBKEY_it()::Ptr{ASN1_ITEM}
end

function X509_PUBKEY_new_ex(libctx, propq)
    @ccall libwebsockets.X509_PUBKEY_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{X509_PUBKEY}
end

function X509_PUBKEY_set(x, pkey)
    @ccall libwebsockets.X509_PUBKEY_set(x::Ptr{Ptr{X509_PUBKEY}}, pkey::Ptr{EVP_PKEY})::Cint
end

function X509_PUBKEY_get0(key)
    @ccall libwebsockets.X509_PUBKEY_get0(key::Ptr{X509_PUBKEY})::Ptr{EVP_PKEY}
end

function X509_PUBKEY_get(key)
    @ccall libwebsockets.X509_PUBKEY_get(key::Ptr{X509_PUBKEY})::Ptr{EVP_PKEY}
end

function X509_get_pubkey_parameters(pkey, chain)
    @ccall libwebsockets.X509_get_pubkey_parameters(pkey::Ptr{EVP_PKEY}, chain::Ptr{stack_st_X509})::Cint
end

function X509_get_pathlen(x)
    @ccall libwebsockets.X509_get_pathlen(x::Ptr{X509})::Clong
end

function d2i_PUBKEY(a, in, len)
    @ccall libwebsockets.d2i_PUBKEY(a::Ptr{Ptr{EVP_PKEY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{EVP_PKEY}
end

function i2d_PUBKEY(a, out)
    @ccall libwebsockets.i2d_PUBKEY(a::Ptr{EVP_PKEY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_PUBKEY_ex(a, pp, length, libctx, propq)
    @ccall libwebsockets.d2i_PUBKEY_ex(a::Ptr{Ptr{EVP_PKEY}}, pp::Ptr{Ptr{Cuchar}}, length::Clong, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function d2i_RSA_PUBKEY(a, in, len)
    @ccall libwebsockets.d2i_RSA_PUBKEY(a::Ptr{Ptr{RSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{RSA}
end

function i2d_RSA_PUBKEY(a, out)
    @ccall libwebsockets.i2d_RSA_PUBKEY(a::Ptr{RSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_DSA_PUBKEY(a, in, len)
    @ccall libwebsockets.d2i_DSA_PUBKEY(a::Ptr{Ptr{DSA}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{DSA}
end

function i2d_DSA_PUBKEY(a, out)
    @ccall libwebsockets.i2d_DSA_PUBKEY(a::Ptr{DSA}, out::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_EC_PUBKEY(a, in, len)
    @ccall libwebsockets.d2i_EC_PUBKEY(a::Ptr{Ptr{EC_KEY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{EC_KEY}
end

function i2d_EC_PUBKEY(a, out)
    @ccall libwebsockets.i2d_EC_PUBKEY(a::Ptr{EC_KEY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_SIG_new()
    @ccall libwebsockets.X509_SIG_new()::Ptr{X509_SIG}
end

function X509_SIG_free(a)
    @ccall libwebsockets.X509_SIG_free(a::Ptr{X509_SIG})::Cvoid
end

function d2i_X509_SIG(a, in, len)
    @ccall libwebsockets.d2i_X509_SIG(a::Ptr{Ptr{X509_SIG}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_SIG}
end

function i2d_X509_SIG(a, out)
    @ccall libwebsockets.i2d_X509_SIG(a::Ptr{X509_SIG}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_SIG_it()
    @ccall libwebsockets.X509_SIG_it()::Ptr{ASN1_ITEM}
end

function X509_SIG_get0(sig, palg, pdigest)
    @ccall libwebsockets.X509_SIG_get0(sig::Ptr{X509_SIG}, palg::Ptr{Ptr{X509_ALGOR}}, pdigest::Ptr{Ptr{ASN1_OCTET_STRING}})::Cvoid
end

function X509_SIG_getm(sig, palg, pdigest)
    @ccall libwebsockets.X509_SIG_getm(sig::Ptr{X509_SIG}, palg::Ptr{Ptr{X509_ALGOR}}, pdigest::Ptr{Ptr{ASN1_OCTET_STRING}})::Cvoid
end

function X509_REQ_INFO_new()
    @ccall libwebsockets.X509_REQ_INFO_new()::Ptr{X509_REQ_INFO}
end

function X509_REQ_INFO_free(a)
    @ccall libwebsockets.X509_REQ_INFO_free(a::Ptr{X509_REQ_INFO})::Cvoid
end

function d2i_X509_REQ_INFO(a, in, len)
    @ccall libwebsockets.d2i_X509_REQ_INFO(a::Ptr{Ptr{X509_REQ_INFO}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_REQ_INFO}
end

function i2d_X509_REQ_INFO(a, out)
    @ccall libwebsockets.i2d_X509_REQ_INFO(a::Ptr{X509_REQ_INFO}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_REQ_INFO_it()
    @ccall libwebsockets.X509_REQ_INFO_it()::Ptr{ASN1_ITEM}
end

function X509_REQ_new()
    @ccall libwebsockets.X509_REQ_new()::Ptr{X509_REQ}
end

function X509_REQ_free(a)
    @ccall libwebsockets.X509_REQ_free(a::Ptr{X509_REQ})::Cvoid
end

function d2i_X509_REQ(a, in, len)
    @ccall libwebsockets.d2i_X509_REQ(a::Ptr{Ptr{X509_REQ}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_REQ}
end

function i2d_X509_REQ(a, out)
    @ccall libwebsockets.i2d_X509_REQ(a::Ptr{X509_REQ}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_REQ_it()
    @ccall libwebsockets.X509_REQ_it()::Ptr{ASN1_ITEM}
end

function X509_REQ_new_ex(libctx, propq)
    @ccall libwebsockets.X509_REQ_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{X509_REQ}
end

function X509_ATTRIBUTE_new()
    @ccall libwebsockets.X509_ATTRIBUTE_new()::Ptr{X509_ATTRIBUTE}
end

function X509_ATTRIBUTE_free(a)
    @ccall libwebsockets.X509_ATTRIBUTE_free(a::Ptr{X509_ATTRIBUTE})::Cvoid
end

function d2i_X509_ATTRIBUTE(a, in, len)
    @ccall libwebsockets.d2i_X509_ATTRIBUTE(a::Ptr{Ptr{X509_ATTRIBUTE}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_ATTRIBUTE}
end

function i2d_X509_ATTRIBUTE(a, out)
    @ccall libwebsockets.i2d_X509_ATTRIBUTE(a::Ptr{X509_ATTRIBUTE}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_ATTRIBUTE_it()
    @ccall libwebsockets.X509_ATTRIBUTE_it()::Ptr{ASN1_ITEM}
end

function X509_ATTRIBUTE_create(nid, atrtype, value)
    @ccall libwebsockets.X509_ATTRIBUTE_create(nid::Cint, atrtype::Cint, value::Ptr{Cvoid})::Ptr{X509_ATTRIBUTE}
end

function X509_EXTENSION_new()
    @ccall libwebsockets.X509_EXTENSION_new()::Ptr{X509_EXTENSION}
end

function X509_EXTENSION_free(a)
    @ccall libwebsockets.X509_EXTENSION_free(a::Ptr{X509_EXTENSION})::Cvoid
end

function d2i_X509_EXTENSION(a, in, len)
    @ccall libwebsockets.d2i_X509_EXTENSION(a::Ptr{Ptr{X509_EXTENSION}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_EXTENSION}
end

function i2d_X509_EXTENSION(a, out)
    @ccall libwebsockets.i2d_X509_EXTENSION(a::Ptr{X509_EXTENSION}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_EXTENSION_it()
    @ccall libwebsockets.X509_EXTENSION_it()::Ptr{ASN1_ITEM}
end

function d2i_X509_EXTENSIONS(a, in, len)
    @ccall libwebsockets.d2i_X509_EXTENSIONS(a::Ptr{Ptr{X509_EXTENSIONS}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_EXTENSIONS}
end

function i2d_X509_EXTENSIONS(a, out)
    @ccall libwebsockets.i2d_X509_EXTENSIONS(a::Ptr{X509_EXTENSIONS}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_EXTENSIONS_it()
    @ccall libwebsockets.X509_EXTENSIONS_it()::Ptr{ASN1_ITEM}
end

function X509_NAME_ENTRY_new()
    @ccall libwebsockets.X509_NAME_ENTRY_new()::Ptr{X509_NAME_ENTRY}
end

function X509_NAME_ENTRY_free(a)
    @ccall libwebsockets.X509_NAME_ENTRY_free(a::Ptr{X509_NAME_ENTRY})::Cvoid
end

function d2i_X509_NAME_ENTRY(a, in, len)
    @ccall libwebsockets.d2i_X509_NAME_ENTRY(a::Ptr{Ptr{X509_NAME_ENTRY}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_NAME_ENTRY}
end

function i2d_X509_NAME_ENTRY(a, out)
    @ccall libwebsockets.i2d_X509_NAME_ENTRY(a::Ptr{X509_NAME_ENTRY}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_NAME_ENTRY_it()
    @ccall libwebsockets.X509_NAME_ENTRY_it()::Ptr{ASN1_ITEM}
end

function X509_NAME_new()
    @ccall libwebsockets.X509_NAME_new()::Ptr{X509_NAME}
end

function X509_NAME_free(a)
    @ccall libwebsockets.X509_NAME_free(a::Ptr{X509_NAME})::Cvoid
end

function d2i_X509_NAME(a, in, len)
    @ccall libwebsockets.d2i_X509_NAME(a::Ptr{Ptr{X509_NAME}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_NAME}
end

function i2d_X509_NAME(a, out)
    @ccall libwebsockets.i2d_X509_NAME(a::Ptr{X509_NAME}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_NAME_it()
    @ccall libwebsockets.X509_NAME_it()::Ptr{ASN1_ITEM}
end

function X509_NAME_set(xn, name)
    @ccall libwebsockets.X509_NAME_set(xn::Ptr{Ptr{X509_NAME}}, name::Ptr{X509_NAME})::Cint
end

function X509_CINF_new()
    @ccall libwebsockets.X509_CINF_new()::Ptr{X509_CINF}
end

function X509_CINF_free(a)
    @ccall libwebsockets.X509_CINF_free(a::Ptr{X509_CINF})::Cvoid
end

function d2i_X509_CINF(a, in, len)
    @ccall libwebsockets.d2i_X509_CINF(a::Ptr{Ptr{X509_CINF}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_CINF}
end

function i2d_X509_CINF(a, out)
    @ccall libwebsockets.i2d_X509_CINF(a::Ptr{X509_CINF}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_CINF_it()
    @ccall libwebsockets.X509_CINF_it()::Ptr{ASN1_ITEM}
end

function X509_new()
    @ccall libwebsockets.X509_new()::Ptr{X509}
end

function X509_free(a)
    @ccall libwebsockets.X509_free(a::Ptr{X509})::Cvoid
end

function d2i_X509(a, in, len)
    @ccall libwebsockets.d2i_X509(a::Ptr{Ptr{X509}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509}
end

function i2d_X509(a, out)
    @ccall libwebsockets.i2d_X509(a::Ptr{X509}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_it()
    @ccall libwebsockets.X509_it()::Ptr{ASN1_ITEM}
end

function X509_new_ex(libctx, propq)
    @ccall libwebsockets.X509_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{X509}
end

function X509_CERT_AUX_new()
    @ccall libwebsockets.X509_CERT_AUX_new()::Ptr{X509_CERT_AUX}
end

function X509_CERT_AUX_free(a)
    @ccall libwebsockets.X509_CERT_AUX_free(a::Ptr{X509_CERT_AUX})::Cvoid
end

function d2i_X509_CERT_AUX(a, in, len)
    @ccall libwebsockets.d2i_X509_CERT_AUX(a::Ptr{Ptr{X509_CERT_AUX}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_CERT_AUX}
end

function i2d_X509_CERT_AUX(a, out)
    @ccall libwebsockets.i2d_X509_CERT_AUX(a::Ptr{X509_CERT_AUX}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_CERT_AUX_it()
    @ccall libwebsockets.X509_CERT_AUX_it()::Ptr{ASN1_ITEM}
end

function X509_set_ex_data(r, idx, arg)
    @ccall libwebsockets.X509_set_ex_data(r::Ptr{X509}, idx::Cint, arg::Ptr{Cvoid})::Cint
end

function X509_get_ex_data(r, idx)
    @ccall libwebsockets.X509_get_ex_data(r::Ptr{X509}, idx::Cint)::Ptr{Cvoid}
end

function d2i_X509_AUX(a, in, len)
    @ccall libwebsockets.d2i_X509_AUX(a::Ptr{Ptr{X509}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509}
end

function i2d_X509_AUX(a, out)
    @ccall libwebsockets.i2d_X509_AUX(a::Ptr{X509}, out::Ptr{Ptr{Cuchar}})::Cint
end

function i2d_re_X509_tbs(x, pp)
    @ccall libwebsockets.i2d_re_X509_tbs(x::Ptr{X509}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function X509_SIG_INFO_get(siginf, mdnid, pknid, secbits, flags)
    @ccall libwebsockets.X509_SIG_INFO_get(siginf::Ptr{X509_SIG_INFO}, mdnid::Ptr{Cint}, pknid::Ptr{Cint}, secbits::Ptr{Cint}, flags::Ptr{UInt32})::Cint
end

function X509_SIG_INFO_set(siginf, mdnid, pknid, secbits, flags)
    @ccall libwebsockets.X509_SIG_INFO_set(siginf::Ptr{X509_SIG_INFO}, mdnid::Cint, pknid::Cint, secbits::Cint, flags::UInt32)::Cvoid
end

function X509_get_signature_info(x, mdnid, pknid, secbits, flags)
    @ccall libwebsockets.X509_get_signature_info(x::Ptr{X509}, mdnid::Ptr{Cint}, pknid::Ptr{Cint}, secbits::Ptr{Cint}, flags::Ptr{UInt32})::Cint
end

function X509_get0_signature(psig, palg, x)
    @ccall libwebsockets.X509_get0_signature(psig::Ptr{Ptr{ASN1_BIT_STRING}}, palg::Ptr{Ptr{X509_ALGOR}}, x::Ptr{X509})::Cvoid
end

function X509_get_signature_nid(x)
    @ccall libwebsockets.X509_get_signature_nid(x::Ptr{X509})::Cint
end

function X509_set0_distinguishing_id(x, d_id)
    @ccall libwebsockets.X509_set0_distinguishing_id(x::Ptr{X509}, d_id::Ptr{ASN1_OCTET_STRING})::Cvoid
end

function X509_get0_distinguishing_id(x)
    @ccall libwebsockets.X509_get0_distinguishing_id(x::Ptr{X509})::Ptr{ASN1_OCTET_STRING}
end

function X509_REQ_set0_distinguishing_id(x, d_id)
    @ccall libwebsockets.X509_REQ_set0_distinguishing_id(x::Ptr{X509_REQ}, d_id::Ptr{ASN1_OCTET_STRING})::Cvoid
end

function X509_REQ_get0_distinguishing_id(x)
    @ccall libwebsockets.X509_REQ_get0_distinguishing_id(x::Ptr{X509_REQ})::Ptr{ASN1_OCTET_STRING}
end

function X509_alias_set1(x, name, len)
    @ccall libwebsockets.X509_alias_set1(x::Ptr{X509}, name::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_keyid_set1(x, id, len)
    @ccall libwebsockets.X509_keyid_set1(x::Ptr{X509}, id::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_alias_get0(x, len)
    @ccall libwebsockets.X509_alias_get0(x::Ptr{X509}, len::Ptr{Cint})::Ptr{Cuchar}
end

function X509_keyid_get0(x, len)
    @ccall libwebsockets.X509_keyid_get0(x::Ptr{X509}, len::Ptr{Cint})::Ptr{Cuchar}
end

function X509_REVOKED_new()
    @ccall libwebsockets.X509_REVOKED_new()::Ptr{X509_REVOKED}
end

function X509_REVOKED_free(a)
    @ccall libwebsockets.X509_REVOKED_free(a::Ptr{X509_REVOKED})::Cvoid
end

function d2i_X509_REVOKED(a, in, len)
    @ccall libwebsockets.d2i_X509_REVOKED(a::Ptr{Ptr{X509_REVOKED}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_REVOKED}
end

function i2d_X509_REVOKED(a, out)
    @ccall libwebsockets.i2d_X509_REVOKED(a::Ptr{X509_REVOKED}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_REVOKED_it()
    @ccall libwebsockets.X509_REVOKED_it()::Ptr{ASN1_ITEM}
end

function X509_CRL_INFO_new()
    @ccall libwebsockets.X509_CRL_INFO_new()::Ptr{X509_CRL_INFO}
end

function X509_CRL_INFO_free(a)
    @ccall libwebsockets.X509_CRL_INFO_free(a::Ptr{X509_CRL_INFO})::Cvoid
end

function d2i_X509_CRL_INFO(a, in, len)
    @ccall libwebsockets.d2i_X509_CRL_INFO(a::Ptr{Ptr{X509_CRL_INFO}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_CRL_INFO}
end

function i2d_X509_CRL_INFO(a, out)
    @ccall libwebsockets.i2d_X509_CRL_INFO(a::Ptr{X509_CRL_INFO}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_CRL_INFO_it()
    @ccall libwebsockets.X509_CRL_INFO_it()::Ptr{ASN1_ITEM}
end

function X509_CRL_new()
    @ccall libwebsockets.X509_CRL_new()::Ptr{X509_CRL}
end

function X509_CRL_free(a)
    @ccall libwebsockets.X509_CRL_free(a::Ptr{X509_CRL})::Cvoid
end

function d2i_X509_CRL(a, in, len)
    @ccall libwebsockets.d2i_X509_CRL(a::Ptr{Ptr{X509_CRL}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{X509_CRL}
end

function i2d_X509_CRL(a, out)
    @ccall libwebsockets.i2d_X509_CRL(a::Ptr{X509_CRL}, out::Ptr{Ptr{Cuchar}})::Cint
end

function X509_CRL_it()
    @ccall libwebsockets.X509_CRL_it()::Ptr{ASN1_ITEM}
end

function X509_CRL_new_ex(libctx, propq)
    @ccall libwebsockets.X509_CRL_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{X509_CRL}
end

function X509_CRL_add0_revoked(crl, rev)
    @ccall libwebsockets.X509_CRL_add0_revoked(crl::Ptr{X509_CRL}, rev::Ptr{X509_REVOKED})::Cint
end

function X509_CRL_get0_by_serial(crl, ret, serial)
    @ccall libwebsockets.X509_CRL_get0_by_serial(crl::Ptr{X509_CRL}, ret::Ptr{Ptr{X509_REVOKED}}, serial::Ptr{ASN1_INTEGER})::Cint
end

function X509_CRL_get0_by_cert(crl, ret, x)
    @ccall libwebsockets.X509_CRL_get0_by_cert(crl::Ptr{X509_CRL}, ret::Ptr{Ptr{X509_REVOKED}}, x::Ptr{X509})::Cint
end

function X509_PKEY_new()
    @ccall libwebsockets.X509_PKEY_new()::Ptr{X509_PKEY}
end

function X509_PKEY_free(a)
    @ccall libwebsockets.X509_PKEY_free(a::Ptr{X509_PKEY})::Cvoid
end

function NETSCAPE_SPKI_new()
    @ccall libwebsockets.NETSCAPE_SPKI_new()::Ptr{NETSCAPE_SPKI}
end

function NETSCAPE_SPKI_free(a)
    @ccall libwebsockets.NETSCAPE_SPKI_free(a::Ptr{NETSCAPE_SPKI})::Cvoid
end

function d2i_NETSCAPE_SPKI(a, in, len)
    @ccall libwebsockets.d2i_NETSCAPE_SPKI(a::Ptr{Ptr{NETSCAPE_SPKI}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{NETSCAPE_SPKI}
end

function i2d_NETSCAPE_SPKI(a, out)
    @ccall libwebsockets.i2d_NETSCAPE_SPKI(a::Ptr{NETSCAPE_SPKI}, out::Ptr{Ptr{Cuchar}})::Cint
end

function NETSCAPE_SPKI_it()
    @ccall libwebsockets.NETSCAPE_SPKI_it()::Ptr{ASN1_ITEM}
end

function NETSCAPE_SPKAC_new()
    @ccall libwebsockets.NETSCAPE_SPKAC_new()::Ptr{NETSCAPE_SPKAC}
end

function NETSCAPE_SPKAC_free(a)
    @ccall libwebsockets.NETSCAPE_SPKAC_free(a::Ptr{NETSCAPE_SPKAC})::Cvoid
end

function d2i_NETSCAPE_SPKAC(a, in, len)
    @ccall libwebsockets.d2i_NETSCAPE_SPKAC(a::Ptr{Ptr{NETSCAPE_SPKAC}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{NETSCAPE_SPKAC}
end

function i2d_NETSCAPE_SPKAC(a, out)
    @ccall libwebsockets.i2d_NETSCAPE_SPKAC(a::Ptr{NETSCAPE_SPKAC}, out::Ptr{Ptr{Cuchar}})::Cint
end

function NETSCAPE_SPKAC_it()
    @ccall libwebsockets.NETSCAPE_SPKAC_it()::Ptr{ASN1_ITEM}
end

function NETSCAPE_CERT_SEQUENCE_new()
    @ccall libwebsockets.NETSCAPE_CERT_SEQUENCE_new()::Ptr{NETSCAPE_CERT_SEQUENCE}
end

function NETSCAPE_CERT_SEQUENCE_free(a)
    @ccall libwebsockets.NETSCAPE_CERT_SEQUENCE_free(a::Ptr{NETSCAPE_CERT_SEQUENCE})::Cvoid
end

function d2i_NETSCAPE_CERT_SEQUENCE(a, in, len)
    @ccall libwebsockets.d2i_NETSCAPE_CERT_SEQUENCE(a::Ptr{Ptr{NETSCAPE_CERT_SEQUENCE}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{NETSCAPE_CERT_SEQUENCE}
end

function i2d_NETSCAPE_CERT_SEQUENCE(a, out)
    @ccall libwebsockets.i2d_NETSCAPE_CERT_SEQUENCE(a::Ptr{NETSCAPE_CERT_SEQUENCE}, out::Ptr{Ptr{Cuchar}})::Cint
end

function NETSCAPE_CERT_SEQUENCE_it()
    @ccall libwebsockets.NETSCAPE_CERT_SEQUENCE_it()::Ptr{ASN1_ITEM}
end

function X509_INFO_new()
    @ccall libwebsockets.X509_INFO_new()::Ptr{X509_INFO}
end

function X509_INFO_free(a)
    @ccall libwebsockets.X509_INFO_free(a::Ptr{X509_INFO})::Cvoid
end

function X509_NAME_oneline(a, buf, size)
    @ccall libwebsockets.X509_NAME_oneline(a::Ptr{X509_NAME}, buf::Ptr{Cchar}, size::Cint)::Ptr{Cchar}
end

function ASN1_verify(i2d, algor1, signature, data, pkey)
    @ccall libwebsockets.ASN1_verify(i2d::Ptr{i2d_of_void}, algor1::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cchar}, pkey::Ptr{EVP_PKEY})::Cint
end

function ASN1_digest(i2d, type, data, md, len)
    @ccall libwebsockets.ASN1_digest(i2d::Ptr{i2d_of_void}, type::Ptr{EVP_MD}, data::Ptr{Cchar}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type)
    @ccall libwebsockets.ASN1_sign(i2d::Ptr{i2d_of_void}, algor1::Ptr{X509_ALGOR}, algor2::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cchar}, pkey::Ptr{EVP_PKEY}, type::Ptr{EVP_MD})::Cint
end

function ASN1_item_digest(it, type, data, md, len)
    @ccall libwebsockets.ASN1_item_digest(it::Ptr{ASN1_ITEM}, type::Ptr{EVP_MD}, data::Ptr{Cvoid}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function ASN1_item_verify(it, alg, signature, data, pkey)
    @ccall libwebsockets.ASN1_item_verify(it::Ptr{ASN1_ITEM}, alg::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cvoid}, pkey::Ptr{EVP_PKEY})::Cint
end

function ASN1_item_verify_ctx(it, alg, signature, data, ctx)
    @ccall libwebsockets.ASN1_item_verify_ctx(it::Ptr{ASN1_ITEM}, alg::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cvoid}, ctx::Ptr{EVP_MD_CTX})::Cint
end

function ASN1_item_sign(it, algor1, algor2, signature, data, pkey, md)
    @ccall libwebsockets.ASN1_item_sign(it::Ptr{ASN1_ITEM}, algor1::Ptr{X509_ALGOR}, algor2::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cvoid}, pkey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD})::Cint
end

function ASN1_item_sign_ctx(it, algor1, algor2, signature, data, ctx)
    @ccall libwebsockets.ASN1_item_sign_ctx(it::Ptr{ASN1_ITEM}, algor1::Ptr{X509_ALGOR}, algor2::Ptr{X509_ALGOR}, signature::Ptr{ASN1_BIT_STRING}, data::Ptr{Cvoid}, ctx::Ptr{EVP_MD_CTX})::Cint
end

function X509_get_version(x)
    @ccall libwebsockets.X509_get_version(x::Ptr{X509})::Clong
end

function X509_set_version(x, version)
    @ccall libwebsockets.X509_set_version(x::Ptr{X509}, version::Clong)::Cint
end

function X509_set_serialNumber(x, serial)
    @ccall libwebsockets.X509_set_serialNumber(x::Ptr{X509}, serial::Ptr{ASN1_INTEGER})::Cint
end

function X509_get_serialNumber(x)
    @ccall libwebsockets.X509_get_serialNumber(x::Ptr{X509})::Ptr{ASN1_INTEGER}
end

function X509_get0_serialNumber(x)
    @ccall libwebsockets.X509_get0_serialNumber(x::Ptr{X509})::Ptr{ASN1_INTEGER}
end

function X509_set_issuer_name(x, name)
    @ccall libwebsockets.X509_set_issuer_name(x::Ptr{X509}, name::Ptr{X509_NAME})::Cint
end

function X509_get_issuer_name(a)
    @ccall libwebsockets.X509_get_issuer_name(a::Ptr{X509})::Ptr{X509_NAME}
end

function X509_set_subject_name(x, name)
    @ccall libwebsockets.X509_set_subject_name(x::Ptr{X509}, name::Ptr{X509_NAME})::Cint
end

function X509_get_subject_name(a)
    @ccall libwebsockets.X509_get_subject_name(a::Ptr{X509})::Ptr{X509_NAME}
end

function X509_get0_notBefore(x)
    @ccall libwebsockets.X509_get0_notBefore(x::Ptr{X509})::Ptr{ASN1_TIME}
end

function X509_get0_notAfter(x)
    @ccall libwebsockets.X509_get0_notAfter(x::Ptr{X509})::Ptr{ASN1_TIME}
end

function X509_set_pubkey(x, pkey)
    @ccall libwebsockets.X509_set_pubkey(x::Ptr{X509}, pkey::Ptr{EVP_PKEY})::Cint
end

function X509_up_ref(x)
    @ccall libwebsockets.X509_up_ref(x::Ptr{X509})::Cint
end

function X509_get_signature_type(x)
    @ccall libwebsockets.X509_get_signature_type(x::Ptr{X509})::Cint
end

function X509_get_X509_PUBKEY(x)
    @ccall libwebsockets.X509_get_X509_PUBKEY(x::Ptr{X509})::Ptr{X509_PUBKEY}
end

function X509_get0_extensions(x)
    @ccall libwebsockets.X509_get0_extensions(x::Ptr{X509})::Ptr{stack_st_X509_EXTENSION}
end

function X509_get0_uids(x, piuid, psuid)
    @ccall libwebsockets.X509_get0_uids(x::Ptr{X509}, piuid::Ptr{Ptr{ASN1_BIT_STRING}}, psuid::Ptr{Ptr{ASN1_BIT_STRING}})::Cvoid
end

function X509_get0_tbs_sigalg(x)
    @ccall libwebsockets.X509_get0_tbs_sigalg(x::Ptr{X509})::Ptr{X509_ALGOR}
end

function X509_get0_pubkey(x)
    @ccall libwebsockets.X509_get0_pubkey(x::Ptr{X509})::Ptr{EVP_PKEY}
end

function X509_get0_pubkey_bitstr(x)
    @ccall libwebsockets.X509_get0_pubkey_bitstr(x::Ptr{X509})::Ptr{ASN1_BIT_STRING}
end

function X509_REQ_get_version(req)
    @ccall libwebsockets.X509_REQ_get_version(req::Ptr{X509_REQ})::Clong
end

function X509_REQ_set_version(x, version)
    @ccall libwebsockets.X509_REQ_set_version(x::Ptr{X509_REQ}, version::Clong)::Cint
end

function X509_REQ_get_subject_name(req)
    @ccall libwebsockets.X509_REQ_get_subject_name(req::Ptr{X509_REQ})::Ptr{X509_NAME}
end

function X509_REQ_set_subject_name(req, name)
    @ccall libwebsockets.X509_REQ_set_subject_name(req::Ptr{X509_REQ}, name::Ptr{X509_NAME})::Cint
end

function X509_REQ_get0_signature(req, psig, palg)
    @ccall libwebsockets.X509_REQ_get0_signature(req::Ptr{X509_REQ}, psig::Ptr{Ptr{ASN1_BIT_STRING}}, palg::Ptr{Ptr{X509_ALGOR}})::Cvoid
end

function X509_REQ_set0_signature(req, psig)
    @ccall libwebsockets.X509_REQ_set0_signature(req::Ptr{X509_REQ}, psig::Ptr{ASN1_BIT_STRING})::Cvoid
end

function X509_REQ_set1_signature_algo(req, palg)
    @ccall libwebsockets.X509_REQ_set1_signature_algo(req::Ptr{X509_REQ}, palg::Ptr{X509_ALGOR})::Cint
end

function X509_REQ_get_signature_nid(req)
    @ccall libwebsockets.X509_REQ_get_signature_nid(req::Ptr{X509_REQ})::Cint
end

function i2d_re_X509_REQ_tbs(req, pp)
    @ccall libwebsockets.i2d_re_X509_REQ_tbs(req::Ptr{X509_REQ}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function X509_REQ_set_pubkey(x, pkey)
    @ccall libwebsockets.X509_REQ_set_pubkey(x::Ptr{X509_REQ}, pkey::Ptr{EVP_PKEY})::Cint
end

function X509_REQ_get0_pubkey(req)
    @ccall libwebsockets.X509_REQ_get0_pubkey(req::Ptr{X509_REQ})::Ptr{EVP_PKEY}
end

function X509_REQ_get_X509_PUBKEY(req)
    @ccall libwebsockets.X509_REQ_get_X509_PUBKEY(req::Ptr{X509_REQ})::Ptr{X509_PUBKEY}
end

function X509_REQ_extension_nid(nid)
    @ccall libwebsockets.X509_REQ_extension_nid(nid::Cint)::Cint
end

function X509_REQ_get_extension_nids()
    @ccall libwebsockets.X509_REQ_get_extension_nids()::Ptr{Cint}
end

function X509_REQ_set_extension_nids(nids)
    @ccall libwebsockets.X509_REQ_set_extension_nids(nids::Ptr{Cint})::Cvoid
end

function X509_REQ_get_extensions(req)
    @ccall libwebsockets.X509_REQ_get_extensions(req::Ptr{X509_REQ})::Ptr{stack_st_X509_EXTENSION}
end

function X509_REQ_add_extensions_nid(req, exts, nid)
    @ccall libwebsockets.X509_REQ_add_extensions_nid(req::Ptr{X509_REQ}, exts::Ptr{stack_st_X509_EXTENSION}, nid::Cint)::Cint
end

function X509_REQ_add_extensions(req, ext)
    @ccall libwebsockets.X509_REQ_add_extensions(req::Ptr{X509_REQ}, ext::Ptr{stack_st_X509_EXTENSION})::Cint
end

function X509_REQ_get_attr_count(req)
    @ccall libwebsockets.X509_REQ_get_attr_count(req::Ptr{X509_REQ})::Cint
end

function X509_REQ_get_attr_by_NID(req, nid, lastpos)
    @ccall libwebsockets.X509_REQ_get_attr_by_NID(req::Ptr{X509_REQ}, nid::Cint, lastpos::Cint)::Cint
end

function X509_REQ_get_attr_by_OBJ(req, obj, lastpos)
    @ccall libwebsockets.X509_REQ_get_attr_by_OBJ(req::Ptr{X509_REQ}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509_REQ_get_attr(req, loc)
    @ccall libwebsockets.X509_REQ_get_attr(req::Ptr{X509_REQ}, loc::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509_REQ_delete_attr(req, loc)
    @ccall libwebsockets.X509_REQ_delete_attr(req::Ptr{X509_REQ}, loc::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509_REQ_add1_attr(req, attr)
    @ccall libwebsockets.X509_REQ_add1_attr(req::Ptr{X509_REQ}, attr::Ptr{X509_ATTRIBUTE})::Cint
end

function X509_REQ_add1_attr_by_OBJ(req, obj, type, bytes, len)
    @ccall libwebsockets.X509_REQ_add1_attr_by_OBJ(req::Ptr{X509_REQ}, obj::Ptr{ASN1_OBJECT}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_REQ_add1_attr_by_NID(req, nid, type, bytes, len)
    @ccall libwebsockets.X509_REQ_add1_attr_by_NID(req::Ptr{X509_REQ}, nid::Cint, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_REQ_add1_attr_by_txt(req, attrname, type, bytes, len)
    @ccall libwebsockets.X509_REQ_add1_attr_by_txt(req::Ptr{X509_REQ}, attrname::Ptr{Cchar}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_CRL_set_version(x, version)
    @ccall libwebsockets.X509_CRL_set_version(x::Ptr{X509_CRL}, version::Clong)::Cint
end

function X509_CRL_set_issuer_name(x, name)
    @ccall libwebsockets.X509_CRL_set_issuer_name(x::Ptr{X509_CRL}, name::Ptr{X509_NAME})::Cint
end

function X509_CRL_sort(crl)
    @ccall libwebsockets.X509_CRL_sort(crl::Ptr{X509_CRL})::Cint
end

function X509_CRL_up_ref(crl)
    @ccall libwebsockets.X509_CRL_up_ref(crl::Ptr{X509_CRL})::Cint
end

function X509_CRL_get_version(crl)
    @ccall libwebsockets.X509_CRL_get_version(crl::Ptr{X509_CRL})::Clong
end

function X509_CRL_get0_lastUpdate(crl)
    @ccall libwebsockets.X509_CRL_get0_lastUpdate(crl::Ptr{X509_CRL})::Ptr{ASN1_TIME}
end

function X509_CRL_get0_nextUpdate(crl)
    @ccall libwebsockets.X509_CRL_get0_nextUpdate(crl::Ptr{X509_CRL})::Ptr{ASN1_TIME}
end

function X509_CRL_get_lastUpdate(crl)
    @ccall libwebsockets.X509_CRL_get_lastUpdate(crl::Ptr{X509_CRL})::Ptr{ASN1_TIME}
end

function X509_CRL_get_nextUpdate(crl)
    @ccall libwebsockets.X509_CRL_get_nextUpdate(crl::Ptr{X509_CRL})::Ptr{ASN1_TIME}
end

function X509_CRL_get_issuer(crl)
    @ccall libwebsockets.X509_CRL_get_issuer(crl::Ptr{X509_CRL})::Ptr{X509_NAME}
end

function X509_CRL_get0_extensions(crl)
    @ccall libwebsockets.X509_CRL_get0_extensions(crl::Ptr{X509_CRL})::Ptr{stack_st_X509_EXTENSION}
end

function X509_CRL_get_REVOKED(crl)
    @ccall libwebsockets.X509_CRL_get_REVOKED(crl::Ptr{X509_CRL})::Ptr{stack_st_X509_REVOKED}
end

function X509_CRL_get0_signature(crl, psig, palg)
    @ccall libwebsockets.X509_CRL_get0_signature(crl::Ptr{X509_CRL}, psig::Ptr{Ptr{ASN1_BIT_STRING}}, palg::Ptr{Ptr{X509_ALGOR}})::Cvoid
end

function X509_CRL_get_signature_nid(crl)
    @ccall libwebsockets.X509_CRL_get_signature_nid(crl::Ptr{X509_CRL})::Cint
end

function i2d_re_X509_CRL_tbs(req, pp)
    @ccall libwebsockets.i2d_re_X509_CRL_tbs(req::Ptr{X509_CRL}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function X509_REVOKED_get0_serialNumber(x)
    @ccall libwebsockets.X509_REVOKED_get0_serialNumber(x::Ptr{X509_REVOKED})::Ptr{ASN1_INTEGER}
end

function X509_REVOKED_set_serialNumber(x, serial)
    @ccall libwebsockets.X509_REVOKED_set_serialNumber(x::Ptr{X509_REVOKED}, serial::Ptr{ASN1_INTEGER})::Cint
end

function X509_REVOKED_get0_revocationDate(x)
    @ccall libwebsockets.X509_REVOKED_get0_revocationDate(x::Ptr{X509_REVOKED})::Ptr{ASN1_TIME}
end

function X509_REVOKED_set_revocationDate(r, tm)
    @ccall libwebsockets.X509_REVOKED_set_revocationDate(r::Ptr{X509_REVOKED}, tm::Ptr{ASN1_TIME})::Cint
end

function X509_REVOKED_get0_extensions(r)
    @ccall libwebsockets.X509_REVOKED_get0_extensions(r::Ptr{X509_REVOKED})::Ptr{stack_st_X509_EXTENSION}
end

function X509_CRL_diff(base, newer, skey, md, flags)
    @ccall libwebsockets.X509_CRL_diff(base::Ptr{X509_CRL}, newer::Ptr{X509_CRL}, skey::Ptr{EVP_PKEY}, md::Ptr{EVP_MD}, flags::Cuint)::Ptr{X509_CRL}
end

function X509_REQ_check_private_key(x509, pkey)
    @ccall libwebsockets.X509_REQ_check_private_key(x509::Ptr{X509_REQ}, pkey::Ptr{EVP_PKEY})::Cint
end

function X509_check_private_key(x509, pkey)
    @ccall libwebsockets.X509_check_private_key(x509::Ptr{X509}, pkey::Ptr{EVP_PKEY})::Cint
end

function X509_chain_check_suiteb(perror_depth, x, chain, flags)
    @ccall libwebsockets.X509_chain_check_suiteb(perror_depth::Ptr{Cint}, x::Ptr{X509}, chain::Ptr{stack_st_X509}, flags::Culong)::Cint
end

function X509_CRL_check_suiteb(crl, pk, flags)
    @ccall libwebsockets.X509_CRL_check_suiteb(crl::Ptr{X509_CRL}, pk::Ptr{EVP_PKEY}, flags::Culong)::Cint
end

function X509_chain_up_ref(chain)
    @ccall libwebsockets.X509_chain_up_ref(chain::Ptr{stack_st_X509})::Ptr{stack_st_X509}
end

function X509_issuer_and_serial_cmp(a, b)
    @ccall libwebsockets.X509_issuer_and_serial_cmp(a::Ptr{X509}, b::Ptr{X509})::Cint
end

function X509_issuer_and_serial_hash(a)
    @ccall libwebsockets.X509_issuer_and_serial_hash(a::Ptr{X509})::Culong
end

function X509_issuer_name_cmp(a, b)
    @ccall libwebsockets.X509_issuer_name_cmp(a::Ptr{X509}, b::Ptr{X509})::Cint
end

function X509_issuer_name_hash(a)
    @ccall libwebsockets.X509_issuer_name_hash(a::Ptr{X509})::Culong
end

function X509_subject_name_cmp(a, b)
    @ccall libwebsockets.X509_subject_name_cmp(a::Ptr{X509}, b::Ptr{X509})::Cint
end

function X509_subject_name_hash(x)
    @ccall libwebsockets.X509_subject_name_hash(x::Ptr{X509})::Culong
end

function X509_issuer_name_hash_old(a)
    @ccall libwebsockets.X509_issuer_name_hash_old(a::Ptr{X509})::Culong
end

function X509_subject_name_hash_old(x)
    @ccall libwebsockets.X509_subject_name_hash_old(x::Ptr{X509})::Culong
end

function X509_add_cert(sk, cert, flags)
    @ccall libwebsockets.X509_add_cert(sk::Ptr{stack_st_X509}, cert::Ptr{X509}, flags::Cint)::Cint
end

function X509_add_certs(sk, certs, flags)
    @ccall libwebsockets.X509_add_certs(sk::Ptr{stack_st_X509}, certs::Ptr{stack_st_X509}, flags::Cint)::Cint
end

function X509_cmp(a, b)
    @ccall libwebsockets.X509_cmp(a::Ptr{X509}, b::Ptr{X509})::Cint
end

function X509_certificate_type(x, pubkey)
    @ccall libwebsockets.X509_certificate_type(x::Ptr{X509}, pubkey::Ptr{EVP_PKEY})::Cint
end

function X509_NAME_hash_old(x)
    @ccall libwebsockets.X509_NAME_hash_old(x::Ptr{X509_NAME})::Culong
end

function X509_CRL_cmp(a, b)
    @ccall libwebsockets.X509_CRL_cmp(a::Ptr{X509_CRL}, b::Ptr{X509_CRL})::Cint
end

function X509_CRL_match(a, b)
    @ccall libwebsockets.X509_CRL_match(a::Ptr{X509_CRL}, b::Ptr{X509_CRL})::Cint
end

function X509_aux_print(out, x, indent)
    @ccall libwebsockets.X509_aux_print(out::Ptr{BIO}, x::Ptr{X509}, indent::Cint)::Cint
end

function X509_print_ex_fp(bp, x, nmflag, cflag)
    @ccall libwebsockets.X509_print_ex_fp(bp::Ptr{Libc.FILE}, x::Ptr{X509}, nmflag::Culong, cflag::Culong)::Cint
end

function X509_print_fp(bp, x)
    @ccall libwebsockets.X509_print_fp(bp::Ptr{Libc.FILE}, x::Ptr{X509})::Cint
end

function X509_CRL_print_fp(bp, x)
    @ccall libwebsockets.X509_CRL_print_fp(bp::Ptr{Libc.FILE}, x::Ptr{X509_CRL})::Cint
end

function X509_REQ_print_fp(bp, req)
    @ccall libwebsockets.X509_REQ_print_fp(bp::Ptr{Libc.FILE}, req::Ptr{X509_REQ})::Cint
end

function X509_NAME_print_ex_fp(fp, nm, indent, flags)
    @ccall libwebsockets.X509_NAME_print_ex_fp(fp::Ptr{Libc.FILE}, nm::Ptr{X509_NAME}, indent::Cint, flags::Culong)::Cint
end

function X509_NAME_print(bp, name, obase)
    @ccall libwebsockets.X509_NAME_print(bp::Ptr{BIO}, name::Ptr{X509_NAME}, obase::Cint)::Cint
end

function X509_NAME_print_ex(out, nm, indent, flags)
    @ccall libwebsockets.X509_NAME_print_ex(out::Ptr{BIO}, nm::Ptr{X509_NAME}, indent::Cint, flags::Culong)::Cint
end

function X509_print_ex(bp, x, nmflag, cflag)
    @ccall libwebsockets.X509_print_ex(bp::Ptr{BIO}, x::Ptr{X509}, nmflag::Culong, cflag::Culong)::Cint
end

function X509_print(bp, x)
    @ccall libwebsockets.X509_print(bp::Ptr{BIO}, x::Ptr{X509})::Cint
end

function X509_ocspid_print(bp, x)
    @ccall libwebsockets.X509_ocspid_print(bp::Ptr{BIO}, x::Ptr{X509})::Cint
end

function X509_CRL_print_ex(out, x, nmflag)
    @ccall libwebsockets.X509_CRL_print_ex(out::Ptr{BIO}, x::Ptr{X509_CRL}, nmflag::Culong)::Cint
end

function X509_CRL_print(bp, x)
    @ccall libwebsockets.X509_CRL_print(bp::Ptr{BIO}, x::Ptr{X509_CRL})::Cint
end

function X509_REQ_print_ex(bp, x, nmflag, cflag)
    @ccall libwebsockets.X509_REQ_print_ex(bp::Ptr{BIO}, x::Ptr{X509_REQ}, nmflag::Culong, cflag::Culong)::Cint
end

function X509_REQ_print(bp, req)
    @ccall libwebsockets.X509_REQ_print(bp::Ptr{BIO}, req::Ptr{X509_REQ})::Cint
end

function X509_NAME_entry_count(name)
    @ccall libwebsockets.X509_NAME_entry_count(name::Ptr{X509_NAME})::Cint
end

function X509_NAME_get_text_by_NID(name, nid, buf, len)
    @ccall libwebsockets.X509_NAME_get_text_by_NID(name::Ptr{X509_NAME}, nid::Cint, buf::Ptr{Cchar}, len::Cint)::Cint
end

function X509_NAME_get_text_by_OBJ(name, obj, buf, len)
    @ccall libwebsockets.X509_NAME_get_text_by_OBJ(name::Ptr{X509_NAME}, obj::Ptr{ASN1_OBJECT}, buf::Ptr{Cchar}, len::Cint)::Cint
end

function X509_NAME_get_index_by_NID(name, nid, lastpos)
    @ccall libwebsockets.X509_NAME_get_index_by_NID(name::Ptr{X509_NAME}, nid::Cint, lastpos::Cint)::Cint
end

function X509_NAME_get_index_by_OBJ(name, obj, lastpos)
    @ccall libwebsockets.X509_NAME_get_index_by_OBJ(name::Ptr{X509_NAME}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509_NAME_get_entry(name, loc)
    @ccall libwebsockets.X509_NAME_get_entry(name::Ptr{X509_NAME}, loc::Cint)::Ptr{X509_NAME_ENTRY}
end

function X509_NAME_delete_entry(name, loc)
    @ccall libwebsockets.X509_NAME_delete_entry(name::Ptr{X509_NAME}, loc::Cint)::Ptr{X509_NAME_ENTRY}
end

function X509_NAME_add_entry(name, ne, loc, set)
    @ccall libwebsockets.X509_NAME_add_entry(name::Ptr{X509_NAME}, ne::Ptr{X509_NAME_ENTRY}, loc::Cint, set::Cint)::Cint
end

function X509_NAME_add_entry_by_OBJ(name, obj, type, bytes, len, loc, set)
    @ccall libwebsockets.X509_NAME_add_entry_by_OBJ(name::Ptr{X509_NAME}, obj::Ptr{ASN1_OBJECT}, type::Cint, bytes::Ptr{Cuchar}, len::Cint, loc::Cint, set::Cint)::Cint
end

function X509_NAME_add_entry_by_NID(name, nid, type, bytes, len, loc, set)
    @ccall libwebsockets.X509_NAME_add_entry_by_NID(name::Ptr{X509_NAME}, nid::Cint, type::Cint, bytes::Ptr{Cuchar}, len::Cint, loc::Cint, set::Cint)::Cint
end

function X509_NAME_ENTRY_create_by_txt(ne, field, type, bytes, len)
    @ccall libwebsockets.X509_NAME_ENTRY_create_by_txt(ne::Ptr{Ptr{X509_NAME_ENTRY}}, field::Ptr{Cchar}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{X509_NAME_ENTRY}
end

function X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len)
    @ccall libwebsockets.X509_NAME_ENTRY_create_by_NID(ne::Ptr{Ptr{X509_NAME_ENTRY}}, nid::Cint, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{X509_NAME_ENTRY}
end

function X509_NAME_add_entry_by_txt(name, field, type, bytes, len, loc, set)
    @ccall libwebsockets.X509_NAME_add_entry_by_txt(name::Ptr{X509_NAME}, field::Ptr{Cchar}, type::Cint, bytes::Ptr{Cuchar}, len::Cint, loc::Cint, set::Cint)::Cint
end

function X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len)
    @ccall libwebsockets.X509_NAME_ENTRY_create_by_OBJ(ne::Ptr{Ptr{X509_NAME_ENTRY}}, obj::Ptr{ASN1_OBJECT}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{X509_NAME_ENTRY}
end

function X509_NAME_ENTRY_set_object(ne, obj)
    @ccall libwebsockets.X509_NAME_ENTRY_set_object(ne::Ptr{X509_NAME_ENTRY}, obj::Ptr{ASN1_OBJECT})::Cint
end

function X509_NAME_ENTRY_set_data(ne, type, bytes, len)
    @ccall libwebsockets.X509_NAME_ENTRY_set_data(ne::Ptr{X509_NAME_ENTRY}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_NAME_ENTRY_get_object(ne)
    @ccall libwebsockets.X509_NAME_ENTRY_get_object(ne::Ptr{X509_NAME_ENTRY})::Ptr{ASN1_OBJECT}
end

function X509_NAME_ENTRY_get_data(ne)
    @ccall libwebsockets.X509_NAME_ENTRY_get_data(ne::Ptr{X509_NAME_ENTRY})::Ptr{ASN1_STRING}
end

function X509_NAME_ENTRY_set(ne)
    @ccall libwebsockets.X509_NAME_ENTRY_set(ne::Ptr{X509_NAME_ENTRY})::Cint
end

function X509_NAME_get0_der(nm, pder, pderlen)
    @ccall libwebsockets.X509_NAME_get0_der(nm::Ptr{X509_NAME}, pder::Ptr{Ptr{Cuchar}}, pderlen::Ptr{Csize_t})::Cint
end

function X509v3_get_ext_count(x)
    @ccall libwebsockets.X509v3_get_ext_count(x::Ptr{stack_st_X509_EXTENSION})::Cint
end

function X509v3_get_ext_by_NID(x, nid, lastpos)
    @ccall libwebsockets.X509v3_get_ext_by_NID(x::Ptr{stack_st_X509_EXTENSION}, nid::Cint, lastpos::Cint)::Cint
end

function X509v3_get_ext_by_OBJ(x, obj, lastpos)
    @ccall libwebsockets.X509v3_get_ext_by_OBJ(x::Ptr{stack_st_X509_EXTENSION}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509v3_get_ext_by_critical(x, crit, lastpos)
    @ccall libwebsockets.X509v3_get_ext_by_critical(x::Ptr{stack_st_X509_EXTENSION}, crit::Cint, lastpos::Cint)::Cint
end

function X509v3_get_ext(x, loc)
    @ccall libwebsockets.X509v3_get_ext(x::Ptr{stack_st_X509_EXTENSION}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509v3_delete_ext(x, loc)
    @ccall libwebsockets.X509v3_delete_ext(x::Ptr{stack_st_X509_EXTENSION}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509v3_add_ext(x, ex, loc)
    @ccall libwebsockets.X509v3_add_ext(x::Ptr{Ptr{stack_st_X509_EXTENSION}}, ex::Ptr{X509_EXTENSION}, loc::Cint)::Ptr{stack_st_X509_EXTENSION}
end

function X509_get_ext_count(x)
    @ccall libwebsockets.X509_get_ext_count(x::Ptr{X509})::Cint
end

function X509_get_ext_by_NID(x, nid, lastpos)
    @ccall libwebsockets.X509_get_ext_by_NID(x::Ptr{X509}, nid::Cint, lastpos::Cint)::Cint
end

function X509_get_ext_by_OBJ(x, obj, lastpos)
    @ccall libwebsockets.X509_get_ext_by_OBJ(x::Ptr{X509}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509_get_ext_by_critical(x, crit, lastpos)
    @ccall libwebsockets.X509_get_ext_by_critical(x::Ptr{X509}, crit::Cint, lastpos::Cint)::Cint
end

function X509_get_ext(x, loc)
    @ccall libwebsockets.X509_get_ext(x::Ptr{X509}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509_delete_ext(x, loc)
    @ccall libwebsockets.X509_delete_ext(x::Ptr{X509}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509_add_ext(x, ex, loc)
    @ccall libwebsockets.X509_add_ext(x::Ptr{X509}, ex::Ptr{X509_EXTENSION}, loc::Cint)::Cint
end

function X509_get_ext_d2i(x, nid, crit, idx)
    @ccall libwebsockets.X509_get_ext_d2i(x::Ptr{X509}, nid::Cint, crit::Ptr{Cint}, idx::Ptr{Cint})::Ptr{Cvoid}
end

function X509_add1_ext_i2d(x, nid, value, crit, flags)
    @ccall libwebsockets.X509_add1_ext_i2d(x::Ptr{X509}, nid::Cint, value::Ptr{Cvoid}, crit::Cint, flags::Culong)::Cint
end

function X509_CRL_get_ext_count(x)
    @ccall libwebsockets.X509_CRL_get_ext_count(x::Ptr{X509_CRL})::Cint
end

function X509_CRL_get_ext_by_NID(x, nid, lastpos)
    @ccall libwebsockets.X509_CRL_get_ext_by_NID(x::Ptr{X509_CRL}, nid::Cint, lastpos::Cint)::Cint
end

function X509_CRL_get_ext_by_OBJ(x, obj, lastpos)
    @ccall libwebsockets.X509_CRL_get_ext_by_OBJ(x::Ptr{X509_CRL}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509_CRL_get_ext_by_critical(x, crit, lastpos)
    @ccall libwebsockets.X509_CRL_get_ext_by_critical(x::Ptr{X509_CRL}, crit::Cint, lastpos::Cint)::Cint
end

function X509_CRL_get_ext(x, loc)
    @ccall libwebsockets.X509_CRL_get_ext(x::Ptr{X509_CRL}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509_CRL_delete_ext(x, loc)
    @ccall libwebsockets.X509_CRL_delete_ext(x::Ptr{X509_CRL}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509_CRL_add_ext(x, ex, loc)
    @ccall libwebsockets.X509_CRL_add_ext(x::Ptr{X509_CRL}, ex::Ptr{X509_EXTENSION}, loc::Cint)::Cint
end

function X509_CRL_get_ext_d2i(x, nid, crit, idx)
    @ccall libwebsockets.X509_CRL_get_ext_d2i(x::Ptr{X509_CRL}, nid::Cint, crit::Ptr{Cint}, idx::Ptr{Cint})::Ptr{Cvoid}
end

function X509_CRL_add1_ext_i2d(x, nid, value, crit, flags)
    @ccall libwebsockets.X509_CRL_add1_ext_i2d(x::Ptr{X509_CRL}, nid::Cint, value::Ptr{Cvoid}, crit::Cint, flags::Culong)::Cint
end

function X509_REVOKED_get_ext_count(x)
    @ccall libwebsockets.X509_REVOKED_get_ext_count(x::Ptr{X509_REVOKED})::Cint
end

function X509_REVOKED_get_ext_by_NID(x, nid, lastpos)
    @ccall libwebsockets.X509_REVOKED_get_ext_by_NID(x::Ptr{X509_REVOKED}, nid::Cint, lastpos::Cint)::Cint
end

function X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos)
    @ccall libwebsockets.X509_REVOKED_get_ext_by_OBJ(x::Ptr{X509_REVOKED}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509_REVOKED_get_ext_by_critical(x, crit, lastpos)
    @ccall libwebsockets.X509_REVOKED_get_ext_by_critical(x::Ptr{X509_REVOKED}, crit::Cint, lastpos::Cint)::Cint
end

function X509_REVOKED_get_ext(x, loc)
    @ccall libwebsockets.X509_REVOKED_get_ext(x::Ptr{X509_REVOKED}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509_REVOKED_delete_ext(x, loc)
    @ccall libwebsockets.X509_REVOKED_delete_ext(x::Ptr{X509_REVOKED}, loc::Cint)::Ptr{X509_EXTENSION}
end

function X509_REVOKED_add_ext(x, ex, loc)
    @ccall libwebsockets.X509_REVOKED_add_ext(x::Ptr{X509_REVOKED}, ex::Ptr{X509_EXTENSION}, loc::Cint)::Cint
end

function X509_REVOKED_get_ext_d2i(x, nid, crit, idx)
    @ccall libwebsockets.X509_REVOKED_get_ext_d2i(x::Ptr{X509_REVOKED}, nid::Cint, crit::Ptr{Cint}, idx::Ptr{Cint})::Ptr{Cvoid}
end

function X509_REVOKED_add1_ext_i2d(x, nid, value, crit, flags)
    @ccall libwebsockets.X509_REVOKED_add1_ext_i2d(x::Ptr{X509_REVOKED}, nid::Cint, value::Ptr{Cvoid}, crit::Cint, flags::Culong)::Cint
end

function X509_EXTENSION_create_by_NID(ex, nid, crit, data)
    @ccall libwebsockets.X509_EXTENSION_create_by_NID(ex::Ptr{Ptr{X509_EXTENSION}}, nid::Cint, crit::Cint, data::Ptr{ASN1_OCTET_STRING})::Ptr{X509_EXTENSION}
end

function X509_EXTENSION_create_by_OBJ(ex, obj, crit, data)
    @ccall libwebsockets.X509_EXTENSION_create_by_OBJ(ex::Ptr{Ptr{X509_EXTENSION}}, obj::Ptr{ASN1_OBJECT}, crit::Cint, data::Ptr{ASN1_OCTET_STRING})::Ptr{X509_EXTENSION}
end

function X509_EXTENSION_set_object(ex, obj)
    @ccall libwebsockets.X509_EXTENSION_set_object(ex::Ptr{X509_EXTENSION}, obj::Ptr{ASN1_OBJECT})::Cint
end

function X509_EXTENSION_set_critical(ex, crit)
    @ccall libwebsockets.X509_EXTENSION_set_critical(ex::Ptr{X509_EXTENSION}, crit::Cint)::Cint
end

function X509_EXTENSION_set_data(ex, data)
    @ccall libwebsockets.X509_EXTENSION_set_data(ex::Ptr{X509_EXTENSION}, data::Ptr{ASN1_OCTET_STRING})::Cint
end

function X509_EXTENSION_get_object(ex)
    @ccall libwebsockets.X509_EXTENSION_get_object(ex::Ptr{X509_EXTENSION})::Ptr{ASN1_OBJECT}
end

function X509_EXTENSION_get_data(ne)
    @ccall libwebsockets.X509_EXTENSION_get_data(ne::Ptr{X509_EXTENSION})::Ptr{ASN1_OCTET_STRING}
end

function X509_EXTENSION_get_critical(ex)
    @ccall libwebsockets.X509_EXTENSION_get_critical(ex::Ptr{X509_EXTENSION})::Cint
end

function X509at_get_attr_count(x)
    @ccall libwebsockets.X509at_get_attr_count(x::Ptr{stack_st_X509_ATTRIBUTE})::Cint
end

function X509at_get_attr_by_NID(x, nid, lastpos)
    @ccall libwebsockets.X509at_get_attr_by_NID(x::Ptr{stack_st_X509_ATTRIBUTE}, nid::Cint, lastpos::Cint)::Cint
end

function X509at_get_attr_by_OBJ(sk, obj, lastpos)
    @ccall libwebsockets.X509at_get_attr_by_OBJ(sk::Ptr{stack_st_X509_ATTRIBUTE}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function X509at_get_attr(x, loc)
    @ccall libwebsockets.X509at_get_attr(x::Ptr{stack_st_X509_ATTRIBUTE}, loc::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509at_delete_attr(x, loc)
    @ccall libwebsockets.X509at_delete_attr(x::Ptr{stack_st_X509_ATTRIBUTE}, loc::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509at_add1_attr(x, attr)
    @ccall libwebsockets.X509at_add1_attr(x::Ptr{Ptr{stack_st_X509_ATTRIBUTE}}, attr::Ptr{X509_ATTRIBUTE})::Ptr{stack_st_X509_ATTRIBUTE}
end

function X509at_add1_attr_by_OBJ(x, obj, type, bytes, len)
    @ccall libwebsockets.X509at_add1_attr_by_OBJ(x::Ptr{Ptr{stack_st_X509_ATTRIBUTE}}, obj::Ptr{ASN1_OBJECT}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{stack_st_X509_ATTRIBUTE}
end

function X509at_add1_attr_by_NID(x, nid, type, bytes, len)
    @ccall libwebsockets.X509at_add1_attr_by_NID(x::Ptr{Ptr{stack_st_X509_ATTRIBUTE}}, nid::Cint, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{stack_st_X509_ATTRIBUTE}
end

function X509at_add1_attr_by_txt(x, attrname, type, bytes, len)
    @ccall libwebsockets.X509at_add1_attr_by_txt(x::Ptr{Ptr{stack_st_X509_ATTRIBUTE}}, attrname::Ptr{Cchar}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{stack_st_X509_ATTRIBUTE}
end

function X509at_get0_data_by_OBJ(x, obj, lastpos, type)
    @ccall libwebsockets.X509at_get0_data_by_OBJ(x::Ptr{stack_st_X509_ATTRIBUTE}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint, type::Cint)::Ptr{Cvoid}
end

function X509_ATTRIBUTE_create_by_NID(attr, nid, atrtype, data, len)
    @ccall libwebsockets.X509_ATTRIBUTE_create_by_NID(attr::Ptr{Ptr{X509_ATTRIBUTE}}, nid::Cint, atrtype::Cint, data::Ptr{Cvoid}, len::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509_ATTRIBUTE_create_by_OBJ(attr, obj, atrtype, data, len)
    @ccall libwebsockets.X509_ATTRIBUTE_create_by_OBJ(attr::Ptr{Ptr{X509_ATTRIBUTE}}, obj::Ptr{ASN1_OBJECT}, atrtype::Cint, data::Ptr{Cvoid}, len::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509_ATTRIBUTE_create_by_txt(attr, atrname, type, bytes, len)
    @ccall libwebsockets.X509_ATTRIBUTE_create_by_txt(attr::Ptr{Ptr{X509_ATTRIBUTE}}, atrname::Ptr{Cchar}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Ptr{X509_ATTRIBUTE}
end

function X509_ATTRIBUTE_set1_object(attr, obj)
    @ccall libwebsockets.X509_ATTRIBUTE_set1_object(attr::Ptr{X509_ATTRIBUTE}, obj::Ptr{ASN1_OBJECT})::Cint
end

function X509_ATTRIBUTE_set1_data(attr, attrtype, data, len)
    @ccall libwebsockets.X509_ATTRIBUTE_set1_data(attr::Ptr{X509_ATTRIBUTE}, attrtype::Cint, data::Ptr{Cvoid}, len::Cint)::Cint
end

function X509_ATTRIBUTE_get0_data(attr, idx, atrtype, data)
    @ccall libwebsockets.X509_ATTRIBUTE_get0_data(attr::Ptr{X509_ATTRIBUTE}, idx::Cint, atrtype::Cint, data::Ptr{Cvoid})::Ptr{Cvoid}
end

function X509_ATTRIBUTE_count(attr)
    @ccall libwebsockets.X509_ATTRIBUTE_count(attr::Ptr{X509_ATTRIBUTE})::Cint
end

function X509_ATTRIBUTE_get0_object(attr)
    @ccall libwebsockets.X509_ATTRIBUTE_get0_object(attr::Ptr{X509_ATTRIBUTE})::Ptr{ASN1_OBJECT}
end

function X509_ATTRIBUTE_get0_type(attr, idx)
    @ccall libwebsockets.X509_ATTRIBUTE_get0_type(attr::Ptr{X509_ATTRIBUTE}, idx::Cint)::Ptr{ASN1_TYPE}
end

function EVP_PKEY_get_attr_count(key)
    @ccall libwebsockets.EVP_PKEY_get_attr_count(key::Ptr{EVP_PKEY})::Cint
end

function EVP_PKEY_get_attr_by_NID(key, nid, lastpos)
    @ccall libwebsockets.EVP_PKEY_get_attr_by_NID(key::Ptr{EVP_PKEY}, nid::Cint, lastpos::Cint)::Cint
end

function EVP_PKEY_get_attr_by_OBJ(key, obj, lastpos)
    @ccall libwebsockets.EVP_PKEY_get_attr_by_OBJ(key::Ptr{EVP_PKEY}, obj::Ptr{ASN1_OBJECT}, lastpos::Cint)::Cint
end

function EVP_PKEY_get_attr(key, loc)
    @ccall libwebsockets.EVP_PKEY_get_attr(key::Ptr{EVP_PKEY}, loc::Cint)::Ptr{X509_ATTRIBUTE}
end

function EVP_PKEY_delete_attr(key, loc)
    @ccall libwebsockets.EVP_PKEY_delete_attr(key::Ptr{EVP_PKEY}, loc::Cint)::Ptr{X509_ATTRIBUTE}
end

function EVP_PKEY_add1_attr(key, attr)
    @ccall libwebsockets.EVP_PKEY_add1_attr(key::Ptr{EVP_PKEY}, attr::Ptr{X509_ATTRIBUTE})::Cint
end

function EVP_PKEY_add1_attr_by_OBJ(key, obj, type, bytes, len)
    @ccall libwebsockets.EVP_PKEY_add1_attr_by_OBJ(key::Ptr{EVP_PKEY}, obj::Ptr{ASN1_OBJECT}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function EVP_PKEY_add1_attr_by_NID(key, nid, type, bytes, len)
    @ccall libwebsockets.EVP_PKEY_add1_attr_by_NID(key::Ptr{EVP_PKEY}, nid::Cint, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function EVP_PKEY_add1_attr_by_txt(key, attrname, type, bytes, len)
    @ccall libwebsockets.EVP_PKEY_add1_attr_by_txt(key::Ptr{EVP_PKEY}, attrname::Ptr{Cchar}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_find_by_issuer_and_serial(sk, name, serial)
    @ccall libwebsockets.X509_find_by_issuer_and_serial(sk::Ptr{stack_st_X509}, name::Ptr{X509_NAME}, serial::Ptr{ASN1_INTEGER})::Ptr{X509}
end

function X509_find_by_subject(sk, name)
    @ccall libwebsockets.X509_find_by_subject(sk::Ptr{stack_st_X509}, name::Ptr{X509_NAME})::Ptr{X509}
end

function PBEPARAM_new()
    @ccall libwebsockets.PBEPARAM_new()::Ptr{PBEPARAM}
end

function PBEPARAM_free(a)
    @ccall libwebsockets.PBEPARAM_free(a::Ptr{PBEPARAM})::Cvoid
end

function d2i_PBEPARAM(a, in, len)
    @ccall libwebsockets.d2i_PBEPARAM(a::Ptr{Ptr{PBEPARAM}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PBEPARAM}
end

function i2d_PBEPARAM(a, out)
    @ccall libwebsockets.i2d_PBEPARAM(a::Ptr{PBEPARAM}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PBEPARAM_it()
    @ccall libwebsockets.PBEPARAM_it()::Ptr{ASN1_ITEM}
end

function PBE2PARAM_new()
    @ccall libwebsockets.PBE2PARAM_new()::Ptr{PBE2PARAM}
end

function PBE2PARAM_free(a)
    @ccall libwebsockets.PBE2PARAM_free(a::Ptr{PBE2PARAM})::Cvoid
end

function d2i_PBE2PARAM(a, in, len)
    @ccall libwebsockets.d2i_PBE2PARAM(a::Ptr{Ptr{PBE2PARAM}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PBE2PARAM}
end

function i2d_PBE2PARAM(a, out)
    @ccall libwebsockets.i2d_PBE2PARAM(a::Ptr{PBE2PARAM}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PBE2PARAM_it()
    @ccall libwebsockets.PBE2PARAM_it()::Ptr{ASN1_ITEM}
end

function PBKDF2PARAM_new()
    @ccall libwebsockets.PBKDF2PARAM_new()::Ptr{PBKDF2PARAM}
end

function PBKDF2PARAM_free(a)
    @ccall libwebsockets.PBKDF2PARAM_free(a::Ptr{PBKDF2PARAM})::Cvoid
end

function d2i_PBKDF2PARAM(a, in, len)
    @ccall libwebsockets.d2i_PBKDF2PARAM(a::Ptr{Ptr{PBKDF2PARAM}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PBKDF2PARAM}
end

function i2d_PBKDF2PARAM(a, out)
    @ccall libwebsockets.i2d_PBKDF2PARAM(a::Ptr{PBKDF2PARAM}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PBKDF2PARAM_it()
    @ccall libwebsockets.PBKDF2PARAM_it()::Ptr{ASN1_ITEM}
end

function SCRYPT_PARAMS_new()
    @ccall libwebsockets.SCRYPT_PARAMS_new()::Ptr{SCRYPT_PARAMS}
end

function SCRYPT_PARAMS_free(a)
    @ccall libwebsockets.SCRYPT_PARAMS_free(a::Ptr{SCRYPT_PARAMS})::Cvoid
end

function d2i_SCRYPT_PARAMS(a, in, len)
    @ccall libwebsockets.d2i_SCRYPT_PARAMS(a::Ptr{Ptr{SCRYPT_PARAMS}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{SCRYPT_PARAMS}
end

function i2d_SCRYPT_PARAMS(a, out)
    @ccall libwebsockets.i2d_SCRYPT_PARAMS(a::Ptr{SCRYPT_PARAMS}, out::Ptr{Ptr{Cuchar}})::Cint
end

function SCRYPT_PARAMS_it()
    @ccall libwebsockets.SCRYPT_PARAMS_it()::Ptr{ASN1_ITEM}
end

function PKCS5_pbe_set0_algor(algor, alg, iter, salt, saltlen)
    @ccall libwebsockets.PKCS5_pbe_set0_algor(algor::Ptr{X509_ALGOR}, alg::Cint, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint)::Cint
end

function PKCS5_pbe_set0_algor_ex(algor, alg, iter, salt, saltlen, libctx)
    @ccall libwebsockets.PKCS5_pbe_set0_algor_ex(algor::Ptr{X509_ALGOR}, alg::Cint, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint, libctx::Ptr{OSSL_LIB_CTX})::Cint
end

function PKCS5_pbe_set(alg, iter, salt, saltlen)
    @ccall libwebsockets.PKCS5_pbe_set(alg::Cint, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint)::Ptr{X509_ALGOR}
end

function PKCS5_pbe_set_ex(alg, iter, salt, saltlen, libctx)
    @ccall libwebsockets.PKCS5_pbe_set_ex(alg::Cint, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint, libctx::Ptr{OSSL_LIB_CTX})::Ptr{X509_ALGOR}
end

function PKCS5_pbe2_set(cipher, iter, salt, saltlen)
    @ccall libwebsockets.PKCS5_pbe2_set(cipher::Ptr{EVP_CIPHER}, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint)::Ptr{X509_ALGOR}
end

function PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, aiv, prf_nid)
    @ccall libwebsockets.PKCS5_pbe2_set_iv(cipher::Ptr{EVP_CIPHER}, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint, aiv::Ptr{Cuchar}, prf_nid::Cint)::Ptr{X509_ALGOR}
end

function PKCS5_pbe2_set_iv_ex(cipher, iter, salt, saltlen, aiv, prf_nid, libctx)
    @ccall libwebsockets.PKCS5_pbe2_set_iv_ex(cipher::Ptr{EVP_CIPHER}, iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint, aiv::Ptr{Cuchar}, prf_nid::Cint, libctx::Ptr{OSSL_LIB_CTX})::Ptr{X509_ALGOR}
end

function PKCS5_pbe2_set_scrypt(cipher, salt, saltlen, aiv, N, r, p)
    @ccall libwebsockets.PKCS5_pbe2_set_scrypt(cipher::Ptr{EVP_CIPHER}, salt::Ptr{Cuchar}, saltlen::Cint, aiv::Ptr{Cuchar}, N::UInt64, r::UInt64, p::UInt64)::Ptr{X509_ALGOR}
end

function PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen)
    @ccall libwebsockets.PKCS5_pbkdf2_set(iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint, prf_nid::Cint, keylen::Cint)::Ptr{X509_ALGOR}
end

function PKCS5_pbkdf2_set_ex(iter, salt, saltlen, prf_nid, keylen, libctx)
    @ccall libwebsockets.PKCS5_pbkdf2_set_ex(iter::Cint, salt::Ptr{Cuchar}, saltlen::Cint, prf_nid::Cint, keylen::Cint, libctx::Ptr{OSSL_LIB_CTX})::Ptr{X509_ALGOR}
end

function PKCS8_PRIV_KEY_INFO_new()
    @ccall libwebsockets.PKCS8_PRIV_KEY_INFO_new()::Ptr{PKCS8_PRIV_KEY_INFO}
end

function PKCS8_PRIV_KEY_INFO_free(a)
    @ccall libwebsockets.PKCS8_PRIV_KEY_INFO_free(a::Ptr{PKCS8_PRIV_KEY_INFO})::Cvoid
end

function d2i_PKCS8_PRIV_KEY_INFO(a, in, len)
    @ccall libwebsockets.d2i_PKCS8_PRIV_KEY_INFO(a::Ptr{Ptr{PKCS8_PRIV_KEY_INFO}}, in::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{PKCS8_PRIV_KEY_INFO}
end

function i2d_PKCS8_PRIV_KEY_INFO(a, out)
    @ccall libwebsockets.i2d_PKCS8_PRIV_KEY_INFO(a::Ptr{PKCS8_PRIV_KEY_INFO}, out::Ptr{Ptr{Cuchar}})::Cint
end

function PKCS8_PRIV_KEY_INFO_it()
    @ccall libwebsockets.PKCS8_PRIV_KEY_INFO_it()::Ptr{ASN1_ITEM}
end

function EVP_PKCS82PKEY(p8)
    @ccall libwebsockets.EVP_PKCS82PKEY(p8::Ptr{PKCS8_PRIV_KEY_INFO})::Ptr{EVP_PKEY}
end

function EVP_PKCS82PKEY_ex(p8, libctx, propq)
    @ccall libwebsockets.EVP_PKCS82PKEY_ex(p8::Ptr{PKCS8_PRIV_KEY_INFO}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function EVP_PKEY2PKCS8(pkey)
    @ccall libwebsockets.EVP_PKEY2PKCS8(pkey::Ptr{EVP_PKEY})::Ptr{PKCS8_PRIV_KEY_INFO}
end

function PKCS8_pkey_set0(priv, aobj, version, ptype, pval, penc, penclen)
    @ccall libwebsockets.PKCS8_pkey_set0(priv::Ptr{PKCS8_PRIV_KEY_INFO}, aobj::Ptr{ASN1_OBJECT}, version::Cint, ptype::Cint, pval::Ptr{Cvoid}, penc::Ptr{Cuchar}, penclen::Cint)::Cint
end

function PKCS8_pkey_get0(ppkalg, pk, ppklen, pa, p8)
    @ccall libwebsockets.PKCS8_pkey_get0(ppkalg::Ptr{Ptr{ASN1_OBJECT}}, pk::Ptr{Ptr{Cuchar}}, ppklen::Ptr{Cint}, pa::Ptr{Ptr{X509_ALGOR}}, p8::Ptr{PKCS8_PRIV_KEY_INFO})::Cint
end

function PKCS8_pkey_get0_attrs(p8)
    @ccall libwebsockets.PKCS8_pkey_get0_attrs(p8::Ptr{PKCS8_PRIV_KEY_INFO})::Ptr{stack_st_X509_ATTRIBUTE}
end

function PKCS8_pkey_add1_attr(p8, attr)
    @ccall libwebsockets.PKCS8_pkey_add1_attr(p8::Ptr{PKCS8_PRIV_KEY_INFO}, attr::Ptr{X509_ATTRIBUTE})::Cint
end

function PKCS8_pkey_add1_attr_by_NID(p8, nid, type, bytes, len)
    @ccall libwebsockets.PKCS8_pkey_add1_attr_by_NID(p8::Ptr{PKCS8_PRIV_KEY_INFO}, nid::Cint, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function PKCS8_pkey_add1_attr_by_OBJ(p8, obj, type, bytes, len)
    @ccall libwebsockets.PKCS8_pkey_add1_attr_by_OBJ(p8::Ptr{PKCS8_PRIV_KEY_INFO}, obj::Ptr{ASN1_OBJECT}, type::Cint, bytes::Ptr{Cuchar}, len::Cint)::Cint
end

function X509_PUBKEY_set0_param(pub, aobj, ptype, pval, penc, penclen)
    @ccall libwebsockets.X509_PUBKEY_set0_param(pub::Ptr{X509_PUBKEY}, aobj::Ptr{ASN1_OBJECT}, ptype::Cint, pval::Ptr{Cvoid}, penc::Ptr{Cuchar}, penclen::Cint)::Cint
end

function X509_PUBKEY_get0_param(ppkalg, pk, ppklen, pa, pub)
    @ccall libwebsockets.X509_PUBKEY_get0_param(ppkalg::Ptr{Ptr{ASN1_OBJECT}}, pk::Ptr{Ptr{Cuchar}}, ppklen::Ptr{Cint}, pa::Ptr{Ptr{X509_ALGOR}}, pub::Ptr{X509_PUBKEY})::Cint
end

function X509_PUBKEY_eq(a, b)
    @ccall libwebsockets.X509_PUBKEY_eq(a::Ptr{X509_PUBKEY}, b::Ptr{X509_PUBKEY})::Cint
end

function PEM_get_EVP_CIPHER_INFO(header, cipher)
    @ccall libwebsockets.PEM_get_EVP_CIPHER_INFO(header::Ptr{Cchar}, cipher::Ptr{EVP_CIPHER_INFO})::Cint
end

function PEM_do_header(cipher, data, len, callback, u)
    @ccall libwebsockets.PEM_do_header(cipher::Ptr{EVP_CIPHER_INFO}, data::Ptr{Cuchar}, len::Ptr{Clong}, callback::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_read_bio(bp, name, header, data, len)
    @ccall libwebsockets.PEM_read_bio(bp::Ptr{BIO}, name::Ptr{Ptr{Cchar}}, header::Ptr{Ptr{Cchar}}, data::Ptr{Ptr{Cuchar}}, len::Ptr{Clong})::Cint
end

function PEM_read_bio_ex(bp, name, header, data, len, flags)
    @ccall libwebsockets.PEM_read_bio_ex(bp::Ptr{BIO}, name::Ptr{Ptr{Cchar}}, header::Ptr{Ptr{Cchar}}, data::Ptr{Ptr{Cuchar}}, len::Ptr{Clong}, flags::Cuint)::Cint
end

function PEM_bytes_read_bio_secmem(pdata, plen, pnm, name, bp, cb, u)
    @ccall libwebsockets.PEM_bytes_read_bio_secmem(pdata::Ptr{Ptr{Cuchar}}, plen::Ptr{Clong}, pnm::Ptr{Ptr{Cchar}}, name::Ptr{Cchar}, bp::Ptr{BIO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_bio(bp, name, hdr, data, len)
    @ccall libwebsockets.PEM_write_bio(bp::Ptr{BIO}, name::Ptr{Cchar}, hdr::Ptr{Cchar}, data::Ptr{Cuchar}, len::Clong)::Cint
end

function PEM_bytes_read_bio(pdata, plen, pnm, name, bp, cb, u)
    @ccall libwebsockets.PEM_bytes_read_bio(pdata::Ptr{Ptr{Cuchar}}, plen::Ptr{Clong}, pnm::Ptr{Ptr{Cchar}}, name::Ptr{Cchar}, bp::Ptr{BIO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_X509_INFO_read_bio(bp, sk, cb, u)
    @ccall libwebsockets.PEM_X509_INFO_read_bio(bp::Ptr{BIO}, sk::Ptr{stack_st_X509_INFO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{stack_st_X509_INFO}
end

function PEM_X509_INFO_read_bio_ex(bp, sk, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_X509_INFO_read_bio_ex(bp::Ptr{BIO}, sk::Ptr{stack_st_X509_INFO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{stack_st_X509_INFO}
end

function PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cd, u)
    @ccall libwebsockets.PEM_X509_INFO_write_bio(bp::Ptr{BIO}, xi::Ptr{X509_INFO}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cd::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_read(fp, name, header, data, len)
    @ccall libwebsockets.PEM_read(fp::Ptr{Libc.FILE}, name::Ptr{Ptr{Cchar}}, header::Ptr{Ptr{Cchar}}, data::Ptr{Ptr{Cuchar}}, len::Ptr{Clong})::Cint
end

function PEM_write(fp, name, hdr, data, len)
    @ccall libwebsockets.PEM_write(fp::Ptr{Libc.FILE}, name::Ptr{Cchar}, hdr::Ptr{Cchar}, data::Ptr{Cuchar}, len::Clong)::Cint
end

function PEM_X509_INFO_read(fp, sk, cb, u)
    @ccall libwebsockets.PEM_X509_INFO_read(fp::Ptr{Libc.FILE}, sk::Ptr{stack_st_X509_INFO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{stack_st_X509_INFO}
end

function PEM_X509_INFO_read_ex(fp, sk, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_X509_INFO_read_ex(fp::Ptr{Libc.FILE}, sk::Ptr{stack_st_X509_INFO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{stack_st_X509_INFO}
end

function PEM_SignInit(ctx, type)
    @ccall libwebsockets.PEM_SignInit(ctx::Ptr{EVP_MD_CTX}, type::Ptr{EVP_MD})::Cint
end

function PEM_SignUpdate(ctx, d, cnt)
    @ccall libwebsockets.PEM_SignUpdate(ctx::Ptr{EVP_MD_CTX}, d::Ptr{Cuchar}, cnt::Cuint)::Cint
end

function PEM_SignFinal(ctx, sigret, siglen, pkey)
    @ccall libwebsockets.PEM_SignFinal(ctx::Ptr{EVP_MD_CTX}, sigret::Ptr{Cuchar}, siglen::Ptr{Cuint}, pkey::Ptr{EVP_PKEY})::Cint
end

function PEM_def_callback(buf, num, rwflag, userdata)
    @ccall libwebsockets.PEM_def_callback(buf::Ptr{Cchar}, num::Cint, rwflag::Cint, userdata::Ptr{Cvoid})::Cint
end

function PEM_proc_type(buf, type)
    @ccall libwebsockets.PEM_proc_type(buf::Ptr{Cchar}, type::Cint)::Cvoid
end

function PEM_dek_info(buf, type, len, str)
    @ccall libwebsockets.PEM_dek_info(buf::Ptr{Cchar}, type::Ptr{Cchar}, len::Cint, str::Ptr{Cchar})::Cvoid
end

function PEM_read_bio_X509(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_X509(out::Ptr{BIO}, x::Ptr{Ptr{X509}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509}
end

function PEM_read_X509(out, x, cb, u)
    @ccall libwebsockets.PEM_read_X509(out::Ptr{Libc.FILE}, x::Ptr{Ptr{X509}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509}
end

function PEM_write_bio_X509(out, x)
    @ccall libwebsockets.PEM_write_bio_X509(out::Ptr{BIO}, x::Ptr{X509})::Cint
end

function PEM_write_X509(out, x)
    @ccall libwebsockets.PEM_write_X509(out::Ptr{Libc.FILE}, x::Ptr{X509})::Cint
end

function PEM_read_bio_X509_AUX(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_X509_AUX(out::Ptr{BIO}, x::Ptr{Ptr{X509}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509}
end

function PEM_read_X509_AUX(out, x, cb, u)
    @ccall libwebsockets.PEM_read_X509_AUX(out::Ptr{Libc.FILE}, x::Ptr{Ptr{X509}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509}
end

function PEM_write_bio_X509_AUX(out, x)
    @ccall libwebsockets.PEM_write_bio_X509_AUX(out::Ptr{BIO}, x::Ptr{X509})::Cint
end

function PEM_write_X509_AUX(out, x)
    @ccall libwebsockets.PEM_write_X509_AUX(out::Ptr{Libc.FILE}, x::Ptr{X509})::Cint
end

function PEM_read_bio_X509_REQ(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_X509_REQ(out::Ptr{BIO}, x::Ptr{Ptr{X509_REQ}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_REQ}
end

function PEM_read_X509_REQ(out, x, cb, u)
    @ccall libwebsockets.PEM_read_X509_REQ(out::Ptr{Libc.FILE}, x::Ptr{Ptr{X509_REQ}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_REQ}
end

function PEM_write_bio_X509_REQ(out, x)
    @ccall libwebsockets.PEM_write_bio_X509_REQ(out::Ptr{BIO}, x::Ptr{X509_REQ})::Cint
end

function PEM_write_X509_REQ(out, x)
    @ccall libwebsockets.PEM_write_X509_REQ(out::Ptr{Libc.FILE}, x::Ptr{X509_REQ})::Cint
end

function PEM_write_bio_X509_REQ_NEW(out, x)
    @ccall libwebsockets.PEM_write_bio_X509_REQ_NEW(out::Ptr{BIO}, x::Ptr{X509_REQ})::Cint
end

function PEM_write_X509_REQ_NEW(out, x)
    @ccall libwebsockets.PEM_write_X509_REQ_NEW(out::Ptr{Libc.FILE}, x::Ptr{X509_REQ})::Cint
end

function PEM_read_bio_X509_CRL(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_X509_CRL(out::Ptr{BIO}, x::Ptr{Ptr{X509_CRL}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_CRL}
end

function PEM_read_X509_CRL(out, x, cb, u)
    @ccall libwebsockets.PEM_read_X509_CRL(out::Ptr{Libc.FILE}, x::Ptr{Ptr{X509_CRL}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_CRL}
end

function PEM_write_bio_X509_CRL(out, x)
    @ccall libwebsockets.PEM_write_bio_X509_CRL(out::Ptr{BIO}, x::Ptr{X509_CRL})::Cint
end

function PEM_write_X509_CRL(out, x)
    @ccall libwebsockets.PEM_write_X509_CRL(out::Ptr{Libc.FILE}, x::Ptr{X509_CRL})::Cint
end

function PEM_read_bio_X509_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_X509_PUBKEY(out::Ptr{BIO}, x::Ptr{Ptr{X509_PUBKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_PUBKEY}
end

function PEM_read_X509_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_X509_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{Ptr{X509_PUBKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_PUBKEY}
end

function PEM_write_bio_X509_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_bio_X509_PUBKEY(out::Ptr{BIO}, x::Ptr{X509_PUBKEY})::Cint
end

function PEM_write_X509_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_X509_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{X509_PUBKEY})::Cint
end

function PEM_read_bio_PKCS7(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_PKCS7(out::Ptr{BIO}, x::Ptr{Ptr{PKCS7}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{PKCS7}
end

function PEM_read_PKCS7(out, x, cb, u)
    @ccall libwebsockets.PEM_read_PKCS7(out::Ptr{Libc.FILE}, x::Ptr{Ptr{PKCS7}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{PKCS7}
end

function PEM_write_bio_PKCS7(out, x)
    @ccall libwebsockets.PEM_write_bio_PKCS7(out::Ptr{BIO}, x::Ptr{PKCS7})::Cint
end

function PEM_write_PKCS7(out, x)
    @ccall libwebsockets.PEM_write_PKCS7(out::Ptr{Libc.FILE}, x::Ptr{PKCS7})::Cint
end

function PEM_read_bio_NETSCAPE_CERT_SEQUENCE(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_NETSCAPE_CERT_SEQUENCE(out::Ptr{BIO}, x::Ptr{Ptr{NETSCAPE_CERT_SEQUENCE}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{NETSCAPE_CERT_SEQUENCE}
end

function PEM_read_NETSCAPE_CERT_SEQUENCE(out, x, cb, u)
    @ccall libwebsockets.PEM_read_NETSCAPE_CERT_SEQUENCE(out::Ptr{Libc.FILE}, x::Ptr{Ptr{NETSCAPE_CERT_SEQUENCE}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{NETSCAPE_CERT_SEQUENCE}
end

function PEM_write_bio_NETSCAPE_CERT_SEQUENCE(out, x)
    @ccall libwebsockets.PEM_write_bio_NETSCAPE_CERT_SEQUENCE(out::Ptr{BIO}, x::Ptr{NETSCAPE_CERT_SEQUENCE})::Cint
end

function PEM_write_NETSCAPE_CERT_SEQUENCE(out, x)
    @ccall libwebsockets.PEM_write_NETSCAPE_CERT_SEQUENCE(out::Ptr{Libc.FILE}, x::Ptr{NETSCAPE_CERT_SEQUENCE})::Cint
end

function PEM_read_bio_PKCS8(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_PKCS8(out::Ptr{BIO}, x::Ptr{Ptr{X509_SIG}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_SIG}
end

function PEM_read_PKCS8(out, x, cb, u)
    @ccall libwebsockets.PEM_read_PKCS8(out::Ptr{Libc.FILE}, x::Ptr{Ptr{X509_SIG}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{X509_SIG}
end

function PEM_write_bio_PKCS8(out, x)
    @ccall libwebsockets.PEM_write_bio_PKCS8(out::Ptr{BIO}, x::Ptr{X509_SIG})::Cint
end

function PEM_write_PKCS8(out, x)
    @ccall libwebsockets.PEM_write_PKCS8(out::Ptr{Libc.FILE}, x::Ptr{X509_SIG})::Cint
end

function PEM_read_bio_PKCS8_PRIV_KEY_INFO(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_PKCS8_PRIV_KEY_INFO(out::Ptr{BIO}, x::Ptr{Ptr{PKCS8_PRIV_KEY_INFO}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{PKCS8_PRIV_KEY_INFO}
end

function PEM_read_PKCS8_PRIV_KEY_INFO(out, x, cb, u)
    @ccall libwebsockets.PEM_read_PKCS8_PRIV_KEY_INFO(out::Ptr{Libc.FILE}, x::Ptr{Ptr{PKCS8_PRIV_KEY_INFO}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{PKCS8_PRIV_KEY_INFO}
end

function PEM_write_bio_PKCS8_PRIV_KEY_INFO(out, x)
    @ccall libwebsockets.PEM_write_bio_PKCS8_PRIV_KEY_INFO(out::Ptr{BIO}, x::Ptr{PKCS8_PRIV_KEY_INFO})::Cint
end

function PEM_write_PKCS8_PRIV_KEY_INFO(out, x)
    @ccall libwebsockets.PEM_write_PKCS8_PRIV_KEY_INFO(out::Ptr{Libc.FILE}, x::Ptr{PKCS8_PRIV_KEY_INFO})::Cint
end

function PEM_read_bio_RSAPrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_RSAPrivateKey(out::Ptr{BIO}, x::Ptr{Ptr{RSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{RSA}
end

function PEM_read_RSAPrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_RSAPrivateKey(out::Ptr{Libc.FILE}, x::Ptr{Ptr{RSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{RSA}
end

function PEM_write_bio_RSAPrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_RSAPrivateKey(out::Ptr{BIO}, x::Ptr{RSA}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_RSAPrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_RSAPrivateKey(out::Ptr{Libc.FILE}, x::Ptr{RSA}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_read_bio_RSAPublicKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_RSAPublicKey(out::Ptr{BIO}, x::Ptr{Ptr{RSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{RSA}
end

function PEM_read_RSAPublicKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_RSAPublicKey(out::Ptr{Libc.FILE}, x::Ptr{Ptr{RSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{RSA}
end

function PEM_write_bio_RSAPublicKey(out, x)
    @ccall libwebsockets.PEM_write_bio_RSAPublicKey(out::Ptr{BIO}, x::Ptr{RSA})::Cint
end

function PEM_write_RSAPublicKey(out, x)
    @ccall libwebsockets.PEM_write_RSAPublicKey(out::Ptr{Libc.FILE}, x::Ptr{RSA})::Cint
end

function PEM_read_bio_RSA_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_RSA_PUBKEY(out::Ptr{BIO}, x::Ptr{Ptr{RSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{RSA}
end

function PEM_read_RSA_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_RSA_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{Ptr{RSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{RSA}
end

function PEM_write_bio_RSA_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_bio_RSA_PUBKEY(out::Ptr{BIO}, x::Ptr{RSA})::Cint
end

function PEM_write_RSA_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_RSA_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{RSA})::Cint
end

function PEM_read_bio_DSAPrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_DSAPrivateKey(out::Ptr{BIO}, x::Ptr{Ptr{DSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DSA}
end

function PEM_read_DSAPrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_DSAPrivateKey(out::Ptr{Libc.FILE}, x::Ptr{Ptr{DSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DSA}
end

function PEM_write_bio_DSAPrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_DSAPrivateKey(out::Ptr{BIO}, x::Ptr{DSA}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_DSAPrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_DSAPrivateKey(out::Ptr{Libc.FILE}, x::Ptr{DSA}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_read_bio_DSA_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_DSA_PUBKEY(out::Ptr{BIO}, x::Ptr{Ptr{DSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DSA}
end

function PEM_read_DSA_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_DSA_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{Ptr{DSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DSA}
end

function PEM_write_bio_DSA_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_bio_DSA_PUBKEY(out::Ptr{BIO}, x::Ptr{DSA})::Cint
end

function PEM_write_DSA_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_DSA_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{DSA})::Cint
end

function PEM_read_bio_DSAparams(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_DSAparams(out::Ptr{BIO}, x::Ptr{Ptr{DSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DSA}
end

function PEM_read_DSAparams(out, x, cb, u)
    @ccall libwebsockets.PEM_read_DSAparams(out::Ptr{Libc.FILE}, x::Ptr{Ptr{DSA}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DSA}
end

function PEM_write_bio_DSAparams(out, x)
    @ccall libwebsockets.PEM_write_bio_DSAparams(out::Ptr{BIO}, x::Ptr{DSA})::Cint
end

function PEM_write_DSAparams(out, x)
    @ccall libwebsockets.PEM_write_DSAparams(out::Ptr{Libc.FILE}, x::Ptr{DSA})::Cint
end

function PEM_read_bio_ECPKParameters(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_ECPKParameters(out::Ptr{BIO}, x::Ptr{Ptr{EC_GROUP}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EC_GROUP}
end

function PEM_read_ECPKParameters(out, x, cb, u)
    @ccall libwebsockets.PEM_read_ECPKParameters(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EC_GROUP}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EC_GROUP}
end

function PEM_write_bio_ECPKParameters(out, x)
    @ccall libwebsockets.PEM_write_bio_ECPKParameters(out::Ptr{BIO}, x::Ptr{EC_GROUP})::Cint
end

function PEM_write_ECPKParameters(out, x)
    @ccall libwebsockets.PEM_write_ECPKParameters(out::Ptr{Libc.FILE}, x::Ptr{EC_GROUP})::Cint
end

function PEM_read_bio_ECPrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_ECPrivateKey(out::Ptr{BIO}, x::Ptr{Ptr{EC_KEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EC_KEY}
end

function PEM_read_ECPrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_ECPrivateKey(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EC_KEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EC_KEY}
end

function PEM_write_bio_ECPrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_ECPrivateKey(out::Ptr{BIO}, x::Ptr{EC_KEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_ECPrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_ECPrivateKey(out::Ptr{Libc.FILE}, x::Ptr{EC_KEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_read_bio_EC_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_EC_PUBKEY(out::Ptr{BIO}, x::Ptr{Ptr{EC_KEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EC_KEY}
end

function PEM_read_EC_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_EC_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EC_KEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EC_KEY}
end

function PEM_write_bio_EC_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_bio_EC_PUBKEY(out::Ptr{BIO}, x::Ptr{EC_KEY})::Cint
end

function PEM_write_EC_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_EC_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{EC_KEY})::Cint
end

function PEM_read_bio_DHparams(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_DHparams(out::Ptr{BIO}, x::Ptr{Ptr{DH}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DH}
end

function PEM_read_DHparams(out, x, cb, u)
    @ccall libwebsockets.PEM_read_DHparams(out::Ptr{Libc.FILE}, x::Ptr{Ptr{DH}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{DH}
end

function PEM_write_bio_DHparams(out, x)
    @ccall libwebsockets.PEM_write_bio_DHparams(out::Ptr{BIO}, x::Ptr{DH})::Cint
end

function PEM_write_DHparams(out, x)
    @ccall libwebsockets.PEM_write_DHparams(out::Ptr{Libc.FILE}, x::Ptr{DH})::Cint
end

function PEM_write_bio_DHxparams(out, x)
    @ccall libwebsockets.PEM_write_bio_DHxparams(out::Ptr{BIO}, x::Ptr{DH})::Cint
end

function PEM_write_DHxparams(out, x)
    @ccall libwebsockets.PEM_write_DHxparams(out::Ptr{Libc.FILE}, x::Ptr{DH})::Cint
end

function PEM_read_bio_PrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_PrivateKey(out::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function PEM_read_bio_PrivateKey_ex(out, x, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_read_bio_PrivateKey_ex(out::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function PEM_read_PrivateKey(out, x, cb, u)
    @ccall libwebsockets.PEM_read_PrivateKey(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function PEM_read_PrivateKey_ex(out, x, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_read_PrivateKey_ex(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function PEM_write_bio_PrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_PrivateKey(out::Ptr{BIO}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_bio_PrivateKey_ex(out, x, enc, kstr, klen, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_write_bio_PrivateKey_ex(out::Ptr{BIO}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PEM_write_PrivateKey(out, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_PrivateKey(out::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_PrivateKey_ex(out, x, enc, kstr, klen, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_write_PrivateKey_ex(out::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PEM_read_bio_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_PUBKEY(out::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function PEM_read_bio_PUBKEY_ex(out, x, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_read_bio_PUBKEY_ex(out::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function PEM_read_PUBKEY(out, x, cb, u)
    @ccall libwebsockets.PEM_read_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function PEM_read_PUBKEY_ex(out, x, cb, u, libctx, propq)
    @ccall libwebsockets.PEM_read_PUBKEY_ex(out::Ptr{Libc.FILE}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function PEM_write_bio_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_bio_PUBKEY(out::Ptr{BIO}, x::Ptr{EVP_PKEY})::Cint
end

function PEM_write_bio_PUBKEY_ex(out, x, libctx, propq)
    @ccall libwebsockets.PEM_write_bio_PUBKEY_ex(out::Ptr{BIO}, x::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PEM_write_PUBKEY(out, x)
    @ccall libwebsockets.PEM_write_PUBKEY(out::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY})::Cint
end

function PEM_write_PUBKEY_ex(out, x, libctx, propq)
    @ccall libwebsockets.PEM_write_PUBKEY_ex(out::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function PEM_write_bio_PrivateKey_traditional(bp, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_PrivateKey_traditional(bp::Ptr{BIO}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cuchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_bio_PKCS8PrivateKey_nid(bp, x, nid, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_PKCS8PrivateKey_nid(bp::Ptr{BIO}, x::Ptr{EVP_PKEY}, nid::Cint, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_bio_PKCS8PrivateKey(arg1, arg2, arg3, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_bio_PKCS8PrivateKey(arg1::Ptr{BIO}, arg2::Ptr{EVP_PKEY}, arg3::Ptr{EVP_CIPHER}, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function i2d_PKCS8PrivateKey_bio(bp, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.i2d_PKCS8PrivateKey_bio(bp::Ptr{BIO}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function i2d_PKCS8PrivateKey_nid_bio(bp, x, nid, kstr, klen, cb, u)
    @ccall libwebsockets.i2d_PKCS8PrivateKey_nid_bio(bp::Ptr{BIO}, x::Ptr{EVP_PKEY}, nid::Cint, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function d2i_PKCS8PrivateKey_bio(bp, x, cb, u)
    @ccall libwebsockets.d2i_PKCS8PrivateKey_bio(bp::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function i2d_PKCS8PrivateKey_fp(fp, x, enc, kstr, klen, cb, u)
    @ccall libwebsockets.i2d_PKCS8PrivateKey_fp(fp::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function i2d_PKCS8PrivateKey_nid_fp(fp, x, nid, kstr, klen, cb, u)
    @ccall libwebsockets.i2d_PKCS8PrivateKey_nid_fp(fp::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, nid::Cint, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_write_PKCS8PrivateKey_nid(fp, x, nid, kstr, klen, cb, u)
    @ccall libwebsockets.PEM_write_PKCS8PrivateKey_nid(fp::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, nid::Cint, kstr::Ptr{Cchar}, klen::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function d2i_PKCS8PrivateKey_fp(fp, x, cb, u)
    @ccall libwebsockets.d2i_PKCS8PrivateKey_fp(fp::Ptr{Libc.FILE}, x::Ptr{Ptr{EVP_PKEY}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function PEM_write_PKCS8PrivateKey(fp, x, enc, kstr, klen, cd, u)
    @ccall libwebsockets.PEM_write_PKCS8PrivateKey(fp::Ptr{Libc.FILE}, x::Ptr{EVP_PKEY}, enc::Ptr{EVP_CIPHER}, kstr::Ptr{Cchar}, klen::Cint, cd::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function PEM_read_bio_Parameters_ex(bp, x, libctx, propq)
    @ccall libwebsockets.PEM_read_bio_Parameters_ex(bp::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function PEM_read_bio_Parameters(bp, x)
    @ccall libwebsockets.PEM_read_bio_Parameters(bp::Ptr{BIO}, x::Ptr{Ptr{EVP_PKEY}})::Ptr{EVP_PKEY}
end

function PEM_write_bio_Parameters(bp, x)
    @ccall libwebsockets.PEM_write_bio_Parameters(bp::Ptr{BIO}, x::Ptr{EVP_PKEY})::Cint
end

function b2i_PrivateKey(in, length)
    @ccall libwebsockets.b2i_PrivateKey(in::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{EVP_PKEY}
end

function b2i_PublicKey(in, length)
    @ccall libwebsockets.b2i_PublicKey(in::Ptr{Ptr{Cuchar}}, length::Clong)::Ptr{EVP_PKEY}
end

function b2i_PrivateKey_bio(in)
    @ccall libwebsockets.b2i_PrivateKey_bio(in::Ptr{BIO})::Ptr{EVP_PKEY}
end

function b2i_PublicKey_bio(in)
    @ccall libwebsockets.b2i_PublicKey_bio(in::Ptr{BIO})::Ptr{EVP_PKEY}
end

function i2b_PrivateKey_bio(out, pk)
    @ccall libwebsockets.i2b_PrivateKey_bio(out::Ptr{BIO}, pk::Ptr{EVP_PKEY})::Cint
end

function i2b_PublicKey_bio(out, pk)
    @ccall libwebsockets.i2b_PublicKey_bio(out::Ptr{BIO}, pk::Ptr{EVP_PKEY})::Cint
end

function b2i_PVK_bio(in, cb, u)
    @ccall libwebsockets.b2i_PVK_bio(in::Ptr{BIO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{EVP_PKEY}
end

function b2i_PVK_bio_ex(in, cb, u, libctx, propq)
    @ccall libwebsockets.b2i_PVK_bio_ex(in::Ptr{BIO}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{EVP_PKEY}
end

function i2b_PVK_bio(out, pk, enclevel, cb, u)
    @ccall libwebsockets.i2b_PVK_bio(out::Ptr{BIO}, pk::Ptr{EVP_PKEY}, enclevel::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Cint
end

function i2b_PVK_bio_ex(out, pk, enclevel, cb, u, libctx, propq)
    @ccall libwebsockets.i2b_PVK_bio_ex(out::Ptr{BIO}, pk::Ptr{EVP_PKEY}, enclevel::Cint, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function HMAC_size(e)
    @ccall libwebsockets.HMAC_size(e::Ptr{HMAC_CTX})::Csize_t
end

function HMAC_CTX_new()
    @ccall libwebsockets.HMAC_CTX_new()::Ptr{HMAC_CTX}
end

function HMAC_CTX_reset(ctx)
    @ccall libwebsockets.HMAC_CTX_reset(ctx::Ptr{HMAC_CTX})::Cint
end

function HMAC_CTX_free(ctx)
    @ccall libwebsockets.HMAC_CTX_free(ctx::Ptr{HMAC_CTX})::Cvoid
end

function HMAC_Init(ctx, key, len, md)
    @ccall libwebsockets.HMAC_Init(ctx::Ptr{HMAC_CTX}, key::Ptr{Cvoid}, len::Cint, md::Ptr{EVP_MD})::Cint
end

function HMAC_Init_ex(ctx, key, len, md, impl)
    @ccall libwebsockets.HMAC_Init_ex(ctx::Ptr{HMAC_CTX}, key::Ptr{Cvoid}, len::Cint, md::Ptr{EVP_MD}, impl::Ptr{ENGINE})::Cint
end

function HMAC_Update(ctx, data, len)
    @ccall libwebsockets.HMAC_Update(ctx::Ptr{HMAC_CTX}, data::Ptr{Cuchar}, len::Csize_t)::Cint
end

function HMAC_Final(ctx, md, len)
    @ccall libwebsockets.HMAC_Final(ctx::Ptr{HMAC_CTX}, md::Ptr{Cuchar}, len::Ptr{Cuint})::Cint
end

function HMAC_CTX_copy(dctx, sctx)
    @ccall libwebsockets.HMAC_CTX_copy(dctx::Ptr{HMAC_CTX}, sctx::Ptr{HMAC_CTX})::Cint
end

function HMAC_CTX_set_flags(ctx, flags)
    @ccall libwebsockets.HMAC_CTX_set_flags(ctx::Ptr{HMAC_CTX}, flags::Culong)::Cvoid
end

function HMAC_CTX_get_md(ctx)
    @ccall libwebsockets.HMAC_CTX_get_md(ctx::Ptr{HMAC_CTX})::Ptr{EVP_MD}
end

function HMAC(evp_md, key, key_len, data, data_len, md, md_len)
    @ccall libwebsockets.HMAC(evp_md::Ptr{EVP_MD}, key::Ptr{Cvoid}, key_len::Cint, data::Ptr{Cuchar}, data_len::Csize_t, md::Ptr{Cuchar}, md_len::Ptr{Cuint})::Ptr{Cuchar}
end

mutable struct async_job_st end

const ASYNC_JOB = async_job_st

mutable struct async_wait_ctx_st end

const ASYNC_WAIT_CTX = async_wait_ctx_st

# typedef int ( * ASYNC_callback_fn ) ( void * arg )
const ASYNC_callback_fn = Ptr{Cvoid}

function ASYNC_init_thread(max_size, init_size)
    @ccall libwebsockets.ASYNC_init_thread(max_size::Csize_t, init_size::Csize_t)::Cint
end

function ASYNC_cleanup_thread()
    @ccall libwebsockets.ASYNC_cleanup_thread()::Cvoid
end

function ASYNC_WAIT_CTX_new()
    @ccall libwebsockets.ASYNC_WAIT_CTX_new()::Ptr{ASYNC_WAIT_CTX}
end

function ASYNC_WAIT_CTX_free(ctx)
    @ccall libwebsockets.ASYNC_WAIT_CTX_free(ctx::Ptr{ASYNC_WAIT_CTX})::Cvoid
end

function ASYNC_WAIT_CTX_set_wait_fd(ctx, key, fd, custom_data, cleanup)
    @ccall libwebsockets.ASYNC_WAIT_CTX_set_wait_fd(ctx::Ptr{ASYNC_WAIT_CTX}, key::Ptr{Cvoid}, fd::Cint, custom_data::Ptr{Cvoid}, cleanup::Ptr{Cvoid})::Cint
end

function ASYNC_WAIT_CTX_get_fd(ctx, key, fd, custom_data)
    @ccall libwebsockets.ASYNC_WAIT_CTX_get_fd(ctx::Ptr{ASYNC_WAIT_CTX}, key::Ptr{Cvoid}, fd::Ptr{Cint}, custom_data::Ptr{Ptr{Cvoid}})::Cint
end

function ASYNC_WAIT_CTX_get_all_fds(ctx, fd, numfds)
    @ccall libwebsockets.ASYNC_WAIT_CTX_get_all_fds(ctx::Ptr{ASYNC_WAIT_CTX}, fd::Ptr{Cint}, numfds::Ptr{Csize_t})::Cint
end

function ASYNC_WAIT_CTX_get_callback(ctx, callback, callback_arg)
    @ccall libwebsockets.ASYNC_WAIT_CTX_get_callback(ctx::Ptr{ASYNC_WAIT_CTX}, callback::Ptr{ASYNC_callback_fn}, callback_arg::Ptr{Ptr{Cvoid}})::Cint
end

function ASYNC_WAIT_CTX_set_callback(ctx, callback, callback_arg)
    @ccall libwebsockets.ASYNC_WAIT_CTX_set_callback(ctx::Ptr{ASYNC_WAIT_CTX}, callback::ASYNC_callback_fn, callback_arg::Ptr{Cvoid})::Cint
end

function ASYNC_WAIT_CTX_set_status(ctx, status)
    @ccall libwebsockets.ASYNC_WAIT_CTX_set_status(ctx::Ptr{ASYNC_WAIT_CTX}, status::Cint)::Cint
end

function ASYNC_WAIT_CTX_get_status(ctx)
    @ccall libwebsockets.ASYNC_WAIT_CTX_get_status(ctx::Ptr{ASYNC_WAIT_CTX})::Cint
end

function ASYNC_WAIT_CTX_get_changed_fds(ctx, addfd, numaddfds, delfd, numdelfds)
    @ccall libwebsockets.ASYNC_WAIT_CTX_get_changed_fds(ctx::Ptr{ASYNC_WAIT_CTX}, addfd::Ptr{Cint}, numaddfds::Ptr{Csize_t}, delfd::Ptr{Cint}, numdelfds::Ptr{Csize_t})::Cint
end

function ASYNC_WAIT_CTX_clear_fd(ctx, key)
    @ccall libwebsockets.ASYNC_WAIT_CTX_clear_fd(ctx::Ptr{ASYNC_WAIT_CTX}, key::Ptr{Cvoid})::Cint
end

function ASYNC_is_capable()
    @ccall libwebsockets.ASYNC_is_capable()::Cint
end

function ASYNC_start_job(job, ctx, ret, func, args, size)
    @ccall libwebsockets.ASYNC_start_job(job::Ptr{Ptr{ASYNC_JOB}}, ctx::Ptr{ASYNC_WAIT_CTX}, ret::Ptr{Cint}, func::Ptr{Cvoid}, args::Ptr{Cvoid}, size::Csize_t)::Cint
end

function ASYNC_pause_job()
    @ccall libwebsockets.ASYNC_pause_job()::Cint
end

function ASYNC_get_current_job()
    @ccall libwebsockets.ASYNC_get_current_job()::Ptr{ASYNC_JOB}
end

function ASYNC_get_wait_ctx(job)
    @ccall libwebsockets.ASYNC_get_wait_ctx(job::Ptr{ASYNC_JOB})::Ptr{ASYNC_WAIT_CTX}
end

function ASYNC_block_pause()
    @ccall libwebsockets.ASYNC_block_pause()::Cvoid
end

function ASYNC_unblock_pause()
    @ccall libwebsockets.ASYNC_unblock_pause()::Cvoid
end

const ct_log_entry_type_t = Int32
const CT_LOG_ENTRY_TYPE_NOT_SET = -1 % Int32
const CT_LOG_ENTRY_TYPE_X509 = 0 % Int32
const CT_LOG_ENTRY_TYPE_PRECERT = 1 % Int32

const sct_version_t = Int32
const SCT_VERSION_NOT_SET = -1 % Int32
const SCT_VERSION_V1 = 0 % Int32

const sct_source_t = UInt32
const SCT_SOURCE_UNKNOWN = 0 % UInt32
const SCT_SOURCE_TLS_EXTENSION = 1 % UInt32
const SCT_SOURCE_X509V3_EXTENSION = 2 % UInt32
const SCT_SOURCE_OCSP_STAPLED_RESPONSE = 3 % UInt32

const sct_validation_status_t = UInt32
const SCT_VALIDATION_STATUS_NOT_SET = 0 % UInt32
const SCT_VALIDATION_STATUS_UNKNOWN_LOG = 1 % UInt32
const SCT_VALIDATION_STATUS_VALID = 2 % UInt32
const SCT_VALIDATION_STATUS_INVALID = 3 % UInt32
const SCT_VALIDATION_STATUS_UNVERIFIED = 4 % UInt32
const SCT_VALIDATION_STATUS_UNKNOWN_VERSION = 5 % UInt32

function CT_POLICY_EVAL_CTX_new_ex(libctx, propq)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{CT_POLICY_EVAL_CTX}
end

function CT_POLICY_EVAL_CTX_new()
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_new()::Ptr{CT_POLICY_EVAL_CTX}
end

function CT_POLICY_EVAL_CTX_free(ctx)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_free(ctx::Ptr{CT_POLICY_EVAL_CTX})::Cvoid
end

function CT_POLICY_EVAL_CTX_get0_cert(ctx)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_get0_cert(ctx::Ptr{CT_POLICY_EVAL_CTX})::Ptr{X509}
end

function CT_POLICY_EVAL_CTX_set1_cert(ctx, cert)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_set1_cert(ctx::Ptr{CT_POLICY_EVAL_CTX}, cert::Ptr{X509})::Cint
end

function CT_POLICY_EVAL_CTX_get0_issuer(ctx)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_get0_issuer(ctx::Ptr{CT_POLICY_EVAL_CTX})::Ptr{X509}
end

function CT_POLICY_EVAL_CTX_set1_issuer(ctx, issuer)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_set1_issuer(ctx::Ptr{CT_POLICY_EVAL_CTX}, issuer::Ptr{X509})::Cint
end

function CT_POLICY_EVAL_CTX_get0_log_store(ctx)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_get0_log_store(ctx::Ptr{CT_POLICY_EVAL_CTX})::Ptr{CTLOG_STORE}
end

function CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx, log_store)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx::Ptr{CT_POLICY_EVAL_CTX}, log_store::Ptr{CTLOG_STORE})::Cvoid
end

function CT_POLICY_EVAL_CTX_get_time(ctx)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_get_time(ctx::Ptr{CT_POLICY_EVAL_CTX})::UInt64
end

function CT_POLICY_EVAL_CTX_set_time(ctx, time_in_ms)
    @ccall libwebsockets.CT_POLICY_EVAL_CTX_set_time(ctx::Ptr{CT_POLICY_EVAL_CTX}, time_in_ms::UInt64)::Cvoid
end

function SCT_new()
    @ccall libwebsockets.SCT_new()::Ptr{SCT}
end

function SCT_new_from_base64(version, logid_base64, entry_type, timestamp, extensions_base64, signature_base64)
    @ccall libwebsockets.SCT_new_from_base64(version::Cuchar, logid_base64::Ptr{Cchar}, entry_type::ct_log_entry_type_t, timestamp::UInt64, extensions_base64::Ptr{Cchar}, signature_base64::Ptr{Cchar})::Ptr{SCT}
end

function SCT_free(sct)
    @ccall libwebsockets.SCT_free(sct::Ptr{SCT})::Cvoid
end

function SCT_LIST_free(a)
    @ccall libwebsockets.SCT_LIST_free(a::Ptr{stack_st_SCT})::Cvoid
end

function SCT_get_version(sct)
    @ccall libwebsockets.SCT_get_version(sct::Ptr{SCT})::sct_version_t
end

function SCT_set_version(sct, version)
    @ccall libwebsockets.SCT_set_version(sct::Ptr{SCT}, version::sct_version_t)::Cint
end

function SCT_get_log_entry_type(sct)
    @ccall libwebsockets.SCT_get_log_entry_type(sct::Ptr{SCT})::ct_log_entry_type_t
end

function SCT_set_log_entry_type(sct, entry_type)
    @ccall libwebsockets.SCT_set_log_entry_type(sct::Ptr{SCT}, entry_type::ct_log_entry_type_t)::Cint
end

function SCT_get0_log_id(sct, log_id)
    @ccall libwebsockets.SCT_get0_log_id(sct::Ptr{SCT}, log_id::Ptr{Ptr{Cuchar}})::Csize_t
end

function SCT_set0_log_id(sct, log_id, log_id_len)
    @ccall libwebsockets.SCT_set0_log_id(sct::Ptr{SCT}, log_id::Ptr{Cuchar}, log_id_len::Csize_t)::Cint
end

function SCT_set1_log_id(sct, log_id, log_id_len)
    @ccall libwebsockets.SCT_set1_log_id(sct::Ptr{SCT}, log_id::Ptr{Cuchar}, log_id_len::Csize_t)::Cint
end

function SCT_get_timestamp(sct)
    @ccall libwebsockets.SCT_get_timestamp(sct::Ptr{SCT})::UInt64
end

function SCT_set_timestamp(sct, timestamp)
    @ccall libwebsockets.SCT_set_timestamp(sct::Ptr{SCT}, timestamp::UInt64)::Cvoid
end

function SCT_get_signature_nid(sct)
    @ccall libwebsockets.SCT_get_signature_nid(sct::Ptr{SCT})::Cint
end

function SCT_set_signature_nid(sct, nid)
    @ccall libwebsockets.SCT_set_signature_nid(sct::Ptr{SCT}, nid::Cint)::Cint
end

function SCT_get0_extensions(sct, ext)
    @ccall libwebsockets.SCT_get0_extensions(sct::Ptr{SCT}, ext::Ptr{Ptr{Cuchar}})::Csize_t
end

function SCT_set0_extensions(sct, ext, ext_len)
    @ccall libwebsockets.SCT_set0_extensions(sct::Ptr{SCT}, ext::Ptr{Cuchar}, ext_len::Csize_t)::Cvoid
end

function SCT_set1_extensions(sct, ext, ext_len)
    @ccall libwebsockets.SCT_set1_extensions(sct::Ptr{SCT}, ext::Ptr{Cuchar}, ext_len::Csize_t)::Cint
end

function SCT_get0_signature(sct, sig)
    @ccall libwebsockets.SCT_get0_signature(sct::Ptr{SCT}, sig::Ptr{Ptr{Cuchar}})::Csize_t
end

function SCT_set0_signature(sct, sig, sig_len)
    @ccall libwebsockets.SCT_set0_signature(sct::Ptr{SCT}, sig::Ptr{Cuchar}, sig_len::Csize_t)::Cvoid
end

function SCT_set1_signature(sct, sig, sig_len)
    @ccall libwebsockets.SCT_set1_signature(sct::Ptr{SCT}, sig::Ptr{Cuchar}, sig_len::Csize_t)::Cint
end

function SCT_get_source(sct)
    @ccall libwebsockets.SCT_get_source(sct::Ptr{SCT})::sct_source_t
end

function SCT_set_source(sct, source)
    @ccall libwebsockets.SCT_set_source(sct::Ptr{SCT}, source::sct_source_t)::Cint
end

function SCT_validation_status_string(sct)
    @ccall libwebsockets.SCT_validation_status_string(sct::Ptr{SCT})::Ptr{Cchar}
end

function SCT_print(sct, out, indent, logs)
    @ccall libwebsockets.SCT_print(sct::Ptr{SCT}, out::Ptr{BIO}, indent::Cint, logs::Ptr{CTLOG_STORE})::Cvoid
end

function SCT_LIST_print(sct_list, out, indent, separator, logs)
    @ccall libwebsockets.SCT_LIST_print(sct_list::Ptr{stack_st_SCT}, out::Ptr{BIO}, indent::Cint, separator::Ptr{Cchar}, logs::Ptr{CTLOG_STORE})::Cvoid
end

function SCT_get_validation_status(sct)
    @ccall libwebsockets.SCT_get_validation_status(sct::Ptr{SCT})::sct_validation_status_t
end

function SCT_validate(sct, ctx)
    @ccall libwebsockets.SCT_validate(sct::Ptr{SCT}, ctx::Ptr{CT_POLICY_EVAL_CTX})::Cint
end

function SCT_LIST_validate(scts, ctx)
    @ccall libwebsockets.SCT_LIST_validate(scts::Ptr{stack_st_SCT}, ctx::Ptr{CT_POLICY_EVAL_CTX})::Cint
end

function i2o_SCT_LIST(a, pp)
    @ccall libwebsockets.i2o_SCT_LIST(a::Ptr{stack_st_SCT}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function o2i_SCT_LIST(a, pp, len)
    @ccall libwebsockets.o2i_SCT_LIST(a::Ptr{Ptr{stack_st_SCT}}, pp::Ptr{Ptr{Cuchar}}, len::Csize_t)::Ptr{stack_st_SCT}
end

function i2d_SCT_LIST(a, pp)
    @ccall libwebsockets.i2d_SCT_LIST(a::Ptr{stack_st_SCT}, pp::Ptr{Ptr{Cuchar}})::Cint
end

function d2i_SCT_LIST(a, pp, len)
    @ccall libwebsockets.d2i_SCT_LIST(a::Ptr{Ptr{stack_st_SCT}}, pp::Ptr{Ptr{Cuchar}}, len::Clong)::Ptr{stack_st_SCT}
end

function i2o_SCT(sct, out)
    @ccall libwebsockets.i2o_SCT(sct::Ptr{SCT}, out::Ptr{Ptr{Cuchar}})::Cint
end

function o2i_SCT(psct, in, len)
    @ccall libwebsockets.o2i_SCT(psct::Ptr{Ptr{SCT}}, in::Ptr{Ptr{Cuchar}}, len::Csize_t)::Ptr{SCT}
end

function CTLOG_new_ex(public_key, name, libctx, propq)
    @ccall libwebsockets.CTLOG_new_ex(public_key::Ptr{EVP_PKEY}, name::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{CTLOG}
end

function CTLOG_new(public_key, name)
    @ccall libwebsockets.CTLOG_new(public_key::Ptr{EVP_PKEY}, name::Ptr{Cchar})::Ptr{CTLOG}
end

function CTLOG_new_from_base64_ex(ct_log, pkey_base64, name, libctx, propq)
    @ccall libwebsockets.CTLOG_new_from_base64_ex(ct_log::Ptr{Ptr{CTLOG}}, pkey_base64::Ptr{Cchar}, name::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Cint
end

function CTLOG_new_from_base64(ct_log, pkey_base64, name)
    @ccall libwebsockets.CTLOG_new_from_base64(ct_log::Ptr{Ptr{CTLOG}}, pkey_base64::Ptr{Cchar}, name::Ptr{Cchar})::Cint
end

function CTLOG_free(log)
    @ccall libwebsockets.CTLOG_free(log::Ptr{CTLOG})::Cvoid
end

function CTLOG_get0_name(log)
    @ccall libwebsockets.CTLOG_get0_name(log::Ptr{CTLOG})::Ptr{Cchar}
end

function CTLOG_get0_log_id(log, log_id, log_id_len)
    @ccall libwebsockets.CTLOG_get0_log_id(log::Ptr{CTLOG}, log_id::Ptr{Ptr{UInt8}}, log_id_len::Ptr{Csize_t})::Cvoid
end

function CTLOG_get0_public_key(log)
    @ccall libwebsockets.CTLOG_get0_public_key(log::Ptr{CTLOG})::Ptr{EVP_PKEY}
end

function CTLOG_STORE_new_ex(libctx, propq)
    @ccall libwebsockets.CTLOG_STORE_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{CTLOG_STORE}
end

function CTLOG_STORE_new()
    @ccall libwebsockets.CTLOG_STORE_new()::Ptr{CTLOG_STORE}
end

function CTLOG_STORE_free(store)
    @ccall libwebsockets.CTLOG_STORE_free(store::Ptr{CTLOG_STORE})::Cvoid
end

function CTLOG_STORE_get0_log_by_id(store, log_id, log_id_len)
    @ccall libwebsockets.CTLOG_STORE_get0_log_by_id(store::Ptr{CTLOG_STORE}, log_id::Ptr{UInt8}, log_id_len::Csize_t)::Ptr{CTLOG}
end

function CTLOG_STORE_load_file(store, file)
    @ccall libwebsockets.CTLOG_STORE_load_file(store::Ptr{CTLOG_STORE}, file::Ptr{Cchar})::Cint
end

function CTLOG_STORE_load_default_file(store)
    @ccall libwebsockets.CTLOG_STORE_load_default_file(store::Ptr{CTLOG_STORE})::Cint
end

function ERR_load_SSL_strings()
    @ccall libwebsockets.ERR_load_SSL_strings()::Cint
end

const ssl_crock_st = Ptr{ssl_st}

mutable struct tls_session_ticket_ext_st
    length::Cushort
    data::Ptr{Cvoid}
    tls_session_ticket_ext_st() = new()
end

const TLS_SESSION_TICKET_EXT = tls_session_ticket_ext_st

mutable struct tls_sigalgs_st end

const TLS_SIGALGS = tls_sigalgs_st

mutable struct ssl_conf_ctx_st end

const SSL_CONF_CTX = ssl_conf_ctx_st

# typedef int ( * tls_session_ticket_ext_cb_fn ) ( SSL * s , const unsigned char * data , int len , void * arg )
const tls_session_ticket_ext_cb_fn = Ptr{Cvoid}

# typedef int ( * tls_session_secret_cb_fn ) ( SSL * s , void * secret , int * secret_len , STACK_OF ( SSL_CIPHER ) * peer_ciphers , const SSL_CIPHER * * cipher , void * arg )
const tls_session_secret_cb_fn = Ptr{Cvoid}

# typedef int ( * custom_ext_add_cb ) ( SSL * s , unsigned int ext_type , const unsigned char * * out , size_t * outlen , int * al , void * add_arg )
const custom_ext_add_cb = Ptr{Cvoid}

# typedef void ( * custom_ext_free_cb ) ( SSL * s , unsigned int ext_type , const unsigned char * out , void * add_arg )
const custom_ext_free_cb = Ptr{Cvoid}

# typedef int ( * custom_ext_parse_cb ) ( SSL * s , unsigned int ext_type , const unsigned char * in , size_t inlen , int * al , void * parse_arg )
const custom_ext_parse_cb = Ptr{Cvoid}

# typedef int ( * SSL_custom_ext_add_cb_ex ) ( SSL * s , unsigned int ext_type , unsigned int context , const unsigned char * * out , size_t * outlen , X509 * x , size_t chainidx , int * al , void * add_arg )
const SSL_custom_ext_add_cb_ex = Ptr{Cvoid}

# typedef void ( * SSL_custom_ext_free_cb_ex ) ( SSL * s , unsigned int ext_type , unsigned int context , const unsigned char * out , void * add_arg )
const SSL_custom_ext_free_cb_ex = Ptr{Cvoid}

# typedef int ( * SSL_custom_ext_parse_cb_ex ) ( SSL * s , unsigned int ext_type , unsigned int context , const unsigned char * in , size_t inlen , X509 * x , size_t chainidx , int * al , void * parse_arg )
const SSL_custom_ext_parse_cb_ex = Ptr{Cvoid}

# typedef int ( * SSL_verify_cb ) ( int preverify_ok , X509_STORE_CTX * x509_ctx )
const SSL_verify_cb = Ptr{Cvoid}

# typedef int ( * SSL_async_callback_fn ) ( SSL * s , void * arg )
const SSL_async_callback_fn = Ptr{Cvoid}

function SSL_CTX_get_options(ctx)
    @ccall libwebsockets.SSL_CTX_get_options(ctx::Ptr{SSL_CTX})::UInt64
end

function SSL_get_options(s)
    @ccall libwebsockets.SSL_get_options(s::Ptr{SSL})::UInt64
end

function SSL_CTX_clear_options(ctx, op)
    @ccall libwebsockets.SSL_CTX_clear_options(ctx::Ptr{SSL_CTX}, op::UInt64)::UInt64
end

function SSL_clear_options(s, op)
    @ccall libwebsockets.SSL_clear_options(s::Ptr{SSL}, op::UInt64)::UInt64
end

function SSL_CTX_set_options(ctx, op)
    @ccall libwebsockets.SSL_CTX_set_options(ctx::Ptr{SSL_CTX}, op::UInt64)::UInt64
end

function SSL_set_options(s, op)
    @ccall libwebsockets.SSL_set_options(s::Ptr{SSL}, op::UInt64)::UInt64
end

function SSL_CTX_set_msg_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_msg_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_set_msg_callback(ssl, cb)
    @ccall libwebsockets.SSL_set_msg_callback(ssl::Ptr{SSL}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_SRP_CTX_init(s)
    @ccall libwebsockets.SSL_SRP_CTX_init(s::Ptr{SSL})::Cint
end

function SSL_CTX_SRP_CTX_init(ctx)
    @ccall libwebsockets.SSL_CTX_SRP_CTX_init(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_SRP_CTX_free(ctx)
    @ccall libwebsockets.SSL_SRP_CTX_free(ctx::Ptr{SSL})::Cint
end

function SSL_CTX_SRP_CTX_free(ctx)
    @ccall libwebsockets.SSL_CTX_SRP_CTX_free(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_srp_server_param_with_username(s, ad)
    @ccall libwebsockets.SSL_srp_server_param_with_username(s::Ptr{SSL}, ad::Ptr{Cint})::Cint
end

function SRP_Calc_A_param(s)
    @ccall libwebsockets.SRP_Calc_A_param(s::Ptr{SSL})::Cint
end

# typedef int ( * GEN_SESSION_CB ) ( SSL * ssl , unsigned char * id , unsigned int * id_len )
const GEN_SESSION_CB = Ptr{Cvoid}

mutable struct lhash_st_SSL_SESSION end

function SSL_CTX_sessions(ctx)
    @ccall libwebsockets.SSL_CTX_sessions(ctx::Ptr{SSL_CTX})::Ptr{lhash_st_SSL_SESSION}
end

function SSL_CTX_sess_set_new_cb(ctx, new_session_cb)
    @ccall libwebsockets.SSL_CTX_sess_set_new_cb(ctx::Ptr{SSL_CTX}, new_session_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_sess_get_new_cb(ctx)
    @ccall libwebsockets.SSL_CTX_sess_get_new_cb(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_sess_set_remove_cb(ctx, remove_session_cb)
    @ccall libwebsockets.SSL_CTX_sess_set_remove_cb(ctx::Ptr{SSL_CTX}, remove_session_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_sess_get_remove_cb(ctx)
    @ccall libwebsockets.SSL_CTX_sess_get_remove_cb(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_sess_set_get_cb(ctx, get_session_cb)
    @ccall libwebsockets.SSL_CTX_sess_set_get_cb(ctx::Ptr{SSL_CTX}, get_session_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_sess_get_get_cb(ctx)
    @ccall libwebsockets.SSL_CTX_sess_get_get_cb(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_set_info_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_info_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_get_info_callback(ctx)
    @ccall libwebsockets.SSL_CTX_get_info_callback(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_set_client_cert_cb(ctx, client_cert_cb)
    @ccall libwebsockets.SSL_CTX_set_client_cert_cb(ctx::Ptr{SSL_CTX}, client_cert_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_get_client_cert_cb(ctx)
    @ccall libwebsockets.SSL_CTX_get_client_cert_cb(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_set_client_cert_engine(ctx, e)
    @ccall libwebsockets.SSL_CTX_set_client_cert_engine(ctx::Ptr{SSL_CTX}, e::Ptr{ENGINE})::Cint
end

function SSL_CTX_set_cookie_generate_cb(ctx, app_gen_cookie_cb)
    @ccall libwebsockets.SSL_CTX_set_cookie_generate_cb(ctx::Ptr{SSL_CTX}, app_gen_cookie_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_set_cookie_verify_cb(ctx, app_verify_cookie_cb)
    @ccall libwebsockets.SSL_CTX_set_cookie_verify_cb(ctx::Ptr{SSL_CTX}, app_verify_cookie_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_set_stateless_cookie_generate_cb(ctx, gen_stateless_cookie_cb)
    @ccall libwebsockets.SSL_CTX_set_stateless_cookie_generate_cb(ctx::Ptr{SSL_CTX}, gen_stateless_cookie_cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_set_stateless_cookie_verify_cb(ctx, verify_stateless_cookie_cb)
    @ccall libwebsockets.SSL_CTX_set_stateless_cookie_verify_cb(ctx::Ptr{SSL_CTX}, verify_stateless_cookie_cb::Ptr{Cvoid})::Cvoid
end

function SSL_select_next_proto(out, outlen, in, inlen, client, client_len)
    @ccall libwebsockets.SSL_select_next_proto(out::Ptr{Ptr{Cuchar}}, outlen::Ptr{Cuchar}, in::Ptr{Cuchar}, inlen::Cuint, client::Ptr{Cuchar}, client_len::Cuint)::Cint
end

function SSL_CTX_set_alpn_protos(ctx, protos, protos_len)
    @ccall libwebsockets.SSL_CTX_set_alpn_protos(ctx::Ptr{SSL_CTX}, protos::Ptr{Cuchar}, protos_len::Cuint)::Cint
end

function SSL_set_alpn_protos(ssl, protos, protos_len)
    @ccall libwebsockets.SSL_set_alpn_protos(ssl::Ptr{SSL}, protos::Ptr{Cuchar}, protos_len::Cuint)::Cint
end

# typedef int ( * SSL_CTX_alpn_select_cb_func ) ( SSL * ssl , const unsigned char * * out , unsigned char * outlen , const unsigned char * in , unsigned int inlen , void * arg )
const SSL_CTX_alpn_select_cb_func = Ptr{Cvoid}

function SSL_CTX_set_alpn_select_cb(ctx, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_alpn_select_cb(ctx::Ptr{SSL_CTX}, cb::SSL_CTX_alpn_select_cb_func, arg::Ptr{Cvoid})::Cvoid
end

function SSL_get0_alpn_selected(ssl, data, len)
    @ccall libwebsockets.SSL_get0_alpn_selected(ssl::Ptr{SSL}, data::Ptr{Ptr{Cuchar}}, len::Ptr{Cuint})::Cvoid
end

# typedef unsigned int ( * SSL_psk_client_cb_func ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len )
const SSL_psk_client_cb_func = Ptr{Cvoid}

function SSL_CTX_set_psk_client_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_psk_client_callback(ctx::Ptr{SSL_CTX}, cb::SSL_psk_client_cb_func)::Cvoid
end

function SSL_set_psk_client_callback(ssl, cb)
    @ccall libwebsockets.SSL_set_psk_client_callback(ssl::Ptr{SSL}, cb::SSL_psk_client_cb_func)::Cvoid
end

# typedef unsigned int ( * SSL_psk_server_cb_func ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len )
const SSL_psk_server_cb_func = Ptr{Cvoid}

function SSL_CTX_set_psk_server_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_psk_server_callback(ctx::Ptr{SSL_CTX}, cb::SSL_psk_server_cb_func)::Cvoid
end

function SSL_set_psk_server_callback(ssl, cb)
    @ccall libwebsockets.SSL_set_psk_server_callback(ssl::Ptr{SSL}, cb::SSL_psk_server_cb_func)::Cvoid
end

function SSL_CTX_use_psk_identity_hint(ctx, identity_hint)
    @ccall libwebsockets.SSL_CTX_use_psk_identity_hint(ctx::Ptr{SSL_CTX}, identity_hint::Ptr{Cchar})::Cint
end

function SSL_use_psk_identity_hint(s, identity_hint)
    @ccall libwebsockets.SSL_use_psk_identity_hint(s::Ptr{SSL}, identity_hint::Ptr{Cchar})::Cint
end

function SSL_get_psk_identity_hint(s)
    @ccall libwebsockets.SSL_get_psk_identity_hint(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_get_psk_identity(s)
    @ccall libwebsockets.SSL_get_psk_identity(s::Ptr{SSL})::Ptr{Cchar}
end

# typedef int ( * SSL_psk_find_session_cb_func ) ( SSL * ssl , const unsigned char * identity , size_t identity_len , SSL_SESSION * * sess )
const SSL_psk_find_session_cb_func = Ptr{Cvoid}

# typedef int ( * SSL_psk_use_session_cb_func ) ( SSL * ssl , const EVP_MD * md , const unsigned char * * id , size_t * idlen , SSL_SESSION * * sess )
const SSL_psk_use_session_cb_func = Ptr{Cvoid}

function SSL_set_psk_find_session_callback(s, cb)
    @ccall libwebsockets.SSL_set_psk_find_session_callback(s::Ptr{SSL}, cb::SSL_psk_find_session_cb_func)::Cvoid
end

function SSL_CTX_set_psk_find_session_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_psk_find_session_callback(ctx::Ptr{SSL_CTX}, cb::SSL_psk_find_session_cb_func)::Cvoid
end

function SSL_set_psk_use_session_callback(s, cb)
    @ccall libwebsockets.SSL_set_psk_use_session_callback(s::Ptr{SSL}, cb::SSL_psk_use_session_cb_func)::Cvoid
end

function SSL_CTX_set_psk_use_session_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_psk_use_session_callback(ctx::Ptr{SSL_CTX}, cb::SSL_psk_use_session_cb_func)::Cvoid
end

function SSL_CTX_has_client_custom_ext(ctx, ext_type)
    @ccall libwebsockets.SSL_CTX_has_client_custom_ext(ctx::Ptr{SSL_CTX}, ext_type::Cuint)::Cint
end

function SSL_CTX_add_client_custom_ext(ctx, ext_type, add_cb, free_cb, add_arg, parse_cb, parse_arg)
    @ccall libwebsockets.SSL_CTX_add_client_custom_ext(ctx::Ptr{SSL_CTX}, ext_type::Cuint, add_cb::custom_ext_add_cb, free_cb::custom_ext_free_cb, add_arg::Ptr{Cvoid}, parse_cb::custom_ext_parse_cb, parse_arg::Ptr{Cvoid})::Cint
end

function SSL_CTX_add_server_custom_ext(ctx, ext_type, add_cb, free_cb, add_arg, parse_cb, parse_arg)
    @ccall libwebsockets.SSL_CTX_add_server_custom_ext(ctx::Ptr{SSL_CTX}, ext_type::Cuint, add_cb::custom_ext_add_cb, free_cb::custom_ext_free_cb, add_arg::Ptr{Cvoid}, parse_cb::custom_ext_parse_cb, parse_arg::Ptr{Cvoid})::Cint
end

function SSL_CTX_add_custom_ext(ctx, ext_type, context, add_cb, free_cb, add_arg, parse_cb, parse_arg)
    @ccall libwebsockets.SSL_CTX_add_custom_ext(ctx::Ptr{SSL_CTX}, ext_type::Cuint, context::Cuint, add_cb::SSL_custom_ext_add_cb_ex, free_cb::SSL_custom_ext_free_cb_ex, add_arg::Ptr{Cvoid}, parse_cb::SSL_custom_ext_parse_cb_ex, parse_arg::Ptr{Cvoid})::Cint
end

function SSL_extension_supported(ext_type)
    @ccall libwebsockets.SSL_extension_supported(ext_type::Cuint)::Cint
end

# typedef void ( * SSL_CTX_keylog_cb_func ) ( const SSL * ssl , const char * line )
const SSL_CTX_keylog_cb_func = Ptr{Cvoid}

function SSL_CTX_set_keylog_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_keylog_callback(ctx::Ptr{SSL_CTX}, cb::SSL_CTX_keylog_cb_func)::Cvoid
end

function SSL_CTX_get_keylog_callback(ctx)
    @ccall libwebsockets.SSL_CTX_get_keylog_callback(ctx::Ptr{SSL_CTX})::SSL_CTX_keylog_cb_func
end

function SSL_CTX_set_max_early_data(ctx, max_early_data)
    @ccall libwebsockets.SSL_CTX_set_max_early_data(ctx::Ptr{SSL_CTX}, max_early_data::UInt32)::Cint
end

function SSL_CTX_get_max_early_data(ctx)
    @ccall libwebsockets.SSL_CTX_get_max_early_data(ctx::Ptr{SSL_CTX})::UInt32
end

function SSL_set_max_early_data(s, max_early_data)
    @ccall libwebsockets.SSL_set_max_early_data(s::Ptr{SSL}, max_early_data::UInt32)::Cint
end

function SSL_get_max_early_data(s)
    @ccall libwebsockets.SSL_get_max_early_data(s::Ptr{SSL})::UInt32
end

function SSL_CTX_set_recv_max_early_data(ctx, recv_max_early_data)
    @ccall libwebsockets.SSL_CTX_set_recv_max_early_data(ctx::Ptr{SSL_CTX}, recv_max_early_data::UInt32)::Cint
end

function SSL_CTX_get_recv_max_early_data(ctx)
    @ccall libwebsockets.SSL_CTX_get_recv_max_early_data(ctx::Ptr{SSL_CTX})::UInt32
end

function SSL_set_recv_max_early_data(s, recv_max_early_data)
    @ccall libwebsockets.SSL_set_recv_max_early_data(s::Ptr{SSL}, recv_max_early_data::UInt32)::Cint
end

function SSL_get_recv_max_early_data(s)
    @ccall libwebsockets.SSL_get_recv_max_early_data(s::Ptr{SSL})::UInt32
end

function SSL_CTX_set_tlsext_max_fragment_length(ctx, mode)
    @ccall libwebsockets.SSL_CTX_set_tlsext_max_fragment_length(ctx::Ptr{SSL_CTX}, mode::UInt8)::Cint
end

function SSL_set_tlsext_max_fragment_length(ssl, mode)
    @ccall libwebsockets.SSL_set_tlsext_max_fragment_length(ssl::Ptr{SSL}, mode::UInt8)::Cint
end

function SSL_get_servername(s, type)
    @ccall libwebsockets.SSL_get_servername(s::Ptr{SSL}, type::Cint)::Ptr{Cchar}
end

function SSL_get_servername_type(s)
    @ccall libwebsockets.SSL_get_servername_type(s::Ptr{SSL})::Cint
end

function SSL_export_keying_material(s, out, olen, label, llen, context, contextlen, use_context)
    @ccall libwebsockets.SSL_export_keying_material(s::Ptr{SSL}, out::Ptr{Cuchar}, olen::Csize_t, label::Ptr{Cchar}, llen::Csize_t, context::Ptr{Cuchar}, contextlen::Csize_t, use_context::Cint)::Cint
end

function SSL_export_keying_material_early(s, out, olen, label, llen, context, contextlen)
    @ccall libwebsockets.SSL_export_keying_material_early(s::Ptr{SSL}, out::Ptr{Cuchar}, olen::Csize_t, label::Ptr{Cchar}, llen::Csize_t, context::Ptr{Cuchar}, contextlen::Csize_t)::Cint
end

function SSL_get_peer_signature_type_nid(s, pnid)
    @ccall libwebsockets.SSL_get_peer_signature_type_nid(s::Ptr{SSL}, pnid::Ptr{Cint})::Cint
end

function SSL_get_signature_type_nid(s, pnid)
    @ccall libwebsockets.SSL_get_signature_type_nid(s::Ptr{SSL}, pnid::Ptr{Cint})::Cint
end

function SSL_get_sigalgs(s, idx, psign, phash, psignandhash, rsig, rhash)
    @ccall libwebsockets.SSL_get_sigalgs(s::Ptr{SSL}, idx::Cint, psign::Ptr{Cint}, phash::Ptr{Cint}, psignandhash::Ptr{Cint}, rsig::Ptr{Cuchar}, rhash::Ptr{Cuchar})::Cint
end

function SSL_get_shared_sigalgs(s, idx, psign, phash, psignandhash, rsig, rhash)
    @ccall libwebsockets.SSL_get_shared_sigalgs(s::Ptr{SSL}, idx::Cint, psign::Ptr{Cint}, phash::Ptr{Cint}, psignandhash::Ptr{Cint}, rsig::Ptr{Cuchar}, rhash::Ptr{Cuchar})::Cint
end

function SSL_check_chain(s, x, pk, chain)
    @ccall libwebsockets.SSL_check_chain(s::Ptr{SSL}, x::Ptr{X509}, pk::Ptr{EVP_PKEY}, chain::Ptr{stack_st_X509})::Cint
end

function SSL_CTX_set_tlsext_ticket_key_evp_cb(ctx, fp)
    @ccall libwebsockets.SSL_CTX_set_tlsext_ticket_key_evp_cb(ctx::Ptr{SSL_CTX}, fp::Ptr{Cvoid})::Cint
end

function SSL_CTX_set_tlsext_use_srtp(ctx, profiles)
    @ccall libwebsockets.SSL_CTX_set_tlsext_use_srtp(ctx::Ptr{SSL_CTX}, profiles::Ptr{Cchar})::Cint
end

function SSL_set_tlsext_use_srtp(ssl, profiles)
    @ccall libwebsockets.SSL_set_tlsext_use_srtp(ssl::Ptr{SSL}, profiles::Ptr{Cchar})::Cint
end

function SSL_get_srtp_profiles(ssl)
    @ccall libwebsockets.SSL_get_srtp_profiles(ssl::Ptr{SSL})::Ptr{stack_st_SRTP_PROTECTION_PROFILE}
end

function SSL_get_selected_srtp_profile(s)
    @ccall libwebsockets.SSL_get_selected_srtp_profile(s::Ptr{SSL})::Ptr{SRTP_PROTECTION_PROFILE}
end

function SSL_set_debug(s, debug)
    @ccall libwebsockets.SSL_set_debug(s::Ptr{SSL}, debug::Cint)::Cvoid
end

const OSSL_HANDSHAKE_STATE = UInt32
const TLS_ST_BEFORE = 0 % UInt32
const TLS_ST_OK = 1 % UInt32
const DTLS_ST_CR_HELLO_VERIFY_REQUEST = 2 % UInt32
const TLS_ST_CR_SRVR_HELLO = 3 % UInt32
const TLS_ST_CR_CERT = 4 % UInt32
const TLS_ST_CR_CERT_STATUS = 5 % UInt32
const TLS_ST_CR_KEY_EXCH = 6 % UInt32
const TLS_ST_CR_CERT_REQ = 7 % UInt32
const TLS_ST_CR_SRVR_DONE = 8 % UInt32
const TLS_ST_CR_SESSION_TICKET = 9 % UInt32
const TLS_ST_CR_CHANGE = 10 % UInt32
const TLS_ST_CR_FINISHED = 11 % UInt32
const TLS_ST_CW_CLNT_HELLO = 12 % UInt32
const TLS_ST_CW_CERT = 13 % UInt32
const TLS_ST_CW_KEY_EXCH = 14 % UInt32
const TLS_ST_CW_CERT_VRFY = 15 % UInt32
const TLS_ST_CW_CHANGE = 16 % UInt32
const TLS_ST_CW_NEXT_PROTO = 17 % UInt32
const TLS_ST_CW_FINISHED = 18 % UInt32
const TLS_ST_SW_HELLO_REQ = 19 % UInt32
const TLS_ST_SR_CLNT_HELLO = 20 % UInt32
const DTLS_ST_SW_HELLO_VERIFY_REQUEST = 21 % UInt32
const TLS_ST_SW_SRVR_HELLO = 22 % UInt32
const TLS_ST_SW_CERT = 23 % UInt32
const TLS_ST_SW_KEY_EXCH = 24 % UInt32
const TLS_ST_SW_CERT_REQ = 25 % UInt32
const TLS_ST_SW_SRVR_DONE = 26 % UInt32
const TLS_ST_SR_CERT = 27 % UInt32
const TLS_ST_SR_KEY_EXCH = 28 % UInt32
const TLS_ST_SR_CERT_VRFY = 29 % UInt32
const TLS_ST_SR_NEXT_PROTO = 30 % UInt32
const TLS_ST_SR_CHANGE = 31 % UInt32
const TLS_ST_SR_FINISHED = 32 % UInt32
const TLS_ST_SW_SESSION_TICKET = 33 % UInt32
const TLS_ST_SW_CERT_STATUS = 34 % UInt32
const TLS_ST_SW_CHANGE = 35 % UInt32
const TLS_ST_SW_FINISHED = 36 % UInt32
const TLS_ST_SW_ENCRYPTED_EXTENSIONS = 37 % UInt32
const TLS_ST_CR_ENCRYPTED_EXTENSIONS = 38 % UInt32
const TLS_ST_CR_CERT_VRFY = 39 % UInt32
const TLS_ST_SW_CERT_VRFY = 40 % UInt32
const TLS_ST_CR_HELLO_REQ = 41 % UInt32
const TLS_ST_SW_KEY_UPDATE = 42 % UInt32
const TLS_ST_CW_KEY_UPDATE = 43 % UInt32
const TLS_ST_SR_KEY_UPDATE = 44 % UInt32
const TLS_ST_CR_KEY_UPDATE = 45 % UInt32
const TLS_ST_EARLY_DATA = 46 % UInt32
const TLS_ST_PENDING_EARLY_DATA_END = 47 % UInt32
const TLS_ST_CW_END_OF_EARLY_DATA = 48 % UInt32
const TLS_ST_SR_END_OF_EARLY_DATA = 49 % UInt32

function SSL_in_before(s)
    @ccall libwebsockets.SSL_in_before(s::Ptr{SSL})::Cint
end

function SSL_is_init_finished(s)
    @ccall libwebsockets.SSL_is_init_finished(s::Ptr{SSL})::Cint
end

function SSL_get_finished(s, buf, count)
    @ccall libwebsockets.SSL_get_finished(s::Ptr{SSL}, buf::Ptr{Cvoid}, count::Csize_t)::Csize_t
end

function SSL_get_peer_finished(s, buf, count)
    @ccall libwebsockets.SSL_get_peer_finished(s::Ptr{SSL}, buf::Ptr{Cvoid}, count::Csize_t)::Csize_t
end

function PEM_read_bio_SSL_SESSION(out, x, cb, u)
    @ccall libwebsockets.PEM_read_bio_SSL_SESSION(out::Ptr{BIO}, x::Ptr{Ptr{SSL_SESSION}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{SSL_SESSION}
end

function PEM_read_SSL_SESSION(out, x, cb, u)
    @ccall libwebsockets.PEM_read_SSL_SESSION(out::Ptr{Libc.FILE}, x::Ptr{Ptr{SSL_SESSION}}, cb::Ptr{pem_password_cb}, u::Ptr{Cvoid})::Ptr{SSL_SESSION}
end

function PEM_write_bio_SSL_SESSION(out, x)
    @ccall libwebsockets.PEM_write_bio_SSL_SESSION(out::Ptr{BIO}, x::Ptr{SSL_SESSION})::Cint
end

function PEM_write_SSL_SESSION(out, x)
    @ccall libwebsockets.PEM_write_SSL_SESSION(out::Ptr{Libc.FILE}, x::Ptr{SSL_SESSION})::Cint
end

function SSL_group_to_name(s, id)
    @ccall libwebsockets.SSL_group_to_name(s::Ptr{SSL}, id::Cint)::Ptr{Cchar}
end

function SSL_set0_tmp_dh_pkey(s, dhpkey)
    @ccall libwebsockets.SSL_set0_tmp_dh_pkey(s::Ptr{SSL}, dhpkey::Ptr{EVP_PKEY})::Cint
end

function SSL_CTX_set0_tmp_dh_pkey(ctx, dhpkey)
    @ccall libwebsockets.SSL_CTX_set0_tmp_dh_pkey(ctx::Ptr{SSL_CTX}, dhpkey::Ptr{EVP_PKEY})::Cint
end

function BIO_f_ssl()
    @ccall libwebsockets.BIO_f_ssl()::Ptr{BIO_METHOD}
end

function BIO_new_ssl(ctx, client)
    @ccall libwebsockets.BIO_new_ssl(ctx::Ptr{SSL_CTX}, client::Cint)::Ptr{BIO}
end

function BIO_new_ssl_connect(ctx)
    @ccall libwebsockets.BIO_new_ssl_connect(ctx::Ptr{SSL_CTX})::Ptr{BIO}
end

function BIO_new_buffer_ssl_connect(ctx)
    @ccall libwebsockets.BIO_new_buffer_ssl_connect(ctx::Ptr{SSL_CTX})::Ptr{BIO}
end

function BIO_ssl_copy_session_id(to, from)
    @ccall libwebsockets.BIO_ssl_copy_session_id(to::Ptr{BIO}, from::Ptr{BIO})::Cint
end

function BIO_ssl_shutdown(ssl_bio)
    @ccall libwebsockets.BIO_ssl_shutdown(ssl_bio::Ptr{BIO})::Cvoid
end

function SSL_CTX_set_cipher_list(arg1, str)
    @ccall libwebsockets.SSL_CTX_set_cipher_list(arg1::Ptr{SSL_CTX}, str::Ptr{Cchar})::Cint
end

function SSL_CTX_new(meth)
    @ccall libwebsockets.SSL_CTX_new(meth::Ptr{SSL_METHOD})::Ptr{SSL_CTX}
end

function SSL_CTX_new_ex(libctx, propq, meth)
    @ccall libwebsockets.SSL_CTX_new_ex(libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar}, meth::Ptr{SSL_METHOD})::Ptr{SSL_CTX}
end

function SSL_CTX_up_ref(ctx)
    @ccall libwebsockets.SSL_CTX_up_ref(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_free(arg1)
    @ccall libwebsockets.SSL_CTX_free(arg1::Ptr{SSL_CTX})::Cvoid
end

function SSL_CTX_set_timeout(ctx, t)
    @ccall libwebsockets.SSL_CTX_set_timeout(ctx::Ptr{SSL_CTX}, t::Clong)::Clong
end

function SSL_CTX_get_timeout(ctx)
    @ccall libwebsockets.SSL_CTX_get_timeout(ctx::Ptr{SSL_CTX})::Clong
end

function SSL_CTX_get_cert_store(arg1)
    @ccall libwebsockets.SSL_CTX_get_cert_store(arg1::Ptr{SSL_CTX})::Ptr{X509_STORE}
end

function SSL_CTX_set_cert_store(arg1, arg2)
    @ccall libwebsockets.SSL_CTX_set_cert_store(arg1::Ptr{SSL_CTX}, arg2::Ptr{X509_STORE})::Cvoid
end

function SSL_CTX_set1_cert_store(arg1, arg2)
    @ccall libwebsockets.SSL_CTX_set1_cert_store(arg1::Ptr{SSL_CTX}, arg2::Ptr{X509_STORE})::Cvoid
end

function SSL_clear(s)
    @ccall libwebsockets.SSL_clear(s::Ptr{SSL})::Cint
end

function SSL_CTX_flush_sessions(ctx, tm)
    @ccall libwebsockets.SSL_CTX_flush_sessions(ctx::Ptr{SSL_CTX}, tm::Clong)::Cvoid
end

function SSL_get_pending_cipher(s)
    @ccall libwebsockets.SSL_get_pending_cipher(s::Ptr{SSL})::Ptr{SSL_CIPHER}
end

function SSL_CIPHER_standard_name(c)
    @ccall libwebsockets.SSL_CIPHER_standard_name(c::Ptr{SSL_CIPHER})::Ptr{Cchar}
end

function OPENSSL_cipher_name(rfc_name)
    @ccall libwebsockets.OPENSSL_cipher_name(rfc_name::Ptr{Cchar})::Ptr{Cchar}
end

function SSL_CIPHER_get_id(c)
    @ccall libwebsockets.SSL_CIPHER_get_id(c::Ptr{SSL_CIPHER})::UInt32
end

function SSL_CIPHER_get_protocol_id(c)
    @ccall libwebsockets.SSL_CIPHER_get_protocol_id(c::Ptr{SSL_CIPHER})::UInt16
end

function SSL_CIPHER_get_kx_nid(c)
    @ccall libwebsockets.SSL_CIPHER_get_kx_nid(c::Ptr{SSL_CIPHER})::Cint
end

function SSL_CIPHER_get_auth_nid(c)
    @ccall libwebsockets.SSL_CIPHER_get_auth_nid(c::Ptr{SSL_CIPHER})::Cint
end

function SSL_CIPHER_get_handshake_digest(c)
    @ccall libwebsockets.SSL_CIPHER_get_handshake_digest(c::Ptr{SSL_CIPHER})::Ptr{EVP_MD}
end

function SSL_CIPHER_is_aead(c)
    @ccall libwebsockets.SSL_CIPHER_is_aead(c::Ptr{SSL_CIPHER})::Cint
end

function SSL_get_fd(s)
    @ccall libwebsockets.SSL_get_fd(s::Ptr{SSL})::Cint
end

function SSL_get_rfd(s)
    @ccall libwebsockets.SSL_get_rfd(s::Ptr{SSL})::Cint
end

function SSL_get_wfd(s)
    @ccall libwebsockets.SSL_get_wfd(s::Ptr{SSL})::Cint
end

function SSL_get_cipher_list(s, n)
    @ccall libwebsockets.SSL_get_cipher_list(s::Ptr{SSL}, n::Cint)::Ptr{Cchar}
end

function SSL_get_shared_ciphers(s, buf, size)
    @ccall libwebsockets.SSL_get_shared_ciphers(s::Ptr{SSL}, buf::Ptr{Cchar}, size::Cint)::Ptr{Cchar}
end

function SSL_get_read_ahead(s)
    @ccall libwebsockets.SSL_get_read_ahead(s::Ptr{SSL})::Cint
end

function SSL_pending(s)
    @ccall libwebsockets.SSL_pending(s::Ptr{SSL})::Cint
end

function SSL_has_pending(s)
    @ccall libwebsockets.SSL_has_pending(s::Ptr{SSL})::Cint
end

function SSL_set_fd(s, fd)
    @ccall libwebsockets.SSL_set_fd(s::Ptr{SSL}, fd::Cint)::Cint
end

function SSL_set_rfd(s, fd)
    @ccall libwebsockets.SSL_set_rfd(s::Ptr{SSL}, fd::Cint)::Cint
end

function SSL_set_wfd(s, fd)
    @ccall libwebsockets.SSL_set_wfd(s::Ptr{SSL}, fd::Cint)::Cint
end

function SSL_set0_rbio(s, rbio)
    @ccall libwebsockets.SSL_set0_rbio(s::Ptr{SSL}, rbio::Ptr{BIO})::Cvoid
end

function SSL_set0_wbio(s, wbio)
    @ccall libwebsockets.SSL_set0_wbio(s::Ptr{SSL}, wbio::Ptr{BIO})::Cvoid
end

function SSL_set_bio(s, rbio, wbio)
    @ccall libwebsockets.SSL_set_bio(s::Ptr{SSL}, rbio::Ptr{BIO}, wbio::Ptr{BIO})::Cvoid
end

function SSL_get_rbio(s)
    @ccall libwebsockets.SSL_get_rbio(s::Ptr{SSL})::Ptr{BIO}
end

function SSL_get_wbio(s)
    @ccall libwebsockets.SSL_get_wbio(s::Ptr{SSL})::Ptr{BIO}
end

function SSL_set_cipher_list(s, str)
    @ccall libwebsockets.SSL_set_cipher_list(s::Ptr{SSL}, str::Ptr{Cchar})::Cint
end

function SSL_CTX_set_ciphersuites(ctx, str)
    @ccall libwebsockets.SSL_CTX_set_ciphersuites(ctx::Ptr{SSL_CTX}, str::Ptr{Cchar})::Cint
end

function SSL_set_ciphersuites(s, str)
    @ccall libwebsockets.SSL_set_ciphersuites(s::Ptr{SSL}, str::Ptr{Cchar})::Cint
end

function SSL_set_read_ahead(s, yes)
    @ccall libwebsockets.SSL_set_read_ahead(s::Ptr{SSL}, yes::Cint)::Cvoid
end

function SSL_get_verify_mode(s)
    @ccall libwebsockets.SSL_get_verify_mode(s::Ptr{SSL})::Cint
end

function SSL_get_verify_depth(s)
    @ccall libwebsockets.SSL_get_verify_depth(s::Ptr{SSL})::Cint
end

function SSL_get_verify_callback(s)
    @ccall libwebsockets.SSL_get_verify_callback(s::Ptr{SSL})::SSL_verify_cb
end

function SSL_set_verify(s, mode, callback)
    @ccall libwebsockets.SSL_set_verify(s::Ptr{SSL}, mode::Cint, callback::SSL_verify_cb)::Cvoid
end

function SSL_set_verify_depth(s, depth)
    @ccall libwebsockets.SSL_set_verify_depth(s::Ptr{SSL}, depth::Cint)::Cvoid
end

function SSL_set_cert_cb(s, cb, arg)
    @ccall libwebsockets.SSL_set_cert_cb(s::Ptr{SSL}, cb::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function SSL_use_RSAPrivateKey(ssl, rsa)
    @ccall libwebsockets.SSL_use_RSAPrivateKey(ssl::Ptr{SSL}, rsa::Ptr{RSA})::Cint
end

function SSL_use_RSAPrivateKey_ASN1(ssl, d, len)
    @ccall libwebsockets.SSL_use_RSAPrivateKey_ASN1(ssl::Ptr{SSL}, d::Ptr{Cuchar}, len::Clong)::Cint
end

function SSL_use_PrivateKey(ssl, pkey)
    @ccall libwebsockets.SSL_use_PrivateKey(ssl::Ptr{SSL}, pkey::Ptr{EVP_PKEY})::Cint
end

function SSL_use_PrivateKey_ASN1(pk, ssl, d, len)
    @ccall libwebsockets.SSL_use_PrivateKey_ASN1(pk::Cint, ssl::Ptr{SSL}, d::Ptr{Cuchar}, len::Clong)::Cint
end

function SSL_use_certificate(ssl, x)
    @ccall libwebsockets.SSL_use_certificate(ssl::Ptr{SSL}, x::Ptr{X509})::Cint
end

function SSL_use_certificate_ASN1(ssl, d, len)
    @ccall libwebsockets.SSL_use_certificate_ASN1(ssl::Ptr{SSL}, d::Ptr{Cuchar}, len::Cint)::Cint
end

function SSL_use_cert_and_key(ssl, x509, privatekey, chain, override)
    @ccall libwebsockets.SSL_use_cert_and_key(ssl::Ptr{SSL}, x509::Ptr{X509}, privatekey::Ptr{EVP_PKEY}, chain::Ptr{stack_st_X509}, override::Cint)::Cint
end

function SSL_CTX_use_serverinfo(ctx, serverinfo, serverinfo_length)
    @ccall libwebsockets.SSL_CTX_use_serverinfo(ctx::Ptr{SSL_CTX}, serverinfo::Ptr{Cuchar}, serverinfo_length::Csize_t)::Cint
end

function SSL_CTX_use_serverinfo_ex(ctx, version, serverinfo, serverinfo_length)
    @ccall libwebsockets.SSL_CTX_use_serverinfo_ex(ctx::Ptr{SSL_CTX}, version::Cuint, serverinfo::Ptr{Cuchar}, serverinfo_length::Csize_t)::Cint
end

function SSL_CTX_use_serverinfo_file(ctx, file)
    @ccall libwebsockets.SSL_CTX_use_serverinfo_file(ctx::Ptr{SSL_CTX}, file::Ptr{Cchar})::Cint
end

function SSL_use_RSAPrivateKey_file(ssl, file, type)
    @ccall libwebsockets.SSL_use_RSAPrivateKey_file(ssl::Ptr{SSL}, file::Ptr{Cchar}, type::Cint)::Cint
end

function SSL_use_PrivateKey_file(ssl, file, type)
    @ccall libwebsockets.SSL_use_PrivateKey_file(ssl::Ptr{SSL}, file::Ptr{Cchar}, type::Cint)::Cint
end

function SSL_use_certificate_file(ssl, file, type)
    @ccall libwebsockets.SSL_use_certificate_file(ssl::Ptr{SSL}, file::Ptr{Cchar}, type::Cint)::Cint
end

function SSL_CTX_use_RSAPrivateKey_file(ctx, file, type)
    @ccall libwebsockets.SSL_CTX_use_RSAPrivateKey_file(ctx::Ptr{SSL_CTX}, file::Ptr{Cchar}, type::Cint)::Cint
end

function SSL_CTX_use_PrivateKey_file(ctx, file, type)
    @ccall libwebsockets.SSL_CTX_use_PrivateKey_file(ctx::Ptr{SSL_CTX}, file::Ptr{Cchar}, type::Cint)::Cint
end

function SSL_CTX_use_certificate_file(ctx, file, type)
    @ccall libwebsockets.SSL_CTX_use_certificate_file(ctx::Ptr{SSL_CTX}, file::Ptr{Cchar}, type::Cint)::Cint
end

function SSL_CTX_use_certificate_chain_file(ctx, file)
    @ccall libwebsockets.SSL_CTX_use_certificate_chain_file(ctx::Ptr{SSL_CTX}, file::Ptr{Cchar})::Cint
end

function SSL_use_certificate_chain_file(ssl, file)
    @ccall libwebsockets.SSL_use_certificate_chain_file(ssl::Ptr{SSL}, file::Ptr{Cchar})::Cint
end

function SSL_load_client_CA_file(file)
    @ccall libwebsockets.SSL_load_client_CA_file(file::Ptr{Cchar})::Ptr{stack_st_X509_NAME}
end

function SSL_load_client_CA_file_ex(file, libctx, propq)
    @ccall libwebsockets.SSL_load_client_CA_file_ex(file::Ptr{Cchar}, libctx::Ptr{OSSL_LIB_CTX}, propq::Ptr{Cchar})::Ptr{stack_st_X509_NAME}
end

function SSL_add_file_cert_subjects_to_stack(stackCAs, file)
    @ccall libwebsockets.SSL_add_file_cert_subjects_to_stack(stackCAs::Ptr{stack_st_X509_NAME}, file::Ptr{Cchar})::Cint
end

function SSL_add_dir_cert_subjects_to_stack(stackCAs, dir)
    @ccall libwebsockets.SSL_add_dir_cert_subjects_to_stack(stackCAs::Ptr{stack_st_X509_NAME}, dir::Ptr{Cchar})::Cint
end

function SSL_add_store_cert_subjects_to_stack(stackCAs, uri)
    @ccall libwebsockets.SSL_add_store_cert_subjects_to_stack(stackCAs::Ptr{stack_st_X509_NAME}, uri::Ptr{Cchar})::Cint
end

function SSL_state_string(s)
    @ccall libwebsockets.SSL_state_string(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_rstate_string(s)
    @ccall libwebsockets.SSL_rstate_string(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_state_string_long(s)
    @ccall libwebsockets.SSL_state_string_long(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_rstate_string_long(s)
    @ccall libwebsockets.SSL_rstate_string_long(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_SESSION_get_protocol_version(s)
    @ccall libwebsockets.SSL_SESSION_get_protocol_version(s::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_set_protocol_version(s, version)
    @ccall libwebsockets.SSL_SESSION_set_protocol_version(s::Ptr{SSL_SESSION}, version::Cint)::Cint
end

function SSL_SESSION_get0_hostname(s)
    @ccall libwebsockets.SSL_SESSION_get0_hostname(s::Ptr{SSL_SESSION})::Ptr{Cchar}
end

function SSL_SESSION_set1_hostname(s, hostname)
    @ccall libwebsockets.SSL_SESSION_set1_hostname(s::Ptr{SSL_SESSION}, hostname::Ptr{Cchar})::Cint
end

function SSL_SESSION_get0_alpn_selected(s, alpn, len)
    @ccall libwebsockets.SSL_SESSION_get0_alpn_selected(s::Ptr{SSL_SESSION}, alpn::Ptr{Ptr{Cuchar}}, len::Ptr{Csize_t})::Cvoid
end

function SSL_SESSION_set1_alpn_selected(s, alpn, len)
    @ccall libwebsockets.SSL_SESSION_set1_alpn_selected(s::Ptr{SSL_SESSION}, alpn::Ptr{Cuchar}, len::Csize_t)::Cint
end

function SSL_SESSION_get0_cipher(s)
    @ccall libwebsockets.SSL_SESSION_get0_cipher(s::Ptr{SSL_SESSION})::Ptr{SSL_CIPHER}
end

function SSL_SESSION_set_cipher(s, cipher)
    @ccall libwebsockets.SSL_SESSION_set_cipher(s::Ptr{SSL_SESSION}, cipher::Ptr{SSL_CIPHER})::Cint
end

function SSL_SESSION_has_ticket(s)
    @ccall libwebsockets.SSL_SESSION_has_ticket(s::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_get_ticket_lifetime_hint(s)
    @ccall libwebsockets.SSL_SESSION_get_ticket_lifetime_hint(s::Ptr{SSL_SESSION})::Culong
end

function SSL_SESSION_get0_ticket(s, tick, len)
    @ccall libwebsockets.SSL_SESSION_get0_ticket(s::Ptr{SSL_SESSION}, tick::Ptr{Ptr{Cuchar}}, len::Ptr{Csize_t})::Cvoid
end

function SSL_SESSION_get_max_early_data(s)
    @ccall libwebsockets.SSL_SESSION_get_max_early_data(s::Ptr{SSL_SESSION})::UInt32
end

function SSL_SESSION_set_max_early_data(s, max_early_data)
    @ccall libwebsockets.SSL_SESSION_set_max_early_data(s::Ptr{SSL_SESSION}, max_early_data::UInt32)::Cint
end

function SSL_copy_session_id(to, from)
    @ccall libwebsockets.SSL_copy_session_id(to::Ptr{SSL}, from::Ptr{SSL})::Cint
end

function SSL_SESSION_get0_peer(s)
    @ccall libwebsockets.SSL_SESSION_get0_peer(s::Ptr{SSL_SESSION})::Ptr{X509}
end

function SSL_SESSION_set1_id_context(s, sid_ctx, sid_ctx_len)
    @ccall libwebsockets.SSL_SESSION_set1_id_context(s::Ptr{SSL_SESSION}, sid_ctx::Ptr{Cuchar}, sid_ctx_len::Cuint)::Cint
end

function SSL_SESSION_set1_id(s, sid, sid_len)
    @ccall libwebsockets.SSL_SESSION_set1_id(s::Ptr{SSL_SESSION}, sid::Ptr{Cuchar}, sid_len::Cuint)::Cint
end

function SSL_SESSION_is_resumable(s)
    @ccall libwebsockets.SSL_SESSION_is_resumable(s::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_dup(src)
    @ccall libwebsockets.SSL_SESSION_dup(src::Ptr{SSL_SESSION})::Ptr{SSL_SESSION}
end

function SSL_SESSION_get_id(s, len)
    @ccall libwebsockets.SSL_SESSION_get_id(s::Ptr{SSL_SESSION}, len::Ptr{Cuint})::Ptr{Cuchar}
end

function SSL_SESSION_get0_id_context(s, len)
    @ccall libwebsockets.SSL_SESSION_get0_id_context(s::Ptr{SSL_SESSION}, len::Ptr{Cuint})::Ptr{Cuchar}
end

function SSL_SESSION_get_compress_id(s)
    @ccall libwebsockets.SSL_SESSION_get_compress_id(s::Ptr{SSL_SESSION})::Cuint
end

function SSL_SESSION_print_fp(fp, ses)
    @ccall libwebsockets.SSL_SESSION_print_fp(fp::Ptr{Libc.FILE}, ses::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_print(fp, ses)
    @ccall libwebsockets.SSL_SESSION_print(fp::Ptr{BIO}, ses::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_print_keylog(bp, x)
    @ccall libwebsockets.SSL_SESSION_print_keylog(bp::Ptr{BIO}, x::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_up_ref(ses)
    @ccall libwebsockets.SSL_SESSION_up_ref(ses::Ptr{SSL_SESSION})::Cint
end

function SSL_SESSION_free(ses)
    @ccall libwebsockets.SSL_SESSION_free(ses::Ptr{SSL_SESSION})::Cvoid
end

function SSL_set_session(to, session)
    @ccall libwebsockets.SSL_set_session(to::Ptr{SSL}, session::Ptr{SSL_SESSION})::Cint
end

function SSL_CTX_add_session(ctx, session)
    @ccall libwebsockets.SSL_CTX_add_session(ctx::Ptr{SSL_CTX}, session::Ptr{SSL_SESSION})::Cint
end

function SSL_CTX_remove_session(ctx, session)
    @ccall libwebsockets.SSL_CTX_remove_session(ctx::Ptr{SSL_CTX}, session::Ptr{SSL_SESSION})::Cint
end

function SSL_CTX_set_generate_session_id(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_generate_session_id(ctx::Ptr{SSL_CTX}, cb::GEN_SESSION_CB)::Cint
end

function SSL_set_generate_session_id(s, cb)
    @ccall libwebsockets.SSL_set_generate_session_id(s::Ptr{SSL}, cb::GEN_SESSION_CB)::Cint
end

function SSL_has_matching_session_id(s, id, id_len)
    @ccall libwebsockets.SSL_has_matching_session_id(s::Ptr{SSL}, id::Ptr{Cuchar}, id_len::Cuint)::Cint
end

function SSL_get0_peer_certificate(s)
    @ccall libwebsockets.SSL_get0_peer_certificate(s::Ptr{SSL})::Ptr{X509}
end

function SSL_get_peer_cert_chain(s)
    @ccall libwebsockets.SSL_get_peer_cert_chain(s::Ptr{SSL})::Ptr{stack_st_X509}
end

function SSL_CTX_get_verify_mode(ctx)
    @ccall libwebsockets.SSL_CTX_get_verify_mode(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_get_verify_depth(ctx)
    @ccall libwebsockets.SSL_CTX_get_verify_depth(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_get_verify_callback(ctx)
    @ccall libwebsockets.SSL_CTX_get_verify_callback(ctx::Ptr{SSL_CTX})::SSL_verify_cb
end

function SSL_CTX_set_verify(ctx, mode, callback)
    @ccall libwebsockets.SSL_CTX_set_verify(ctx::Ptr{SSL_CTX}, mode::Cint, callback::SSL_verify_cb)::Cvoid
end

function SSL_CTX_set_verify_depth(ctx, depth)
    @ccall libwebsockets.SSL_CTX_set_verify_depth(ctx::Ptr{SSL_CTX}, depth::Cint)::Cvoid
end

function SSL_CTX_set_cert_verify_callback(ctx, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_cert_verify_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_set_cert_cb(c, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_cert_cb(c::Ptr{SSL_CTX}, cb::Ptr{Cvoid}, arg::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_use_RSAPrivateKey(ctx, rsa)
    @ccall libwebsockets.SSL_CTX_use_RSAPrivateKey(ctx::Ptr{SSL_CTX}, rsa::Ptr{RSA})::Cint
end

function SSL_CTX_use_RSAPrivateKey_ASN1(ctx, d, len)
    @ccall libwebsockets.SSL_CTX_use_RSAPrivateKey_ASN1(ctx::Ptr{SSL_CTX}, d::Ptr{Cuchar}, len::Clong)::Cint
end

function SSL_CTX_use_PrivateKey(ctx, pkey)
    @ccall libwebsockets.SSL_CTX_use_PrivateKey(ctx::Ptr{SSL_CTX}, pkey::Ptr{EVP_PKEY})::Cint
end

function SSL_CTX_use_PrivateKey_ASN1(pk, ctx, d, len)
    @ccall libwebsockets.SSL_CTX_use_PrivateKey_ASN1(pk::Cint, ctx::Ptr{SSL_CTX}, d::Ptr{Cuchar}, len::Clong)::Cint
end

function SSL_CTX_use_certificate(ctx, x)
    @ccall libwebsockets.SSL_CTX_use_certificate(ctx::Ptr{SSL_CTX}, x::Ptr{X509})::Cint
end

function SSL_CTX_use_certificate_ASN1(ctx, len, d)
    @ccall libwebsockets.SSL_CTX_use_certificate_ASN1(ctx::Ptr{SSL_CTX}, len::Cint, d::Ptr{Cuchar})::Cint
end

function SSL_CTX_use_cert_and_key(ctx, x509, privatekey, chain, override)
    @ccall libwebsockets.SSL_CTX_use_cert_and_key(ctx::Ptr{SSL_CTX}, x509::Ptr{X509}, privatekey::Ptr{EVP_PKEY}, chain::Ptr{stack_st_X509}, override::Cint)::Cint
end

function SSL_CTX_set_default_passwd_cb(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_default_passwd_cb(ctx::Ptr{SSL_CTX}, cb::Ptr{pem_password_cb})::Cvoid
end

function SSL_CTX_set_default_passwd_cb_userdata(ctx, u)
    @ccall libwebsockets.SSL_CTX_set_default_passwd_cb_userdata(ctx::Ptr{SSL_CTX}, u::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_get_default_passwd_cb(ctx)
    @ccall libwebsockets.SSL_CTX_get_default_passwd_cb(ctx::Ptr{SSL_CTX})::Ptr{pem_password_cb}
end

function SSL_CTX_get_default_passwd_cb_userdata(ctx)
    @ccall libwebsockets.SSL_CTX_get_default_passwd_cb_userdata(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_set_default_passwd_cb(s, cb)
    @ccall libwebsockets.SSL_set_default_passwd_cb(s::Ptr{SSL}, cb::Ptr{pem_password_cb})::Cvoid
end

function SSL_set_default_passwd_cb_userdata(s, u)
    @ccall libwebsockets.SSL_set_default_passwd_cb_userdata(s::Ptr{SSL}, u::Ptr{Cvoid})::Cvoid
end

function SSL_get_default_passwd_cb(s)
    @ccall libwebsockets.SSL_get_default_passwd_cb(s::Ptr{SSL})::Ptr{pem_password_cb}
end

function SSL_get_default_passwd_cb_userdata(s)
    @ccall libwebsockets.SSL_get_default_passwd_cb_userdata(s::Ptr{SSL})::Ptr{Cvoid}
end

function SSL_CTX_check_private_key(ctx)
    @ccall libwebsockets.SSL_CTX_check_private_key(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_check_private_key(ctx)
    @ccall libwebsockets.SSL_check_private_key(ctx::Ptr{SSL})::Cint
end

function SSL_CTX_set_session_id_context(ctx, sid_ctx, sid_ctx_len)
    @ccall libwebsockets.SSL_CTX_set_session_id_context(ctx::Ptr{SSL_CTX}, sid_ctx::Ptr{Cuchar}, sid_ctx_len::Cuint)::Cint
end

function SSL_new(ctx)
    @ccall libwebsockets.SSL_new(ctx::Ptr{SSL_CTX})::Ptr{SSL}
end

function SSL_up_ref(s)
    @ccall libwebsockets.SSL_up_ref(s::Ptr{SSL})::Cint
end

function SSL_is_dtls(s)
    @ccall libwebsockets.SSL_is_dtls(s::Ptr{SSL})::Cint
end

function SSL_set_session_id_context(ssl, sid_ctx, sid_ctx_len)
    @ccall libwebsockets.SSL_set_session_id_context(ssl::Ptr{SSL}, sid_ctx::Ptr{Cuchar}, sid_ctx_len::Cuint)::Cint
end

function SSL_CTX_set_purpose(ctx, purpose)
    @ccall libwebsockets.SSL_CTX_set_purpose(ctx::Ptr{SSL_CTX}, purpose::Cint)::Cint
end

function SSL_set_purpose(ssl, purpose)
    @ccall libwebsockets.SSL_set_purpose(ssl::Ptr{SSL}, purpose::Cint)::Cint
end

function SSL_CTX_set_trust(ctx, trust)
    @ccall libwebsockets.SSL_CTX_set_trust(ctx::Ptr{SSL_CTX}, trust::Cint)::Cint
end

function SSL_set_trust(ssl, trust)
    @ccall libwebsockets.SSL_set_trust(ssl::Ptr{SSL}, trust::Cint)::Cint
end

function SSL_set1_host(s, hostname)
    @ccall libwebsockets.SSL_set1_host(s::Ptr{SSL}, hostname::Ptr{Cchar})::Cint
end

function SSL_add1_host(s, hostname)
    @ccall libwebsockets.SSL_add1_host(s::Ptr{SSL}, hostname::Ptr{Cchar})::Cint
end

function SSL_get0_peername(s)
    @ccall libwebsockets.SSL_get0_peername(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_set_hostflags(s, flags)
    @ccall libwebsockets.SSL_set_hostflags(s::Ptr{SSL}, flags::Cuint)::Cvoid
end

function SSL_CTX_dane_enable(ctx)
    @ccall libwebsockets.SSL_CTX_dane_enable(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_dane_mtype_set(ctx, md, mtype, ord)
    @ccall libwebsockets.SSL_CTX_dane_mtype_set(ctx::Ptr{SSL_CTX}, md::Ptr{EVP_MD}, mtype::UInt8, ord::UInt8)::Cint
end

function SSL_dane_enable(s, basedomain)
    @ccall libwebsockets.SSL_dane_enable(s::Ptr{SSL}, basedomain::Ptr{Cchar})::Cint
end

function SSL_dane_tlsa_add(s, usage, selector, mtype, data, dlen)
    @ccall libwebsockets.SSL_dane_tlsa_add(s::Ptr{SSL}, usage::UInt8, selector::UInt8, mtype::UInt8, data::Ptr{Cuchar}, dlen::Csize_t)::Cint
end

function SSL_get0_dane_authority(s, mcert, mspki)
    @ccall libwebsockets.SSL_get0_dane_authority(s::Ptr{SSL}, mcert::Ptr{Ptr{X509}}, mspki::Ptr{Ptr{EVP_PKEY}})::Cint
end

function SSL_get0_dane_tlsa(s, usage, selector, mtype, data, dlen)
    @ccall libwebsockets.SSL_get0_dane_tlsa(s::Ptr{SSL}, usage::Ptr{UInt8}, selector::Ptr{UInt8}, mtype::Ptr{UInt8}, data::Ptr{Ptr{Cuchar}}, dlen::Ptr{Csize_t})::Cint
end

function SSL_get0_dane(ssl)
    @ccall libwebsockets.SSL_get0_dane(ssl::Ptr{SSL})::Ptr{SSL_DANE}
end

function SSL_CTX_dane_set_flags(ctx, flags)
    @ccall libwebsockets.SSL_CTX_dane_set_flags(ctx::Ptr{SSL_CTX}, flags::Culong)::Culong
end

function SSL_CTX_dane_clear_flags(ctx, flags)
    @ccall libwebsockets.SSL_CTX_dane_clear_flags(ctx::Ptr{SSL_CTX}, flags::Culong)::Culong
end

function SSL_dane_set_flags(ssl, flags)
    @ccall libwebsockets.SSL_dane_set_flags(ssl::Ptr{SSL}, flags::Culong)::Culong
end

function SSL_dane_clear_flags(ssl, flags)
    @ccall libwebsockets.SSL_dane_clear_flags(ssl::Ptr{SSL}, flags::Culong)::Culong
end

function SSL_CTX_set1_param(ctx, vpm)
    @ccall libwebsockets.SSL_CTX_set1_param(ctx::Ptr{SSL_CTX}, vpm::Ptr{X509_VERIFY_PARAM})::Cint
end

function SSL_set1_param(ssl, vpm)
    @ccall libwebsockets.SSL_set1_param(ssl::Ptr{SSL}, vpm::Ptr{X509_VERIFY_PARAM})::Cint
end

function SSL_CTX_get0_param(ctx)
    @ccall libwebsockets.SSL_CTX_get0_param(ctx::Ptr{SSL_CTX})::Ptr{X509_VERIFY_PARAM}
end

function SSL_get0_param(ssl)
    @ccall libwebsockets.SSL_get0_param(ssl::Ptr{SSL})::Ptr{X509_VERIFY_PARAM}
end

function SSL_CTX_set_srp_username(ctx, name)
    @ccall libwebsockets.SSL_CTX_set_srp_username(ctx::Ptr{SSL_CTX}, name::Ptr{Cchar})::Cint
end

function SSL_CTX_set_srp_password(ctx, password)
    @ccall libwebsockets.SSL_CTX_set_srp_password(ctx::Ptr{SSL_CTX}, password::Ptr{Cchar})::Cint
end

function SSL_CTX_set_srp_strength(ctx, strength)
    @ccall libwebsockets.SSL_CTX_set_srp_strength(ctx::Ptr{SSL_CTX}, strength::Cint)::Cint
end

function SSL_CTX_set_srp_client_pwd_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_srp_client_pwd_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cint
end

function SSL_CTX_set_srp_verify_param_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_srp_verify_param_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cint
end

function SSL_CTX_set_srp_username_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_srp_username_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cint
end

function SSL_CTX_set_srp_cb_arg(ctx, arg)
    @ccall libwebsockets.SSL_CTX_set_srp_cb_arg(ctx::Ptr{SSL_CTX}, arg::Ptr{Cvoid})::Cint
end

function SSL_set_srp_server_param(s, N, g, sa, v, info)
    @ccall libwebsockets.SSL_set_srp_server_param(s::Ptr{SSL}, N::Ptr{BIGNUM}, g::Ptr{BIGNUM}, sa::Ptr{BIGNUM}, v::Ptr{BIGNUM}, info::Ptr{Cchar})::Cint
end

function SSL_set_srp_server_param_pw(s, user, pass, grp)
    @ccall libwebsockets.SSL_set_srp_server_param_pw(s::Ptr{SSL}, user::Ptr{Cchar}, pass::Ptr{Cchar}, grp::Ptr{Cchar})::Cint
end

function SSL_get_srp_g(s)
    @ccall libwebsockets.SSL_get_srp_g(s::Ptr{SSL})::Ptr{BIGNUM}
end

function SSL_get_srp_N(s)
    @ccall libwebsockets.SSL_get_srp_N(s::Ptr{SSL})::Ptr{BIGNUM}
end

function SSL_get_srp_username(s)
    @ccall libwebsockets.SSL_get_srp_username(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_get_srp_userinfo(s)
    @ccall libwebsockets.SSL_get_srp_userinfo(s::Ptr{SSL})::Ptr{Cchar}
end

# typedef int ( * SSL_client_hello_cb_fn ) ( SSL * s , int * al , void * arg )
const SSL_client_hello_cb_fn = Ptr{Cvoid}

function SSL_CTX_set_client_hello_cb(c, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_client_hello_cb(c::Ptr{SSL_CTX}, cb::SSL_client_hello_cb_fn, arg::Ptr{Cvoid})::Cvoid
end

function SSL_client_hello_isv2(s)
    @ccall libwebsockets.SSL_client_hello_isv2(s::Ptr{SSL})::Cint
end

function SSL_client_hello_get0_legacy_version(s)
    @ccall libwebsockets.SSL_client_hello_get0_legacy_version(s::Ptr{SSL})::Cuint
end

function SSL_client_hello_get0_random(s, out)
    @ccall libwebsockets.SSL_client_hello_get0_random(s::Ptr{SSL}, out::Ptr{Ptr{Cuchar}})::Csize_t
end

function SSL_client_hello_get0_session_id(s, out)
    @ccall libwebsockets.SSL_client_hello_get0_session_id(s::Ptr{SSL}, out::Ptr{Ptr{Cuchar}})::Csize_t
end

function SSL_client_hello_get0_ciphers(s, out)
    @ccall libwebsockets.SSL_client_hello_get0_ciphers(s::Ptr{SSL}, out::Ptr{Ptr{Cuchar}})::Csize_t
end

function SSL_client_hello_get0_compression_methods(s, out)
    @ccall libwebsockets.SSL_client_hello_get0_compression_methods(s::Ptr{SSL}, out::Ptr{Ptr{Cuchar}})::Csize_t
end

function SSL_client_hello_get1_extensions_present(s, out, outlen)
    @ccall libwebsockets.SSL_client_hello_get1_extensions_present(s::Ptr{SSL}, out::Ptr{Ptr{Cint}}, outlen::Ptr{Csize_t})::Cint
end

function SSL_client_hello_get0_ext(s, type, out, outlen)
    @ccall libwebsockets.SSL_client_hello_get0_ext(s::Ptr{SSL}, type::Cuint, out::Ptr{Ptr{Cuchar}}, outlen::Ptr{Csize_t})::Cint
end

function SSL_certs_clear(s)
    @ccall libwebsockets.SSL_certs_clear(s::Ptr{SSL})::Cvoid
end

function SSL_free(ssl)
    @ccall libwebsockets.SSL_free(ssl::Ptr{SSL})::Cvoid
end

function SSL_waiting_for_async(s)
    @ccall libwebsockets.SSL_waiting_for_async(s::Ptr{SSL})::Cint
end

function SSL_get_all_async_fds(s, fds, numfds)
    @ccall libwebsockets.SSL_get_all_async_fds(s::Ptr{SSL}, fds::Ptr{Cint}, numfds::Ptr{Csize_t})::Cint
end

function SSL_get_changed_async_fds(s, addfd, numaddfds, delfd, numdelfds)
    @ccall libwebsockets.SSL_get_changed_async_fds(s::Ptr{SSL}, addfd::Ptr{Cint}, numaddfds::Ptr{Csize_t}, delfd::Ptr{Cint}, numdelfds::Ptr{Csize_t})::Cint
end

function SSL_CTX_set_async_callback(ctx, callback)
    @ccall libwebsockets.SSL_CTX_set_async_callback(ctx::Ptr{SSL_CTX}, callback::SSL_async_callback_fn)::Cint
end

function SSL_CTX_set_async_callback_arg(ctx, arg)
    @ccall libwebsockets.SSL_CTX_set_async_callback_arg(ctx::Ptr{SSL_CTX}, arg::Ptr{Cvoid})::Cint
end

function SSL_set_async_callback(s, callback)
    @ccall libwebsockets.SSL_set_async_callback(s::Ptr{SSL}, callback::SSL_async_callback_fn)::Cint
end

function SSL_set_async_callback_arg(s, arg)
    @ccall libwebsockets.SSL_set_async_callback_arg(s::Ptr{SSL}, arg::Ptr{Cvoid})::Cint
end

function SSL_get_async_status(s, status)
    @ccall libwebsockets.SSL_get_async_status(s::Ptr{SSL}, status::Ptr{Cint})::Cint
end

function SSL_accept(ssl)
    @ccall libwebsockets.SSL_accept(ssl::Ptr{SSL})::Cint
end

function SSL_stateless(s)
    @ccall libwebsockets.SSL_stateless(s::Ptr{SSL})::Cint
end

function SSL_connect(ssl)
    @ccall libwebsockets.SSL_connect(ssl::Ptr{SSL})::Cint
end

function SSL_read(ssl, buf, num)
    @ccall libwebsockets.SSL_read(ssl::Ptr{SSL}, buf::Ptr{Cvoid}, num::Cint)::Cint
end

function SSL_read_ex(ssl, buf, num, readbytes)
    @ccall libwebsockets.SSL_read_ex(ssl::Ptr{SSL}, buf::Ptr{Cvoid}, num::Csize_t, readbytes::Ptr{Csize_t})::Cint
end

function SSL_read_early_data(s, buf, num, readbytes)
    @ccall libwebsockets.SSL_read_early_data(s::Ptr{SSL}, buf::Ptr{Cvoid}, num::Csize_t, readbytes::Ptr{Csize_t})::Cint
end

function SSL_peek(ssl, buf, num)
    @ccall libwebsockets.SSL_peek(ssl::Ptr{SSL}, buf::Ptr{Cvoid}, num::Cint)::Cint
end

function SSL_peek_ex(ssl, buf, num, readbytes)
    @ccall libwebsockets.SSL_peek_ex(ssl::Ptr{SSL}, buf::Ptr{Cvoid}, num::Csize_t, readbytes::Ptr{Csize_t})::Cint
end

function SSL_sendfile(s, fd, offset, size, flags)
    @ccall libwebsockets.SSL_sendfile(s::Ptr{SSL}, fd::Cint, offset::off_t, size::Csize_t, flags::Cint)::Cssize_t
end

function SSL_write(ssl, buf, num)
    @ccall libwebsockets.SSL_write(ssl::Ptr{SSL}, buf::Ptr{Cvoid}, num::Cint)::Cint
end

function SSL_write_ex(s, buf, num, written)
    @ccall libwebsockets.SSL_write_ex(s::Ptr{SSL}, buf::Ptr{Cvoid}, num::Csize_t, written::Ptr{Csize_t})::Cint
end

function SSL_write_early_data(s, buf, num, written)
    @ccall libwebsockets.SSL_write_early_data(s::Ptr{SSL}, buf::Ptr{Cvoid}, num::Csize_t, written::Ptr{Csize_t})::Cint
end

function SSL_get_early_data_status(s)
    @ccall libwebsockets.SSL_get_early_data_status(s::Ptr{SSL})::Cint
end

function SSL_get_error(s, ret_code)
    @ccall libwebsockets.SSL_get_error(s::Ptr{SSL}, ret_code::Cint)::Cint
end

function SSL_get_version(s)
    @ccall libwebsockets.SSL_get_version(s::Ptr{SSL})::Ptr{Cchar}
end

function SSL_CTX_set_ssl_version(ctx, meth)
    @ccall libwebsockets.SSL_CTX_set_ssl_version(ctx::Ptr{SSL_CTX}, meth::Ptr{SSL_METHOD})::Cint
end

function TLSv1_method()
    @ccall libwebsockets.TLSv1_method()::Ptr{SSL_METHOD}
end

function TLSv1_server_method()
    @ccall libwebsockets.TLSv1_server_method()::Ptr{SSL_METHOD}
end

function TLSv1_client_method()
    @ccall libwebsockets.TLSv1_client_method()::Ptr{SSL_METHOD}
end

function TLSv1_1_method()
    @ccall libwebsockets.TLSv1_1_method()::Ptr{SSL_METHOD}
end

function TLSv1_1_server_method()
    @ccall libwebsockets.TLSv1_1_server_method()::Ptr{SSL_METHOD}
end

function TLSv1_1_client_method()
    @ccall libwebsockets.TLSv1_1_client_method()::Ptr{SSL_METHOD}
end

function TLSv1_2_method()
    @ccall libwebsockets.TLSv1_2_method()::Ptr{SSL_METHOD}
end

function TLSv1_2_server_method()
    @ccall libwebsockets.TLSv1_2_server_method()::Ptr{SSL_METHOD}
end

function TLSv1_2_client_method()
    @ccall libwebsockets.TLSv1_2_client_method()::Ptr{SSL_METHOD}
end

function DTLSv1_method()
    @ccall libwebsockets.DTLSv1_method()::Ptr{SSL_METHOD}
end

function DTLSv1_server_method()
    @ccall libwebsockets.DTLSv1_server_method()::Ptr{SSL_METHOD}
end

function DTLSv1_client_method()
    @ccall libwebsockets.DTLSv1_client_method()::Ptr{SSL_METHOD}
end

function DTLSv1_2_method()
    @ccall libwebsockets.DTLSv1_2_method()::Ptr{SSL_METHOD}
end

function DTLSv1_2_server_method()
    @ccall libwebsockets.DTLSv1_2_server_method()::Ptr{SSL_METHOD}
end

function DTLSv1_2_client_method()
    @ccall libwebsockets.DTLSv1_2_client_method()::Ptr{SSL_METHOD}
end

function DTLS_method()
    @ccall libwebsockets.DTLS_method()::Ptr{SSL_METHOD}
end

function DTLS_server_method()
    @ccall libwebsockets.DTLS_server_method()::Ptr{SSL_METHOD}
end

function DTLS_client_method()
    @ccall libwebsockets.DTLS_client_method()::Ptr{SSL_METHOD}
end

function DTLS_get_data_mtu(s)
    @ccall libwebsockets.DTLS_get_data_mtu(s::Ptr{SSL})::Csize_t
end

function SSL_get_ciphers(s)
    @ccall libwebsockets.SSL_get_ciphers(s::Ptr{SSL})::Ptr{stack_st_SSL_CIPHER}
end

function SSL_CTX_get_ciphers(ctx)
    @ccall libwebsockets.SSL_CTX_get_ciphers(ctx::Ptr{SSL_CTX})::Ptr{stack_st_SSL_CIPHER}
end

function SSL_get_client_ciphers(s)
    @ccall libwebsockets.SSL_get_client_ciphers(s::Ptr{SSL})::Ptr{stack_st_SSL_CIPHER}
end

function SSL_get1_supported_ciphers(s)
    @ccall libwebsockets.SSL_get1_supported_ciphers(s::Ptr{SSL})::Ptr{stack_st_SSL_CIPHER}
end

function SSL_do_handshake(s)
    @ccall libwebsockets.SSL_do_handshake(s::Ptr{SSL})::Cint
end

function SSL_key_update(s, updatetype)
    @ccall libwebsockets.SSL_key_update(s::Ptr{SSL}, updatetype::Cint)::Cint
end

function SSL_get_key_update_type(s)
    @ccall libwebsockets.SSL_get_key_update_type(s::Ptr{SSL})::Cint
end

function SSL_renegotiate(s)
    @ccall libwebsockets.SSL_renegotiate(s::Ptr{SSL})::Cint
end

function SSL_renegotiate_abbreviated(s)
    @ccall libwebsockets.SSL_renegotiate_abbreviated(s::Ptr{SSL})::Cint
end

function SSL_renegotiate_pending(s)
    @ccall libwebsockets.SSL_renegotiate_pending(s::Ptr{SSL})::Cint
end

function SSL_new_session_ticket(s)
    @ccall libwebsockets.SSL_new_session_ticket(s::Ptr{SSL})::Cint
end

function SSL_shutdown(s)
    @ccall libwebsockets.SSL_shutdown(s::Ptr{SSL})::Cint
end

function SSL_verify_client_post_handshake(s)
    @ccall libwebsockets.SSL_verify_client_post_handshake(s::Ptr{SSL})::Cint
end

function SSL_CTX_set_post_handshake_auth(ctx, val)
    @ccall libwebsockets.SSL_CTX_set_post_handshake_auth(ctx::Ptr{SSL_CTX}, val::Cint)::Cvoid
end

function SSL_set_post_handshake_auth(s, val)
    @ccall libwebsockets.SSL_set_post_handshake_auth(s::Ptr{SSL}, val::Cint)::Cvoid
end

function SSL_CTX_get_ssl_method(ctx)
    @ccall libwebsockets.SSL_CTX_get_ssl_method(ctx::Ptr{SSL_CTX})::Ptr{SSL_METHOD}
end

function SSL_get_ssl_method(s)
    @ccall libwebsockets.SSL_get_ssl_method(s::Ptr{SSL})::Ptr{SSL_METHOD}
end

function SSL_set_ssl_method(s, method)
    @ccall libwebsockets.SSL_set_ssl_method(s::Ptr{SSL}, method::Ptr{SSL_METHOD})::Cint
end

function SSL_alert_type_string_long(value)
    @ccall libwebsockets.SSL_alert_type_string_long(value::Cint)::Ptr{Cchar}
end

function SSL_alert_type_string(value)
    @ccall libwebsockets.SSL_alert_type_string(value::Cint)::Ptr{Cchar}
end

function SSL_alert_desc_string_long(value)
    @ccall libwebsockets.SSL_alert_desc_string_long(value::Cint)::Ptr{Cchar}
end

function SSL_alert_desc_string(value)
    @ccall libwebsockets.SSL_alert_desc_string(value::Cint)::Ptr{Cchar}
end

function SSL_set0_CA_list(s, name_list)
    @ccall libwebsockets.SSL_set0_CA_list(s::Ptr{SSL}, name_list::Ptr{stack_st_X509_NAME})::Cvoid
end

function SSL_CTX_set0_CA_list(ctx, name_list)
    @ccall libwebsockets.SSL_CTX_set0_CA_list(ctx::Ptr{SSL_CTX}, name_list::Ptr{stack_st_X509_NAME})::Cvoid
end

function SSL_get0_CA_list(s)
    @ccall libwebsockets.SSL_get0_CA_list(s::Ptr{SSL})::Ptr{stack_st_X509_NAME}
end

function SSL_CTX_get0_CA_list(ctx)
    @ccall libwebsockets.SSL_CTX_get0_CA_list(ctx::Ptr{SSL_CTX})::Ptr{stack_st_X509_NAME}
end

function SSL_add1_to_CA_list(ssl, x)
    @ccall libwebsockets.SSL_add1_to_CA_list(ssl::Ptr{SSL}, x::Ptr{X509})::Cint
end

function SSL_CTX_add1_to_CA_list(ctx, x)
    @ccall libwebsockets.SSL_CTX_add1_to_CA_list(ctx::Ptr{SSL_CTX}, x::Ptr{X509})::Cint
end

function SSL_get0_peer_CA_list(s)
    @ccall libwebsockets.SSL_get0_peer_CA_list(s::Ptr{SSL})::Ptr{stack_st_X509_NAME}
end

function SSL_set_client_CA_list(s, name_list)
    @ccall libwebsockets.SSL_set_client_CA_list(s::Ptr{SSL}, name_list::Ptr{stack_st_X509_NAME})::Cvoid
end

function SSL_CTX_set_client_CA_list(ctx, name_list)
    @ccall libwebsockets.SSL_CTX_set_client_CA_list(ctx::Ptr{SSL_CTX}, name_list::Ptr{stack_st_X509_NAME})::Cvoid
end

function SSL_get_client_CA_list(s)
    @ccall libwebsockets.SSL_get_client_CA_list(s::Ptr{SSL})::Ptr{stack_st_X509_NAME}
end

function SSL_CTX_get_client_CA_list(s)
    @ccall libwebsockets.SSL_CTX_get_client_CA_list(s::Ptr{SSL_CTX})::Ptr{stack_st_X509_NAME}
end

function SSL_add_client_CA(ssl, x)
    @ccall libwebsockets.SSL_add_client_CA(ssl::Ptr{SSL}, x::Ptr{X509})::Cint
end

function SSL_CTX_add_client_CA(ctx, x)
    @ccall libwebsockets.SSL_CTX_add_client_CA(ctx::Ptr{SSL_CTX}, x::Ptr{X509})::Cint
end

function SSL_set_connect_state(s)
    @ccall libwebsockets.SSL_set_connect_state(s::Ptr{SSL})::Cvoid
end

function SSL_set_accept_state(s)
    @ccall libwebsockets.SSL_set_accept_state(s::Ptr{SSL})::Cvoid
end

function SSL_get_default_timeout(s)
    @ccall libwebsockets.SSL_get_default_timeout(s::Ptr{SSL})::Clong
end

function SSL_CIPHER_description(arg1, buf, size)
    @ccall libwebsockets.SSL_CIPHER_description(arg1::Ptr{SSL_CIPHER}, buf::Ptr{Cchar}, size::Cint)::Ptr{Cchar}
end

function SSL_dup_CA_list(sk)
    @ccall libwebsockets.SSL_dup_CA_list(sk::Ptr{stack_st_X509_NAME})::Ptr{stack_st_X509_NAME}
end

function SSL_dup(ssl)
    @ccall libwebsockets.SSL_dup(ssl::Ptr{SSL})::Ptr{SSL}
end

function SSL_get_certificate(ssl)
    @ccall libwebsockets.SSL_get_certificate(ssl::Ptr{SSL})::Ptr{X509}
end

function SSL_get_privatekey(ssl)
    @ccall libwebsockets.SSL_get_privatekey(ssl::Ptr{SSL})::Ptr{evp_pkey_st}
end

function SSL_CTX_get0_certificate(ctx)
    @ccall libwebsockets.SSL_CTX_get0_certificate(ctx::Ptr{SSL_CTX})::Ptr{X509}
end

function SSL_CTX_get0_privatekey(ctx)
    @ccall libwebsockets.SSL_CTX_get0_privatekey(ctx::Ptr{SSL_CTX})::Ptr{EVP_PKEY}
end

function SSL_CTX_set_quiet_shutdown(ctx, mode)
    @ccall libwebsockets.SSL_CTX_set_quiet_shutdown(ctx::Ptr{SSL_CTX}, mode::Cint)::Cvoid
end

function SSL_CTX_get_quiet_shutdown(ctx)
    @ccall libwebsockets.SSL_CTX_get_quiet_shutdown(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_set_quiet_shutdown(ssl, mode)
    @ccall libwebsockets.SSL_set_quiet_shutdown(ssl::Ptr{SSL}, mode::Cint)::Cvoid
end

function SSL_get_quiet_shutdown(ssl)
    @ccall libwebsockets.SSL_get_quiet_shutdown(ssl::Ptr{SSL})::Cint
end

function SSL_set_shutdown(ssl, mode)
    @ccall libwebsockets.SSL_set_shutdown(ssl::Ptr{SSL}, mode::Cint)::Cvoid
end

function SSL_get_shutdown(ssl)
    @ccall libwebsockets.SSL_get_shutdown(ssl::Ptr{SSL})::Cint
end

function SSL_CTX_set_default_verify_paths(ctx)
    @ccall libwebsockets.SSL_CTX_set_default_verify_paths(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_set_default_verify_dir(ctx)
    @ccall libwebsockets.SSL_CTX_set_default_verify_dir(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_set_default_verify_file(ctx)
    @ccall libwebsockets.SSL_CTX_set_default_verify_file(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_set_default_verify_store(ctx)
    @ccall libwebsockets.SSL_CTX_set_default_verify_store(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_load_verify_file(ctx, CAfile)
    @ccall libwebsockets.SSL_CTX_load_verify_file(ctx::Ptr{SSL_CTX}, CAfile::Ptr{Cchar})::Cint
end

function SSL_CTX_load_verify_dir(ctx, CApath)
    @ccall libwebsockets.SSL_CTX_load_verify_dir(ctx::Ptr{SSL_CTX}, CApath::Ptr{Cchar})::Cint
end

function SSL_CTX_load_verify_store(ctx, CAstore)
    @ccall libwebsockets.SSL_CTX_load_verify_store(ctx::Ptr{SSL_CTX}, CAstore::Ptr{Cchar})::Cint
end

function SSL_CTX_load_verify_locations(ctx, CAfile, CApath)
    @ccall libwebsockets.SSL_CTX_load_verify_locations(ctx::Ptr{SSL_CTX}, CAfile::Ptr{Cchar}, CApath::Ptr{Cchar})::Cint
end

function SSL_get1_session(ssl)
    @ccall libwebsockets.SSL_get1_session(ssl::Ptr{SSL})::Ptr{SSL_SESSION}
end

function SSL_get_SSL_CTX(ssl)
    @ccall libwebsockets.SSL_get_SSL_CTX(ssl::Ptr{SSL})::Ptr{SSL_CTX}
end

function SSL_set_SSL_CTX(ssl, ctx)
    @ccall libwebsockets.SSL_set_SSL_CTX(ssl::Ptr{SSL}, ctx::Ptr{SSL_CTX})::Ptr{SSL_CTX}
end

function SSL_set_info_callback(ssl, cb)
    @ccall libwebsockets.SSL_set_info_callback(ssl::Ptr{SSL}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_get_info_callback(ssl)
    @ccall libwebsockets.SSL_get_info_callback(ssl::Ptr{SSL})::Ptr{Cvoid}
end

function SSL_get_state(ssl)
    @ccall libwebsockets.SSL_get_state(ssl::Ptr{SSL})::OSSL_HANDSHAKE_STATE
end

function SSL_set_verify_result(ssl, v)
    @ccall libwebsockets.SSL_set_verify_result(ssl::Ptr{SSL}, v::Clong)::Cvoid
end

function SSL_get_verify_result(ssl)
    @ccall libwebsockets.SSL_get_verify_result(ssl::Ptr{SSL})::Clong
end

function SSL_get0_verified_chain(s)
    @ccall libwebsockets.SSL_get0_verified_chain(s::Ptr{SSL})::Ptr{stack_st_X509}
end

function SSL_get_client_random(ssl, out, outlen)
    @ccall libwebsockets.SSL_get_client_random(ssl::Ptr{SSL}, out::Ptr{Cuchar}, outlen::Csize_t)::Csize_t
end

function SSL_get_server_random(ssl, out, outlen)
    @ccall libwebsockets.SSL_get_server_random(ssl::Ptr{SSL}, out::Ptr{Cuchar}, outlen::Csize_t)::Csize_t
end

function SSL_SESSION_get_master_key(sess, out, outlen)
    @ccall libwebsockets.SSL_SESSION_get_master_key(sess::Ptr{SSL_SESSION}, out::Ptr{Cuchar}, outlen::Csize_t)::Csize_t
end

function SSL_SESSION_set1_master_key(sess, in, len)
    @ccall libwebsockets.SSL_SESSION_set1_master_key(sess::Ptr{SSL_SESSION}, in::Ptr{Cuchar}, len::Csize_t)::Cint
end

function SSL_SESSION_get_max_fragment_length(sess)
    @ccall libwebsockets.SSL_SESSION_get_max_fragment_length(sess::Ptr{SSL_SESSION})::UInt8
end

function SSL_get_ex_data_X509_STORE_CTX_idx()
    @ccall libwebsockets.SSL_get_ex_data_X509_STORE_CTX_idx()::Cint
end

function SSL_CTX_set_default_read_buffer_len(ctx, len)
    @ccall libwebsockets.SSL_CTX_set_default_read_buffer_len(ctx::Ptr{SSL_CTX}, len::Csize_t)::Cvoid
end

function SSL_set_default_read_buffer_len(s, len)
    @ccall libwebsockets.SSL_set_default_read_buffer_len(s::Ptr{SSL}, len::Csize_t)::Cvoid
end

function SSL_CTX_set_tmp_dh_callback(ctx, dh)
    @ccall libwebsockets.SSL_CTX_set_tmp_dh_callback(ctx::Ptr{SSL_CTX}, dh::Ptr{Cvoid})::Cvoid
end

function SSL_set_tmp_dh_callback(ssl, dh)
    @ccall libwebsockets.SSL_set_tmp_dh_callback(ssl::Ptr{SSL}, dh::Ptr{Cvoid})::Cvoid
end

function SSL_get_current_compression(s)
    @ccall libwebsockets.SSL_get_current_compression(s::Ptr{SSL})::Ptr{COMP_METHOD}
end

function SSL_get_current_expansion(s)
    @ccall libwebsockets.SSL_get_current_expansion(s::Ptr{SSL})::Ptr{COMP_METHOD}
end

function SSL_COMP_get_name(comp)
    @ccall libwebsockets.SSL_COMP_get_name(comp::Ptr{COMP_METHOD})::Ptr{Cchar}
end

function SSL_COMP_get0_name(comp)
    @ccall libwebsockets.SSL_COMP_get0_name(comp::Ptr{SSL_COMP})::Ptr{Cchar}
end

function SSL_COMP_get_id(comp)
    @ccall libwebsockets.SSL_COMP_get_id(comp::Ptr{SSL_COMP})::Cint
end

function SSL_COMP_get_compression_methods()
    @ccall libwebsockets.SSL_COMP_get_compression_methods()::Ptr{stack_st_SSL_COMP}
end

function SSL_COMP_set0_compression_methods(meths)
    @ccall libwebsockets.SSL_COMP_set0_compression_methods(meths::Ptr{stack_st_SSL_COMP})::Ptr{stack_st_SSL_COMP}
end

function SSL_COMP_add_compression_method(id, cm)
    @ccall libwebsockets.SSL_COMP_add_compression_method(id::Cint, cm::Ptr{COMP_METHOD})::Cint
end

function SSL_CIPHER_find(ssl, ptr)
    @ccall libwebsockets.SSL_CIPHER_find(ssl::Ptr{SSL}, ptr::Ptr{Cuchar})::Ptr{SSL_CIPHER}
end

function SSL_CIPHER_get_cipher_nid(c)
    @ccall libwebsockets.SSL_CIPHER_get_cipher_nid(c::Ptr{SSL_CIPHER})::Cint
end

function SSL_CIPHER_get_digest_nid(c)
    @ccall libwebsockets.SSL_CIPHER_get_digest_nid(c::Ptr{SSL_CIPHER})::Cint
end

function SSL_bytes_to_cipher_list(s, bytes, len, isv2format, sk, scsvs)
    @ccall libwebsockets.SSL_bytes_to_cipher_list(s::Ptr{SSL}, bytes::Ptr{Cuchar}, len::Csize_t, isv2format::Cint, sk::Ptr{Ptr{stack_st_SSL_CIPHER}}, scsvs::Ptr{Ptr{stack_st_SSL_CIPHER}})::Cint
end

function SSL_set_session_ticket_ext(s, ext_data, ext_len)
    @ccall libwebsockets.SSL_set_session_ticket_ext(s::Ptr{SSL}, ext_data::Ptr{Cvoid}, ext_len::Cint)::Cint
end

function SSL_set_session_ticket_ext_cb(s, cb, arg)
    @ccall libwebsockets.SSL_set_session_ticket_ext_cb(s::Ptr{SSL}, cb::tls_session_ticket_ext_cb_fn, arg::Ptr{Cvoid})::Cint
end

function SSL_set_session_secret_cb(s, session_secret_cb, arg)
    @ccall libwebsockets.SSL_set_session_secret_cb(s::Ptr{SSL}, session_secret_cb::tls_session_secret_cb_fn, arg::Ptr{Cvoid})::Cint
end

function SSL_CTX_set_not_resumable_session_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_not_resumable_session_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_set_not_resumable_session_callback(ssl, cb)
    @ccall libwebsockets.SSL_set_not_resumable_session_callback(ssl::Ptr{SSL}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_set_record_padding_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_record_padding_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_set_record_padding_callback_arg(ctx, arg)
    @ccall libwebsockets.SSL_CTX_set_record_padding_callback_arg(ctx::Ptr{SSL_CTX}, arg::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_get_record_padding_callback_arg(ctx)
    @ccall libwebsockets.SSL_CTX_get_record_padding_callback_arg(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_set_block_padding(ctx, block_size)
    @ccall libwebsockets.SSL_CTX_set_block_padding(ctx::Ptr{SSL_CTX}, block_size::Csize_t)::Cint
end

function SSL_set_record_padding_callback(ssl, cb)
    @ccall libwebsockets.SSL_set_record_padding_callback(ssl::Ptr{SSL}, cb::Ptr{Cvoid})::Cint
end

function SSL_set_record_padding_callback_arg(ssl, arg)
    @ccall libwebsockets.SSL_set_record_padding_callback_arg(ssl::Ptr{SSL}, arg::Ptr{Cvoid})::Cvoid
end

function SSL_get_record_padding_callback_arg(ssl)
    @ccall libwebsockets.SSL_get_record_padding_callback_arg(ssl::Ptr{SSL})::Ptr{Cvoid}
end

function SSL_set_block_padding(ssl, block_size)
    @ccall libwebsockets.SSL_set_block_padding(ssl::Ptr{SSL}, block_size::Csize_t)::Cint
end

function SSL_set_num_tickets(s, num_tickets)
    @ccall libwebsockets.SSL_set_num_tickets(s::Ptr{SSL}, num_tickets::Csize_t)::Cint
end

function SSL_get_num_tickets(s)
    @ccall libwebsockets.SSL_get_num_tickets(s::Ptr{SSL})::Csize_t
end

function SSL_CTX_set_num_tickets(ctx, num_tickets)
    @ccall libwebsockets.SSL_CTX_set_num_tickets(ctx::Ptr{SSL_CTX}, num_tickets::Csize_t)::Cint
end

function SSL_CTX_get_num_tickets(ctx)
    @ccall libwebsockets.SSL_CTX_get_num_tickets(ctx::Ptr{SSL_CTX})::Csize_t
end

function SSL_CONF_CTX_new()
    @ccall libwebsockets.SSL_CONF_CTX_new()::Ptr{SSL_CONF_CTX}
end

function SSL_CONF_CTX_finish(cctx)
    @ccall libwebsockets.SSL_CONF_CTX_finish(cctx::Ptr{SSL_CONF_CTX})::Cint
end

function SSL_CONF_CTX_free(cctx)
    @ccall libwebsockets.SSL_CONF_CTX_free(cctx::Ptr{SSL_CONF_CTX})::Cvoid
end

function SSL_CONF_CTX_set_flags(cctx, flags)
    @ccall libwebsockets.SSL_CONF_CTX_set_flags(cctx::Ptr{SSL_CONF_CTX}, flags::Cuint)::Cuint
end

function SSL_CONF_CTX_clear_flags(cctx, flags)
    @ccall libwebsockets.SSL_CONF_CTX_clear_flags(cctx::Ptr{SSL_CONF_CTX}, flags::Cuint)::Cuint
end

function SSL_CONF_CTX_set1_prefix(cctx, pre)
    @ccall libwebsockets.SSL_CONF_CTX_set1_prefix(cctx::Ptr{SSL_CONF_CTX}, pre::Ptr{Cchar})::Cint
end

function SSL_CONF_CTX_set_ssl(cctx, ssl)
    @ccall libwebsockets.SSL_CONF_CTX_set_ssl(cctx::Ptr{SSL_CONF_CTX}, ssl::Ptr{SSL})::Cvoid
end

function SSL_CONF_CTX_set_ssl_ctx(cctx, ctx)
    @ccall libwebsockets.SSL_CONF_CTX_set_ssl_ctx(cctx::Ptr{SSL_CONF_CTX}, ctx::Ptr{SSL_CTX})::Cvoid
end

function SSL_CONF_cmd(cctx, cmd, value)
    @ccall libwebsockets.SSL_CONF_cmd(cctx::Ptr{SSL_CONF_CTX}, cmd::Ptr{Cchar}, value::Ptr{Cchar})::Cint
end

function SSL_CONF_cmd_argv(cctx, pargc, pargv)
    @ccall libwebsockets.SSL_CONF_cmd_argv(cctx::Ptr{SSL_CONF_CTX}, pargc::Ptr{Cint}, pargv::Ptr{Ptr{Ptr{Cchar}}})::Cint
end

function SSL_CONF_cmd_value_type(cctx, cmd)
    @ccall libwebsockets.SSL_CONF_cmd_value_type(cctx::Ptr{SSL_CONF_CTX}, cmd::Ptr{Cchar})::Cint
end

function SSL_add_ssl_module()
    @ccall libwebsockets.SSL_add_ssl_module()::Cvoid
end

function SSL_config(s, name)
    @ccall libwebsockets.SSL_config(s::Ptr{SSL}, name::Ptr{Cchar})::Cint
end

function SSL_CTX_config(ctx, name)
    @ccall libwebsockets.SSL_CTX_config(ctx::Ptr{SSL_CTX}, name::Ptr{Cchar})::Cint
end

function SSL_trace(write_p, version, content_type, buf, len, ssl, arg)
    @ccall libwebsockets.SSL_trace(write_p::Cint, version::Cint, content_type::Cint, buf::Ptr{Cvoid}, len::Csize_t, ssl::Ptr{SSL}, arg::Ptr{Cvoid})::Cvoid
end

function DTLSv1_listen(s, client)
    @ccall libwebsockets.DTLSv1_listen(s::Ptr{SSL}, client::Ptr{BIO_ADDR})::Cint
end

# typedef int ( * ssl_ct_validation_cb ) ( const CT_POLICY_EVAL_CTX * ctx , const STACK_OF ( SCT ) * scts , void * arg )
const ssl_ct_validation_cb = Ptr{Cvoid}

function SSL_set_ct_validation_callback(s, callback, arg)
    @ccall libwebsockets.SSL_set_ct_validation_callback(s::Ptr{SSL}, callback::ssl_ct_validation_cb, arg::Ptr{Cvoid})::Cint
end

function SSL_CTX_set_ct_validation_callback(ctx, callback, arg)
    @ccall libwebsockets.SSL_CTX_set_ct_validation_callback(ctx::Ptr{SSL_CTX}, callback::ssl_ct_validation_cb, arg::Ptr{Cvoid})::Cint
end

const __JL_Ctag_21 = UInt32
const SSL_CT_VALIDATION_PERMISSIVE = 0 % UInt32
const SSL_CT_VALIDATION_STRICT = 1 % UInt32

function SSL_enable_ct(s, validation_mode)
    @ccall libwebsockets.SSL_enable_ct(s::Ptr{SSL}, validation_mode::Cint)::Cint
end

function SSL_CTX_enable_ct(ctx, validation_mode)
    @ccall libwebsockets.SSL_CTX_enable_ct(ctx::Ptr{SSL_CTX}, validation_mode::Cint)::Cint
end

function SSL_ct_is_enabled(s)
    @ccall libwebsockets.SSL_ct_is_enabled(s::Ptr{SSL})::Cint
end

function SSL_CTX_ct_is_enabled(ctx)
    @ccall libwebsockets.SSL_CTX_ct_is_enabled(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_get0_peer_scts(s)
    @ccall libwebsockets.SSL_get0_peer_scts(s::Ptr{SSL})::Ptr{stack_st_SCT}
end

function SSL_CTX_set_default_ctlog_list_file(ctx)
    @ccall libwebsockets.SSL_CTX_set_default_ctlog_list_file(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_set_ctlog_list_file(ctx, path)
    @ccall libwebsockets.SSL_CTX_set_ctlog_list_file(ctx::Ptr{SSL_CTX}, path::Ptr{Cchar})::Cint
end

function SSL_CTX_set0_ctlog_store(ctx, logs)
    @ccall libwebsockets.SSL_CTX_set0_ctlog_store(ctx::Ptr{SSL_CTX}, logs::Ptr{CTLOG_STORE})::Cvoid
end

function SSL_CTX_get0_ctlog_store(ctx)
    @ccall libwebsockets.SSL_CTX_get0_ctlog_store(ctx::Ptr{SSL_CTX})::Ptr{CTLOG_STORE}
end

function SSL_set_security_level(s, level)
    @ccall libwebsockets.SSL_set_security_level(s::Ptr{SSL}, level::Cint)::Cvoid
end

function SSL_get_security_level(s)
    @ccall libwebsockets.SSL_get_security_level(s::Ptr{SSL})::Cint
end

function SSL_set_security_callback(s, cb)
    @ccall libwebsockets.SSL_set_security_callback(s::Ptr{SSL}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_get_security_callback(s)
    @ccall libwebsockets.SSL_get_security_callback(s::Ptr{SSL})::Ptr{Cvoid}
end

function SSL_set0_security_ex_data(s, ex)
    @ccall libwebsockets.SSL_set0_security_ex_data(s::Ptr{SSL}, ex::Ptr{Cvoid})::Cvoid
end

function SSL_get0_security_ex_data(s)
    @ccall libwebsockets.SSL_get0_security_ex_data(s::Ptr{SSL})::Ptr{Cvoid}
end

function SSL_CTX_set_security_level(ctx, level)
    @ccall libwebsockets.SSL_CTX_set_security_level(ctx::Ptr{SSL_CTX}, level::Cint)::Cvoid
end

function SSL_CTX_get_security_level(ctx)
    @ccall libwebsockets.SSL_CTX_get_security_level(ctx::Ptr{SSL_CTX})::Cint
end

function SSL_CTX_set_security_callback(ctx, cb)
    @ccall libwebsockets.SSL_CTX_set_security_callback(ctx::Ptr{SSL_CTX}, cb::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_get_security_callback(ctx)
    @ccall libwebsockets.SSL_CTX_get_security_callback(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_CTX_set0_security_ex_data(ctx, ex)
    @ccall libwebsockets.SSL_CTX_set0_security_ex_data(ctx::Ptr{SSL_CTX}, ex::Ptr{Cvoid})::Cvoid
end

function SSL_CTX_get0_security_ex_data(ctx)
    @ccall libwebsockets.SSL_CTX_get0_security_ex_data(ctx::Ptr{SSL_CTX})::Ptr{Cvoid}
end

function SSL_free_buffers(ssl)
    @ccall libwebsockets.SSL_free_buffers(ssl::Ptr{SSL})::Cint
end

function SSL_alloc_buffers(ssl)
    @ccall libwebsockets.SSL_alloc_buffers(ssl::Ptr{SSL})::Cint
end

const SSL_TICKET_STATUS = Cint

const SSL_TICKET_RETURN = Cint

# typedef int ( * SSL_CTX_generate_session_ticket_fn ) ( SSL * s , void * arg )
const SSL_CTX_generate_session_ticket_fn = Ptr{Cvoid}

# typedef SSL_TICKET_RETURN ( * SSL_CTX_decrypt_session_ticket_fn ) ( SSL * s , SSL_SESSION * ss , const unsigned char * keyname , size_t keyname_length , SSL_TICKET_STATUS status , void * arg )
const SSL_CTX_decrypt_session_ticket_fn = Ptr{Cvoid}

function SSL_CTX_set_session_ticket_cb(ctx, gen_cb, dec_cb, arg)
    @ccall libwebsockets.SSL_CTX_set_session_ticket_cb(ctx::Ptr{SSL_CTX}, gen_cb::SSL_CTX_generate_session_ticket_fn, dec_cb::SSL_CTX_decrypt_session_ticket_fn, arg::Ptr{Cvoid})::Cint
end

function SSL_SESSION_set1_ticket_appdata(ss, data, len)
    @ccall libwebsockets.SSL_SESSION_set1_ticket_appdata(ss::Ptr{SSL_SESSION}, data::Ptr{Cvoid}, len::Csize_t)::Cint
end

function SSL_SESSION_get0_ticket_appdata(ss, data, len)
    @ccall libwebsockets.SSL_SESSION_get0_ticket_appdata(ss::Ptr{SSL_SESSION}, data::Ptr{Ptr{Cvoid}}, len::Ptr{Csize_t})::Cint
end

# typedef unsigned int ( * DTLS_timer_cb ) ( SSL * s , unsigned int timer_us )
const DTLS_timer_cb = Ptr{Cvoid}

function DTLS_set_timer_cb(s, cb)
    @ccall libwebsockets.DTLS_set_timer_cb(s::Ptr{SSL}, cb::DTLS_timer_cb)::Cvoid
end

# typedef int ( * SSL_allow_early_data_cb_fn ) ( SSL * s , void * arg )
const SSL_allow_early_data_cb_fn = Ptr{Cvoid}

function SSL_CTX_set_allow_early_data_cb(ctx, cb, arg)
    @ccall libwebsockets.SSL_CTX_set_allow_early_data_cb(ctx::Ptr{SSL_CTX}, cb::SSL_allow_early_data_cb_fn, arg::Ptr{Cvoid})::Cvoid
end

function SSL_set_allow_early_data_cb(s, cb, arg)
    @ccall libwebsockets.SSL_set_allow_early_data_cb(s::Ptr{SSL}, cb::SSL_allow_early_data_cb_fn, arg::Ptr{Cvoid})::Cvoid
end

function OSSL_default_cipher_list()
    @ccall libwebsockets.OSSL_default_cipher_list()::Ptr{Cchar}
end

function OSSL_default_ciphersuites()
    @ccall libwebsockets.OSSL_default_ciphersuites()::Ptr{Cchar}
end

function ERR_GET_LIB(errcode)
    @ccall libwebsockets.ERR_GET_LIB(errcode::Culong)::Cint
end

function ERR_GET_RFLAGS(errcode)
    @ccall libwebsockets.ERR_GET_RFLAGS(errcode::Culong)::Cint
end

function ERR_GET_REASON(errcode)
    @ccall libwebsockets.ERR_GET_REASON(errcode::Culong)::Cint
end

function ERR_FATAL_ERROR(errcode)
    @ccall libwebsockets.ERR_FATAL_ERROR(errcode::Culong)::Cint
end

function ERR_COMMON_ERROR(errcode)
    @ccall libwebsockets.ERR_COMMON_ERROR(errcode::Culong)::Cint
end

function ERR_set_error_data(data, flags)
    @ccall libwebsockets.ERR_set_error_data(data::Ptr{Cchar}, flags::Cint)::Cvoid
end

function ERR_get_error()
    @ccall libwebsockets.ERR_get_error()::Culong
end

function ERR_get_error_all(file, line, func, data, flags)
    @ccall libwebsockets.ERR_get_error_all(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint}, func::Ptr{Ptr{Cchar}}, data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_get_error_line(file, line)
    @ccall libwebsockets.ERR_get_error_line(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint})::Culong
end

function ERR_get_error_line_data(file, line, data, flags)
    @ccall libwebsockets.ERR_get_error_line_data(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint}, data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_peek_error()
    @ccall libwebsockets.ERR_peek_error()::Culong
end

function ERR_peek_error_line(file, line)
    @ccall libwebsockets.ERR_peek_error_line(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint})::Culong
end

function ERR_peek_error_func(func)
    @ccall libwebsockets.ERR_peek_error_func(func::Ptr{Ptr{Cchar}})::Culong
end

function ERR_peek_error_data(data, flags)
    @ccall libwebsockets.ERR_peek_error_data(data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_peek_error_all(file, line, func, data, flags)
    @ccall libwebsockets.ERR_peek_error_all(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint}, func::Ptr{Ptr{Cchar}}, data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_peek_error_line_data(file, line, data, flags)
    @ccall libwebsockets.ERR_peek_error_line_data(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint}, data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_peek_last_error()
    @ccall libwebsockets.ERR_peek_last_error()::Culong
end

function ERR_peek_last_error_line(file, line)
    @ccall libwebsockets.ERR_peek_last_error_line(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint})::Culong
end

function ERR_peek_last_error_func(func)
    @ccall libwebsockets.ERR_peek_last_error_func(func::Ptr{Ptr{Cchar}})::Culong
end

function ERR_peek_last_error_data(data, flags)
    @ccall libwebsockets.ERR_peek_last_error_data(data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_peek_last_error_all(file, line, func, data, flags)
    @ccall libwebsockets.ERR_peek_last_error_all(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint}, func::Ptr{Ptr{Cchar}}, data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_peek_last_error_line_data(file, line, data, flags)
    @ccall libwebsockets.ERR_peek_last_error_line_data(file::Ptr{Ptr{Cchar}}, line::Ptr{Cint}, data::Ptr{Ptr{Cchar}}, flags::Ptr{Cint})::Culong
end

function ERR_clear_error()
    @ccall libwebsockets.ERR_clear_error()::Cvoid
end

function ERR_error_string(e, buf)
    @ccall libwebsockets.ERR_error_string(e::Culong, buf::Ptr{Cchar})::Ptr{Cchar}
end

function ERR_error_string_n(e, buf, len)
    @ccall libwebsockets.ERR_error_string_n(e::Culong, buf::Ptr{Cchar}, len::Csize_t)::Cvoid
end

function ERR_lib_error_string(e)
    @ccall libwebsockets.ERR_lib_error_string(e::Culong)::Ptr{Cchar}
end

function ERR_func_error_string(e)
    @ccall libwebsockets.ERR_func_error_string(e::Culong)::Ptr{Cchar}
end

function ERR_reason_error_string(e)
    @ccall libwebsockets.ERR_reason_error_string(e::Culong)::Ptr{Cchar}
end

function ERR_print_errors_cb(cb, u)
    @ccall libwebsockets.ERR_print_errors_cb(cb::Ptr{Cvoid}, u::Ptr{Cvoid})::Cvoid
end

function ERR_print_errors_fp(fp)
    @ccall libwebsockets.ERR_print_errors_fp(fp::Ptr{Libc.FILE})::Cvoid
end

function ERR_print_errors(bp)
    @ccall libwebsockets.ERR_print_errors(bp::Ptr{BIO})::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function ERR_add_error_data(num, va_list...)
        :(@ccall(libwebsockets.ERR_add_error_data(num::Cint; $(to_c_type_pairs(va_list)...))::Cvoid))
    end

function ERR_add_error_txt(sepr, txt)
    @ccall libwebsockets.ERR_add_error_txt(sepr::Ptr{Cchar}, txt::Ptr{Cchar})::Cvoid
end

function ERR_add_error_mem_bio(sep, bio)
    @ccall libwebsockets.ERR_add_error_mem_bio(sep::Ptr{Cchar}, bio::Ptr{BIO})::Cvoid
end

function ERR_load_strings(lib, str)
    @ccall libwebsockets.ERR_load_strings(lib::Cint, str::Ptr{ERR_STRING_DATA})::Cint
end

function ERR_load_strings_const(str)
    @ccall libwebsockets.ERR_load_strings_const(str::Ptr{ERR_STRING_DATA})::Cint
end

function ERR_unload_strings(lib, str)
    @ccall libwebsockets.ERR_unload_strings(lib::Cint, str::Ptr{ERR_STRING_DATA})::Cint
end

function ERR_remove_thread_state(arg1)
    @ccall libwebsockets.ERR_remove_thread_state(arg1::Ptr{Cvoid})::Cvoid
end

function ERR_remove_state(pid)
    @ccall libwebsockets.ERR_remove_state(pid::Culong)::Cvoid
end

function ERR_get_state()
    @ccall libwebsockets.ERR_get_state()::Ptr{ERR_STATE}
end

function ERR_get_next_error_library()
    @ccall libwebsockets.ERR_get_next_error_library()::Cint
end

function ERR_set_mark()
    @ccall libwebsockets.ERR_set_mark()::Cint
end

function ERR_pop_to_mark()
    @ccall libwebsockets.ERR_pop_to_mark()::Cint
end

function ERR_clear_last_mark()
    @ccall libwebsockets.ERR_clear_last_mark()::Cint
end

# typedef void ( * lws_log_emit_t ) ( int level , const char * line )
const lws_log_emit_t = Ptr{Cvoid}

# typedef void ( * lws_log_emit_cx_t ) ( struct lws_log_cx * cx , int level , const char * line , size_t len )
const lws_log_emit_cx_t = Ptr{Cvoid}

function lwsl_timestamp(level, p, len)
    @ccall libwebsockets.lwsl_timestamp(level::Cint, p::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_log_emit_cx_file(cx, level, line, len)
    @ccall libwebsockets.lws_log_emit_cx_file(cx::Ptr{lws_log_cx}, level::Cint, line::Ptr{Cchar}, len::Csize_t)::Cvoid
end

function lws_log_use_cx_file(cx, _new)
    @ccall libwebsockets.lws_log_use_cx_file(cx::Ptr{lws_log_cx}, _new::Cint)::Cvoid
end

function lwsl_hexdump(buf, len)
    @ccall libwebsockets.lwsl_hexdump(buf::Ptr{Cvoid}, len::Csize_t)::Cvoid
end

function lws_is_be()
    @ccall libwebsockets.lws_is_be()::Cint
end

function lws_set_log_level(level, log_emit_function)
    @ccall libwebsockets.lws_set_log_level(level::Cint, log_emit_function::lws_log_emit_t)::Cvoid
end

function lwsl_emit_syslog(level, line)
    @ccall libwebsockets.lwsl_emit_syslog(level::Cint, line::Ptr{Cchar})::Cvoid
end

function lwsl_emit_stderr(level, line)
    @ccall libwebsockets.lwsl_emit_stderr(level::Cint, line::Ptr{Cchar})::Cvoid
end

function lwsl_emit_stderr_notimestamp(level, line)
    @ccall libwebsockets.lwsl_emit_stderr_notimestamp(level::Cint, line::Ptr{Cchar})::Cvoid
end

function lwsl_visible(level)
    @ccall libwebsockets.lwsl_visible(level::Cint)::Cint
end

function lws_wsi_tag(wsi)
    @ccall libwebsockets.lws_wsi_tag(wsi::Ptr{lws})::Ptr{Cchar}
end

function lwsl_refcount_cx(cx, _new)
    @ccall libwebsockets.lwsl_refcount_cx(cx::Ptr{lws_log_cx_t}, _new::Cint)::Cvoid
end

const lws_sockfd_type = Cint

const lws_filefd_type = Cint

const lws_fileofs_t = Clonglong

const lws_fop_flags_t = UInt32

mutable struct lws_pollargs
    fd::lws_sockfd_type
    events::Cint
    prev_events::Cint
    lws_pollargs() = new()
end

function lws_dll2_is_detached(d)
    @ccall libwebsockets.lws_dll2_is_detached(d::Ptr{lws_dll2})::Cint
end

function lws_dll2_owner(d)
    @ccall libwebsockets.lws_dll2_owner(d::Ptr{lws_dll2})::Ptr{lws_dll2_owner}
end

function lws_dll2_get_head(owner)
    @ccall libwebsockets.lws_dll2_get_head(owner::Ptr{lws_dll2_owner})::Ptr{lws_dll2}
end

function lws_dll2_get_tail(owner)
    @ccall libwebsockets.lws_dll2_get_tail(owner::Ptr{lws_dll2_owner})::Ptr{lws_dll2}
end

function lws_dll2_add_head(d, owner)
    @ccall libwebsockets.lws_dll2_add_head(d::Ptr{lws_dll2}, owner::Ptr{lws_dll2_owner})::Cvoid
end

function lws_dll2_add_tail(d, owner)
    @ccall libwebsockets.lws_dll2_add_tail(d::Ptr{lws_dll2}, owner::Ptr{lws_dll2_owner})::Cvoid
end

function lws_dll2_remove(d)
    @ccall libwebsockets.lws_dll2_remove(d::Ptr{lws_dll2})::Cvoid
end

# typedef int ( * lws_dll2_foreach_cb_t ) ( struct lws_dll2 * d , void * user )
const lws_dll2_foreach_cb_t = Ptr{Cvoid}

function lws_dll2_foreach_safe(owner, user, cb)
    @ccall libwebsockets.lws_dll2_foreach_safe(owner::Ptr{lws_dll2_owner}, user::Ptr{Cvoid}, cb::lws_dll2_foreach_cb_t)::Cint
end

function lws_dll2_clear(d)
    @ccall libwebsockets.lws_dll2_clear(d::Ptr{lws_dll2})::Cvoid
end

function lws_dll2_owner_clear(d)
    @ccall libwebsockets.lws_dll2_owner_clear(d::Ptr{lws_dll2_owner})::Cvoid
end

function lws_dll2_add_before(d, after)
    @ccall libwebsockets.lws_dll2_add_before(d::Ptr{lws_dll2}, after::Ptr{lws_dll2})::Cvoid
end

function lws_dll2_add_sorted(d, own, compare)
    @ccall libwebsockets.lws_dll2_add_sorted(d::Ptr{lws_dll2_t}, own::Ptr{lws_dll2_owner_t}, compare::Ptr{Cvoid})::Cvoid
end

function lws_dll2_add_sorted_priv(d, own, priv, compare3)
    @ccall libwebsockets.lws_dll2_add_sorted_priv(d::Ptr{lws_dll2_t}, own::Ptr{lws_dll2_owner_t}, priv::Ptr{Cvoid}, compare3::Ptr{Cvoid})::Cvoid
end

function lws_dll2_describe(owner, desc)
    @ccall libwebsockets.lws_dll2_describe(owner::Ptr{lws_dll2_owner}, desc::Ptr{Cchar})::Cvoid
end

const lws_map_hash_t = UInt32

# typedef lws_map_hash_t ( * lws_map_hash_from_key_t ) ( const lws_map_key_t key , size_t kl )
const lws_map_hash_from_key_t = Ptr{Cvoid}

# typedef int ( * lws_map_compare_key_t ) ( const lws_map_key_t key1 , size_t kl1 , const lws_map_value_t key2 , size_t kl2 )
const lws_map_compare_key_t = Ptr{Cvoid}

# typedef void * ( * lws_map_alloc_t ) ( struct lws_map * mo , size_t x )
const lws_map_alloc_t = Ptr{Cvoid}

# typedef void ( * lws_map_free_t ) ( void * )
const lws_map_free_t = Ptr{Cvoid}

mutable struct lws_map_info
    _hash::lws_map_hash_from_key_t
    _compare::lws_map_compare_key_t
    _alloc::lws_map_alloc_t
    _free::lws_map_free_t
    opaque::Ptr{Cvoid}
    aux::Ptr{Cvoid}
    modulo::Csize_t
    lws_map_info() = new()
end

const lws_map_info_t = lws_map_info

function lws_map_item_key(_item)
    @ccall libwebsockets.lws_map_item_key(_item::Ptr{lws_map_item})::Ptr{Cvoid}
end

function lws_map_item_value(_item)
    @ccall libwebsockets.lws_map_item_value(_item::Ptr{lws_map_item})::Ptr{Cvoid}
end

function lws_map_item_key_len(_item)
    @ccall libwebsockets.lws_map_item_key_len(_item::Ptr{lws_map_item})::Csize_t
end

function lws_map_item_value_len(_item)
    @ccall libwebsockets.lws_map_item_value_len(_item::Ptr{lws_map_item})::Csize_t
end

function lws_map_create(info)
    @ccall libwebsockets.lws_map_create(info::Ptr{lws_map_info_t})::Ptr{lws_map_t}
end

function lws_map_alloc_lwsac(map, x)
    @ccall libwebsockets.lws_map_alloc_lwsac(map::Ptr{lws_map}, x::Csize_t)::Ptr{Cvoid}
end

function lws_map_free_lwsac(v)
    @ccall libwebsockets.lws_map_free_lwsac(v::Ptr{Cvoid})::Cvoid
end

function lws_map_destroy(pmap)
    @ccall libwebsockets.lws_map_destroy(pmap::Ptr{Ptr{lws_map_t}})::Cvoid
end

function lws_map_item_destroy(item)
    @ccall libwebsockets.lws_map_item_destroy(item::Ptr{lws_map_item})::Cvoid
end

struct lws_xos
    s::NTuple{4, UInt64}
end

const lws_xos_t = lws_xos

function lws_xos_init(xos, seed)
    @ccall libwebsockets.lws_xos_init(xos::Ptr{lws_xos}, seed::UInt64)::Cvoid
end

function lws_xos(xos)
    @ccall libwebsockets.lws_xos(xos::Ptr{lws_xos})::UInt64
end

function lws_xos_percent(xos, percent)
    @ccall libwebsockets.lws_xos_percent(xos::Ptr{lws_xos}, percent::Cint)::Cint
end

function lws_set_timeout_us(wsi, reason, us)
    @ccall libwebsockets.lws_set_timeout_us(wsi::Ptr{lws}, reason::pending_timeout, us::lws_usec_t)::Cvoid
end

function lws_set_timer_usecs(wsi, usecs)
    @ccall libwebsockets.lws_set_timer_usecs(wsi::Ptr{lws}, usecs::lws_usec_t)::Cvoid
end

# typedef void ( * sul_cb_t ) ( struct lws_sorted_usec_list * sul )
const sul_cb_t = Ptr{Cvoid}

struct lws_sorted_usec_list
    list::lws_dll2
    us::lws_usec_t
    cb::sul_cb_t
    latency_us::UInt32
end

const lws_sorted_usec_list_t = lws_sorted_usec_list

function lws_sul2_schedule(context, tsi, flags, sul)
    @ccall libwebsockets.lws_sul2_schedule(context::Ptr{lws_context}, tsi::Cint, flags::Cint, sul::Ptr{lws_sorted_usec_list_t})::Cvoid
end

function lws_sul_cancel(sul)
    @ccall libwebsockets.lws_sul_cancel(sul::Ptr{lws_sorted_usec_list_t})::Cvoid
end

function lws_sul_earliest_wakeable_event(ctx, pearliest)
    @ccall libwebsockets.lws_sul_earliest_wakeable_event(ctx::Ptr{lws_context}, pearliest::Ptr{lws_usec_t})::Cint
end

function lws_sul_schedule(ctx, tsi, sul, _cb, _us)
    @ccall libwebsockets.lws_sul_schedule(ctx::Ptr{lws_context}, tsi::Cint, sul::Ptr{lws_sorted_usec_list_t}, _cb::sul_cb_t, _us::lws_usec_t)::Cvoid
end

function lws_sul_schedule_wakesuspend(ctx, tsi, sul, _cb, _us)
    @ccall libwebsockets.lws_sul_schedule_wakesuspend(ctx::Ptr{lws_context}, tsi::Cint, sul::Ptr{lws_sorted_usec_list_t}, _cb::sul_cb_t, _us::lws_usec_t)::Cvoid
end

function lws_validity_confirmed(wsi)
    @ccall libwebsockets.lws_validity_confirmed(wsi::Ptr{lws})::Cvoid
end

function __lws_sul_insert(own, sul)
    @ccall libwebsockets.__lws_sul_insert(own::Ptr{lws_dll2_owner_t}, sul::Ptr{lws_sorted_usec_list_t})::Cint
end

function __lws_sul_service_ripe(own, own_len, usnow)
    @ccall libwebsockets.__lws_sul_service_ripe(own::Ptr{lws_dll2_owner_t}, own_len::Cint, usnow::lws_usec_t)::lws_usec_t
end

mutable struct lws_cache_ttl_lru end

function lws_cache_write_through(cache, specific_key, source, size, expiry, ppay)
    @ccall libwebsockets.lws_cache_write_through(cache::Ptr{lws_cache_ttl_lru}, specific_key::Ptr{Cchar}, source::Ptr{UInt8}, size::Csize_t, expiry::lws_usec_t, ppay::Ptr{Ptr{Cvoid}})::Cint
end

mutable struct lws_cache_match
    list::lws_dll2_t
    expiry::lws_usec_t
    payload_size::Csize_t
    tag_size::Csize_t
    lws_cache_match() = new()
end

const lws_cache_match_t = lws_cache_match

function lws_cache_lookup(cache, wildcard_key, pdata, psize)
    @ccall libwebsockets.lws_cache_lookup(cache::Ptr{lws_cache_ttl_lru}, wildcard_key::Ptr{Cchar}, pdata::Ptr{Ptr{Cvoid}}, psize::Ptr{Csize_t})::Cint
end

function lws_cache_item_get(cache, specific_key, pdata, psize)
    @ccall libwebsockets.lws_cache_item_get(cache::Ptr{lws_cache_ttl_lru}, specific_key::Ptr{Cchar}, pdata::Ptr{Ptr{Cvoid}}, psize::Ptr{Csize_t})::Cint
end

function lws_cache_item_remove(cache, wildcard_key)
    @ccall libwebsockets.lws_cache_item_remove(cache::Ptr{lws_cache_ttl_lru}, wildcard_key::Ptr{Cchar})::Cint
end

function lws_cache_footprint(cache)
    @ccall libwebsockets.lws_cache_footprint(cache::Ptr{lws_cache_ttl_lru})::UInt64
end

function lws_cache_debug_dump(cache)
    @ccall libwebsockets.lws_cache_debug_dump(cache::Ptr{lws_cache_ttl_lru})::Cvoid
end

mutable struct lws_cache_results
    ptr::Ptr{UInt8}
    size::Csize_t
    payload_len::Csize_t
    tag_len::Csize_t
    tag::Ptr{UInt8}
    lws_cache_results() = new()
end

const lws_cache_results_t = lws_cache_results

function lws_cache_results_walk(walk_ctx)
    @ccall libwebsockets.lws_cache_results_walk(walk_ctx::Ptr{lws_cache_results_t})::Cint
end

# typedef void ( * lws_cache_item_destroy_cb ) ( void * item , size_t size )
const lws_cache_item_destroy_cb = Ptr{Cvoid}

mutable struct lws_cache_ops
    create::Ptr{Cvoid}
    destroy::Ptr{Cvoid}
    expunge::Ptr{Cvoid}
    write::Ptr{Cvoid}
    tag_match::Ptr{Cvoid}
    lookup::Ptr{Cvoid}
    invalidate::Ptr{Cvoid}
    get::Ptr{Cvoid}
    debug_dump::Ptr{Cvoid}
    lws_cache_ops() = new()
end

struct __JL_Ctag_78
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_78}, f::Symbol)
    f === :nscookiejar && return Ptr{__JL_Ctag_79}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_78, f::Symbol)
    r = Ref{__JL_Ctag_78}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_78}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_78}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_cache_creation_info
    data::NTuple{80, UInt8}
end

function Base.getproperty(x::Ptr{lws_cache_creation_info}, f::Symbol)
    f === :cx && return Ptr{Ptr{lws_context}}(x + 0)
    f === :name && return Ptr{Ptr{Cchar}}(x + 8)
    f === :cb && return Ptr{lws_cache_item_destroy_cb}(x + 16)
    f === :parent && return Ptr{Ptr{lws_cache_ttl_lru}}(x + 24)
    f === :ops && return Ptr{Ptr{lws_cache_ops}}(x + 32)
    f === :u && return Ptr{__JL_Ctag_78}(x + 40)
    f === :max_footprint && return Ptr{Csize_t}(x + 48)
    f === :max_items && return Ptr{Csize_t}(x + 56)
    f === :max_payload && return Ptr{Csize_t}(x + 64)
    f === :tsi && return Ptr{Cint}(x + 72)
    return getfield(x, f)
end

function Base.getproperty(x::lws_cache_creation_info, f::Symbol)
    r = Ref{lws_cache_creation_info}(x)
    ptr = Base.unsafe_convert(Ptr{lws_cache_creation_info}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_cache_creation_info}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function lws_cache_create(info)
    @ccall libwebsockets.lws_cache_create(info::Ptr{lws_cache_creation_info})::Ptr{lws_cache_ttl_lru}
end

function lws_cache_destroy(cache)
    @ccall libwebsockets.lws_cache_destroy(cache::Ptr{Ptr{lws_cache_ttl_lru}})::Cvoid
end

function lws_cache_expunge(cache)
    @ccall libwebsockets.lws_cache_expunge(cache::Ptr{lws_cache_ttl_lru})::Cint
end

const lws_smd_class_t = UInt32

mutable struct lws_smd_msg end

mutable struct lws_smd_peer end

const __JL_Ctag_22 = UInt32
const LWSSMDCL_INTERACTION = 1 % UInt32
const LWSSMDCL_SYSTEM_STATE = 2 % UInt32
const LWSSMDCL_NETWORK = 4 % UInt32
const LWSSMDCL_METRICS = 8 % UInt32
const LWSSMDCL_USER_BASE_BITNUM = 24 % UInt32

function lws_smd_msg_alloc(ctx, _class, len)
    @ccall libwebsockets.lws_smd_msg_alloc(ctx::Ptr{lws_context}, _class::lws_smd_class_t, len::Csize_t)::Ptr{Cvoid}
end

function lws_smd_msg_free(payload)
    @ccall libwebsockets.lws_smd_msg_free(payload::Ptr{Ptr{Cvoid}})::Cvoid
end

function lws_smd_msg_send(ctx, payload)
    @ccall libwebsockets.lws_smd_msg_send(ctx::Ptr{lws_context}, payload::Ptr{Cvoid})::Cint
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_smd_msg_printf(ctx, _class, format, va_list...)
        :(@ccall(libwebsockets.lws_smd_msg_printf(ctx::Ptr{lws_context}, _class::lws_smd_class_t, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

mutable struct lws_ss_handle end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_smd_ss_msg_printf(tag, buf, len, _class, format, va_list...)
        :(@ccall(libwebsockets.lws_smd_ss_msg_printf(tag::Ptr{Cchar}, buf::Ptr{UInt8}, len::Ptr{Csize_t}, _class::lws_smd_class_t, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

function lws_smd_ss_rx_forward(ss_user, buf, len)
    @ccall libwebsockets.lws_smd_ss_rx_forward(ss_user::Ptr{Cvoid}, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_smd_sspc_rx_forward(ss_user, buf, len)
    @ccall libwebsockets.lws_smd_sspc_rx_forward(ss_user::Ptr{Cvoid}, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

# typedef int ( * lws_smd_notification_cb_t ) ( void * opaque , lws_smd_class_t _class , lws_usec_t timestamp , void * buf , size_t len )
const lws_smd_notification_cb_t = Ptr{Cvoid}

function lws_smd_register(ctx, opaque, flags, _class_filter, cb)
    @ccall libwebsockets.lws_smd_register(ctx::Ptr{lws_context}, opaque::Ptr{Cvoid}, flags::Cint, _class_filter::lws_smd_class_t, cb::lws_smd_notification_cb_t)::Ptr{lws_smd_peer}
end

function lws_smd_unregister(pr)
    @ccall libwebsockets.lws_smd_unregister(pr::Ptr{lws_smd_peer})::Cvoid
end

# typedef int ( * lws_state_notify_t ) ( struct lws_state_manager * mgr , struct lws_state_notify_link * link , int current , int target )
const lws_state_notify_t = Ptr{Cvoid}

struct lws_state_notify_link
    list::lws_dll2_t
    notify_cb::lws_state_notify_t
    name::Ptr{Cchar}
end

const lws_state_notify_link_t = lws_state_notify_link

mutable struct lws_state_manager
    notify_list::lws_dll2_owner_t
    context::Ptr{lws_context}
    parent::Ptr{Cvoid}
    smd_class::lws_smd_class_t
    state_names::Ptr{Ptr{Cchar}}
    name::Ptr{Cchar}
    state::Cint
    lws_state_manager() = new()
end

const lws_state_manager_t = lws_state_manager

function lws_state_reg_notifier(mgr, nl)
    @ccall libwebsockets.lws_state_reg_notifier(mgr::Ptr{lws_state_manager_t}, nl::Ptr{lws_state_notify_link_t})::Cvoid
end

function lws_state_reg_deregister(nl)
    @ccall libwebsockets.lws_state_reg_deregister(nl::Ptr{lws_state_notify_link_t})::Cvoid
end

function lws_state_reg_notifier_list(mgr, nl)
    @ccall libwebsockets.lws_state_reg_notifier_list(mgr::Ptr{lws_state_manager_t}, nl::Ptr{Ptr{lws_state_notify_link_t}})::Cvoid
end

function lws_state_transition_steps(mgr, target)
    @ccall libwebsockets.lws_state_transition_steps(mgr::Ptr{lws_state_manager_t}, target::Cint)::Cint
end

function lws_state_transition(mgr, target)
    @ccall libwebsockets.lws_state_transition(mgr::Ptr{lws_state_manager_t}, target::Cint)::Cint
end

struct lws_retry_bo
    retry_ms_table::Ptr{UInt32}
    retry_ms_table_count::UInt16
    conceal_count::UInt16
    secs_since_valid_ping::UInt16
    secs_since_valid_hangup::UInt16
    jitter_percent::UInt8
end

const lws_retry_bo_t = lws_retry_bo

function lws_retry_get_delay_ms(context, retry, ctry, conceal)
    @ccall libwebsockets.lws_retry_get_delay_ms(context::Ptr{lws_context}, retry::Ptr{lws_retry_bo_t}, ctry::Ptr{UInt16}, conceal::Ptr{Cchar})::Cuint
end

function lws_retry_sul_schedule(context, tid, sul, retry, cb, ctry)
    @ccall libwebsockets.lws_retry_sul_schedule(context::Ptr{lws_context}, tid::Cint, sul::Ptr{lws_sorted_usec_list_t}, retry::Ptr{lws_retry_bo_t}, cb::sul_cb_t, ctry::Ptr{UInt16})::Cint
end

function lws_retry_sul_schedule_retry_wsi(wsi, sul, cb, ctry)
    @ccall libwebsockets.lws_retry_sul_schedule_retry_wsi(wsi::Ptr{lws}, sul::Ptr{lws_sorted_usec_list_t}, cb::sul_cb_t, ctry::Ptr{UInt16})::Cint
end

function lws_adopt_socket(context, accept_fd)
    @ccall libwebsockets.lws_adopt_socket(context::Ptr{lws_context}, accept_fd::lws_sockfd_type)::Ptr{lws}
end

function lws_adopt_socket_vhost(vh, accept_fd)
    @ccall libwebsockets.lws_adopt_socket_vhost(vh::Ptr{lws_vhost}, accept_fd::lws_sockfd_type)::Ptr{lws}
end

const lws_adoption_type = UInt32
const LWS_ADOPT_RAW_FILE_DESC = 0 % UInt32
const LWS_ADOPT_HTTP = 1 % UInt32
const LWS_ADOPT_SOCKET = 2 % UInt32
const LWS_ADOPT_ALLOW_SSL = 4 % UInt32
const LWS_ADOPT_FLAG_UDP = 16 % UInt32
const LWS_ADOPT_FLAG_RAW_PROXY = 32 % UInt32
const LWS_ADOPT_RAW_SOCKET_UDP = 18 % UInt32

struct lws_sock_file_fd_type
    data::NTuple{4, UInt8}
end

function Base.getproperty(x::Ptr{lws_sock_file_fd_type}, f::Symbol)
    f === :sockfd && return Ptr{lws_sockfd_type}(x + 0)
    f === :filefd && return Ptr{lws_filefd_type}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lws_sock_file_fd_type, f::Symbol)
    r = Ref{lws_sock_file_fd_type}(x)
    ptr = Base.unsafe_convert(Ptr{lws_sock_file_fd_type}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_sock_file_fd_type}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_sockaddr46
    data::NTuple{16, UInt8}
end

function Base.getproperty(x::Ptr{lws_sockaddr46}, f::Symbol)
    f === :sa4 && return Ptr{sockaddr_in}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lws_sockaddr46, f::Symbol)
    r = Ref{lws_sockaddr46}(x)
    ptr = Base.unsafe_convert(Ptr{lws_sockaddr46}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_sockaddr46}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_udp
    data::NTuple{36, UInt8}
end

function Base.getproperty(x::Ptr{lws_udp}, f::Symbol)
    f === :sa46 && return Ptr{lws_sockaddr46}(x + 0)
    f === :sa46_pending && return Ptr{lws_sockaddr46}(x + 16)
    f === :connected && return (Ptr{UInt8}(x + 32), 0, 1)
    return getfield(x, f)
end

function Base.getproperty(x::lws_udp, f::Symbol)
    r = Ref{lws_udp}(x)
    ptr = Base.unsafe_convert(Ptr{lws_udp}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_udp}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

function lws_adopt_descriptor_vhost(vh, type, fd, vh_prot_name, parent)
    @ccall libwebsockets.lws_adopt_descriptor_vhost(vh::Ptr{lws_vhost}, type::lws_adoption_type, fd::lws_sock_file_fd_type, vh_prot_name::Ptr{Cchar}, parent::Ptr{lws})::Ptr{lws}
end

mutable struct lws_adopt_desc
    vh::Ptr{lws_vhost}
    type::lws_adoption_type
    fd::lws_sock_file_fd_type
    vh_prot_name::Ptr{Cchar}
    parent::Ptr{lws}
    opaque::Ptr{Cvoid}
    fi_wsi_name::Ptr{Cchar}
    lws_adopt_desc() = new()
end

const lws_adopt_desc_t = lws_adopt_desc

function lws_adopt_descriptor_vhost_via_info(info)
    @ccall libwebsockets.lws_adopt_descriptor_vhost_via_info(info::Ptr{lws_adopt_desc_t})::Ptr{lws}
end

function lws_adopt_socket_readbuf(context, accept_fd, readbuf, len)
    @ccall libwebsockets.lws_adopt_socket_readbuf(context::Ptr{lws_context}, accept_fd::lws_sockfd_type, readbuf::Ptr{Cchar}, len::Csize_t)::Ptr{lws}
end

function lws_adopt_socket_vhost_readbuf(vhost, accept_fd, readbuf, len)
    @ccall libwebsockets.lws_adopt_socket_vhost_readbuf(vhost::Ptr{lws_vhost}, accept_fd::lws_sockfd_type, readbuf::Ptr{Cchar}, len::Csize_t)::Ptr{lws}
end

function lws_create_adopt_udp(vhost, ads, port, flags, protocol_name, ifname, parent_wsi, opaque, retry_policy, fi_wsi_name)
    @ccall libwebsockets.lws_create_adopt_udp(vhost::Ptr{lws_vhost}, ads::Ptr{Cchar}, port::Cint, flags::Cint, protocol_name::Ptr{Cchar}, ifname::Ptr{Cchar}, parent_wsi::Ptr{lws}, opaque::Ptr{Cvoid}, retry_policy::Ptr{lws_retry_bo_t}, fi_wsi_name::Ptr{Cchar})::Ptr{lws}
end

const lws_route_uidx_t = UInt16

mutable struct lws_dns_score
    precedence::UInt8
    label::UInt8
    lws_dns_score() = new()
end

const lws_dns_score_t = lws_dns_score

struct lws_route
    data::NTuple{104, UInt8}
end

function Base.getproperty(x::Ptr{lws_route}, f::Symbol)
    f === :list && return Ptr{lws_dll2_t}(x + 0)
    f === :src && return Ptr{lws_sockaddr46}(x + 24)
    f === :dest && return Ptr{lws_sockaddr46}(x + 40)
    f === :gateway && return Ptr{lws_sockaddr46}(x + 56)
    f === :source && return Ptr{Ptr{lws_route}}(x + 72)
    f === :score && return Ptr{lws_dns_score_t}(x + 80)
    f === :if_idx && return Ptr{Cint}(x + 84)
    f === :priority && return Ptr{Cint}(x + 88)
    f === :ifa_flags && return Ptr{Cint}(x + 92)
    f === :uidx && return Ptr{lws_route_uidx_t}(x + 96)
    f === :proto && return Ptr{UInt8}(x + 98)
    f === :dest_len && return Ptr{UInt8}(x + 99)
    f === :src_len && return Ptr{UInt8}(x + 100)
    f === :scope && return Ptr{UInt8}(x + 101)
    f === :af && return Ptr{UInt8}(x + 102)
    f === :source_ads && return (Ptr{UInt8}(x + 100), 24, 1)
    return getfield(x, f)
end

function Base.getproperty(x::lws_route, f::Symbol)
    r = Ref{lws_route}(x)
    ptr = Base.unsafe_convert(Ptr{lws_route}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_route}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

const lws_route_t = lws_route

const lws_dns_sort_t = lws_route_t

function lws_canonical_hostname(context)
    @ccall libwebsockets.lws_canonical_hostname(context::Ptr{lws_context})::Ptr{Cchar}
end

function lws_get_peer_addresses(wsi, fd, name, name_len, rip, rip_len)
    @ccall libwebsockets.lws_get_peer_addresses(wsi::Ptr{lws}, fd::lws_sockfd_type, name::Ptr{Cchar}, name_len::Cint, rip::Ptr{Cchar}, rip_len::Cint)::Cvoid
end

function lws_get_peer_simple(wsi, name, namelen)
    @ccall libwebsockets.lws_get_peer_simple(wsi::Ptr{lws}, name::Ptr{Cchar}, namelen::Csize_t)::Ptr{Cchar}
end

function lws_get_peer_simple_fd(fd, name, namelen)
    @ccall libwebsockets.lws_get_peer_simple_fd(fd::lws_sockfd_type, name::Ptr{Cchar}, namelen::Csize_t)::Ptr{Cchar}
end

function lws_interface_to_sa(ipv6, ifname, addr, addrlen)
    @ccall libwebsockets.lws_interface_to_sa(ipv6::Cint, ifname::Ptr{Cchar}, addr::Ptr{sockaddr_in}, addrlen::Csize_t)::Cint
end

function lws_sa46_compare_ads(sa46a, sa46b)
    @ccall libwebsockets.lws_sa46_compare_ads(sa46a::Ptr{lws_sockaddr46}, sa46b::Ptr{lws_sockaddr46})::Cint
end

function lws_sa46_on_net(sa46a, sa46_net, net_len)
    @ccall libwebsockets.lws_sa46_on_net(sa46a::Ptr{lws_sockaddr46}, sa46_net::Ptr{lws_sockaddr46}, net_len::Cint)::Cint
end

function lws_parse_numeric_address(ads, result, max_len)
    @ccall libwebsockets.lws_parse_numeric_address(ads::Ptr{Cchar}, result::Ptr{UInt8}, max_len::Csize_t)::Cint
end

function lws_sa46_parse_numeric_address(ads, sa46)
    @ccall libwebsockets.lws_sa46_parse_numeric_address(ads::Ptr{Cchar}, sa46::Ptr{lws_sockaddr46})::Cint
end

function lws_write_numeric_address(ads, size, buf, len)
    @ccall libwebsockets.lws_write_numeric_address(ads::Ptr{UInt8}, size::Cint, buf::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_sa46_write_numeric_address(sa46, buf, len)
    @ccall libwebsockets.lws_sa46_write_numeric_address(sa46::Ptr{lws_sockaddr46}, buf::Ptr{Cchar}, len::Csize_t)::Cint
end

const u_mt_t = UInt64

const __JL_Ctag_26 = UInt32
const LWSMTFL_REPORT_OUTLIERS = 1 % UInt32
const LWSMTFL_REPORT_OOB = 2 % UInt32
const LWSMTFL_REPORT_INACTIVITY_AT_PERIODIC = 4 % UInt32
const LWSMTFL_REPORT_MEAN = 8 % UInt32
const LWSMTFL_REPORT_ONLY_GO = 16 % UInt32
const LWSMTFL_REPORT_DUTY_WALLCLOCK_US = 32 % UInt32
const LWSMTFL_REPORT_HIST = 64 % UInt32

mutable struct lws_metrics_tag
    list::lws_dll2_t
    name::Ptr{Cchar}
    lws_metrics_tag() = new()
end

const lws_metrics_tag_t = lws_metrics_tag

function lws_metrics_tag_add(owner, name, val)
    @ccall libwebsockets.lws_metrics_tag_add(owner::Ptr{lws_dll2_owner_t}, name::Ptr{Cchar}, val::Ptr{Cchar})::Cint
end

function lws_metrics_tags_destroy(owner)
    @ccall libwebsockets.lws_metrics_tags_destroy(owner::Ptr{lws_dll2_owner_t})::Cvoid
end

function lws_metrics_tags_serialize(owner, buf, len)
    @ccall libwebsockets.lws_metrics_tags_serialize(owner::Ptr{lws_dll2_owner_t}, buf::Ptr{Cchar}, len::Csize_t)::Csize_t
end

function lws_metrics_tag_get(owner, name)
    @ccall libwebsockets.lws_metrics_tag_get(owner::Ptr{lws_dll2_owner_t}, name::Ptr{Cchar})::Ptr{Cchar}
end

struct lws_metric_bucket
    next::Ptr{lws_metric_bucket}
    count::UInt64
end

const lws_metric_bucket_t = lws_metric_bucket

struct __JL_Ctag_86
    data::NTuple{40, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_86}, f::Symbol)
    f === :agg && return Ptr{__JL_Ctag_87}(x + 0)
    f === :hist && return Ptr{__JL_Ctag_88}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_86, f::Symbol)
    r = Ref{__JL_Ctag_86}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_86}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_86}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_metric_pub
    data::NTuple{88, UInt8}
end

function Base.getproperty(x::Ptr{lws_metric_pub}, f::Symbol)
    f === :name && return Ptr{Ptr{Cchar}}(x + 0)
    f === :backend_opaque && return Ptr{Ptr{Cvoid}}(x + 8)
    f === :us_first && return Ptr{lws_usec_t}(x + 16)
    f === :us_last && return Ptr{lws_usec_t}(x + 24)
    f === :us_dumped && return Ptr{lws_usec_t}(x + 32)
    f === :u && return Ptr{__JL_Ctag_86}(x + 40)
    f === :flags && return Ptr{UInt8}(x + 80)
    return getfield(x, f)
end

function Base.getproperty(x::lws_metric_pub, f::Symbol)
    r = Ref{lws_metric_pub}(x)
    ptr = Base.unsafe_convert(Ptr{lws_metric_pub}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_metric_pub}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const lws_metric_pub_t = lws_metric_pub

function lws_metrics_hist_bump_priv_tagged(mt, tow, tow2)
    @ccall libwebsockets.lws_metrics_hist_bump_priv_tagged(mt::Ptr{lws_metric_pub_t}, tow::Ptr{lws_dll2_owner_t}, tow2::Ptr{lws_dll2_owner_t})::Cvoid
end

mutable struct lws_metric end

mutable struct lws_metric_caliper
    mtags_owner::lws_dll2_owner
    mt::Ptr{lws_metric}
    us_start::lws_usec_t
    lws_metric_caliper() = new()
end

const lws_metric_caliper_t = lws_metric_caliper

function lws_metrics_format(pub, sub, buf, len)
    @ccall libwebsockets.lws_metrics_format(pub::Ptr{lws_metric_pub_t}, sub::Ptr{Ptr{lws_metric_bucket_t}}, buf::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_metrics_hist_bump_(pub, name)
    @ccall libwebsockets.lws_metrics_hist_bump_(pub::Ptr{lws_metric_pub_t}, name::Ptr{Cchar})::Cint
end

function lws_metrics_foreach(ctx, user, cb)
    @ccall libwebsockets.lws_metrics_foreach(ctx::Ptr{lws_context}, user::Ptr{Cvoid}, cb::Ptr{Cvoid})::Cint
end

function lws_metrics_hist_bump_describe_wsi(wsi, pub, name)
    @ccall libwebsockets.lws_metrics_hist_bump_describe_wsi(wsi::Ptr{lws}, pub::Ptr{lws_metric_pub_t}, name::Ptr{Cchar})::Cint
end

const __JL_Ctag_27 = UInt32
const LMT_NORMAL = 0 % UInt32
const LMT_OUTLIER = 1 % UInt32
const LMT_FAIL = 2 % UInt32
const LMT_COUNT = 3 % UInt32

const lws_metric_rpt = UInt32
const LMR_PERIODIC = 0 % UInt32
const LMR_OUTLIER = 1 % UInt32

const lws_metric_rpt_kind_t = lws_metric_rpt

const lws_system_blob_item_t = UInt32
const LWS_SYSBLOB_TYPE_AUTH = 0 % UInt32
const LWS_SYSBLOB_TYPE_CLIENT_CERT_DER = 2 % UInt32
const LWS_SYSBLOB_TYPE_CLIENT_KEY_DER = 3 % UInt32
const LWS_SYSBLOB_TYPE_DEVICE_SERIAL = 4 % UInt32
const LWS_SYSBLOB_TYPE_DEVICE_FW_VERSION = 5 % UInt32
const LWS_SYSBLOB_TYPE_DEVICE_TYPE = 6 % UInt32
const LWS_SYSBLOB_TYPE_NTP_SERVER = 7 % UInt32
const LWS_SYSBLOB_TYPE_MQTT_CLIENT_ID = 8 % UInt32
const LWS_SYSBLOB_TYPE_MQTT_USERNAME = 9 % UInt32
const LWS_SYSBLOB_TYPE_MQTT_PASSWORD = 10 % UInt32
const LWS_SYSBLOB_TYPE_COUNT = 11 % UInt32

mutable struct lws_system_blob end

const lws_system_blob_t = lws_system_blob

function lws_system_blob_direct_set(b, ptr, len)
    @ccall libwebsockets.lws_system_blob_direct_set(b::Ptr{lws_system_blob_t}, ptr::Ptr{UInt8}, len::Csize_t)::Cvoid
end

function lws_system_blob_heap_empty(b)
    @ccall libwebsockets.lws_system_blob_heap_empty(b::Ptr{lws_system_blob_t})::Cvoid
end

function lws_system_blob_heap_append(b, ptr, len)
    @ccall libwebsockets.lws_system_blob_heap_append(b::Ptr{lws_system_blob_t}, ptr::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_system_blob_get_size(b)
    @ccall libwebsockets.lws_system_blob_get_size(b::Ptr{lws_system_blob_t})::Csize_t
end

function lws_system_blob_get_single_ptr(b, ptr)
    @ccall libwebsockets.lws_system_blob_get_single_ptr(b::Ptr{lws_system_blob_t}, ptr::Ptr{Ptr{UInt8}})::Cint
end

function lws_system_blob_get(b, ptr, len, ofs)
    @ccall libwebsockets.lws_system_blob_get(b::Ptr{lws_system_blob_t}, ptr::Ptr{UInt8}, len::Ptr{Csize_t}, ofs::Csize_t)::Cint
end

function lws_system_blob_destroy(b)
    @ccall libwebsockets.lws_system_blob_destroy(b::Ptr{lws_system_blob_t})::Cvoid
end

function lws_system_get_blob(context, type, idx)
    @ccall libwebsockets.lws_system_get_blob(context::Ptr{lws_context}, type::lws_system_blob_item_t, idx::Cint)::Ptr{lws_system_blob_t}
end

const lws_system_states_t = UInt32
const LWS_SYSTATE_UNKNOWN = 0 % UInt32
const LWS_SYSTATE_CONTEXT_CREATED = 1 % UInt32
const LWS_SYSTATE_INITIALIZED = 2 % UInt32
const LWS_SYSTATE_IFACE_COLDPLUG = 3 % UInt32
const LWS_SYSTATE_DHCP = 4 % UInt32
const LWS_SYSTATE_CPD_PRE_TIME = 5 % UInt32
const LWS_SYSTATE_TIME_VALID = 6 % UInt32
const LWS_SYSTATE_CPD_POST_TIME = 7 % UInt32
const LWS_SYSTATE_POLICY_VALID = 8 % UInt32
const LWS_SYSTATE_REGISTERED = 9 % UInt32
const LWS_SYSTATE_AUTH1 = 10 % UInt32
const LWS_SYSTATE_AUTH2 = 11 % UInt32
const LWS_SYSTATE_OPERATIONAL = 12 % UInt32
const LWS_SYSTATE_POLICY_INVALID = 13 % UInt32
const LWS_SYSTATE_CONTEXT_DESTROYING = 14 % UInt32

const lws_cpd_result_t = UInt32
const LWS_CPD_UNKNOWN = 0 % UInt32
const LWS_CPD_INTERNET_OK = 1 % UInt32
const LWS_CPD_CAPTIVE_PORTAL = 2 % UInt32
const LWS_CPD_NO_INTERNET = 3 % UInt32

# typedef void ( * lws_attach_cb_t ) ( struct lws_context * context , int tsi , void * opaque )
const lws_attach_cb_t = Ptr{Cvoid}

mutable struct lws_attach_item end

function lws_tls_jit_trust_got_cert_cb(cx, got_opaque, skid, skid_len, der, der_len)
    @ccall libwebsockets.lws_tls_jit_trust_got_cert_cb(cx::Ptr{lws_context}, got_opaque::Ptr{Cvoid}, skid::Ptr{UInt8}, skid_len::Csize_t, der::Ptr{UInt8}, der_len::Csize_t)::Cint
end

struct lws_system_ops
    reboot::Ptr{Cvoid}
    set_clock::Ptr{Cvoid}
    attach::Ptr{Cvoid}
    captive_portal_detect_request::Ptr{Cvoid}
    metric_report::Ptr{Cvoid}
    jit_trust_query::Ptr{Cvoid}
    wake_latency_us::UInt32
end

const lws_system_ops_t = lws_system_ops

function lws_system_get_state_manager(context)
    @ccall libwebsockets.lws_system_get_state_manager(context::Ptr{lws_context})::Ptr{lws_state_manager_t}
end

function lws_system_get_ops(context)
    @ccall libwebsockets.lws_system_get_ops(context::Ptr{lws_context})::Ptr{lws_system_ops_t}
end

function lws_system_context_from_system_mgr(mgr)
    @ccall libwebsockets.lws_system_context_from_system_mgr(mgr::Ptr{lws_state_manager_t})::Ptr{lws_context}
end

function __lws_system_attach(context, tsi, cb, state, opaque, get)
    @ccall libwebsockets.__lws_system_attach(context::Ptr{lws_context}, tsi::Cint, cb::lws_attach_cb_t, state::lws_system_states_t, opaque::Ptr{Cvoid}, get::Ptr{Ptr{lws_attach_item}})::Cint
end

const __JL_Ctag_31 = UInt32
const LWSDH_IPV4_SUBNET_MASK = 0 % UInt32
const LWSDH_IPV4_BROADCAST = 1 % UInt32
const LWSDH_LEASE_SECS = 2 % UInt32
const LWSDH_REBINDING_SECS = 3 % UInt32
const LWSDH_RENEWAL_SECS = 4 % UInt32
const _LWSDH_NUMS_COUNT = 5 % UInt32
const LWSDH_SA46_IP = 0 % UInt32
const LWSDH_SA46_DNS_SRV_1 = 1 % UInt32
const LWSDH_SA46_DNS_SRV_2 = 2 % UInt32
const LWSDH_SA46_DNS_SRV_3 = 3 % UInt32
const LWSDH_SA46_DNS_SRV_4 = 4 % UInt32
const LWSDH_SA46_IPV4_ROUTER = 5 % UInt32
const LWSDH_SA46_NTP_SERVER = 6 % UInt32
const LWSDH_SA46_DHCP_SERVER = 7 % UInt32
const _LWSDH_SA46_COUNT = 8 % UInt32

mutable struct lws_dhcpc_ifstate
    ifname::NTuple{16, Cchar}
    domain::NTuple{64, Cchar}
    mac::NTuple{6, UInt8}
    nums::NTuple{5, UInt32}
    sa46::NTuple{8, lws_sockaddr46}
    lws_dhcpc_ifstate() = new()
end

const lws_dhcpc_ifstate_t = lws_dhcpc_ifstate

# typedef int ( * dhcpc_cb_t ) ( void * opaque , lws_dhcpc_ifstate_t * is )
const dhcpc_cb_t = Ptr{Cvoid}

function lws_dhcpc_request(c, i, af, cb, opaque)
    @ccall libwebsockets.lws_dhcpc_request(c::Ptr{lws_context}, i::Ptr{Cchar}, af::Cint, cb::dhcpc_cb_t, opaque::Ptr{Cvoid})::Cint
end

function lws_dhcpc_remove(context, iface)
    @ccall libwebsockets.lws_dhcpc_remove(context::Ptr{lws_context}, iface::Ptr{Cchar})::Cint
end

function lws_dhcpc_status(context, sa46)
    @ccall libwebsockets.lws_dhcpc_status(context::Ptr{lws_context}, sa46::Ptr{lws_sockaddr46})::Cint
end

function lws_system_cpd_start(context)
    @ccall libwebsockets.lws_system_cpd_start(context::Ptr{lws_context})::Cint
end

function lws_system_cpd_start_defer(cx, defer_us)
    @ccall libwebsockets.lws_system_cpd_start_defer(cx::Ptr{lws_context}, defer_us::lws_usec_t)::Cvoid
end

function lws_system_cpd_set(context, result)
    @ccall libwebsockets.lws_system_cpd_set(context::Ptr{lws_context}, result::lws_cpd_result_t)::Cvoid
end

function lws_system_cpd_state_get(context)
    @ccall libwebsockets.lws_system_cpd_state_get(context::Ptr{lws_context})::lws_cpd_result_t
end

const lws_close_status = UInt32
const LWS_CLOSE_STATUS_NOSTATUS = 0 % UInt32
const LWS_CLOSE_STATUS_NORMAL = 1000 % UInt32
const LWS_CLOSE_STATUS_GOINGAWAY = 1001 % UInt32
const LWS_CLOSE_STATUS_PROTOCOL_ERR = 1002 % UInt32
const LWS_CLOSE_STATUS_UNACCEPTABLE_OPCODE = 1003 % UInt32
const LWS_CLOSE_STATUS_RESERVED = 1004 % UInt32
const LWS_CLOSE_STATUS_NO_STATUS = 1005 % UInt32
const LWS_CLOSE_STATUS_ABNORMAL_CLOSE = 1006 % UInt32
const LWS_CLOSE_STATUS_INVALID_PAYLOAD = 1007 % UInt32
const LWS_CLOSE_STATUS_POLICY_VIOLATION = 1008 % UInt32
const LWS_CLOSE_STATUS_MESSAGE_TOO_LARGE = 1009 % UInt32
const LWS_CLOSE_STATUS_EXTENSION_REQUIRED = 1010 % UInt32
const LWS_CLOSE_STATUS_UNEXPECTED_CONDITION = 1011 % UInt32
const LWS_CLOSE_STATUS_TLS_FAILURE = 1015 % UInt32
const LWS_CLOSE_STATUS_CLIENT_TRANSACTION_DONE = 2000 % UInt32
const LWS_CLOSE_STATUS_NOSTATUS_CONTEXT_DESTROY = 9999 % UInt32

function lws_close_reason(wsi, status, buf, len)
    @ccall libwebsockets.lws_close_reason(wsi::Ptr{lws}, status::lws_close_status, buf::Ptr{Cuchar}, len::Csize_t)::Cvoid
end

mutable struct lws_ssl_info
    where::Cint
    ret::Cint
    lws_ssl_info() = new()
end

const lws_cert_update_state = UInt32
const LWS_CUS_IDLE = 0 % UInt32
const LWS_CUS_STARTING = 1 % UInt32
const LWS_CUS_SUCCESS = 2 % UInt32
const LWS_CUS_FAILED = 3 % UInt32
const LWS_CUS_CREATE_KEYS = 4 % UInt32
const LWS_CUS_REG = 5 % UInt32
const LWS_CUS_AUTH = 6 % UInt32
const LWS_CUS_CHALLENGE = 7 % UInt32
const LWS_CUS_CREATE_REQ = 8 % UInt32
const LWS_CUS_REQ = 9 % UInt32
const LWS_CUS_CONFIRM = 10 % UInt32
const LWS_CUS_ISSUE = 11 % UInt32

const __JL_Ctag_32 = UInt32
const LWS_TLS_REQ_ELEMENT_COUNTRY = 0 % UInt32
const LWS_TLS_REQ_ELEMENT_STATE = 1 % UInt32
const LWS_TLS_REQ_ELEMENT_LOCALITY = 2 % UInt32
const LWS_TLS_REQ_ELEMENT_ORGANIZATION = 3 % UInt32
const LWS_TLS_REQ_ELEMENT_COMMON_NAME = 4 % UInt32
const LWS_TLS_REQ_ELEMENT_SUBJECT_ALT_NAME = 5 % UInt32
const LWS_TLS_REQ_ELEMENT_EMAIL = 6 % UInt32
const LWS_TLS_REQ_ELEMENT_COUNT = 7 % UInt32
const LWS_TLS_SET_DIR_URL = 7 % UInt32
const LWS_TLS_SET_AUTH_PATH = 8 % UInt32
const LWS_TLS_SET_CERT_PATH = 9 % UInt32
const LWS_TLS_SET_KEY_PATH = 10 % UInt32
const LWS_TLS_TOTAL_COUNT = 11 % UInt32

mutable struct lws_acme_cert_aging_args
    vh::Ptr{lws_vhost}
    element_overrides::NTuple{11, Ptr{Cchar}}
    lws_acme_cert_aging_args() = new()
end

mutable struct lws_filter_network_conn_args
    cli_addr::sockaddr_storage
    clilen::socklen_t
    accept_fd::lws_sockfd_type
    lws_filter_network_conn_args() = new()
end

const lws_callback_reasons = UInt32
const LWS_CALLBACK_PROTOCOL_INIT = 27 % UInt32
const LWS_CALLBACK_PROTOCOL_DESTROY = 28 % UInt32
const LWS_CALLBACK_WSI_CREATE = 29 % UInt32
const LWS_CALLBACK_WSI_DESTROY = 30 % UInt32
const LWS_CALLBACK_WSI_TX_CREDIT_GET = 103 % UInt32
const LWS_CALLBACK_OPENSSL_LOAD_EXTRA_CLIENT_VERIFY_CERTS = 21 % UInt32
const LWS_CALLBACK_OPENSSL_LOAD_EXTRA_SERVER_VERIFY_CERTS = 22 % UInt32
const LWS_CALLBACK_OPENSSL_PERFORM_CLIENT_CERT_VERIFICATION = 23 % UInt32
const LWS_CALLBACK_SSL_INFO = 67 % UInt32
const LWS_CALLBACK_OPENSSL_PERFORM_SERVER_CERT_VERIFICATION = 58 % UInt32
const LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED = 19 % UInt32
const LWS_CALLBACK_HTTP = 12 % UInt32
const LWS_CALLBACK_HTTP_BODY = 13 % UInt32
const LWS_CALLBACK_HTTP_BODY_COMPLETION = 14 % UInt32
const LWS_CALLBACK_HTTP_FILE_COMPLETION = 15 % UInt32
const LWS_CALLBACK_HTTP_WRITEABLE = 16 % UInt32
const LWS_CALLBACK_CLOSED_HTTP = 5 % UInt32
const LWS_CALLBACK_FILTER_HTTP_CONNECTION = 18 % UInt32
const LWS_CALLBACK_ADD_HEADERS = 53 % UInt32
const LWS_CALLBACK_VERIFY_BASIC_AUTHORIZATION = 102 % UInt32
const LWS_CALLBACK_CHECK_ACCESS_RIGHTS = 51 % UInt32
const LWS_CALLBACK_PROCESS_HTML = 52 % UInt32
const LWS_CALLBACK_HTTP_BIND_PROTOCOL = 49 % UInt32
const LWS_CALLBACK_HTTP_DROP_PROTOCOL = 50 % UInt32
const LWS_CALLBACK_HTTP_CONFIRM_UPGRADE = 86 % UInt32
const LWS_CALLBACK_ESTABLISHED_CLIENT_HTTP = 44 % UInt32
const LWS_CALLBACK_CLOSED_CLIENT_HTTP = 45 % UInt32
const LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ = 48 % UInt32
const LWS_CALLBACK_RECEIVE_CLIENT_HTTP = 46 % UInt32
const LWS_CALLBACK_COMPLETED_CLIENT_HTTP = 47 % UInt32
const LWS_CALLBACK_CLIENT_HTTP_WRITEABLE = 57 % UInt32
const LWS_CALLBACK_CLIENT_HTTP_REDIRECT = 104 % UInt32
const LWS_CALLBACK_CLIENT_HTTP_BIND_PROTOCOL = 85 % UInt32
const LWS_CALLBACK_CLIENT_HTTP_DROP_PROTOCOL = 76 % UInt32
const LWS_CALLBACK_ESTABLISHED = 0 % UInt32
const LWS_CALLBACK_CLOSED = 4 % UInt32
const LWS_CALLBACK_SERVER_WRITEABLE = 11 % UInt32
const LWS_CALLBACK_RECEIVE = 6 % UInt32
const LWS_CALLBACK_RECEIVE_PONG = 7 % UInt32
const LWS_CALLBACK_WS_PEER_INITIATED_CLOSE = 38 % UInt32
const LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION = 20 % UInt32
const LWS_CALLBACK_CONFIRM_EXTENSION_OKAY = 25 % UInt32
const LWS_CALLBACK_WS_SERVER_BIND_PROTOCOL = 77 % UInt32
const LWS_CALLBACK_WS_SERVER_DROP_PROTOCOL = 78 % UInt32
const LWS_CALLBACK_CLIENT_CONNECTION_ERROR = 1 % UInt32
const LWS_CALLBACK_CLIENT_FILTER_PRE_ESTABLISH = 2 % UInt32
const LWS_CALLBACK_CLIENT_ESTABLISHED = 3 % UInt32
const LWS_CALLBACK_CLIENT_CLOSED = 75 % UInt32
const LWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER = 24 % UInt32
const LWS_CALLBACK_CLIENT_RECEIVE = 8 % UInt32
const LWS_CALLBACK_CLIENT_RECEIVE_PONG = 9 % UInt32
const LWS_CALLBACK_CLIENT_WRITEABLE = 10 % UInt32
const LWS_CALLBACK_CLIENT_CONFIRM_EXTENSION_SUPPORTED = 26 % UInt32
const LWS_CALLBACK_WS_EXT_DEFAULTS = 39 % UInt32
const LWS_CALLBACK_FILTER_NETWORK_CONNECTION = 17 % UInt32
const LWS_CALLBACK_WS_CLIENT_BIND_PROTOCOL = 79 % UInt32
const LWS_CALLBACK_WS_CLIENT_DROP_PROTOCOL = 80 % UInt32
const LWS_CALLBACK_GET_THREAD_ID = 31 % UInt32
const LWS_CALLBACK_ADD_POLL_FD = 32 % UInt32
const LWS_CALLBACK_DEL_POLL_FD = 33 % UInt32
const LWS_CALLBACK_CHANGE_MODE_POLL_FD = 34 % UInt32
const LWS_CALLBACK_LOCK_POLL = 35 % UInt32
const LWS_CALLBACK_UNLOCK_POLL = 36 % UInt32
const LWS_CALLBACK_CGI = 40 % UInt32
const LWS_CALLBACK_CGI_TERMINATED = 41 % UInt32
const LWS_CALLBACK_CGI_STDIN_DATA = 42 % UInt32
const LWS_CALLBACK_CGI_STDIN_COMPLETED = 43 % UInt32
const LWS_CALLBACK_CGI_PROCESS_ATTACH = 70 % UInt32
const LWS_CALLBACK_SESSION_INFO = 54 % UInt32
const LWS_CALLBACK_GS_EVENT = 55 % UInt32
const LWS_CALLBACK_HTTP_PMO = 56 % UInt32
const LWS_CALLBACK_RAW_PROXY_CLI_RX = 89 % UInt32
const LWS_CALLBACK_RAW_PROXY_SRV_RX = 90 % UInt32
const LWS_CALLBACK_RAW_PROXY_CLI_CLOSE = 91 % UInt32
const LWS_CALLBACK_RAW_PROXY_SRV_CLOSE = 92 % UInt32
const LWS_CALLBACK_RAW_PROXY_CLI_WRITEABLE = 93 % UInt32
const LWS_CALLBACK_RAW_PROXY_SRV_WRITEABLE = 94 % UInt32
const LWS_CALLBACK_RAW_PROXY_CLI_ADOPT = 95 % UInt32
const LWS_CALLBACK_RAW_PROXY_SRV_ADOPT = 96 % UInt32
const LWS_CALLBACK_RAW_PROXY_CLI_BIND_PROTOCOL = 97 % UInt32
const LWS_CALLBACK_RAW_PROXY_SRV_BIND_PROTOCOL = 98 % UInt32
const LWS_CALLBACK_RAW_PROXY_CLI_DROP_PROTOCOL = 99 % UInt32
const LWS_CALLBACK_RAW_PROXY_SRV_DROP_PROTOCOL = 100 % UInt32
const LWS_CALLBACK_RAW_RX = 59 % UInt32
const LWS_CALLBACK_RAW_CLOSE = 60 % UInt32
const LWS_CALLBACK_RAW_WRITEABLE = 61 % UInt32
const LWS_CALLBACK_RAW_ADOPT = 62 % UInt32
const LWS_CALLBACK_RAW_CONNECTED = 101 % UInt32
const LWS_CALLBACK_RAW_SKT_BIND_PROTOCOL = 81 % UInt32
const LWS_CALLBACK_RAW_SKT_DROP_PROTOCOL = 82 % UInt32
const LWS_CALLBACK_RAW_ADOPT_FILE = 63 % UInt32
const LWS_CALLBACK_RAW_RX_FILE = 64 % UInt32
const LWS_CALLBACK_RAW_WRITEABLE_FILE = 65 % UInt32
const LWS_CALLBACK_RAW_CLOSE_FILE = 66 % UInt32
const LWS_CALLBACK_RAW_FILE_BIND_PROTOCOL = 83 % UInt32
const LWS_CALLBACK_RAW_FILE_DROP_PROTOCOL = 84 % UInt32
const LWS_CALLBACK_TIMER = 73 % UInt32
const LWS_CALLBACK_EVENT_WAIT_CANCELLED = 71 % UInt32
const LWS_CALLBACK_CHILD_CLOSING = 69 % UInt32
const LWS_CALLBACK_CONNECTING = 105 % UInt32
const LWS_CALLBACK_VHOST_CERT_AGING = 72 % UInt32
const LWS_CALLBACK_VHOST_CERT_UPDATE = 74 % UInt32
const LWS_CALLBACK_MQTT_NEW_CLIENT_INSTANTIATED = 200 % UInt32
const LWS_CALLBACK_MQTT_IDLE = 201 % UInt32
const LWS_CALLBACK_MQTT_CLIENT_ESTABLISHED = 202 % UInt32
const LWS_CALLBACK_MQTT_SUBSCRIBED = 203 % UInt32
const LWS_CALLBACK_MQTT_CLIENT_WRITEABLE = 204 % UInt32
const LWS_CALLBACK_MQTT_CLIENT_RX = 205 % UInt32
const LWS_CALLBACK_MQTT_UNSUBSCRIBED = 206 % UInt32
const LWS_CALLBACK_MQTT_DROP_PROTOCOL = 207 % UInt32
const LWS_CALLBACK_MQTT_CLIENT_CLOSED = 208 % UInt32
const LWS_CALLBACK_MQTT_ACK = 209 % UInt32
const LWS_CALLBACK_MQTT_RESEND = 210 % UInt32
const LWS_CALLBACK_MQTT_UNSUBSCRIBE_TIMEOUT = 211 % UInt32
const LWS_CALLBACK_MQTT_SHADOW_TIMEOUT = 212 % UInt32
const LWS_CALLBACK_USER = 1000 % UInt32

# typedef int lws_callback_function ( struct lws * wsi , enum lws_callback_reasons reason , void * user , void * in , size_t len )
const lws_callback_function = Cvoid

function lws_send_pipe_choked(wsi)
    @ccall libwebsockets.lws_send_pipe_choked(wsi::Ptr{lws})::Cint
end

function lws_is_final_fragment(wsi)
    @ccall libwebsockets.lws_is_final_fragment(wsi::Ptr{lws})::Cint
end

function lws_is_first_fragment(wsi)
    @ccall libwebsockets.lws_is_first_fragment(wsi::Ptr{lws})::Cint
end

function lws_get_reserved_bits(wsi)
    @ccall libwebsockets.lws_get_reserved_bits(wsi::Ptr{lws})::Cuchar
end

function lws_partial_buffered(wsi)
    @ccall libwebsockets.lws_partial_buffered(wsi::Ptr{lws})::Cint
end

function lws_frame_is_binary(wsi)
    @ccall libwebsockets.lws_frame_is_binary(wsi::Ptr{lws})::Cint
end

const lws_extension_callback_reasons = UInt32
const LWS_EXT_CB_CONSTRUCT = 4 % UInt32
const LWS_EXT_CB_CLIENT_CONSTRUCT = 5 % UInt32
const LWS_EXT_CB_DESTROY = 8 % UInt32
const LWS_EXT_CB_PACKET_TX_PRESEND = 12 % UInt32
const LWS_EXT_CB_PAYLOAD_TX = 21 % UInt32
const LWS_EXT_CB_PAYLOAD_RX = 22 % UInt32
const LWS_EXT_CB_OPTION_DEFAULT = 23 % UInt32
const LWS_EXT_CB_OPTION_SET = 24 % UInt32
const LWS_EXT_CB_OPTION_CONFIRM = 25 % UInt32
const LWS_EXT_CB_NAMED_OPTION_SET = 26 % UInt32

const lws_ext_options_types = UInt32
const EXTARG_NONE = 0 % UInt32
const EXTARG_DEC = 1 % UInt32
const EXTARG_OPT_DEC = 2 % UInt32

struct lws_ext_options
    name::Ptr{Cchar}
    type::lws_ext_options_types
end

mutable struct lws_ext_option_arg
    option_name::Ptr{Cchar}
    option_index::Cint
    start::Ptr{Cchar}
    len::Cint
    lws_ext_option_arg() = new()
end

# typedef int lws_extension_callback_function ( struct lws_context * context , const struct lws_extension * ext , struct lws * wsi , enum lws_extension_callback_reasons reason , void * user , void * in , size_t len )
const lws_extension_callback_function = Cvoid

struct lws_extension
    name::Ptr{Cchar}
    callback::Ptr{lws_extension_callback_function}
    client_offer::Ptr{Cchar}
end

function lws_set_extension_option(wsi, ext_name, opt_name, opt_val)
    @ccall libwebsockets.lws_set_extension_option(wsi::Ptr{lws}, ext_name::Ptr{Cchar}, opt_name::Ptr{Cchar}, opt_val::Ptr{Cchar})::Cint
end

function lws_ext_parse_options(ext, wsi, ext_user, opts, o, len)
    @ccall libwebsockets.lws_ext_parse_options(ext::Ptr{lws_extension}, wsi::Ptr{lws}, ext_user::Ptr{Cvoid}, opts::Ptr{lws_ext_options}, o::Ptr{Cchar}, len::Cint)::Cint
end

function lws_extension_callback_pm_deflate(context, ext, wsi, reason, user, in, len)
    @ccall libwebsockets.lws_extension_callback_pm_deflate(context::Ptr{lws_context}, ext::Ptr{lws_extension}, wsi::Ptr{lws}, reason::lws_extension_callback_reasons, user::Ptr{Cvoid}, in::Ptr{Cvoid}, len::Csize_t)::Cint
end

struct lws_protocols
    name::Ptr{Cchar}
    callback::Ptr{lws_callback_function}
    per_session_data_size::Csize_t
    rx_buffer_size::Csize_t
    id::Cuint
    user::Ptr{Cvoid}
    tx_packet_size::Csize_t
end

function lws_vhost_name_to_protocol(vh, name)
    @ccall libwebsockets.lws_vhost_name_to_protocol(vh::Ptr{lws_vhost}, name::Ptr{Cchar})::Ptr{lws_protocols}
end

function lws_get_protocol(wsi)
    @ccall libwebsockets.lws_get_protocol(wsi::Ptr{lws})::Ptr{lws_protocols}
end

function lws_protocol_get(wsi)
    @ccall libwebsockets.lws_protocol_get(wsi::Ptr{lws})::Ptr{lws_protocols}
end

function lws_protocol_vh_priv_zalloc(vhost, prot, size)
    @ccall libwebsockets.lws_protocol_vh_priv_zalloc(vhost::Ptr{lws_vhost}, prot::Ptr{lws_protocols}, size::Cint)::Ptr{Cvoid}
end

function lws_protocol_vh_priv_get(vhost, prot)
    @ccall libwebsockets.lws_protocol_vh_priv_get(vhost::Ptr{lws_vhost}, prot::Ptr{lws_protocols})::Ptr{Cvoid}
end

function lws_vhd_find_by_pvo(cx, protname, pvo_name, pvo_value)
    @ccall libwebsockets.lws_vhd_find_by_pvo(cx::Ptr{lws_context}, protname::Ptr{Cchar}, pvo_name::Ptr{Cchar}, pvo_value::Ptr{Cchar})::Ptr{Cvoid}
end

function lws_adjust_protocol_psds(wsi, new_size)
    @ccall libwebsockets.lws_adjust_protocol_psds(wsi::Ptr{lws}, new_size::Csize_t)::Ptr{Cvoid}
end

function lws_finalize_startup(context)
    @ccall libwebsockets.lws_finalize_startup(context::Ptr{lws_context})::Cint
end

struct lws_protocol_vhost_options
    next::Ptr{lws_protocol_vhost_options}
    options::Ptr{lws_protocol_vhost_options}
    name::Ptr{Cchar}
    value::Ptr{Cchar}
end

function lws_pvo_search(pvo, name)
    @ccall libwebsockets.lws_pvo_search(pvo::Ptr{lws_protocol_vhost_options}, name::Ptr{Cchar})::Ptr{lws_protocol_vhost_options}
end

function lws_pvo_get_str(in, name, result)
    @ccall libwebsockets.lws_pvo_get_str(in::Ptr{Cvoid}, name::Ptr{Cchar}, result::Ptr{Ptr{Cchar}})::Cint
end

function lws_protocol_init(context)
    @ccall libwebsockets.lws_protocol_init(context::Ptr{lws_context})::Cint
end

struct lws_plugin_header
    name::Ptr{Cchar}
    _class::Ptr{Cchar}
    lws_build_hash::Ptr{Cchar}
    api_magic::Cuint
end

const lws_plugin_header_t = lws_plugin_header

mutable struct lws_plugin_protocol
    hdr::lws_plugin_header_t
    protocols::Ptr{lws_protocols}
    extensions::Ptr{lws_extension}
    count_protocols::Cint
    count_extensions::Cint
    lws_plugin_protocol() = new()
end

const lws_plugin_protocol_t = lws_plugin_protocol

struct __JL_Ctag_85
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_85}, f::Symbol)
    f === :l && return Ptr{Ptr{Cvoid}}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_85, f::Symbol)
    r = Ref{__JL_Ctag_85}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_85}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_85}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_plugin
    data::NTuple{24, UInt8}
end

function Base.getproperty(x::Ptr{lws_plugin}, f::Symbol)
    f === :list && return Ptr{Ptr{lws_plugin}}(x + 0)
    f === :hdr && return Ptr{Ptr{lws_plugin_header_t}}(x + 8)
    f === :u && return Ptr{__JL_Ctag_85}(x + 16)
    return getfield(x, f)
end

function Base.getproperty(x::lws_plugin, f::Symbol)
    r = Ref{lws_plugin}(x)
    ptr = Base.unsafe_convert(Ptr{lws_plugin}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_plugin}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_event_loop_ops
    name::Ptr{Cchar}
    init_context::Ptr{Cvoid}
    destroy_context1::Ptr{Cvoid}
    destroy_context2::Ptr{Cvoid}
    init_vhost_listen_wsi::Ptr{Cvoid}
    init_pt::Ptr{Cvoid}
    wsi_logical_close::Ptr{Cvoid}
    check_client_connect_ok::Ptr{Cvoid}
    close_handle_manually::Ptr{Cvoid}
    sock_accept::Ptr{Cvoid}
    io::Ptr{Cvoid}
    run_pt::Ptr{Cvoid}
    destroy_pt::Ptr{Cvoid}
    destroy_wsi::Ptr{Cvoid}
    foreign_thread::Ptr{Cvoid}
    flags::UInt8
    evlib_size_ctx::UInt16
    evlib_size_pt::UInt16
    evlib_size_vh::UInt16
    evlib_size_wsi::UInt16
end

struct lws_plugin_evlib
    hdr::lws_plugin_header_t
    ops::Ptr{lws_event_loop_ops}
end

const lws_plugin_evlib_t = lws_plugin_evlib

# typedef int ( * each_plugin_cb_t ) ( struct lws_plugin * p , void * user )
const each_plugin_cb_t = Ptr{Cvoid}

function lws_plugins_init(pplugin, d, _class, filter, each, each_user)
    @ccall libwebsockets.lws_plugins_init(pplugin::Ptr{Ptr{lws_plugin}}, d::Ptr{Ptr{Cchar}}, _class::Ptr{Cchar}, filter::Ptr{Cchar}, each::each_plugin_cb_t, each_user::Ptr{Cvoid})::Cint
end

function lws_plugins_destroy(pplugin, each, each_user)
    @ccall libwebsockets.lws_plugins_destroy(pplugin::Ptr{Ptr{lws_plugin}}, each::each_plugin_cb_t, each_user::Ptr{Cvoid})::Cint
end

mutable struct lws_ss_plugin end

# typedef int ( * lws_context_ready_cb_t ) ( struct lws_context * context )
const lws_context_ready_cb_t = Ptr{Cvoid}

# typedef int ( * lws_peer_limits_notify_t ) ( struct lws_context * ctx , lws_sockfd_type sockfd , lws_sockaddr46 * sa46 )
const lws_peer_limits_notify_t = Ptr{Cvoid}

struct lws_token_limits
    token_limit::NTuple{96, Cushort}
end

struct lws_http_mount
    data::NTuple{88, UInt8}
end

function Base.getproperty(x::Ptr{lws_http_mount}, f::Symbol)
    f === :mount_next && return Ptr{Ptr{lws_http_mount}}(x + 0)
    f === :mountpoint && return Ptr{Ptr{Cchar}}(x + 8)
    f === :origin && return Ptr{Ptr{Cchar}}(x + 16)
    f === :def && return Ptr{Ptr{Cchar}}(x + 24)
    f === :protocol && return Ptr{Ptr{Cchar}}(x + 32)
    f === :cgienv && return Ptr{Ptr{lws_protocol_vhost_options}}(x + 40)
    f === :extra_mimetypes && return Ptr{Ptr{lws_protocol_vhost_options}}(x + 48)
    f === :interpret && return Ptr{Ptr{lws_protocol_vhost_options}}(x + 56)
    f === :cgi_timeout && return Ptr{Cint}(x + 64)
    f === :cache_max_age && return Ptr{Cint}(x + 68)
    f === :auth_mask && return Ptr{Cuint}(x + 72)
    f === :cache_reusable && return (Ptr{Cuint}(x + 76), 0, 1)
    f === :cache_revalidate && return (Ptr{Cuint}(x + 76), 1, 1)
    f === :cache_intermediaries && return (Ptr{Cuint}(x + 76), 2, 1)
    f === :origin_protocol && return Ptr{Cuchar}(x + 77)
    f === :mountpoint_len && return Ptr{Cuchar}(x + 78)
    f === :basic_auth_login_file && return Ptr{Ptr{Cchar}}(x + 80)
    return getfield(x, f)
end

function Base.getproperty(x::lws_http_mount, f::Symbol)
    r = Ref{lws_http_mount}(x)
    ptr = Base.unsafe_convert(Ptr{lws_http_mount}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_http_mount}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

struct lws_fops_index
    sig::Ptr{Cchar}
    len::UInt8
end

struct lws_plat_file_ops
    open::Ptr{Cvoid}
    close::Ptr{Cvoid}
    seek_cur::Ptr{Cvoid}
    read::Ptr{Cvoid}
    write::Ptr{Cvoid}
    fi::NTuple{3, lws_fops_index}
    next::Ptr{lws_plat_file_ops}
end

struct lws_context_creation_info
    iface::Ptr{Cchar}
    protocols::Ptr{lws_protocols}
    extensions::Ptr{lws_extension}
    token_limits::Ptr{lws_token_limits}
    http_proxy_address::Ptr{Cchar}
    headers::Ptr{lws_protocol_vhost_options}
    reject_service_keywords::Ptr{lws_protocol_vhost_options}
    pvo::Ptr{lws_protocol_vhost_options}
    log_filepath::Ptr{Cchar}
    mounts::Ptr{lws_http_mount}
    server_string::Ptr{Cchar}
    error_document_404::Ptr{Cchar}
    port::Cint
    http_proxy_port::Cuint
    max_http_header_data2::Cuint
    max_http_header_pool2::Cuint
    keepalive_timeout::Cint
    http2_settings::NTuple{7, UInt32}
    max_http_header_data::Cushort
    max_http_header_pool::Cushort
    ssl_private_key_password::Ptr{Cchar}
    ssl_cert_filepath::Ptr{Cchar}
    ssl_private_key_filepath::Ptr{Cchar}
    ssl_ca_filepath::Ptr{Cchar}
    ssl_cipher_list::Ptr{Cchar}
    ecdh_curve::Ptr{Cchar}
    tls1_3_plus_cipher_list::Ptr{Cchar}
    server_ssl_cert_mem::Ptr{Cvoid}
    server_ssl_private_key_mem::Ptr{Cvoid}
    server_ssl_ca_mem::Ptr{Cvoid}
    ssl_options_set::Clong
    ssl_options_clear::Clong
    simultaneous_ssl_restriction::Cint
    simultaneous_ssl_handshake_restriction::Cint
    ssl_info_event_mask::Cint
    server_ssl_cert_mem_len::Cuint
    server_ssl_private_key_mem_len::Cuint
    server_ssl_ca_mem_len::Cuint
    alpn::Ptr{Cchar}
    client_ssl_private_key_password::Ptr{Cchar}
    client_ssl_cert_filepath::Ptr{Cchar}
    client_ssl_cert_mem::Ptr{Cvoid}
    client_ssl_cert_mem_len::Cuint
    client_ssl_private_key_filepath::Ptr{Cchar}
    client_ssl_key_mem::Ptr{Cvoid}
    client_ssl_ca_filepath::Ptr{Cchar}
    client_ssl_ca_mem::Ptr{Cvoid}
    client_ssl_cipher_list::Ptr{Cchar}
    client_tls_1_3_plus_cipher_list::Ptr{Cchar}
    ssl_client_options_set::Clong
    ssl_client_options_clear::Clong
    client_ssl_ca_mem_len::Cuint
    client_ssl_key_mem_len::Cuint
    provided_client_ssl_ctx::Ptr{SSL_CTX}
    ka_time::Cint
    ka_probes::Cint
    ka_interval::Cint
    timeout_secs::Cuint
    connect_timeout_secs::Cuint
    bind_iface::Cint
    timeout_secs_ah_idle::Cuint
    tls_session_timeout::UInt32
    tls_session_cache_max::UInt32
    gid::gid_t
    uid::uid_t
    options::UInt64
    user::Ptr{Cvoid}
    count_threads::Cuint
    fd_limit_per_thread::Cuint
    vhost_name::Ptr{Cchar}
    external_baggage_free_on_destroy::Ptr{Cvoid}
    pt_serv_buf_size::Cuint
    fops::Ptr{lws_plat_file_ops}
    foreign_loops::Ptr{Ptr{Cvoid}}
    signal_cb::Ptr{Cvoid}
    pcontext::Ptr{Ptr{lws_context}}
    finalize::Ptr{Cvoid}
    finalize_arg::Ptr{Cvoid}
    listen_accept_role::Ptr{Cchar}
    listen_accept_protocol::Ptr{Cchar}
    pprotocols::Ptr{Ptr{lws_protocols}}
    username::Ptr{Cchar}
    groupname::Ptr{Cchar}
    unix_socket_perms::Ptr{Cchar}
    system_ops::Ptr{lws_system_ops_t}
    retry_and_idle_policy::Ptr{lws_retry_bo_t}
    register_notifier_list::Ptr{Ptr{lws_state_notify_link_t}}
    rlimit_nofile::Cint
    early_smd_cb::lws_smd_notification_cb_t
    early_smd_opaque::Ptr{Cvoid}
    early_smd_class_filter::lws_smd_class_t
    smd_ttl_us::lws_usec_t
    smd_queue_depth::UInt16
    fo_listen_queue::Cint
    event_lib_custom::Ptr{lws_plugin_evlib}
    log_cx::Ptr{lws_log_cx_t}
    http_nsc_filepath::Ptr{Cchar}
    http_nsc_heap_max_footprint::Csize_t
    http_nsc_heap_max_items::Csize_t
    http_nsc_heap_max_payload::Csize_t
    _unused::NTuple{2, Ptr{Cvoid}}
end

function lws_create_context(info)
    @ccall libwebsockets.lws_create_context(info::Ptr{lws_context_creation_info})::Ptr{lws_context}
end

function lws_context_destroy(context)
    @ccall libwebsockets.lws_context_destroy(context::Ptr{lws_context})::Cvoid
end

# typedef int ( * lws_reload_func ) ( void )
const lws_reload_func = Ptr{Cvoid}

function lws_context_deprecate(context, cb)
    @ccall libwebsockets.lws_context_deprecate(context::Ptr{lws_context}, cb::lws_reload_func)::Cvoid
end

function lws_context_is_deprecated(context)
    @ccall libwebsockets.lws_context_is_deprecated(context::Ptr{lws_context})::Cint
end

function lws_set_proxy(vhost, proxy)
    @ccall libwebsockets.lws_set_proxy(vhost::Ptr{lws_vhost}, proxy::Ptr{Cchar})::Cint
end

function lws_set_socks(vhost, socks)
    @ccall libwebsockets.lws_set_socks(vhost::Ptr{lws_vhost}, socks::Ptr{Cchar})::Cint
end

function lws_create_vhost(context, info)
    @ccall libwebsockets.lws_create_vhost(context::Ptr{lws_context}, info::Ptr{lws_context_creation_info})::Ptr{lws_vhost}
end

function lws_vhost_destroy(vh)
    @ccall libwebsockets.lws_vhost_destroy(vh::Ptr{lws_vhost})::Cvoid
end

function lwsws_get_config_globals(info, d, config_strings, len)
    @ccall libwebsockets.lwsws_get_config_globals(info::Ptr{lws_context_creation_info}, d::Ptr{Cchar}, config_strings::Ptr{Ptr{Cchar}}, len::Ptr{Cint})::Cint
end

function lwsws_get_config_vhosts(context, info, d, config_strings, len)
    @ccall libwebsockets.lwsws_get_config_vhosts(context::Ptr{lws_context}, info::Ptr{lws_context_creation_info}, d::Ptr{Cchar}, config_strings::Ptr{Ptr{Cchar}}, len::Ptr{Cint})::Cint
end

function lws_get_vhost(wsi)
    @ccall libwebsockets.lws_get_vhost(wsi::Ptr{lws})::Ptr{lws_vhost}
end

function lws_get_vhost_name(vhost)
    @ccall libwebsockets.lws_get_vhost_name(vhost::Ptr{lws_vhost})::Ptr{Cchar}
end

function lws_get_vhost_by_name(context, name)
    @ccall libwebsockets.lws_get_vhost_by_name(context::Ptr{lws_context}, name::Ptr{Cchar})::Ptr{lws_vhost}
end

function lws_get_vhost_port(vhost)
    @ccall libwebsockets.lws_get_vhost_port(vhost::Ptr{lws_vhost})::Cint
end

function lws_get_vhost_user(vhost)
    @ccall libwebsockets.lws_get_vhost_user(vhost::Ptr{lws_vhost})::Ptr{Cvoid}
end

function lws_get_vhost_iface(vhost)
    @ccall libwebsockets.lws_get_vhost_iface(vhost::Ptr{lws_vhost})::Ptr{Cchar}
end

function lws_json_dump_vhost(vh, buf, len)
    @ccall libwebsockets.lws_json_dump_vhost(vh::Ptr{lws_vhost}, buf::Ptr{Cchar}, len::Cint)::Cint
end

function lws_json_dump_context(context, buf, len, hide_vhosts)
    @ccall libwebsockets.lws_json_dump_context(context::Ptr{lws_context}, buf::Ptr{Cchar}, len::Cint, hide_vhosts::Cint)::Cint
end

function lws_vhost_user(vhost)
    @ccall libwebsockets.lws_vhost_user(vhost::Ptr{lws_vhost})::Ptr{Cvoid}
end

function lws_context_user(context)
    @ccall libwebsockets.lws_context_user(context::Ptr{lws_context})::Ptr{Cvoid}
end

function lws_vh_tag(vh)
    @ccall libwebsockets.lws_vh_tag(vh::Ptr{lws_vhost})::Ptr{Cchar}
end

function lws_context_is_being_destroyed(context)
    @ccall libwebsockets.lws_context_is_being_destroyed(context::Ptr{lws_context})::Cint
end

const lws_mount_protocols = UInt32
const LWSMPRO_HTTP = 0 % UInt32
const LWSMPRO_HTTPS = 1 % UInt32
const LWSMPRO_FILE = 2 % UInt32
const LWSMPRO_CGI = 3 % UInt32
const LWSMPRO_REDIR_HTTP = 4 % UInt32
const LWSMPRO_REDIR_HTTPS = 5 % UInt32
const LWSMPRO_CALLBACK = 6 % UInt32

const lws_authentication_mode = UInt32
const LWSAUTHM_DEFAULT = 0 % UInt32
const LWSAUTHM_BASIC_AUTH_CALLBACK = 268435456 % UInt32

const lws_conmon_interval_us_t = UInt32

const lws_conmon_pcol = UInt32
const LWSCONMON_PCOL_NONE = 0 % UInt32
const LWSCONMON_PCOL_HTTP = 1 % UInt32

const lws_conmon_pcol_t = lws_conmon_pcol

const lws_conmon_dns_disposition = UInt32
const LWSCONMON_DNS_NONE = 0 % UInt32
const LWSCONMON_DNS_OK = 1 % UInt32
const LWSCONMON_DNS_SERVER_UNREACHABLE = 2 % UInt32
const LWSCONMON_DNS_NO_RESULT = 3 % UInt32

const lws_conmon_dns_disposition_t = lws_conmon_dns_disposition

struct __JL_Ctag_83
    data::NTuple{4, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_83}, f::Symbol)
    f === :http && return Ptr{__JL_Ctag_84}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_83, f::Symbol)
    r = Ref{__JL_Ctag_83}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_83}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_83}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_conmon
    data::NTuple{56, UInt8}
end

function Base.getproperty(x::Ptr{lws_conmon}, f::Symbol)
    f === :peer46 && return Ptr{lws_sockaddr46}(x + 0)
    f === :protocol_specific && return Ptr{__JL_Ctag_83}(x + 16)
    f === :dns_results_copy && return Ptr{Ptr{addrinfo}}(x + 24)
    f === :ciu_dns && return Ptr{lws_conmon_interval_us_t}(x + 32)
    f === :ciu_sockconn && return Ptr{lws_conmon_interval_us_t}(x + 36)
    f === :ciu_tls && return Ptr{lws_conmon_interval_us_t}(x + 40)
    f === :ciu_txn_resp && return Ptr{lws_conmon_interval_us_t}(x + 44)
    f === :pcol && return Ptr{lws_conmon_pcol_t}(x + 48)
    f === :dns_disposition && return Ptr{lws_conmon_dns_disposition_t}(x + 52)
    return getfield(x, f)
end

function Base.getproperty(x::lws_conmon, f::Symbol)
    r = Ref{lws_conmon}(x)
    ptr = Base.unsafe_convert(Ptr{lws_conmon}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_conmon}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

function lws_conmon_wsi_take(wsi, dest)
    @ccall libwebsockets.lws_conmon_wsi_take(wsi::Ptr{lws}, dest::Ptr{lws_conmon})::Cvoid
end

function lws_conmon_release(conmon)
    @ccall libwebsockets.lws_conmon_release(conmon::Ptr{lws_conmon})::Cvoid
end

const lws_client_connect_ssl_connection_flags = UInt32
const LCCSCF_USE_SSL = 1 % UInt32
const LCCSCF_ALLOW_SELFSIGNED = 2 % UInt32
const LCCSCF_SKIP_SERVER_CERT_HOSTNAME_CHECK = 4 % UInt32
const LCCSCF_ALLOW_EXPIRED = 8 % UInt32
const LCCSCF_ALLOW_INSECURE = 16 % UInt32
const LCCSCF_H2_QUIRK_NGHTTP2_END_STREAM = 32 % UInt32
const LCCSCF_H2_QUIRK_OVERFLOWS_TXCR = 64 % UInt32
const LCCSCF_H2_AUTH_BEARER = 128 % UInt32
const LCCSCF_H2_HEXIFY_AUTH_TOKEN = 256 % UInt32
const LCCSCF_H2_MANUAL_RXFLOW = 512 % UInt32
const LCCSCF_HTTP_MULTIPART_MIME = 1024 % UInt32
const LCCSCF_HTTP_X_WWW_FORM_URLENCODED = 2048 % UInt32
const LCCSCF_HTTP_NO_FOLLOW_REDIRECT = 4096 % UInt32
const LCCSCF_PIPELINE = 65536 % UInt32
const LCCSCF_MUXABLE_STREAM = 131072 % UInt32
const LCCSCF_H2_PRIOR_KNOWLEDGE = 262144 % UInt32
const LCCSCF_WAKE_SUSPEND__VALIDITY = 524288 % UInt32
const LCCSCF_PRIORITIZE_READS = 1048576 % UInt32
const LCCSCF_SECSTREAM_CLIENT = 2097152 % UInt32
const LCCSCF_SECSTREAM_PROXY_LINK = 4194304 % UInt32
const LCCSCF_SECSTREAM_PROXY_ONWARD = 8388608 % UInt32
const LCCSCF_IP_LOW_LATENCY = 16777216 % UInt32
const LCCSCF_IP_HIGH_THROUGHPUT = 33554432 % UInt32
const LCCSCF_IP_HIGH_RELIABILITY = 67108864 % UInt32
const LCCSCF_IP_LOW_COST = 134217728 % UInt32
const LCCSCF_CONMON = 268435456 % UInt32
const LCCSCF_ACCEPT_TLS_DOWNGRADE_REDIRECTS = 536870912 % UInt32
const LCCSCF_CACHE_COOKIES = 1073741824 % UInt32

mutable struct lws_sequencer end

mutable struct lws_client_connect_info
    context::Ptr{lws_context}
    address::Ptr{Cchar}
    port::Cint
    ssl_connection::Cint
    path::Ptr{Cchar}
    host::Ptr{Cchar}
    origin::Ptr{Cchar}
    protocol::Ptr{Cchar}
    ietf_version_or_minus_one::Cint
    userdata::Ptr{Cvoid}
    client_exts::Ptr{Cvoid}
    method::Ptr{Cchar}
    parent_wsi::Ptr{lws}
    uri_replace_from::Ptr{Cchar}
    uri_replace_to::Ptr{Cchar}
    vhost::Ptr{lws_vhost}
    pwsi::Ptr{Ptr{lws}}
    iface::Ptr{Cchar}
    local_protocol_name::Ptr{Cchar}
    alpn::Ptr{Cchar}
    seq::Ptr{lws_sequencer}
    opaque_user_data::Ptr{Cvoid}
    retry_and_idle_policy::Ptr{lws_retry_bo_t}
    manual_initial_tx_credit::Cint
    sys_tls_client_cert::UInt8
    priority::UInt8
    mqtt_cp::Ptr{Cvoid}
    fi_wsi_name::Ptr{Cchar}
    keep_warm_secs::UInt16
    log_cx::Ptr{lws_log_cx_t}
    _unused::NTuple{4, Ptr{Cvoid}}
    lws_client_connect_info() = new()
end

function lws_client_connect_via_info(ccinfo)
    @ccall libwebsockets.lws_client_connect_via_info(ccinfo::Ptr{lws_client_connect_info})::Ptr{lws}
end

function lws_init_vhost_client_ssl(info, vhost)
    @ccall libwebsockets.lws_init_vhost_client_ssl(info::Ptr{lws_context_creation_info}, vhost::Ptr{lws_vhost})::Cint
end

function lws_http_client_read(wsi, buf, len)
    @ccall libwebsockets.lws_http_client_read(wsi::Ptr{lws}, buf::Ptr{Ptr{Cchar}}, len::Ptr{Cint})::Cint
end

function lws_http_client_http_response(wsi)
    @ccall libwebsockets.lws_http_client_http_response(wsi::Ptr{lws})::Cuint
end

function lws_tls_client_vhost_extra_cert_mem(vh, der, der_len)
    @ccall libwebsockets.lws_tls_client_vhost_extra_cert_mem(vh::Ptr{lws_vhost}, der::Ptr{UInt8}, der_len::Csize_t)::Cint
end

function lws_client_http_body_pending(wsi, something_left_to_send)
    @ccall libwebsockets.lws_client_http_body_pending(wsi::Ptr{lws}, something_left_to_send::Cint)::Cvoid
end

function lws_client_http_multipart(wsi, name, filename, content_type, p, _end)
    @ccall libwebsockets.lws_client_http_multipart(wsi::Ptr{lws}, name::Ptr{Cchar}, filename::Ptr{Cchar}, content_type::Ptr{Cchar}, p::Ptr{Ptr{Cchar}}, _end::Ptr{Cchar})::Cint
end

function lws_http_basic_auth_gen(user, pw, buf, len)
    @ccall libwebsockets.lws_http_basic_auth_gen(user::Ptr{Cchar}, pw::Ptr{Cchar}, buf::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_tls_session_is_reused(wsi)
    @ccall libwebsockets.lws_tls_session_is_reused(wsi::Ptr{lws})::Cint
end

function lws_get_mimetype(file, m)
    @ccall libwebsockets.lws_get_mimetype(file::Ptr{Cchar}, m::Ptr{lws_http_mount})::Ptr{Cchar}
end

function lws_serve_http_file(wsi, file, content_type, other_headers, other_headers_len)
    @ccall libwebsockets.lws_serve_http_file(wsi::Ptr{lws}, file::Ptr{Cchar}, content_type::Ptr{Cchar}, other_headers::Ptr{Cchar}, other_headers_len::Cint)::Cint
end

function lws_serve_http_file_fragment(wsi)
    @ccall libwebsockets.lws_serve_http_file_fragment(wsi::Ptr{lws})::Cint
end

const http_status = UInt32
const HTTP_STATUS_CONTINUE = 100 % UInt32
const HTTP_STATUS_OK = 200 % UInt32
const HTTP_STATUS_NO_CONTENT = 204 % UInt32
const HTTP_STATUS_PARTIAL_CONTENT = 206 % UInt32
const HTTP_STATUS_MOVED_PERMANENTLY = 301 % UInt32
const HTTP_STATUS_FOUND = 302 % UInt32
const HTTP_STATUS_SEE_OTHER = 303 % UInt32
const HTTP_STATUS_NOT_MODIFIED = 304 % UInt32
const HTTP_STATUS_BAD_REQUEST = 400 % UInt32
const HTTP_STATUS_UNAUTHORIZED = 401 % UInt32
const HTTP_STATUS_PAYMENT_REQUIRED = 402 % UInt32
const HTTP_STATUS_FORBIDDEN = 403 % UInt32
const HTTP_STATUS_NOT_FOUND = 404 % UInt32
const HTTP_STATUS_METHOD_NOT_ALLOWED = 405 % UInt32
const HTTP_STATUS_NOT_ACCEPTABLE = 406 % UInt32
const HTTP_STATUS_PROXY_AUTH_REQUIRED = 407 % UInt32
const HTTP_STATUS_REQUEST_TIMEOUT = 408 % UInt32
const HTTP_STATUS_CONFLICT = 409 % UInt32
const HTTP_STATUS_GONE = 410 % UInt32
const HTTP_STATUS_LENGTH_REQUIRED = 411 % UInt32
const HTTP_STATUS_PRECONDITION_FAILED = 412 % UInt32
const HTTP_STATUS_REQ_ENTITY_TOO_LARGE = 413 % UInt32
const HTTP_STATUS_REQ_URI_TOO_LONG = 414 % UInt32
const HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE = 415 % UInt32
const HTTP_STATUS_REQ_RANGE_NOT_SATISFIABLE = 416 % UInt32
const HTTP_STATUS_EXPECTATION_FAILED = 417 % UInt32
const HTTP_STATUS_INTERNAL_SERVER_ERROR = 500 % UInt32
const HTTP_STATUS_NOT_IMPLEMENTED = 501 % UInt32
const HTTP_STATUS_BAD_GATEWAY = 502 % UInt32
const HTTP_STATUS_SERVICE_UNAVAILABLE = 503 % UInt32
const HTTP_STATUS_GATEWAY_TIMEOUT = 504 % UInt32
const HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED = 505 % UInt32

mutable struct lws_process_html_args
    p::Ptr{Cchar}
    len::Cint
    max_len::Cint
    final::Cint
    chunked::Cint
    lws_process_html_args() = new()
end

# typedef const char * ( * lws_process_html_state_cb ) ( void * data , int index )
const lws_process_html_state_cb = Ptr{Cvoid}

mutable struct lws_process_html_state
    start::Ptr{Cchar}
    swallow::NTuple{16, Cchar}
    pos::Cint
    data::Ptr{Cvoid}
    vars::Ptr{Ptr{Cchar}}
    count_vars::Cint
    replace::lws_process_html_state_cb
    lws_process_html_state() = new()
end

function lws_chunked_html_process(args, s)
    @ccall libwebsockets.lws_chunked_html_process(args::Ptr{lws_process_html_args}, s::Ptr{lws_process_html_state})::Cint
end

mutable struct lws_tokens
    token::Ptr{Cuchar}
    len::Cint
    lws_tokens() = new()
end

const lws_token_indexes = UInt32
const WSI_TOKEN_GET_URI = 0 % UInt32
const WSI_TOKEN_POST_URI = 1 % UInt32
const WSI_TOKEN_OPTIONS_URI = 2 % UInt32
const WSI_TOKEN_HOST = 3 % UInt32
const WSI_TOKEN_CONNECTION = 4 % UInt32
const WSI_TOKEN_UPGRADE = 5 % UInt32
const WSI_TOKEN_ORIGIN = 6 % UInt32
const WSI_TOKEN_DRAFT = 7 % UInt32
const WSI_TOKEN_CHALLENGE = 8 % UInt32
const WSI_TOKEN_EXTENSIONS = 9 % UInt32
const WSI_TOKEN_KEY1 = 10 % UInt32
const WSI_TOKEN_KEY2 = 11 % UInt32
const WSI_TOKEN_PROTOCOL = 12 % UInt32
const WSI_TOKEN_ACCEPT = 13 % UInt32
const WSI_TOKEN_NONCE = 14 % UInt32
const WSI_TOKEN_HTTP = 15 % UInt32
const WSI_TOKEN_HTTP2_SETTINGS = 16 % UInt32
const WSI_TOKEN_HTTP_ACCEPT = 17 % UInt32
const WSI_TOKEN_HTTP_AC_REQUEST_HEADERS = 18 % UInt32
const WSI_TOKEN_HTTP_IF_MODIFIED_SINCE = 19 % UInt32
const WSI_TOKEN_HTTP_IF_NONE_MATCH = 20 % UInt32
const WSI_TOKEN_HTTP_ACCEPT_ENCODING = 21 % UInt32
const WSI_TOKEN_HTTP_ACCEPT_LANGUAGE = 22 % UInt32
const WSI_TOKEN_HTTP_PRAGMA = 23 % UInt32
const WSI_TOKEN_HTTP_CACHE_CONTROL = 24 % UInt32
const WSI_TOKEN_HTTP_AUTHORIZATION = 25 % UInt32
const WSI_TOKEN_HTTP_COOKIE = 26 % UInt32
const WSI_TOKEN_HTTP_CONTENT_LENGTH = 27 % UInt32
const WSI_TOKEN_HTTP_CONTENT_TYPE = 28 % UInt32
const WSI_TOKEN_HTTP_DATE = 29 % UInt32
const WSI_TOKEN_HTTP_RANGE = 30 % UInt32
const WSI_TOKEN_HTTP_REFERER = 31 % UInt32
const WSI_TOKEN_KEY = 32 % UInt32
const WSI_TOKEN_VERSION = 33 % UInt32
const WSI_TOKEN_SWORIGIN = 34 % UInt32
const WSI_TOKEN_HTTP_COLON_AUTHORITY = 35 % UInt32
const WSI_TOKEN_HTTP_COLON_METHOD = 36 % UInt32
const WSI_TOKEN_HTTP_COLON_PATH = 37 % UInt32
const WSI_TOKEN_HTTP_COLON_SCHEME = 38 % UInt32
const WSI_TOKEN_HTTP_COLON_STATUS = 39 % UInt32
const WSI_TOKEN_HTTP_ACCEPT_CHARSET = 40 % UInt32
const WSI_TOKEN_HTTP_ACCEPT_RANGES = 41 % UInt32
const WSI_TOKEN_HTTP_ACCESS_CONTROL_ALLOW_ORIGIN = 42 % UInt32
const WSI_TOKEN_HTTP_AGE = 43 % UInt32
const WSI_TOKEN_HTTP_ALLOW = 44 % UInt32
const WSI_TOKEN_HTTP_CONTENT_DISPOSITION = 45 % UInt32
const WSI_TOKEN_HTTP_CONTENT_ENCODING = 46 % UInt32
const WSI_TOKEN_HTTP_CONTENT_LANGUAGE = 47 % UInt32
const WSI_TOKEN_HTTP_CONTENT_LOCATION = 48 % UInt32
const WSI_TOKEN_HTTP_CONTENT_RANGE = 49 % UInt32
const WSI_TOKEN_HTTP_ETAG = 50 % UInt32
const WSI_TOKEN_HTTP_EXPECT = 51 % UInt32
const WSI_TOKEN_HTTP_EXPIRES = 52 % UInt32
const WSI_TOKEN_HTTP_FROM = 53 % UInt32
const WSI_TOKEN_HTTP_IF_MATCH = 54 % UInt32
const WSI_TOKEN_HTTP_IF_RANGE = 55 % UInt32
const WSI_TOKEN_HTTP_IF_UNMODIFIED_SINCE = 56 % UInt32
const WSI_TOKEN_HTTP_LAST_MODIFIED = 57 % UInt32
const WSI_TOKEN_HTTP_LINK = 58 % UInt32
const WSI_TOKEN_HTTP_LOCATION = 59 % UInt32
const WSI_TOKEN_HTTP_MAX_FORWARDS = 60 % UInt32
const WSI_TOKEN_HTTP_PROXY_AUTHENTICATE = 61 % UInt32
const WSI_TOKEN_HTTP_PROXY_AUTHORIZATION = 62 % UInt32
const WSI_TOKEN_HTTP_REFRESH = 63 % UInt32
const WSI_TOKEN_HTTP_RETRY_AFTER = 64 % UInt32
const WSI_TOKEN_HTTP_SERVER = 65 % UInt32
const WSI_TOKEN_HTTP_SET_COOKIE = 66 % UInt32
const WSI_TOKEN_HTTP_STRICT_TRANSPORT_SECURITY = 67 % UInt32
const WSI_TOKEN_HTTP_TRANSFER_ENCODING = 68 % UInt32
const WSI_TOKEN_HTTP_USER_AGENT = 69 % UInt32
const WSI_TOKEN_HTTP_VARY = 70 % UInt32
const WSI_TOKEN_HTTP_VIA = 71 % UInt32
const WSI_TOKEN_HTTP_WWW_AUTHENTICATE = 72 % UInt32
const WSI_TOKEN_PATCH_URI = 73 % UInt32
const WSI_TOKEN_PUT_URI = 74 % UInt32
const WSI_TOKEN_DELETE_URI = 75 % UInt32
const WSI_TOKEN_HTTP_URI_ARGS = 76 % UInt32
const WSI_TOKEN_PROXY = 77 % UInt32
const WSI_TOKEN_HTTP_X_REAL_IP = 78 % UInt32
const WSI_TOKEN_HTTP1_0 = 79 % UInt32
const WSI_TOKEN_X_FORWARDED_FOR = 80 % UInt32
const WSI_TOKEN_CONNECT = 81 % UInt32
const WSI_TOKEN_HEAD_URI = 82 % UInt32
const WSI_TOKEN_TE = 83 % UInt32
const WSI_TOKEN_REPLAY_NONCE = 84 % UInt32
const WSI_TOKEN_COLON_PROTOCOL = 85 % UInt32
const WSI_TOKEN_X_AUTH_TOKEN = 86 % UInt32
const WSI_TOKEN_DSS_SIGNATURE = 87 % UInt32
const _WSI_TOKEN_CLIENT_SENT_PROTOCOLS = 88 % UInt32
const _WSI_TOKEN_CLIENT_PEER_ADDRESS = 89 % UInt32
const _WSI_TOKEN_CLIENT_URI = 90 % UInt32
const _WSI_TOKEN_CLIENT_HOST = 91 % UInt32
const _WSI_TOKEN_CLIENT_ORIGIN = 92 % UInt32
const _WSI_TOKEN_CLIENT_METHOD = 93 % UInt32
const _WSI_TOKEN_CLIENT_IFACE = 94 % UInt32
const _WSI_TOKEN_CLIENT_ALPN = 95 % UInt32
const WSI_TOKEN_COUNT = 96 % UInt32
const WSI_TOKEN_NAME_PART = 97 % UInt32
const WSI_TOKEN_UNKNOWN_VALUE_PART = 98 % UInt32
const WSI_TOKEN_SKIPPING = 99 % UInt32
const WSI_TOKEN_SKIPPING_SAW_CR = 100 % UInt32
const WSI_PARSING_COMPLETE = 101 % UInt32
const WSI_INIT_TOKEN_MUXURL = 102 % UInt32

const lws_h2_settings = UInt32
const H2SET_HEADER_TABLE_SIZE = 1 % UInt32
const H2SET_ENABLE_PUSH = 2 % UInt32
const H2SET_MAX_CONCURRENT_STREAMS = 3 % UInt32
const H2SET_INITIAL_WINDOW_SIZE = 4 % UInt32
const H2SET_MAX_FRAME_SIZE = 5 % UInt32
const H2SET_MAX_HEADER_LIST_SIZE = 6 % UInt32
const H2SET_RESERVED7 = 7 % UInt32
const H2SET_ENABLE_CONNECT_PROTOCOL = 8 % UInt32
const H2SET_COUNT = 9 % UInt32

function lws_token_to_string(token)
    @ccall libwebsockets.lws_token_to_string(token::lws_token_indexes)::Ptr{Cuchar}
end

function lws_hdr_total_length(wsi, h)
    @ccall libwebsockets.lws_hdr_total_length(wsi::Ptr{lws}, h::lws_token_indexes)::Cint
end

function lws_hdr_fragment_length(wsi, h, frag_idx)
    @ccall libwebsockets.lws_hdr_fragment_length(wsi::Ptr{lws}, h::lws_token_indexes, frag_idx::Cint)::Cint
end

function lws_hdr_copy(wsi, dest, len, h)
    @ccall libwebsockets.lws_hdr_copy(wsi::Ptr{lws}, dest::Ptr{Cchar}, len::Cint, h::lws_token_indexes)::Cint
end

function lws_hdr_copy_fragment(wsi, dest, len, h, frag_idx)
    @ccall libwebsockets.lws_hdr_copy_fragment(wsi::Ptr{lws}, dest::Ptr{Cchar}, len::Cint, h::lws_token_indexes, frag_idx::Cint)::Cint
end

function lws_hdr_custom_length(wsi, name, nlen)
    @ccall libwebsockets.lws_hdr_custom_length(wsi::Ptr{lws}, name::Ptr{Cchar}, nlen::Cint)::Cint
end

function lws_hdr_custom_copy(wsi, dst, len, name, nlen)
    @ccall libwebsockets.lws_hdr_custom_copy(wsi::Ptr{lws}, dst::Ptr{Cchar}, len::Cint, name::Ptr{Cchar}, nlen::Cint)::Cint
end

# typedef void ( * lws_hdr_custom_fe_cb_t ) ( const char * name , int nlen , void * opaque )
const lws_hdr_custom_fe_cb_t = Ptr{Cvoid}

function lws_hdr_custom_name_foreach(wsi, cb, opaque)
    @ccall libwebsockets.lws_hdr_custom_name_foreach(wsi::Ptr{lws}, cb::lws_hdr_custom_fe_cb_t, opaque::Ptr{Cvoid})::Cint
end

function lws_get_urlarg_by_name_safe(wsi, name, buf, len)
    @ccall libwebsockets.lws_get_urlarg_by_name_safe(wsi::Ptr{lws}, name::Ptr{Cchar}, buf::Ptr{Cchar}, len::Cint)::Cint
end

function lws_get_urlarg_by_name(wsi, name, buf, len)
    @ccall libwebsockets.lws_get_urlarg_by_name(wsi::Ptr{lws}, name::Ptr{Cchar}, buf::Ptr{Cchar}, len::Cint)::Ptr{Cchar}
end

function lws_add_http_header_status(wsi, code, p, _end)
    @ccall libwebsockets.lws_add_http_header_status(wsi::Ptr{lws}, code::Cuint, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_add_http_header_by_name(wsi, name, value, length, p, _end)
    @ccall libwebsockets.lws_add_http_header_by_name(wsi::Ptr{lws}, name::Ptr{Cuchar}, value::Ptr{Cuchar}, length::Cint, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_add_http_header_by_token(wsi, token, value, length, p, _end)
    @ccall libwebsockets.lws_add_http_header_by_token(wsi::Ptr{lws}, token::lws_token_indexes, value::Ptr{Cuchar}, length::Cint, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_add_http_header_content_length(wsi, content_length, p, _end)
    @ccall libwebsockets.lws_add_http_header_content_length(wsi::Ptr{lws}, content_length::lws_filepos_t, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_finalize_http_header(wsi, p, _end)
    @ccall libwebsockets.lws_finalize_http_header(wsi::Ptr{lws}, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_finalize_write_http_header(wsi, start, p, _end)
    @ccall libwebsockets.lws_finalize_write_http_header(wsi::Ptr{lws}, start::Ptr{Cuchar}, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_add_http_common_headers(wsi, code, content_type, content_len, p, _end)
    @ccall libwebsockets.lws_add_http_common_headers(wsi::Ptr{lws}, code::Cuint, content_type::Ptr{Cchar}, content_len::lws_filepos_t, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

const __JL_Ctag_33 = UInt32
const LWSHUMETH_GET = 0 % UInt32
const LWSHUMETH_POST = 1 % UInt32
const LWSHUMETH_OPTIONS = 2 % UInt32
const LWSHUMETH_PUT = 3 % UInt32
const LWSHUMETH_PATCH = 4 % UInt32
const LWSHUMETH_DELETE = 5 % UInt32
const LWSHUMETH_CONNECT = 6 % UInt32
const LWSHUMETH_HEAD = 7 % UInt32
const LWSHUMETH_COLON_PATH = 8 % UInt32

function lws_http_get_uri_and_method(wsi, puri_ptr, puri_len)
    @ccall libwebsockets.lws_http_get_uri_and_method(wsi::Ptr{lws}, puri_ptr::Ptr{Ptr{Cchar}}, puri_len::Ptr{Cint})::Cint
end

function lws_urlencode(escaped, string, len)
    @ccall libwebsockets.lws_urlencode(escaped::Ptr{Cchar}, string::Ptr{Cchar}, len::Cint)::Ptr{Cchar}
end

function lws_urldecode(string, escaped, len)
    @ccall libwebsockets.lws_urldecode(string::Ptr{Cchar}, escaped::Ptr{Cchar}, len::Cint)::Cint
end

function lws_http_date_render_from_unix(buf, len, t)
    @ccall libwebsockets.lws_http_date_render_from_unix(buf::Ptr{Cchar}, len::Csize_t, t::Ptr{time_t})::Cint
end

function lws_http_date_parse_unix(b, len, t)
    @ccall libwebsockets.lws_http_date_parse_unix(b::Ptr{Cchar}, len::Csize_t, t::Ptr{time_t})::Cint
end

function lws_http_check_retry_after(wsi, us_interval_in_out)
    @ccall libwebsockets.lws_http_check_retry_after(wsi::Ptr{lws}, us_interval_in_out::Ptr{lws_usec_t})::Cint
end

function lws_return_http_status(wsi, code, html_body)
    @ccall libwebsockets.lws_return_http_status(wsi::Ptr{lws}, code::Cuint, html_body::Ptr{Cchar})::Cint
end

function lws_http_redirect(wsi, code, loc, len, p, _end)
    @ccall libwebsockets.lws_http_redirect(wsi::Ptr{lws}, code::Cint, loc::Ptr{Cuchar}, len::Cint, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar})::Cint
end

function lws_http_transaction_completed(wsi)
    @ccall libwebsockets.lws_http_transaction_completed(wsi::Ptr{lws})::Cint
end

function lws_http_headers_detach(wsi)
    @ccall libwebsockets.lws_http_headers_detach(wsi::Ptr{lws})::Cint
end

function lws_http_mark_sse(wsi)
    @ccall libwebsockets.lws_http_mark_sse(wsi::Ptr{lws})::Cint
end

function lws_h2_client_stream_long_poll_rxonly(wsi)
    @ccall libwebsockets.lws_h2_client_stream_long_poll_rxonly(wsi::Ptr{lws})::Cint
end

function lws_http_compression_apply(wsi, name, p, _end, decomp)
    @ccall libwebsockets.lws_http_compression_apply(wsi::Ptr{lws}, name::Ptr{Cchar}, p::Ptr{Ptr{Cuchar}}, _end::Ptr{Cuchar}, decomp::Cchar)::Cint
end

function lws_http_is_redirected_to_get(wsi)
    @ccall libwebsockets.lws_http_is_redirected_to_get(wsi::Ptr{lws})::Cint
end

function lws_http_cookie_get(wsi, name, buf, max)
    @ccall libwebsockets.lws_http_cookie_get(wsi::Ptr{lws}, name::Ptr{Cchar}, buf::Ptr{Cchar}, max::Ptr{Csize_t})::Cint
end

function lws_h2_update_peer_txcredit(wsi, sid, bump)
    @ccall libwebsockets.lws_h2_update_peer_txcredit(wsi::Ptr{lws}, sid::Cuint, bump::Cint)::Cint
end

function lws_h2_get_peer_txcredit_estimate(wsi)
    @ccall libwebsockets.lws_h2_get_peer_txcredit_estimate(wsi::Ptr{lws})::Cint
end

const lws_spa_fileupload_states = UInt32
const LWS_UFS_CONTENT = 0 % UInt32
const LWS_UFS_FINAL_CONTENT = 1 % UInt32
const LWS_UFS_OPEN = 2 % UInt32
const LWS_UFS_CLOSE = 3 % UInt32

# typedef int ( * lws_spa_fileupload_cb ) ( void * data , const char * name , const char * filename , char * buf , int len , enum lws_spa_fileupload_states state )
const lws_spa_fileupload_cb = Ptr{Cvoid}

mutable struct lws_spa end

function lws_spa_create(wsi, param_names, count_params, max_storage, opt_cb, opt_data)
    @ccall libwebsockets.lws_spa_create(wsi::Ptr{lws}, param_names::Ptr{Ptr{Cchar}}, count_params::Cint, max_storage::Cint, opt_cb::lws_spa_fileupload_cb, opt_data::Ptr{Cvoid})::Ptr{lws_spa}
end

mutable struct lws_spa_create_info
    param_names::Ptr{Ptr{Cchar}}
    count_params::Cint
    max_storage::Cint
    opt_cb::lws_spa_fileupload_cb
    opt_data::Ptr{Cvoid}
    param_names_stride::Csize_t
    ac::Ptr{Ptr{lwsac}}
    ac_chunk_size::Csize_t
    lws_spa_create_info() = new()
end

const lws_spa_create_info_t = lws_spa_create_info

function lws_spa_create_via_info(wsi, info)
    @ccall libwebsockets.lws_spa_create_via_info(wsi::Ptr{lws}, info::Ptr{lws_spa_create_info_t})::Ptr{lws_spa}
end

function lws_spa_process(spa, in, len)
    @ccall libwebsockets.lws_spa_process(spa::Ptr{lws_spa}, in::Ptr{Cchar}, len::Cint)::Cint
end

function lws_spa_finalize(spa)
    @ccall libwebsockets.lws_spa_finalize(spa::Ptr{lws_spa})::Cint
end

function lws_spa_get_length(spa, n)
    @ccall libwebsockets.lws_spa_get_length(spa::Ptr{lws_spa}, n::Cint)::Cint
end

function lws_spa_get_string(spa, n)
    @ccall libwebsockets.lws_spa_get_string(spa::Ptr{lws_spa}, n::Cint)::Ptr{Cchar}
end

function lws_spa_destroy(spa)
    @ccall libwebsockets.lws_spa_destroy(spa::Ptr{lws_spa})::Cint
end

function lws_sql_purify(escaped, string, len)
    @ccall libwebsockets.lws_sql_purify(escaped::Ptr{Cchar}, string::Ptr{Cchar}, len::Csize_t)::Ptr{Cchar}
end

function lws_sql_purify_len(p)
    @ccall libwebsockets.lws_sql_purify_len(p::Ptr{Cchar})::Cint
end

function lws_json_purify(escaped, string, len, in_used)
    @ccall libwebsockets.lws_json_purify(escaped::Ptr{Cchar}, string::Ptr{Cchar}, len::Cint, in_used::Ptr{Cint})::Ptr{Cchar}
end

function lws_json_purify_len(string)
    @ccall libwebsockets.lws_json_purify_len(string::Ptr{Cchar})::Cint
end

function lws_filename_purify_inplace(filename)
    @ccall libwebsockets.lws_filename_purify_inplace(filename::Ptr{Cchar})::Cvoid
end

function lws_plat_write_cert(vhost, is_key, fd, buf, len)
    @ccall libwebsockets.lws_plat_write_cert(vhost::Ptr{lws_vhost}, is_key::Cint, fd::Cint, buf::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_plat_write_file(filename, buf, len)
    @ccall libwebsockets.lws_plat_write_file(filename::Ptr{Cchar}, buf::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_plat_read_file(filename, buf, len)
    @ccall libwebsockets.lws_plat_read_file(filename::Ptr{Cchar}, buf::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_plat_recommended_rsa_bits()
    @ccall libwebsockets.lws_plat_recommended_rsa_bits()::Cint
end

mutable struct lws_buflist end

function lws_buflist_append_segment(head, buf, len)
    @ccall libwebsockets.lws_buflist_append_segment(head::Ptr{Ptr{lws_buflist}}, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_buflist_next_segment_len(head, buf)
    @ccall libwebsockets.lws_buflist_next_segment_len(head::Ptr{Ptr{lws_buflist}}, buf::Ptr{Ptr{UInt8}})::Csize_t
end

function lws_buflist_use_segment(head, len)
    @ccall libwebsockets.lws_buflist_use_segment(head::Ptr{Ptr{lws_buflist}}, len::Csize_t)::Csize_t
end

function lws_buflist_total_len(head)
    @ccall libwebsockets.lws_buflist_total_len(head::Ptr{Ptr{lws_buflist}})::Csize_t
end

function lws_buflist_linear_copy(head, ofs, buf, len)
    @ccall libwebsockets.lws_buflist_linear_copy(head::Ptr{Ptr{lws_buflist}}, ofs::Csize_t, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_buflist_linear_use(head, buf, len)
    @ccall libwebsockets.lws_buflist_linear_use(head::Ptr{Ptr{lws_buflist}}, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_buflist_fragment_use(head, buf, len, frag_first, frag_fin)
    @ccall libwebsockets.lws_buflist_fragment_use(head::Ptr{Ptr{lws_buflist}}, buf::Ptr{UInt8}, len::Csize_t, frag_first::Ptr{Cchar}, frag_fin::Ptr{Cchar})::Cint
end

function lws_buflist_destroy_all_segments(head)
    @ccall libwebsockets.lws_buflist_destroy_all_segments(head::Ptr{Ptr{lws_buflist}})::Cvoid
end

function lws_buflist_describe(head, id, reason)
    @ccall libwebsockets.lws_buflist_describe(head::Ptr{Ptr{lws_buflist}}, id::Ptr{Cvoid}, reason::Ptr{Cchar})::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_snprintf(str, size, format, va_list...)
        :(@ccall(libwebsockets.lws_snprintf(str::Ptr{Cchar}, size::Csize_t, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

function lws_nstrstr(buf, len, name, nl)
    @ccall libwebsockets.lws_nstrstr(buf::Ptr{Cchar}, len::Csize_t, name::Ptr{Cchar}, nl::Csize_t)::Ptr{Cchar}
end

function lws_json_simple_find(buf, len, name, alen)
    @ccall libwebsockets.lws_json_simple_find(buf::Ptr{Cchar}, len::Csize_t, name::Ptr{Cchar}, alen::Ptr{Csize_t})::Ptr{Cchar}
end

function lws_json_simple_strcmp(buf, len, name, comp)
    @ccall libwebsockets.lws_json_simple_strcmp(buf::Ptr{Cchar}, len::Csize_t, name::Ptr{Cchar}, comp::Ptr{Cchar})::Cint
end

function lws_hex_to_byte_array(h, dest, max)
    @ccall libwebsockets.lws_hex_to_byte_array(h::Ptr{Cchar}, dest::Ptr{UInt8}, max::Cint)::Cint
end

function lws_hex_from_byte_array(src, slen, dest, len)
    @ccall libwebsockets.lws_hex_from_byte_array(src::Ptr{UInt8}, slen::Csize_t, dest::Ptr{Cchar}, len::Csize_t)::Cvoid
end

function lws_hex_random(context, dest, len)
    @ccall libwebsockets.lws_hex_random(context::Ptr{lws_context}, dest::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_timingsafe_bcmp(a, b, len)
    @ccall libwebsockets.lws_timingsafe_bcmp(a::Ptr{Cvoid}, b::Ptr{Cvoid}, len::UInt32)::Cint
end

function lws_get_random(context, buf, len)
    @ccall libwebsockets.lws_get_random(context::Ptr{lws_context}, buf::Ptr{Cvoid}, len::Csize_t)::Csize_t
end

function lws_daemonize(_lock_path)
    @ccall libwebsockets.lws_daemonize(_lock_path::Ptr{Cchar})::Cint
end

function lws_get_library_version()
    @ccall libwebsockets.lws_get_library_version()::Ptr{Cchar}
end

function lws_wsi_user(wsi)
    @ccall libwebsockets.lws_wsi_user(wsi::Ptr{lws})::Ptr{Cvoid}
end

function lws_wsi_tsi(wsi)
    @ccall libwebsockets.lws_wsi_tsi(wsi::Ptr{lws})::Cint
end

function lws_set_wsi_user(wsi, user)
    @ccall libwebsockets.lws_set_wsi_user(wsi::Ptr{lws}, user::Ptr{Cvoid})::Cvoid
end

function lws_parse_uri(p, prot, ads, port, path)
    @ccall libwebsockets.lws_parse_uri(p::Ptr{Cchar}, prot::Ptr{Ptr{Cchar}}, ads::Ptr{Ptr{Cchar}}, port::Ptr{Cint}, path::Ptr{Ptr{Cchar}})::Cint
end

function lws_cmdline_option(argc, argv, val)
    @ccall libwebsockets.lws_cmdline_option(argc::Cint, argv::Ptr{Ptr{Cchar}}, val::Ptr{Cchar})::Ptr{Cchar}
end

function lws_cmdline_option_handle_builtin(argc, argv, info)
    @ccall libwebsockets.lws_cmdline_option_handle_builtin(argc::Cint, argv::Ptr{Ptr{Cchar}}, info::Ptr{lws_context_creation_info})::Cvoid
end

function lws_now_secs()
    @ccall libwebsockets.lws_now_secs()::Culong
end

function lws_get_context(wsi)
    @ccall libwebsockets.lws_get_context(wsi::Ptr{lws})::Ptr{lws_context}
end

function lws_get_vhost_listen_port(vhost)
    @ccall libwebsockets.lws_get_vhost_listen_port(vhost::Ptr{lws_vhost})::Cint
end

function lws_get_count_threads(context)
    @ccall libwebsockets.lws_get_count_threads(context::Ptr{lws_context})::Cint
end

function lws_get_parent(wsi)
    @ccall libwebsockets.lws_get_parent(wsi::Ptr{lws})::Ptr{lws}
end

function lws_get_child(wsi)
    @ccall libwebsockets.lws_get_child(wsi::Ptr{lws})::Ptr{lws}
end

function lws_get_effective_uid_gid(context, uid, gid)
    @ccall libwebsockets.lws_get_effective_uid_gid(context::Ptr{lws_context}, uid::Ptr{uid_t}, gid::Ptr{gid_t})::Cvoid
end

function lws_get_udp(wsi)
    @ccall libwebsockets.lws_get_udp(wsi::Ptr{lws})::Ptr{lws_udp}
end

function lws_get_opaque_parent_data(wsi)
    @ccall libwebsockets.lws_get_opaque_parent_data(wsi::Ptr{lws})::Ptr{Cvoid}
end

function lws_set_opaque_parent_data(wsi, data)
    @ccall libwebsockets.lws_set_opaque_parent_data(wsi::Ptr{lws}, data::Ptr{Cvoid})::Cvoid
end

function lws_get_opaque_user_data(wsi)
    @ccall libwebsockets.lws_get_opaque_user_data(wsi::Ptr{lws})::Ptr{Cvoid}
end

function lws_set_opaque_user_data(wsi, data)
    @ccall libwebsockets.lws_set_opaque_user_data(wsi::Ptr{lws}, data::Ptr{Cvoid})::Cvoid
end

function lws_get_child_pending_on_writable(wsi)
    @ccall libwebsockets.lws_get_child_pending_on_writable(wsi::Ptr{lws})::Cint
end

function lws_clear_child_pending_on_writable(wsi)
    @ccall libwebsockets.lws_clear_child_pending_on_writable(wsi::Ptr{lws})::Cvoid
end

function lws_get_close_length(wsi)
    @ccall libwebsockets.lws_get_close_length(wsi::Ptr{lws})::Cint
end

function lws_get_close_payload(wsi)
    @ccall libwebsockets.lws_get_close_payload(wsi::Ptr{lws})::Ptr{Cuchar}
end

function lws_get_network_wsi(wsi)
    @ccall libwebsockets.lws_get_network_wsi(wsi::Ptr{lws})::Ptr{lws}
end

function lws_set_allocator(realloc)
    @ccall libwebsockets.lws_set_allocator(realloc::Ptr{Cvoid})::Cvoid
end

const __JL_Ctag_34 = UInt32
const LWS_RXFLOW_REASON_USER_BOOL = 1 % UInt32
const LWS_RXFLOW_REASON_HTTP_RXBUFFER = 64 % UInt32
const LWS_RXFLOW_REASON_H2_PPS_PENDING = 128 % UInt32
const LWS_RXFLOW_REASON_APPLIES = 16384 % UInt32
const LWS_RXFLOW_REASON_APPLIES_ENABLE_BIT = 8192 % UInt32
const LWS_RXFLOW_REASON_APPLIES_ENABLE = 24576 % UInt32
const LWS_RXFLOW_REASON_APPLIES_DISABLE = 16384 % UInt32
const LWS_RXFLOW_REASON_FLAG_PROCESS_NOW = 4096 % UInt32

function lws_rx_flow_control(wsi, enable)
    @ccall libwebsockets.lws_rx_flow_control(wsi::Ptr{lws}, enable::Cint)::Cint
end

function lws_rx_flow_allow_all_protocol(context, protocol)
    @ccall libwebsockets.lws_rx_flow_allow_all_protocol(context::Ptr{lws_context}, protocol::Ptr{lws_protocols})::Cvoid
end

function lws_remaining_packet_payload(wsi)
    @ccall libwebsockets.lws_remaining_packet_payload(wsi::Ptr{lws})::Csize_t
end

const lws_dir_obj_type_t = UInt32
const LDOT_UNKNOWN = 0 % UInt32
const LDOT_FILE = 1 % UInt32
const LDOT_DIR = 2 % UInt32
const LDOT_LINK = 3 % UInt32
const LDOT_FIFO = 4 % UInt32
const LDOTT_SOCKET = 5 % UInt32
const LDOT_CHAR = 6 % UInt32
const LDOT_BLOCK = 7 % UInt32

mutable struct lws_dir_entry
    name::Ptr{Cchar}
    type::lws_dir_obj_type_t
    lws_dir_entry() = new()
end

# typedef int lws_dir_callback_function ( const char * dirpath , void * user , struct lws_dir_entry * lde )
const lws_dir_callback_function = Cvoid

function lws_dir(dirpath, user, cb)
    @ccall libwebsockets.lws_dir(dirpath::Ptr{Cchar}, user::Ptr{Cvoid}, cb::lws_dir_callback_function)::Cint
end

function lws_dir_rm_rf_cb(dirpath, user, lde)
    @ccall libwebsockets.lws_dir_rm_rf_cb(dirpath::Ptr{Cchar}, user::Ptr{Cvoid}, lde::Ptr{lws_dir_entry})::Cint
end

# typedef int ( * lws_dir_glob_cb_t ) ( void * data , const char * path )
const lws_dir_glob_cb_t = Ptr{Cvoid}

mutable struct lws_dir_glob
    filter::Ptr{Cchar}
    cb::lws_dir_glob_cb_t
    user::Ptr{Cvoid}
    lws_dir_glob() = new()
end

const lws_dir_glob_t = lws_dir_glob

function lws_dir_glob_cb(dirpath, user, lde)
    @ccall libwebsockets.lws_dir_glob_cb(dirpath::Ptr{Cchar}, user::Ptr{Cvoid}, lde::Ptr{lws_dir_entry})::Cint
end

function lws_get_allocated_heap()
    @ccall libwebsockets.lws_get_allocated_heap()::Csize_t
end

function lws_get_tsi(wsi)
    @ccall libwebsockets.lws_get_tsi(wsi::Ptr{lws})::Cint
end

function lws_is_ssl(wsi)
    @ccall libwebsockets.lws_is_ssl(wsi::Ptr{lws})::Cint
end

function lws_is_cgi(wsi)
    @ccall libwebsockets.lws_is_cgi(wsi::Ptr{lws})::Cint
end

function lws_tls_jit_trust_blob_queury_skid(_blob, blen, skid, skid_len, prpder, prder_len)
    @ccall libwebsockets.lws_tls_jit_trust_blob_queury_skid(_blob::Ptr{Cvoid}, blen::Csize_t, skid::Ptr{UInt8}, skid_len::Csize_t, prpder::Ptr{Ptr{UInt8}}, prder_len::Ptr{Csize_t})::Cint
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_open(__file, __oflag, va_list...)
        :(@ccall(libwebsockets.lws_open(__file::Ptr{Cchar}, __oflag::Cint; $(to_c_type_pairs(va_list)...))::Cint))
    end

struct lws_wifi_scan
    next::Ptr{lws_wifi_scan}
    ssid::NTuple{32, Cchar}
    rssi::Int32
    bssid::NTuple{6, UInt8}
    count::UInt8
    channel::UInt8
    authmode::UInt8
end

function lws_get_ssl(wsi)
    @ccall libwebsockets.lws_get_ssl(wsi::Ptr{lws})::Ptr{SSL}
end

function lws_explicit_bzero(p, len)
    @ccall libwebsockets.lws_explicit_bzero(p::Ptr{Cvoid}, len::Csize_t)::Cvoid
end

mutable struct lws_humanize_unit
    name::Ptr{Cchar}
    factor::UInt64
    lws_humanize_unit() = new()
end

const lws_humanize_unit_t = lws_humanize_unit

function lws_humanize(buf, len, value, schema)
    @ccall libwebsockets.lws_humanize(buf::Ptr{Cchar}, len::Csize_t, value::UInt64, schema::Ptr{lws_humanize_unit_t})::Cint
end

function lws_ser_wu16be(b, u)
    @ccall libwebsockets.lws_ser_wu16be(b::Ptr{UInt8}, u::UInt16)::Cvoid
end

function lws_ser_wu32be(b, u32)
    @ccall libwebsockets.lws_ser_wu32be(b::Ptr{UInt8}, u32::UInt32)::Cvoid
end

function lws_ser_wu64be(b, u64)
    @ccall libwebsockets.lws_ser_wu64be(b::Ptr{UInt8}, u64::UInt64)::Cvoid
end

function lws_ser_ru16be(b)
    @ccall libwebsockets.lws_ser_ru16be(b::Ptr{UInt8})::UInt16
end

function lws_ser_ru32be(b)
    @ccall libwebsockets.lws_ser_ru32be(b::Ptr{UInt8})::UInt32
end

function lws_ser_ru64be(b)
    @ccall libwebsockets.lws_ser_ru64be(b::Ptr{UInt8})::UInt64
end

function lws_vbi_encode(value, buf)
    @ccall libwebsockets.lws_vbi_encode(value::UInt64, buf::Ptr{Cvoid})::Cint
end

function lws_vbi_decode(buf, value, len)
    @ccall libwebsockets.lws_vbi_decode(buf::Ptr{Cvoid}, value::Ptr{UInt64}, len::Csize_t)::Cint
end

mutable struct lws_fsmount
    layers_path::Ptr{Cchar}
    overlay_path::Ptr{Cchar}
    mp::NTuple{256, Cchar}
    ovname::NTuple{64, Cchar}
    distro::NTuple{64, Cchar}
    lws_fsmount() = new()
end

function lws_fsmount_mount(fsm)
    @ccall libwebsockets.lws_fsmount_mount(fsm::Ptr{lws_fsmount})::Cint
end

function lws_fsmount_unmount(fsm)
    @ccall libwebsockets.lws_fsmount_unmount(fsm::Ptr{lws_fsmount})::Cint
end

function lws_dsh_create(owner, buffer_size, count_kinds)
    @ccall libwebsockets.lws_dsh_create(owner::Ptr{lws_dll2_owner_t}, buffer_size::Csize_t, count_kinds::Cint)::Ptr{lws_dsh}
end

function lws_dsh_destroy(pdsh)
    @ccall libwebsockets.lws_dsh_destroy(pdsh::Ptr{Ptr{lws_dsh}})::Cvoid
end

function lws_dsh_alloc_tail(dsh, kind, src1, size1, src2, size2)
    @ccall libwebsockets.lws_dsh_alloc_tail(dsh::Ptr{lws_dsh}, kind::Cint, src1::Ptr{Cvoid}, size1::Csize_t, src2::Ptr{Cvoid}, size2::Csize_t)::Cint
end

function lws_dsh_free(obj)
    @ccall libwebsockets.lws_dsh_free(obj::Ptr{Ptr{Cvoid}})::Cvoid
end

function lws_dsh_get_size(dsh, kind)
    @ccall libwebsockets.lws_dsh_get_size(dsh::Ptr{lws_dsh}, kind::Cint)::Csize_t
end

function lws_dsh_get_head(dsh, kind, obj, size)
    @ccall libwebsockets.lws_dsh_get_head(dsh::Ptr{lws_dsh}, kind::Cint, obj::Ptr{Ptr{Cvoid}}, size::Ptr{Csize_t})::Cint
end

function lws_dsh_describe(dsh, desc)
    @ccall libwebsockets.lws_dsh_describe(dsh::Ptr{lws_dsh}, desc::Ptr{Cchar})::Cvoid
end

function lws_service(context, timeout_ms)
    @ccall libwebsockets.lws_service(context::Ptr{lws_context}, timeout_ms::Cint)::Cint
end

function lws_cancel_service_pt(wsi)
    @ccall libwebsockets.lws_cancel_service_pt(wsi::Ptr{lws})::Cvoid
end

function lws_cancel_service(context)
    @ccall libwebsockets.lws_cancel_service(context::Ptr{lws_context})::Cvoid
end

function lws_service_fd(context, pollfd)
    @ccall libwebsockets.lws_service_fd(context::Ptr{lws_context}, pollfd::Ptr{Cvoid})::Cint
end

function lws_service_fd_tsi(context, pollfd, tsi)
    @ccall libwebsockets.lws_service_fd_tsi(context::Ptr{lws_context}, pollfd::Ptr{Cvoid}, tsi::Cint)::Cint
end

function lws_service_adjust_timeout(context, timeout_ms, tsi)
    @ccall libwebsockets.lws_service_adjust_timeout(context::Ptr{lws_context}, timeout_ms::Cint, tsi::Cint)::Cint
end

function lws_handle_POLLOUT_event(wsi, pollfd)
    @ccall libwebsockets.lws_handle_POLLOUT_event(wsi::Ptr{lws}, pollfd::Ptr{Cvoid})::Cint
end

mutable struct lws_write_passthru
    wsi::Ptr{lws}
    buf::Ptr{Cuchar}
    len::Csize_t
    wp::lws_write_protocol
    lws_write_passthru() = new()
end

function lws_write_ws_flags(initial, is_start, is_end)
    @ccall libwebsockets.lws_write_ws_flags(initial::Cint, is_start::Cint, is_end::Cint)::Cint
end

function lws_raw_transaction_completed(wsi)
    @ccall libwebsockets.lws_raw_transaction_completed(wsi::Ptr{lws})::Cint
end

function lws_callback_on_writable(wsi)
    @ccall libwebsockets.lws_callback_on_writable(wsi::Ptr{lws})::Cint
end

function lws_callback_on_writable_all_protocol(context, protocol)
    @ccall libwebsockets.lws_callback_on_writable_all_protocol(context::Ptr{lws_context}, protocol::Ptr{lws_protocols})::Cint
end

function lws_callback_on_writable_all_protocol_vhost(vhost, protocol)
    @ccall libwebsockets.lws_callback_on_writable_all_protocol_vhost(vhost::Ptr{lws_vhost}, protocol::Ptr{lws_protocols})::Cint
end

function lws_callback_all_protocol(context, protocol, reason)
    @ccall libwebsockets.lws_callback_all_protocol(context::Ptr{lws_context}, protocol::Ptr{lws_protocols}, reason::Cint)::Cint
end

function lws_callback_all_protocol_vhost(vh, protocol, reason)
    @ccall libwebsockets.lws_callback_all_protocol_vhost(vh::Ptr{lws_vhost}, protocol::Ptr{lws_protocols}, reason::Cint)::Cint
end

function lws_callback_all_protocol_vhost_args(vh, protocol, reason, argp, len)
    @ccall libwebsockets.lws_callback_all_protocol_vhost_args(vh::Ptr{lws_vhost}, protocol::Ptr{lws_protocols}, reason::Cint, argp::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_callback_vhost_protocols(wsi, reason, in, len)
    @ccall libwebsockets.lws_callback_vhost_protocols(wsi::Ptr{lws}, reason::Cint, in::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_callback_vhost_protocols_vhost(vh, reason, in, len)
    @ccall libwebsockets.lws_callback_vhost_protocols_vhost(vh::Ptr{lws_vhost}, reason::Cint, in::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_callback_http_dummy(wsi, reason, user, in, len)
    @ccall libwebsockets.lws_callback_http_dummy(wsi::Ptr{lws}, reason::lws_callback_reasons, user::Ptr{Cvoid}, in::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_get_socket_fd(wsi)
    @ccall libwebsockets.lws_get_socket_fd(wsi::Ptr{lws})::lws_sockfd_type
end

function lws_get_peer_write_allowance(wsi)
    @ccall libwebsockets.lws_get_peer_write_allowance(wsi::Ptr{lws})::lws_fileofs_t
end

function lws_wsi_tx_credit(wsi, peer_to_us, add)
    @ccall libwebsockets.lws_wsi_tx_credit(wsi::Ptr{lws}, peer_to_us::Cchar, add::Cint)::Cint
end

function lws_ring_create(element_len, count, destroy_element)
    @ccall libwebsockets.lws_ring_create(element_len::Csize_t, count::Csize_t, destroy_element::Ptr{Cvoid})::Ptr{lws_ring}
end

function lws_ring_destroy(ring)
    @ccall libwebsockets.lws_ring_destroy(ring::Ptr{lws_ring})::Cvoid
end

function lws_ring_get_count_free_elements(ring)
    @ccall libwebsockets.lws_ring_get_count_free_elements(ring::Ptr{lws_ring})::Csize_t
end

function lws_ring_insert(ring, src, max_count)
    @ccall libwebsockets.lws_ring_insert(ring::Ptr{lws_ring}, src::Ptr{Cvoid}, max_count::Csize_t)::Csize_t
end

function lws_ring_get_element(ring, tail)
    @ccall libwebsockets.lws_ring_get_element(ring::Ptr{lws_ring}, tail::Ptr{UInt32})::Ptr{Cvoid}
end

function lws_ring_next_linear_insert_range(ring, start, bytes)
    @ccall libwebsockets.lws_ring_next_linear_insert_range(ring::Ptr{lws_ring}, start::Ptr{Ptr{Cvoid}}, bytes::Ptr{Csize_t})::Cint
end

function lws_ring_bump_head(ring, bytes)
    @ccall libwebsockets.lws_ring_bump_head(ring::Ptr{lws_ring}, bytes::Csize_t)::Cvoid
end

function lws_ring_dump(ring, tail)
    @ccall libwebsockets.lws_ring_dump(ring::Ptr{lws_ring}, tail::Ptr{UInt32})::Cvoid
end

function lws_SHA1(d, n, md)
    @ccall libwebsockets.lws_SHA1(d::Ptr{Cuchar}, n::Csize_t, md::Ptr{Cuchar})::Ptr{Cuchar}
end

function lws_b64_encode_string(in, in_len, out, out_size)
    @ccall libwebsockets.lws_b64_encode_string(in::Ptr{Cchar}, in_len::Cint, out::Ptr{Cchar}, out_size::Cint)::Cint
end

function lws_b64_encode_string_url(in, in_len, out, out_size)
    @ccall libwebsockets.lws_b64_encode_string_url(in::Ptr{Cchar}, in_len::Cint, out::Ptr{Cchar}, out_size::Cint)::Cint
end

function lws_b64_decode_string(in, out, out_size)
    @ccall libwebsockets.lws_b64_decode_string(in::Ptr{Cchar}, out::Ptr{Cchar}, out_size::Cint)::Cint
end

function lws_b64_decode_string_len(in, in_len, out, out_size)
    @ccall libwebsockets.lws_b64_decode_string_len(in::Ptr{Cchar}, in_len::Cint, out::Ptr{Cchar}, out_size::Cint)::Cint
end

struct lws_b64state
    quad::NTuple{4, Cuchar}
    done::Csize_t
    len::Csize_t
    i::Cint
    c::Cint
end

function lws_b64_decode_state_init(state)
    @ccall libwebsockets.lws_b64_decode_state_init(state::Ptr{lws_b64state})::Cvoid
end

function lws_b64_decode_stateful(s, in, in_len, out, out_size, final)
    @ccall libwebsockets.lws_b64_decode_stateful(s::Ptr{lws_b64state}, in::Ptr{Cchar}, in_len::Ptr{Csize_t}, out::Ptr{UInt8}, out_size::Ptr{Csize_t}, final::Cint)::Cint
end

const lws_tls_cert_info = UInt32
const LWS_TLS_CERT_INFO_VALIDITY_FROM = 0 % UInt32
const LWS_TLS_CERT_INFO_VALIDITY_TO = 1 % UInt32
const LWS_TLS_CERT_INFO_COMMON_NAME = 2 % UInt32
const LWS_TLS_CERT_INFO_ISSUER_NAME = 3 % UInt32
const LWS_TLS_CERT_INFO_USAGE = 4 % UInt32
const LWS_TLS_CERT_INFO_VERIFIED = 5 % UInt32
const LWS_TLS_CERT_INFO_OPAQUE_PUBLIC_KEY = 6 % UInt32
const LWS_TLS_CERT_INFO_DER_RAW = 7 % UInt32
const LWS_TLS_CERT_INFO_AUTHORITY_KEY_ID = 8 % UInt32
const LWS_TLS_CERT_INFO_AUTHORITY_KEY_ID_ISSUER = 9 % UInt32
const LWS_TLS_CERT_INFO_AUTHORITY_KEY_ID_SERIAL = 10 % UInt32
const LWS_TLS_CERT_INFO_SUBJECT_KEY_ID = 11 % UInt32

struct lws_tls_cert_info_results
    data::NTuple{72, UInt8}
end

function Base.getproperty(x::Ptr{lws_tls_cert_info_results}, f::Symbol)
    f === :verified && return Ptr{Cuint}(x + 0)
    f === :time && return Ptr{time_t}(x + 0)
    f === :usage && return Ptr{Cuint}(x + 0)
    f === :ns && return Ptr{__JL_Ctag_90}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::lws_tls_cert_info_results, f::Symbol)
    r = Ref{lws_tls_cert_info_results}(x)
    ptr = Base.unsafe_convert(Ptr{lws_tls_cert_info_results}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_tls_cert_info_results}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

mutable struct lws_x509_cert end

function lws_x509_create(x509)
    @ccall libwebsockets.lws_x509_create(x509::Ptr{Ptr{lws_x509_cert}})::Cint
end

function lws_x509_parse_from_pem(x509, pem, len)
    @ccall libwebsockets.lws_x509_parse_from_pem(x509::Ptr{lws_x509_cert}, pem::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_x509_verify(x509, trusted, common_name)
    @ccall libwebsockets.lws_x509_verify(x509::Ptr{lws_x509_cert}, trusted::Ptr{lws_x509_cert}, common_name::Ptr{Cchar})::Cint
end

struct lws_gencrypto_keyelem
    buf::Ptr{UInt8}
    len::UInt32
end

struct lws_jwk
    e::NTuple{12, lws_gencrypto_keyelem}
    meta::NTuple{6, lws_gencrypto_keyelem}
    kty::Cint
    private_key::Cchar
end

function lws_x509_public_to_jwk(jwk, x509, curves, rsabits)
    @ccall libwebsockets.lws_x509_public_to_jwk(jwk::Ptr{lws_jwk}, x509::Ptr{lws_x509_cert}, curves::Ptr{Cchar}, rsabits::Cint)::Cint
end

function lws_x509_jwk_privkey_pem(cx, jwk, pem, len, passphrase)
    @ccall libwebsockets.lws_x509_jwk_privkey_pem(cx::Ptr{lws_context}, jwk::Ptr{lws_jwk}, pem::Ptr{Cvoid}, len::Csize_t, passphrase::Ptr{Cchar})::Cint
end

function lws_x509_destroy(x509)
    @ccall libwebsockets.lws_x509_destroy(x509::Ptr{Ptr{lws_x509_cert}})::Cvoid
end

function lws_x509_info(x509, type, buf, len)
    @ccall libwebsockets.lws_x509_info(x509::Ptr{lws_x509_cert}, type::lws_tls_cert_info, buf::Ptr{lws_tls_cert_info_results}, len::Csize_t)::Cint
end

function lws_tls_peer_cert_info(wsi, type, buf, len)
    @ccall libwebsockets.lws_tls_peer_cert_info(wsi::Ptr{lws}, type::lws_tls_cert_info, buf::Ptr{lws_tls_cert_info_results}, len::Csize_t)::Cint
end

function lws_tls_vhost_cert_info(vhost, type, buf, len)
    @ccall libwebsockets.lws_tls_vhost_cert_info(vhost::Ptr{lws_vhost}, type::lws_tls_cert_info, buf::Ptr{lws_tls_cert_info_results}, len::Csize_t)::Cint
end

function lws_tls_acme_sni_cert_create(vhost, san_a, san_b)
    @ccall libwebsockets.lws_tls_acme_sni_cert_create(vhost::Ptr{lws_vhost}, san_a::Ptr{Cchar}, san_b::Ptr{Cchar})::Cint
end

function lws_tls_acme_sni_csr_create(context, elements, csr, csr_len, privkey_pem, privkey_len)
    @ccall libwebsockets.lws_tls_acme_sni_csr_create(context::Ptr{lws_context}, elements::Ptr{Ptr{Cchar}}, csr::Ptr{UInt8}, csr_len::Csize_t, privkey_pem::Ptr{Ptr{Cchar}}, privkey_len::Ptr{Csize_t})::Cint
end

function lws_tls_cert_updated(context, certpath, keypath, mem_cert, len_mem_cert, mem_privkey, len_mem_privkey)
    @ccall libwebsockets.lws_tls_cert_updated(context::Ptr{lws_context}, certpath::Ptr{Cchar}, keypath::Ptr{Cchar}, mem_cert::Ptr{Cchar}, len_mem_cert::Csize_t, mem_privkey::Ptr{Cchar}, len_mem_privkey::Csize_t)::Cint
end

const lws_enum_stdinouterr = UInt32
const LWS_STDIN = 0 % UInt32
const LWS_STDOUT = 1 % UInt32
const LWS_STDERR = 2 % UInt32

const lws_cgi_hdr_state = UInt32
const LCHS_HEADER = 0 % UInt32
const LCHS_CR1 = 1 % UInt32
const LCHS_LF1 = 2 % UInt32
const LCHS_CR2 = 3 % UInt32
const LCHS_LF2 = 4 % UInt32
const LHCS_RESPONSE = 5 % UInt32
const LHCS_DUMP_HEADERS = 6 % UInt32
const LHCS_PAYLOAD = 7 % UInt32
const LCHS_SINGLE_0A = 8 % UInt32

mutable struct lws_cgi_args
    stdwsi::Ptr{Ptr{lws}}
    ch::lws_enum_stdinouterr
    data::Ptr{Cuchar}
    hdr_state::lws_cgi_hdr_state
    len::Cint
    lws_cgi_args() = new()
end

mutable struct lws_fop_fd
    fd::lws_filefd_type
    fops::Ptr{lws_plat_file_ops}
    filesystem_priv::Ptr{Cvoid}
    pos::lws_filepos_t
    len::lws_filepos_t
    flags::lws_fop_flags_t
    mod_time::UInt32
    lws_fop_fd() = new()
end

const lws_fop_fd_t = Ptr{lws_fop_fd}

function lws_get_fops(context)
    @ccall libwebsockets.lws_get_fops(context::Ptr{lws_context})::Ptr{lws_plat_file_ops}
end

function lws_set_fops(context, fops)
    @ccall libwebsockets.lws_set_fops(context::Ptr{lws_context}, fops::Ptr{lws_plat_file_ops})::Cvoid
end

function lws_vfs_tell(fop_fd)
    @ccall libwebsockets.lws_vfs_tell(fop_fd::lws_fop_fd_t)::lws_filepos_t
end

function lws_vfs_get_length(fop_fd)
    @ccall libwebsockets.lws_vfs_get_length(fop_fd::lws_fop_fd_t)::lws_filepos_t
end

function lws_vfs_get_mod_time(fop_fd)
    @ccall libwebsockets.lws_vfs_get_mod_time(fop_fd::lws_fop_fd_t)::UInt32
end

function lws_vfs_file_seek_set(fop_fd, offset)
    @ccall libwebsockets.lws_vfs_file_seek_set(fop_fd::lws_fop_fd_t, offset::lws_fileofs_t)::lws_fileofs_t
end

function lws_vfs_file_seek_end(fop_fd, offset)
    @ccall libwebsockets.lws_vfs_file_seek_end(fop_fd::lws_fop_fd_t, offset::lws_fileofs_t)::lws_fileofs_t
end

function lws_vfs_file_open(fops, vfs_path, flags)
    @ccall libwebsockets.lws_vfs_file_open(fops::Ptr{lws_plat_file_ops}, vfs_path::Ptr{Cchar}, flags::Ptr{lws_fop_flags_t})::lws_fop_fd_t
end

function lws_vfs_file_close(fop_fd)
    @ccall libwebsockets.lws_vfs_file_close(fop_fd::Ptr{lws_fop_fd_t})::Cint
end

function lws_vfs_file_seek_cur(fop_fd, offset)
    @ccall libwebsockets.lws_vfs_file_seek_cur(fop_fd::lws_fop_fd_t, offset::lws_fileofs_t)::lws_fileofs_t
end

function lws_vfs_file_read(fop_fd, amount, buf, len)
    @ccall libwebsockets.lws_vfs_file_read(fop_fd::lws_fop_fd_t, amount::Ptr{lws_filepos_t}, buf::Ptr{UInt8}, len::lws_filepos_t)::Cint
end

function lws_vfs_file_write(fop_fd, amount, buf, len)
    @ccall libwebsockets.lws_vfs_file_write(fop_fd::lws_fop_fd_t, amount::Ptr{lws_filepos_t}, buf::Ptr{UInt8}, len::lws_filepos_t)::Cint
end

function _lws_plat_file_open(fops, filename, vpath, flags)
    @ccall libwebsockets._lws_plat_file_open(fops::Ptr{lws_plat_file_ops}, filename::Ptr{Cchar}, vpath::Ptr{Cchar}, flags::Ptr{lws_fop_flags_t})::lws_fop_fd_t
end

function _lws_plat_file_close(fop_fd)
    @ccall libwebsockets._lws_plat_file_close(fop_fd::Ptr{lws_fop_fd_t})::Cint
end

function _lws_plat_file_seek_cur(fop_fd, offset)
    @ccall libwebsockets._lws_plat_file_seek_cur(fop_fd::lws_fop_fd_t, offset::lws_fileofs_t)::lws_fileofs_t
end

function _lws_plat_file_read(fop_fd, amount, buf, len)
    @ccall libwebsockets._lws_plat_file_read(fop_fd::lws_fop_fd_t, amount::Ptr{lws_filepos_t}, buf::Ptr{UInt8}, len::lws_filepos_t)::Cint
end

function _lws_plat_file_write(fop_fd, amount, buf, len)
    @ccall libwebsockets._lws_plat_file_write(fop_fd::lws_fop_fd_t, amount::Ptr{lws_filepos_t}, buf::Ptr{UInt8}, len::lws_filepos_t)::Cint
end

function lws_alloc_vfs_file(context, filename, buf, amount)
    @ccall libwebsockets.lws_alloc_vfs_file(context::Ptr{lws_context}, filename::Ptr{Cchar}, buf::Ptr{Ptr{UInt8}}, amount::Ptr{lws_filepos_t})::Cint
end

const lws_gencrypto_kty = UInt32
const LWS_GENCRYPTO_KTY_UNKNOWN = 0 % UInt32
const LWS_GENCRYPTO_KTY_OCT = 1 % UInt32
const LWS_GENCRYPTO_KTY_RSA = 2 % UInt32
const LWS_GENCRYPTO_KTY_EC = 3 % UInt32

const lws_gencrypto_oct_tok = UInt32
const LWS_GENCRYPTO_OCT_KEYEL_K = 0 % UInt32
const LWS_GENCRYPTO_OCT_KEYEL_COUNT = 1 % UInt32

const lws_gencrypto_rsa_tok = UInt32
const LWS_GENCRYPTO_RSA_KEYEL_E = 0 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_N = 1 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_D = 2 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_P = 3 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_Q = 4 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_DP = 5 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_DQ = 6 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_QI = 7 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_OTHER = 8 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_RI = 9 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_DI = 10 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_TI = 11 % UInt32
const LWS_GENCRYPTO_RSA_KEYEL_COUNT = 12 % UInt32

const lws_gencrypto_ec_tok = UInt32
const LWS_GENCRYPTO_EC_KEYEL_CRV = 0 % UInt32
const LWS_GENCRYPTO_EC_KEYEL_X = 1 % UInt32
const LWS_GENCRYPTO_EC_KEYEL_D = 2 % UInt32
const LWS_GENCRYPTO_EC_KEYEL_Y = 3 % UInt32
const LWS_GENCRYPTO_EC_KEYEL_COUNT = 4 % UInt32

const lws_gencrypto_aes_tok = UInt32
const LWS_GENCRYPTO_AES_KEYEL_K = 0 % UInt32
const LWS_GENCRYPTO_AES_KEYEL_COUNT = 1 % UInt32

const lws_gc_elem_t = lws_gencrypto_keyelem

function lws_gencrypto_bits_to_bytes(bits)
    @ccall libwebsockets.lws_gencrypto_bits_to_bytes(bits::Cint)::Cint
end

function lws_base64_size(bytes)
    @ccall libwebsockets.lws_base64_size(bytes::Cint)::Cint
end

function lws_gencrypto_padded_length(block_size, len)
    @ccall libwebsockets.lws_gencrypto_padded_length(block_size::Csize_t, len::Csize_t)::Csize_t
end

const lejp_states = UInt32
const LEJP_IDLE = 0 % UInt32
const LEJP_MEMBERS = 1 % UInt32
const LEJP_M_P = 2 % UInt32
const LEJP_MP_STRING = 67 % UInt32
const LEJP_MP_STRING_ESC = 68 % UInt32
const LEJP_MP_STRING_ESC_U1 = 69 % UInt32
const LEJP_MP_STRING_ESC_U2 = 70 % UInt32
const LEJP_MP_STRING_ESC_U3 = 71 % UInt32
const LEJP_MP_STRING_ESC_U4 = 72 % UInt32
const LEJP_MP_DELIM = 9 % UInt32
const LEJP_MP_VALUE = 10 % UInt32
const LEJP_MP_VALUE_NUM_INT = 75 % UInt32
const LEJP_MP_VALUE_NUM_EXP = 76 % UInt32
const LEJP_MP_VALUE_TOK = 77 % UInt32
const LEJP_MP_COMMA_OR_END = 14 % UInt32
const LEJP_MP_ARRAY_END = 15 % UInt32

const lejp_reasons = Int32
const LEJP_CONTINUE = -1 % Int32
const LEJP_REJECT_IDLE_NO_BRACE = -2 % Int32
const LEJP_REJECT_MEMBERS_NO_CLOSE = -3 % Int32
const LEJP_REJECT_MP_NO_OPEN_QUOTE = -4 % Int32
const LEJP_REJECT_MP_STRING_UNDERRUN = -5 % Int32
const LEJP_REJECT_MP_ILLEGAL_CTRL = -6 % Int32
const LEJP_REJECT_MP_STRING_ESC_ILLEGAL_ESC = -7 % Int32
const LEJP_REJECT_ILLEGAL_HEX = -8 % Int32
const LEJP_REJECT_MP_DELIM_MISSING_COLON = -9 % Int32
const LEJP_REJECT_MP_DELIM_BAD_VALUE_START = -10 % Int32
const LEJP_REJECT_MP_VAL_NUM_INT_NO_FRAC = -11 % Int32
const LEJP_REJECT_MP_VAL_NUM_FORMAT = -12 % Int32
const LEJP_REJECT_MP_VAL_NUM_EXP_BAD_EXP = -13 % Int32
const LEJP_REJECT_MP_VAL_TOK_UNKNOWN = -14 % Int32
const LEJP_REJECT_MP_C_OR_E_UNDERF = -15 % Int32
const LEJP_REJECT_MP_C_OR_E_NOTARRAY = -16 % Int32
const LEJP_REJECT_MP_ARRAY_END_MISSING = -17 % Int32
const LEJP_REJECT_STACK_OVERFLOW = -18 % Int32
const LEJP_REJECT_MP_DELIM_ISTACK = -19 % Int32
const LEJP_REJECT_NUM_TOO_LONG = -20 % Int32
const LEJP_REJECT_MP_C_OR_E_NEITHER = -21 % Int32
const LEJP_REJECT_UNKNOWN = -22 % Int32
const LEJP_REJECT_CALLBACK = -23 % Int32

const lejp_callbacks = UInt32
const LEJPCB_CONSTRUCTED = 0 % UInt32
const LEJPCB_DESTRUCTED = 1 % UInt32
const LEJPCB_START = 2 % UInt32
const LEJPCB_COMPLETE = 3 % UInt32
const LEJPCB_FAILED = 4 % UInt32
const LEJPCB_PAIR_NAME = 5 % UInt32
const LEJPCB_VAL_TRUE = 70 % UInt32
const LEJPCB_VAL_FALSE = 71 % UInt32
const LEJPCB_VAL_NULL = 72 % UInt32
const LEJPCB_VAL_NUM_INT = 73 % UInt32
const LEJPCB_VAL_NUM_FLOAT = 74 % UInt32
const LEJPCB_VAL_STR_START = 11 % UInt32
const LEJPCB_VAL_STR_CHUNK = 76 % UInt32
const LEJPCB_VAL_STR_END = 77 % UInt32
const LEJPCB_ARRAY_START = 14 % UInt32
const LEJPCB_ARRAY_END = 15 % UInt32
const LEJPCB_OBJECT_START = 16 % UInt32
const LEJPCB_OBJECT_END = 17 % UInt32

struct _lejp_parsing_stack
    user::Ptr{Cvoid}
    callback::Ptr{Cvoid}
    paths::Ptr{Ptr{Cchar}}
    count_paths::UInt8
    ppos::UInt8
    path_match::UInt8
end

struct _lejp_stack
    s::Cchar
    p::Cchar
    i::Cchar
    b::Cchar
end

struct lejp_ctx
    user::Ptr{Cvoid}
    pst::NTuple{5, _lejp_parsing_stack}
    st::NTuple{12, _lejp_stack}
    i::NTuple{8, UInt16}
    wild::NTuple{8, UInt16}
    path::NTuple{128, Cchar}
    buf::NTuple{255, Cchar}
    path_stride::Csize_t
    line::UInt32
    uni::UInt16
    npos::UInt8
    dcount::UInt8
    f::UInt8
    sp::UInt8
    ipos::UInt8
    count_paths::UInt8
    path_match::UInt8
    path_match_len::UInt8
    wildcount::UInt8
    pst_sp::UInt8
    outer_array::UInt8
end

function _lejp_callback(ctx, reason)
    @ccall libwebsockets._lejp_callback(ctx::Ptr{lejp_ctx}, reason::Cchar)::Int8
end

# typedef signed char ( * lejp_callback ) ( struct lejp_ctx * ctx , char reason )
const lejp_callback = Ptr{Cvoid}

const num_flags = UInt32
const LEJP_SEEN_MINUS = 1 % UInt32
const LEJP_SEEN_POINT = 2 % UInt32
const LEJP_SEEN_POST_POINT = 4 % UInt32
const LEJP_SEEN_EXP = 8 % UInt32

function lejp_construct(ctx, callback, user, paths, paths_count)
    @ccall libwebsockets.lejp_construct(ctx::Ptr{lejp_ctx}, callback::Ptr{Cvoid}, user::Ptr{Cvoid}, paths::Ptr{Ptr{Cchar}}, paths_count::Cuchar)::Cvoid
end

function lejp_destruct(ctx)
    @ccall libwebsockets.lejp_destruct(ctx::Ptr{lejp_ctx})::Cvoid
end

function lejp_parse(ctx, json, len)
    @ccall libwebsockets.lejp_parse(ctx::Ptr{lejp_ctx}, json::Ptr{Cuchar}, len::Cint)::Cint
end

function lejp_change_callback(ctx, callback)
    @ccall libwebsockets.lejp_change_callback(ctx::Ptr{lejp_ctx}, callback::Ptr{Cvoid})::Cvoid
end

function lejp_parser_push(ctx, user, paths, paths_count, lejp_cb)
    @ccall libwebsockets.lejp_parser_push(ctx::Ptr{lejp_ctx}, user::Ptr{Cvoid}, paths::Ptr{Ptr{Cchar}}, paths_count::Cuchar, lejp_cb::lejp_callback)::Cint
end

function lejp_parser_pop(ctx)
    @ccall libwebsockets.lejp_parser_pop(ctx::Ptr{lejp_ctx})::Cint
end

function lejp_check_path_match(ctx)
    @ccall libwebsockets.lejp_check_path_match(ctx::Ptr{lejp_ctx})::Cvoid
end

function lejp_get_wildcard(ctx, wildcard, dest, len)
    @ccall libwebsockets.lejp_get_wildcard(ctx::Ptr{lejp_ctx}, wildcard::Cint, dest::Ptr{Cchar}, len::Cint)::Cint
end

function lejp_error_to_string(e)
    @ccall libwebsockets.lejp_error_to_string(e::Cint)::Ptr{Cchar}
end

const __JL_Ctag_36 = UInt32
const LWS_CBOR_MAJTYP_UINT = 0 % UInt32
const LWS_CBOR_MAJTYP_INT_NEG = 32 % UInt32
const LWS_CBOR_MAJTYP_BSTR = 64 % UInt32
const LWS_CBOR_MAJTYP_TSTR = 96 % UInt32
const LWS_CBOR_MAJTYP_ARRAY = 128 % UInt32
const LWS_CBOR_MAJTYP_MAP = 160 % UInt32
const LWS_CBOR_MAJTYP_TAG = 192 % UInt32
const LWS_CBOR_MAJTYP_FLOAT = 224 % UInt32
const LWS_CBOR_MAJTYP_MASK = 224 % UInt32
const LWS_CBOR_1 = 24 % UInt32
const LWS_CBOR_2 = 25 % UInt32
const LWS_CBOR_4 = 26 % UInt32
const LWS_CBOR_8 = 27 % UInt32
const LWS_CBOR_RESERVED = 28 % UInt32
const LWS_CBOR_SUBMASK = 31 % UInt32
const LWS_CBOR_SWK_FALSE = 20 % UInt32
const LWS_CBOR_SWK_TRUE = 21 % UInt32
const LWS_CBOR_SWK_NULL = 22 % UInt32
const LWS_CBOR_SWK_UNDEFINED = 23 % UInt32
const LWS_CBOR_M7_SUBTYP_SIMPLE_X8 = 24 % UInt32
const LWS_CBOR_M7_SUBTYP_FLOAT16 = 25 % UInt32
const LWS_CBOR_M7_SUBTYP_FLOAT32 = 26 % UInt32
const LWS_CBOR_M7_SUBTYP_FLOAT64 = 27 % UInt32
const LWS_CBOR_M7_BREAK = 31 % UInt32
const LWS_CBOR_INDETERMINITE = 31 % UInt32
const LWS_CBOR_WKTAG_DATETIME_STD = 0 % UInt32
const LWS_CBOR_WKTAG_DATETIME_EPOCH = 1 % UInt32
const LWS_CBOR_WKTAG_BIGNUM_UNSIGNED = 2 % UInt32
const LWS_CBOR_WKTAG_BIGNUM_NEGATIVE = 3 % UInt32
const LWS_CBOR_WKTAG_DECIMAL_FRAC = 4 % UInt32
const LWS_CBOR_WKTAG_BIGFLOAT = 5 % UInt32
const LWS_CBOR_WKTAG_COSE_ENC0 = 16 % UInt32
const LWS_CBOR_WKTAG_COSE_MAC0 = 17 % UInt32
const LWS_CBOR_WKTAG_COSE_SIGN1 = 18 % UInt32
const LWS_CBOR_WKTAG_TO_B64U = 21 % UInt32
const LWS_CBOR_WKTAG_TO_B64 = 22 % UInt32
const LWS_CBOR_WKTAG_TO_B16 = 23 % UInt32
const LWS_CBOR_WKTAG_CBOR = 24 % UInt32
const LWS_CBOR_WKTAG_URI = 32 % UInt32
const LWS_CBOR_WKTAG_B64U = 33 % UInt32
const LWS_CBOR_WKTAG_B64 = 34 % UInt32
const LWS_CBOR_WKTAG_MIME = 36 % UInt32
const LWS_CBOR_WKTAG_COSE_ENC = 96 % UInt32
const LWS_CBOR_WKTAG_COSE_MAC = 97 % UInt32
const LWS_CBOR_WKTAG_COSE_SIGN = 98 % UInt32
const LWS_CBOR_WKTAG_SELFDESCCBOR = 55799 % UInt32

const lecp_callbacks = UInt32
const LECPCB_CONSTRUCTED = 0 % UInt32
const LECPCB_DESTRUCTED = 1 % UInt32
const LECPCB_COMPLETE = 3 % UInt32
const LECPCB_FAILED = 4 % UInt32
const LECPCB_PAIR_NAME = 5 % UInt32
const LECPCB_VAL_TRUE = 70 % UInt32
const LECPCB_VAL_FALSE = 71 % UInt32
const LECPCB_VAL_NULL = 72 % UInt32
const LECPCB_VAL_NUM_INT = 73 % UInt32
const LECPCB_VAL_RESERVED = 74 % UInt32
const LECPCB_VAL_STR_START = 11 % UInt32
const LECPCB_VAL_STR_CHUNK = 76 % UInt32
const LECPCB_VAL_STR_END = 77 % UInt32
const LECPCB_ARRAY_START = 14 % UInt32
const LECPCB_ARRAY_END = 15 % UInt32
const LECPCB_OBJECT_START = 16 % UInt32
const LECPCB_OBJECT_END = 17 % UInt32
const LECPCB_TAG_START = 18 % UInt32
const LECPCB_TAG_END = 19 % UInt32
const LECPCB_VAL_NUM_UINT = 84 % UInt32
const LECPCB_VAL_UNDEFINED = 85 % UInt32
const LECPCB_VAL_FLOAT16 = 86 % UInt32
const LECPCB_VAL_FLOAT32 = 87 % UInt32
const LECPCB_VAL_FLOAT64 = 88 % UInt32
const LECPCB_VAL_SIMPLE = 89 % UInt32
const LECPCB_VAL_BLOB_START = 26 % UInt32
const LECPCB_VAL_BLOB_CHUNK = 91 % UInt32
const LECPCB_VAL_BLOB_END = 92 % UInt32
const LECPCB_ARRAY_ITEM_START = 29 % UInt32
const LECPCB_ARRAY_ITEM_END = 30 % UInt32
const LECPCB_LITERAL_CBOR = 31 % UInt32

const lecp_reasons = Int32
const LECP_CONTINUE = -1 % Int32
const LECP_REJECT_BAD_CODING = -2 % Int32
const LECP_REJECT_UNKNOWN = -3 % Int32
const LECP_REJECT_CALLBACK = -4 % Int32
const LECP_STACK_OVERFLOW = -5 % Int32

struct __JL_Ctag_77
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_77}, f::Symbol)
    f === :u64 && return Ptr{UInt64}(x + 0)
    f === :i64 && return Ptr{Int64}(x + 0)
    f === :u32 && return Ptr{UInt64}(x + 0)
    f === :hf && return Ptr{UInt16}(x + 0)
    f === :f && return Ptr{Cfloat}(x + 0)
    f === :d && return Ptr{Cdouble}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_77, f::Symbol)
    r = Ref{__JL_Ctag_77}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_77}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_77}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lecp_item
    data::NTuple{16, UInt8}
end

function Base.getproperty(x::Ptr{lecp_item}, f::Symbol)
    f === :u && return Ptr{__JL_Ctag_77}(x + 0)
    f === :opcode && return Ptr{UInt8}(x + 8)
    return getfield(x, f)
end

function Base.getproperty(x::lecp_item, f::Symbol)
    r = Ref{lecp_item}(x)
    ptr = Base.unsafe_convert(Ptr{lecp_item}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lecp_item}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

# typedef signed char ( * lecp_callback ) ( struct lecp_ctx * ctx , char reason )
const lecp_callback = Ptr{Cvoid}

mutable struct _lecp_stack
    s::Cchar
    p::UInt8
    i::Cchar
    indet::Cchar
    intermediate::Cchar
    pop_iss::Cchar
    tag::UInt64
    collect_rem::UInt64
    ordinal::UInt32
    opcode::UInt8
    send_new_array_item::UInt8
    barrier::UInt8
    _lecp_stack() = new()
end

mutable struct _lecp_parsing_stack
    user::Ptr{Cvoid}
    cb::lecp_callback
    paths::Ptr{Ptr{Cchar}}
    count_paths::UInt8
    ppos::UInt8
    path_match::UInt8
    _lecp_parsing_stack() = new()
end

struct lecp_ctx
    data::NTuple{1088, UInt8}
end

function Base.getproperty(x::Ptr{lecp_ctx}, f::Symbol)
    f === :user && return Ptr{Ptr{Cvoid}}(x + 0)
    f === :collect_tgt && return Ptr{Ptr{UInt8}}(x + 8)
    f === :pst && return Ptr{NTuple{5, _lecp_parsing_stack}}(x + 16)
    f === :st && return Ptr{NTuple{12, _lecp_stack}}(x + 176)
    f === :i && return Ptr{NTuple{8, UInt16}}(x + 560)
    f === :wild && return Ptr{NTuple{8, UInt16}}(x + 576)
    f === :path && return Ptr{NTuple{128, Cchar}}(x + 592)
    f === :cbor && return Ptr{NTuple{64, UInt8}}(x + 720)
    f === :item && return Ptr{lecp_item}(x + 784)
    f === :path_stride && return Ptr{Csize_t}(x + 800)
    f === :used_in && return Ptr{Csize_t}(x + 808)
    f === :uni && return Ptr{UInt16}(x + 816)
    f === :npos && return Ptr{UInt8}(x + 818)
    f === :dcount && return Ptr{UInt8}(x + 819)
    f === :f && return Ptr{UInt8}(x + 820)
    f === :sp && return Ptr{UInt8}(x + 821)
    f === :ipos && return Ptr{UInt8}(x + 822)
    f === :count_paths && return Ptr{UInt8}(x + 823)
    f === :path_match && return Ptr{UInt8}(x + 824)
    f === :path_match_len && return Ptr{UInt8}(x + 825)
    f === :wildcount && return Ptr{UInt8}(x + 826)
    f === :pst_sp && return Ptr{UInt8}(x + 827)
    f === :outer_array && return Ptr{UInt8}(x + 828)
    f === :cbor_pos && return Ptr{UInt8}(x + 829)
    f === :literal_cbor_report && return Ptr{UInt8}(x + 830)
    f === :present && return Ptr{Cchar}(x + 831)
    f === :be && return Ptr{UInt8}(x + 832)
    f === :buf && return Ptr{NTuple{255, Cchar}}(x + 833)
    return getfield(x, f)
end

function Base.getproperty(x::lecp_ctx, f::Symbol)
    r = Ref{lecp_ctx}(x)
    ptr = Base.unsafe_convert(Ptr{lecp_ctx}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lecp_ctx}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const lws_lec_pctx_ret = UInt32
const LWS_LECPCTX_RET_FINISHED = 0 % UInt32
const LWS_LECPCTX_RET_AGAIN = 1 % UInt32
const LWS_LECPCTX_RET_FAIL = 2 % UInt32

const cbp_state = UInt32
const CBPS_IDLE = 0 % UInt32
const CBPS_PC1 = 1 % UInt32
const CBPS_PC2 = 2 % UInt32
const CBPS_PC3 = 3 % UInt32
const CBPS_STRING_BODY = 4 % UInt32
const CBPS_NUM_LIT = 5 % UInt32
const CBPS_STRING_LIT = 6 % UInt32
const CBPS_CONTYPE = 7 % UInt32

struct lws_lec_pctx
    data::NTuple{176, UInt8}
end

function Base.getproperty(x::Ptr{lws_lec_pctx}, f::Symbol)
    f === :stack && return Ptr{NTuple{16, UInt8}}(x + 0)
    f === :vaa && return Ptr{NTuple{16, UInt8}}(x + 16)
    f === :indet && return Ptr{NTuple{16, UInt8}}(x + 32)
    f === :scratch && return Ptr{NTuple{24, UInt8}}(x + 48)
    f === :start && return Ptr{Ptr{UInt8}}(x + 72)
    f === :buf && return Ptr{Ptr{UInt8}}(x + 80)
    f === :_end && return Ptr{Ptr{UInt8}}(x + 88)
    f === :ongoing_src && return Ptr{Ptr{UInt8}}(x + 96)
    f === :ongoing_len && return Ptr{UInt64}(x + 104)
    f === :ongoing_done && return Ptr{UInt64}(x + 112)
    f === :item && return Ptr{lecp_item}(x + 120)
    f === :used && return Ptr{Csize_t}(x + 136)
    f === :opaque && return Ptr{NTuple{4, Cint}}(x + 144)
    f === :state && return Ptr{cbp_state}(x + 160)
    f === :fmt_pos && return Ptr{Cuint}(x + 164)
    f === :sp && return Ptr{UInt8}(x + 168)
    f === :scratch_len && return Ptr{UInt8}(x + 169)
    f === :escflag && return Ptr{UInt8}(x + 170)
    f === :_long && return Ptr{UInt8}(x + 171)
    f === :vaa_pos && return Ptr{UInt8}(x + 172)
    f === :dotstar && return Ptr{UInt8}(x + 173)
    return getfield(x, f)
end

function Base.getproperty(x::lws_lec_pctx, f::Symbol)
    r = Ref{lws_lec_pctx}(x)
    ptr = Base.unsafe_convert(Ptr{lws_lec_pctx}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_lec_pctx}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const lws_lec_pctx_t = lws_lec_pctx

function lws_lec_int(ctx, opcode, indet, num)
    @ccall libwebsockets.lws_lec_int(ctx::Ptr{lws_lec_pctx_t}, opcode::UInt8, indet::UInt8, num::UInt64)::Cvoid
end

function lws_lec_scratch(ctx)
    @ccall libwebsockets.lws_lec_scratch(ctx::Ptr{lws_lec_pctx_t})::Cint
end

function lws_lec_init(ctx, buf, len)
    @ccall libwebsockets.lws_lec_init(ctx::Ptr{lws_lec_pctx_t}, buf::Ptr{UInt8}, len::Csize_t)::Cvoid
end

function lws_lec_setbuf(ctx, buf, len)
    @ccall libwebsockets.lws_lec_setbuf(ctx::Ptr{lws_lec_pctx_t}, buf::Ptr{UInt8}, len::Csize_t)::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_lec_printf(ctx, format, va_list...)
        :(@ccall(libwebsockets.lws_lec_printf(ctx::Ptr{lws_lec_pctx_t}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::lws_lec_pctx_ret))
    end

function lecp_construct(ctx, cb, user, paths, paths_count)
    @ccall libwebsockets.lecp_construct(ctx::Ptr{lecp_ctx}, cb::lecp_callback, user::Ptr{Cvoid}, paths::Ptr{Ptr{Cchar}}, paths_count::Cuchar)::Cvoid
end

function lecp_destruct(ctx)
    @ccall libwebsockets.lecp_destruct(ctx::Ptr{lecp_ctx})::Cvoid
end

function lecp_parse(ctx, cbor, len)
    @ccall libwebsockets.lecp_parse(ctx::Ptr{lecp_ctx}, cbor::Ptr{UInt8}, len::Csize_t)::Cint
end

function lecp_change_callback(ctx, cb)
    @ccall libwebsockets.lecp_change_callback(ctx::Ptr{lecp_ctx}, cb::lecp_callback)::Cvoid
end

function lecp_error_to_string(e)
    @ccall libwebsockets.lecp_error_to_string(e::Cint)::Ptr{Cchar}
end

function lecp_parse_report_raw(ctx, on)
    @ccall libwebsockets.lecp_parse_report_raw(ctx::Ptr{lecp_ctx}, on::Cint)::Cvoid
end

function lecp_parse_map_is_key(ctx)
    @ccall libwebsockets.lecp_parse_map_is_key(ctx::Ptr{lecp_ctx})::Cint
end

function lecp_parse_subtree(ctx, in, len)
    @ccall libwebsockets.lecp_parse_subtree(ctx::Ptr{lecp_ctx}, in::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_singles2halfp(hp, x)
    @ccall libwebsockets.lws_singles2halfp(hp::Ptr{UInt16}, x::UInt32)::Cvoid
end

function lws_halfp2singles(xp, h)
    @ccall libwebsockets.lws_halfp2singles(xp::Ptr{UInt32}, h::UInt16)::Cvoid
end

const __JL_Ctag_37 = Int32
const LWSCOSE_WKL_ALG = 1 % Int32
const LWSCOSE_WKL_CRIT = 2 % Int32
const LWSCOSE_WKL_CONTENT_TYPE = 3 % Int32
const LWSCOSE_WKL_KID = 4 % Int32
const LWSCOSE_WKL_IV = 5 % Int32
const LWSCOSE_WKL_IV_PARTIAL = 6 % Int32
const LWSCOSE_WKL_COUNTERSIG = 7 % Int32
const LWSCOSE_WKL_COUNTERSIG0 = 9 % Int32
const LWSCOSE_WKL_KID_CONTEXT = 10 % Int32
const LWSCOSE_WKL_CUPH_NONCE = 256 % Int32
const LWSCOSE_WKL_CUPH_OWNER_PUBKEY = 257 % Int32
const LWSCOSE_WKK_KTY = 1 % Int32
const LWSCOSE_WKK_KID = 2 % Int32
const LWSCOSE_WKK_ALG = 3 % Int32
const LWSCOSE_WKK_KEY_OPS = 4 % Int32
const LWSCOSE_WKK_BASE_IV = 5 % Int32
const LWSCOSE_WKKO_SIGN = 1 % Int32
const LWSCOSE_WKKO_VERIFY = 2 % Int32
const LWSCOSE_WKKO_ENCRYPT = 3 % Int32
const LWSCOSE_WKKO_DECRYPT = 4 % Int32
const LWSCOSE_WKKO_WRAP_KEY = 5 % Int32
const LWSCOSE_WKKO_UNWRAP_KEY = 6 % Int32
const LWSCOSE_WKKO_DERIVE_KEY = 7 % Int32
const LWSCOSE_WKKO_DERIVE_BITS = 8 % Int32
const LWSCOSE_WKKO_MAC_CREATE = 9 % Int32
const LWSCOSE_WKKO_MAC_VERIFY = 10 % Int32
const LWSCOSE_WKAECDSA_ALG_ES256 = -7 % Int32
const LWSCOSE_WKAECDSA_ALG_ES384 = -35 % Int32
const LWSCOSE_WKAECDSA_ALG_ES512 = -36 % Int32
const LWSCOSE_WKAEDDSA_ALG_EDDSA = -8 % Int32
const LWSCOSE_WKAHMAC_256_64 = 4 % Int32
const LWSCOSE_WKAHMAC_256_256 = 5 % Int32
const LWSCOSE_WKAHMAC_384_384 = 6 % Int32
const LWSCOSE_WKAHMAC_512_512 = 7 % Int32
const LWSCOSE_WKAAES_128_64 = 14 % Int32
const LWSCOSE_WKAAES_256_64 = 15 % Int32
const LWSCOSE_WKAAES_128_128 = 25 % Int32
const LWSCOSE_WKAAES_256_128 = 26 % Int32
const LWSCOSE_WKAAESGCM_128 = 1 % Int32
const LWSCOSE_WKAAESGCM_192 = 2 % Int32
const LWSCOSE_WKAAESGCM_256 = 3 % Int32
const LWSCOSE_WKAAESCCM_16_64_128 = 10 % Int32
const LWSCOSE_WKAAESCCM_16_64_256 = 11 % Int32
const LWSCOSE_WKAAESCCM_64_64_128 = 12 % Int32
const LWSCOSE_WKAAESCCM_64_64_256 = 13 % Int32
const LWSCOSE_WKAAESCCM_16_128_128 = 14 % Int32
const LWSCOSE_WKAAESCCM_16_128_256 = 15 % Int32
const LWSCOSE_WKAAESCCM_64_128_128 = 16 % Int32
const LWSCOSE_WKAAESCCM_64_128_256 = 17 % Int32
const LWSCOSE_WKACHACHA_POLY1305 = 24 % Int32
const LWSCOSE_WKAPHKDF_SALT = -20 % Int32
const LWSCOSE_WKAPCTX_PARTY_U_IDENTITY = -21 % Int32
const LWSCOSE_WKAPCTX_PARTY_U_NONCE = -22 % Int32
const LWSCOSE_WKAPCTX_PARTY_U_OTHER = -23 % Int32
const LWSCOSE_WKAPCTX_PARTY_V_IDENTITY = -24 % Int32
const LWSCOSE_WKAPCTX_PARTY_V_NONCE = -25 % Int32
const LWSCOSE_WKAPCTX_PARTY_V_OTHER = -26 % Int32
const LWSCOSE_WKK_DIRECT_CEK = -6 % Int32
const LWSCOSE_WKK_DIRECT_HKDF_SHA_256 = -10 % Int32
const LWSCOSE_WKK_DIRECT_HKDF_SHA_512 = -11 % Int32
const LWSCOSE_WKK_DIRECT_HKDF_AES_128 = -12 % Int32
const LWSCOSE_WKK_DIRECT_HKDF_AES_256 = -13 % Int32
const LWSCOSE_WKK_DIRECT_HKDFKW_SHA_256 = -3 % Int32
const LWSCOSE_WKK_DIRECT_HKDFKW_SHA_512 = -4 % Int32
const LWSCOSE_WKK_DIRECT_HKDFKW_AES_128 = -5 % Int32
const LWSCOSE_WKAECDH_ALG_ES_HKDF_256 = -25 % Int32
const LWSCOSE_WKAECDH_ALG_ES_HKDF_512 = -26 % Int32
const LWSCOSE_WKAECDH_ALG_SS_HKDF_256 = -27 % Int32
const LWSCOSE_WKAECDH_ALG_SS_HKDF_512 = -28 % Int32
const LWSCOSE_WKAPECDH_EPHEMERAL_KEY = -1 % Int32
const LWSCOSE_WKAPECDH_STATIC_KEY = -2 % Int32
const LWSCOSE_WKAPECDH_STATIC_KEY_ID = -3 % Int32
const LWSCOSE_WKAPECDH_ES_A128KW = -29 % Int32
const LWSCOSE_WKAPECDH_ES_A192KW = -30 % Int32
const LWSCOSE_WKAPECDH_ES_A256KW = -31 % Int32
const LWSCOSE_WKAPECDH_SS_A128KW = -32 % Int32
const LWSCOSE_WKAPECDH_SS_A192KW = -33 % Int32
const LWSCOSE_WKAPECDH_SS_A256KW = -34 % Int32
const LWSCOSE_WKKTV_OKP = 1 % Int32
const LWSCOSE_WKKTV_EC2 = 2 % Int32
const LWSCOSE_WKKTV_RSA = 3 % Int32
const LWSCOSE_WKKTV_SYMMETRIC = 4 % Int32
const LWSCOSE_WKKTV_HSS_LMS = 5 % Int32
const LWSCOSE_WKKTV_WALNUTDSA = 6 % Int32
const LWSCOSE_WKEC_P256 = 1 % Int32
const LWSCOSE_WKEC_P384 = 2 % Int32
const LWSCOSE_WKEC_P521 = 3 % Int32
const LWSCOSE_WKEC_X25519 = 4 % Int32
const LWSCOSE_WKEC_X448 = 5 % Int32
const LWSCOSE_WKEC_ED25519 = 6 % Int32
const LWSCOSE_WKEC_ED448 = 7 % Int32
const LWSCOSE_WKEC_SECP256K1 = 8 % Int32
const LWSCOSE_WKECKP_CRV = -1 % Int32
const LWSCOSE_WKECKP_X = -2 % Int32
const LWSCOSE_WKECKP_Y = -3 % Int32
const LWSCOSE_WKECKP_D = -4 % Int32
const LWSCOSE_WKOKP_CRV = -1 % Int32
const LWSCOSE_WKOKP_X = -2 % Int32
const LWSCOSE_WKOKP_D = -4 % Int32
const LWSCOSE_WKKPRSA_N = -1 % Int32
const LWSCOSE_WKKPRSA_E = -2 % Int32
const LWSCOSE_WKKPRSA_D = -3 % Int32
const LWSCOSE_WKKPRSA_P = -4 % Int32
const LWSCOSE_WKKPRSA_Q = -5 % Int32
const LWSCOSE_WKKPRSA_DP = -6 % Int32
const LWSCOSE_WKKPRSA_DQ = -7 % Int32
const LWSCOSE_WKKPRSA_QINV = -8 % Int32
const LWSCOSE_WKKPRSA_OTHER = -9 % Int32
const LWSCOSE_WKKPRSA_RI = -10 % Int32
const LWSCOSE_WKKPRSA_DI = -11 % Int32
const LWSCOSE_WKKPRSA_TI = -12 % Int32
const LWSCOSE_WKSYMKP_KEY_VALUE = 4 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_SIGN = 98 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_SIGN1 = 18 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_ENCRYPT = 96 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_ENCRYPT0 = 16 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_MAC = 97 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_MAC0 = 17 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_KEY = 101 % Int32
const LWSCOAP_CONTENTFORMAT_COSE_KEY_SET = 102 % Int32
const LWSCOSE_WKL_COUNTERSIGNATURE0 = 9 % Int32
const LWSCOSE_WKARSA_ALG_RS256 = -257 % Int32
const LWSCOSE_WKARSA_ALG_RS384 = -258 % Int32
const LWSCOSE_WKARSA_ALG_RS512 = -259 % Int32

const enum_cose_key_meta_tok = UInt32
const COSEKEY_META_KTY = 0 % UInt32
const COSEKEY_META_KID = 1 % UInt32
const COSEKEY_META_KEY_OPS = 2 % UInt32
const COSEKEY_META_BASE_IV = 3 % UInt32
const COSEKEY_META_ALG = 4 % UInt32
const LWS_COUNT_COSE_KEY_ELEMENTS = 5 % UInt32

const cose_param_t = Int64

function lws_cose_alg_to_name(alg)
    @ccall libwebsockets.lws_cose_alg_to_name(alg::cose_param_t)::Ptr{Cchar}
end

function lws_cose_name_to_alg(name)
    @ccall libwebsockets.lws_cose_name_to_alg(name::Ptr{Cchar})::cose_param_t
end

struct lws_cose_key
    e::NTuple{12, lws_gencrypto_keyelem}
    meta::NTuple{5, lws_gencrypto_keyelem}
    list::lws_dll2_t
    gencrypto_kty::Cint
    kty::cose_param_t
    cose_alg::cose_param_t
    cose_curve::cose_param_t
    private_key::Cchar
end

const lws_cose_key_t = lws_cose_key

# typedef int ( * lws_cose_key_import_callback ) ( struct lws_cose_key * s , void * user )
const lws_cose_key_import_callback = Ptr{Cvoid}

function lws_cose_key_import(pkey_set, cb, user, in, len)
    @ccall libwebsockets.lws_cose_key_import(pkey_set::Ptr{lws_dll2_owner_t}, cb::lws_cose_key_import_callback, user::Ptr{Cvoid}, in::Ptr{UInt8}, len::Csize_t)::Ptr{lws_cose_key_t}
end

function lws_cose_key_export(ck, ctx, flags)
    @ccall libwebsockets.lws_cose_key_export(ck::Ptr{lws_cose_key_t}, ctx::Ptr{lws_lec_pctx_t}, flags::Cint)::lws_lec_pctx_ret
end

function lws_cose_key_generate(context, cose_kty, use_mask, bits, curve, kid, kl)
    @ccall libwebsockets.lws_cose_key_generate(context::Ptr{lws_context}, cose_kty::cose_param_t, use_mask::Cint, bits::Cint, curve::Ptr{Cchar}, kid::Ptr{UInt8}, kl::Csize_t)::Ptr{lws_cose_key_t}
end

function lws_cose_key_from_set(set, kid, kl)
    @ccall libwebsockets.lws_cose_key_from_set(set::Ptr{lws_dll2_owner_t}, kid::Ptr{UInt8}, kl::Csize_t)::Ptr{lws_cose_key_t}
end

function lws_cose_key_destroy(ck)
    @ccall libwebsockets.lws_cose_key_destroy(ck::Ptr{Ptr{lws_cose_key_t}})::Cvoid
end

function lws_cose_key_set_destroy(o)
    @ccall libwebsockets.lws_cose_key_set_destroy(o::Ptr{lws_dll2_owner_t})::Cvoid
end

function lws_cose_key_dump(ck)
    @ccall libwebsockets.lws_cose_key_dump(ck::Ptr{lws_cose_key_t})::Cvoid
end

const lws_cose_sig_types = UInt32
const SIGTYPE_UNKNOWN = 0 % UInt32
const SIGTYPE_MULTI = 1 % UInt32
const SIGTYPE_SINGLE = 2 % UInt32
const SIGTYPE_COUNTERSIGNED = 3 % UInt32
const SIGTYPE_MAC = 4 % UInt32
const SIGTYPE_MAC0 = 5 % UInt32

mutable struct lws_cose_validate_res_t
    list::lws_dll2_t
    cose_key::Ptr{lws_cose_key_t}
    cose_alg::cose_param_t
    result::Cint
    lws_cose_validate_res_t() = new()
end

const __JL_Ctag_39 = Int32
const LCOSESIGEXTCB_RET_FINISHED = 0 % Int32
const LCOSESIGEXTCB_RET_AGAIN = 1 % Int32
const LCOSESIGEXTCB_RET_ERROR = -1 % Int32

mutable struct lws_cose_validate_context end

mutable struct lws_cose_sig_ext_pay_t
    cps::Ptr{lws_cose_validate_context}
    ext::Ptr{UInt8}
    xl::Csize_t
    lws_cose_sig_ext_pay_t() = new()
end

# typedef int ( * lws_cose_sign_ext_pay_cb_t ) ( lws_cose_sig_ext_pay_t * x )
const lws_cose_sign_ext_pay_cb_t = Ptr{Cvoid}

# typedef int ( * lws_cose_validate_pay_cb_t ) ( struct lws_cose_validate_context * cps , void * opaque , const uint8_t * paychunk , size_t paychunk_len )
const lws_cose_validate_pay_cb_t = Ptr{Cvoid}

mutable struct lws_cose_validate_create_info
    cx::Ptr{lws_context}
    keyset::Ptr{lws_dll2_owner_t}
    sigtype::lws_cose_sig_types
    pay_cb::lws_cose_validate_pay_cb_t
    pay_opaque::Ptr{Cvoid}
    ext_cb::lws_cose_sign_ext_pay_cb_t
    ext_opaque::Ptr{Cvoid}
    ext_len::Csize_t
    lws_cose_validate_create_info() = new()
end

const lws_cose_validate_create_info_t = lws_cose_validate_create_info

function lws_cose_validate_create(info)
    @ccall libwebsockets.lws_cose_validate_create(info::Ptr{lws_cose_validate_create_info_t})::Ptr{lws_cose_validate_context}
end

function lws_cose_validate_chunk(cps, in, in_len, used_in)
    @ccall libwebsockets.lws_cose_validate_chunk(cps::Ptr{lws_cose_validate_context}, in::Ptr{UInt8}, in_len::Csize_t, used_in::Ptr{Csize_t})::Cint
end

function lws_cose_validate_results(cps)
    @ccall libwebsockets.lws_cose_validate_results(cps::Ptr{lws_cose_validate_context})::Ptr{lws_dll2_owner_t}
end

function lws_cose_validate_destroy(cps)
    @ccall libwebsockets.lws_cose_validate_destroy(cps::Ptr{Ptr{lws_cose_validate_context}})::Cvoid
end

mutable struct lws_cose_sign_context end

mutable struct lws_cose_sign_create_info
    cx::Ptr{lws_context}
    keyset::Ptr{lws_dll2_owner_t}
    lec::Ptr{lws_lec_pctx_t}
    ext_cb::lws_cose_sign_ext_pay_cb_t
    ext_opaque::Ptr{Cvoid}
    ext_len::Csize_t
    inline_payload_len::Csize_t
    flags::Cint
    sigtype::lws_cose_sig_types
    lws_cose_sign_create_info() = new()
end

const lws_cose_sign_create_info_t = lws_cose_sign_create_info

function lws_cose_sign_create(info)
    @ccall libwebsockets.lws_cose_sign_create(info::Ptr{lws_cose_sign_create_info_t})::Ptr{lws_cose_sign_context}
end

function lws_cose_sign_add(csc, alg, ck)
    @ccall libwebsockets.lws_cose_sign_add(csc::Ptr{lws_cose_sign_context}, alg::cose_param_t, ck::Ptr{lws_cose_key_t})::Cint
end

function lws_cose_sign_payload_chunk(csc, in, in_len)
    @ccall libwebsockets.lws_cose_sign_payload_chunk(csc::Ptr{lws_cose_sign_context}, in::Ptr{UInt8}, in_len::Csize_t)::lws_lec_pctx_ret
end

function lws_cose_sign_destroy(csc)
    @ccall libwebsockets.lws_cose_sign_destroy(csc::Ptr{Ptr{lws_cose_sign_context}})::Cvoid
end

const lws_struct_map_type_eum = UInt32
const LSMT_SIGNED = 0 % UInt32
const LSMT_UNSIGNED = 1 % UInt32
const LSMT_BOOLEAN = 2 % UInt32
const LSMT_STRING_CHAR_ARRAY = 3 % UInt32
const LSMT_STRING_PTR = 4 % UInt32
const LSMT_LIST = 5 % UInt32
const LSMT_CHILD_PTR = 6 % UInt32
const LSMT_SCHEMA = 7 % UInt32
const LSMT_BLOB_PTR = 8 % UInt32

mutable struct lejp_collation
    chunks::lws_dll2
    len::Cint
    buf::NTuple{255, Cchar}
    lejp_collation() = new()
end

const lejp_collation_t = lejp_collation

struct lws_struct_map
    colname::Ptr{Cchar}
    child_map::Ptr{lws_struct_map}
    lejp_cb::lejp_callback
    ofs::Csize_t
    aux::Csize_t
    ofs_clist::Csize_t
    child_map_size::Csize_t
    type::lws_struct_map_type_eum
end

const lws_struct_map_t = lws_struct_map

# typedef int ( * lws_struct_args_cb ) ( void * obj , void * cb_arg )
const lws_struct_args_cb = Ptr{Cvoid}

mutable struct lws_struct_args
    map_st::NTuple{5, Ptr{lws_struct_map_t}}
    cb::lws_struct_args_cb
    ac::Ptr{lwsac}
    cb_arg::Ptr{Cvoid}
    dest::Ptr{Cvoid}
    dest_len::Csize_t
    toplevel_dll2_ofs::Csize_t
    map_entries_st::NTuple{5, Csize_t}
    ac_block_size::Csize_t
    subtype::Cint
    top_schema_index::Cint
    ac_chunks::Ptr{lwsac}
    chunks_owner::lws_dll2_owner
    chunks_length::Csize_t
    lws_struct_args() = new()
end

const lws_struct_args_t = lws_struct_args

struct lws_struct_serialize_st
    dllpos::Ptr{lws_dll2}
    map::Ptr{lws_struct_map_t}
    obj::Ptr{Cchar}
    map_entries::Csize_t
    map_entry::Csize_t
    size::Csize_t
    subsequent::Cchar
    idt::Cchar
end

const lws_struct_serialize_st_t = lws_struct_serialize_st

const __JL_Ctag_42 = UInt32
const LSSERJ_FLAG_PRETTY = 1 % UInt32
const LSSERJ_FLAG_OMIT_SCHEMA = 2 % UInt32

mutable struct lws_struct_serialize
    st::NTuple{5, lws_struct_serialize_st_t}
    offset::Csize_t
    remaining::Csize_t
    sp::Cint
    flags::Cint
    lws_struct_serialize() = new()
end

const lws_struct_serialize_t = lws_struct_serialize

const lws_struct_json_serialize_result_t = UInt32
const LSJS_RESULT_CONTINUE = 0 % UInt32
const LSJS_RESULT_FINISH = 1 % UInt32
const LSJS_RESULT_ERROR = 2 % UInt32

function lws_struct_json_init_parse(ctx, cb, user)
    @ccall libwebsockets.lws_struct_json_init_parse(ctx::Ptr{lejp_ctx}, cb::lejp_callback, user::Ptr{Cvoid})::Cint
end

function lws_struct_schema_only_lejp_cb(ctx, reason)
    @ccall libwebsockets.lws_struct_schema_only_lejp_cb(ctx::Ptr{lejp_ctx}, reason::Cchar)::Int8
end

function lws_struct_default_lejp_cb(ctx, reason)
    @ccall libwebsockets.lws_struct_default_lejp_cb(ctx::Ptr{lejp_ctx}, reason::Cchar)::Int8
end

function lws_struct_json_serialize_create(map, map_entries, flags, ptoplevel)
    @ccall libwebsockets.lws_struct_json_serialize_create(map::Ptr{lws_struct_map_t}, map_entries::Csize_t, flags::Cint, ptoplevel::Ptr{Cvoid})::Ptr{lws_struct_serialize_t}
end

function lws_struct_json_serialize_destroy(pjs)
    @ccall libwebsockets.lws_struct_json_serialize_destroy(pjs::Ptr{Ptr{lws_struct_serialize_t}})::Cvoid
end

function lws_struct_json_serialize(js, buf, len, written)
    @ccall libwebsockets.lws_struct_json_serialize(js::Ptr{lws_struct_serialize_t}, buf::Ptr{UInt8}, len::Csize_t, written::Ptr{Csize_t})::lws_struct_json_serialize_result_t
end

mutable struct sqlite3 end

function lws_struct_sq3_serialize(pdb, schema, owner, manual_idx)
    @ccall libwebsockets.lws_struct_sq3_serialize(pdb::Ptr{sqlite3}, schema::Ptr{lws_struct_map_t}, owner::Ptr{lws_dll2_owner_t}, manual_idx::UInt32)::Cint
end

function lws_struct_sq3_deserialize(pdb, filter, order, schema, o, ac, start, limit)
    @ccall libwebsockets.lws_struct_sq3_deserialize(pdb::Ptr{sqlite3}, filter::Ptr{Cchar}, order::Ptr{Cchar}, schema::Ptr{lws_struct_map_t}, o::Ptr{lws_dll2_owner_t}, ac::Ptr{Ptr{lwsac}}, start::Cint, limit::Cint)::Cint
end

function lws_struct_sq3_create_table(pdb, schema)
    @ccall libwebsockets.lws_struct_sq3_create_table(pdb::Ptr{sqlite3}, schema::Ptr{lws_struct_map_t})::Cint
end

function lws_struct_sq3_open(context, sqlite3_path, create_if_missing, pdb)
    @ccall libwebsockets.lws_struct_sq3_open(context::Ptr{lws_context}, sqlite3_path::Ptr{Cchar}, create_if_missing::Cchar, pdb::Ptr{Ptr{sqlite3}})::Cint
end

function lws_struct_sq3_close(pdb)
    @ccall libwebsockets.lws_struct_sq3_close(pdb::Ptr{Ptr{sqlite3}})::Cint
end

mutable struct lws_threadpool end

mutable struct lws_threadpool_task end

const lws_threadpool_task_status = UInt32
const LWS_TP_STATUS_QUEUED = 0 % UInt32
const LWS_TP_STATUS_RUNNING = 1 % UInt32
const LWS_TP_STATUS_SYNCING = 2 % UInt32
const LWS_TP_STATUS_STOPPING = 3 % UInt32
const LWS_TP_STATUS_FINISHED = 4 % UInt32
const LWS_TP_STATUS_STOPPED = 5 % UInt32

const lws_threadpool_task_return = UInt32
const LWS_TP_RETURN_CHECKING_IN = 0 % UInt32
const LWS_TP_RETURN_SYNC = 1 % UInt32
const LWS_TP_RETURN_FINISHED = 2 % UInt32
const LWS_TP_RETURN_STOPPED = 3 % UInt32
const LWS_TP_RETURN_FLAG_OUTLIVE = 64 % UInt32

mutable struct lws_threadpool_create_args
    threads::Cint
    max_queue_depth::Cint
    lws_threadpool_create_args() = new()
end

mutable struct lws_threadpool_task_args
    wsi::Ptr{lws}
    user::Ptr{Cvoid}
    name::Ptr{Cchar}
    async_task::Cchar
    task::Ptr{Cvoid}
    cleanup::Ptr{Cvoid}
    lws_threadpool_task_args() = new()
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_threadpool_create(context, args, format, va_list...)
        :(@ccall(libwebsockets.lws_threadpool_create(context::Ptr{lws_context}, args::Ptr{lws_threadpool_create_args}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Ptr{lws_threadpool}))
    end

function lws_threadpool_finish(tp)
    @ccall libwebsockets.lws_threadpool_finish(tp::Ptr{lws_threadpool})::Cvoid
end

function lws_threadpool_destroy(tp)
    @ccall libwebsockets.lws_threadpool_destroy(tp::Ptr{lws_threadpool})::Cvoid
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_threadpool_enqueue(tp, args, format, va_list...)
        :(@ccall(libwebsockets.lws_threadpool_enqueue(tp::Ptr{lws_threadpool}, args::Ptr{lws_threadpool_task_args}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Ptr{lws_threadpool_task}))
    end

function lws_threadpool_dequeue(wsi)
    @ccall libwebsockets.lws_threadpool_dequeue(wsi::Ptr{lws})::Cint
end

function lws_threadpool_dequeue_task(task)
    @ccall libwebsockets.lws_threadpool_dequeue_task(task::Ptr{lws_threadpool_task})::Cint
end

function lws_threadpool_task_status_wsi(wsi, task, user)
    @ccall libwebsockets.lws_threadpool_task_status_wsi(wsi::Ptr{lws}, task::Ptr{Ptr{lws_threadpool_task}}, user::Ptr{Ptr{Cvoid}})::lws_threadpool_task_status
end

function lws_threadpool_task_status(task, user)
    @ccall libwebsockets.lws_threadpool_task_status(task::Ptr{lws_threadpool_task}, user::Ptr{Ptr{Cvoid}})::lws_threadpool_task_status
end

function lws_threadpool_task_status_noreap(task)
    @ccall libwebsockets.lws_threadpool_task_status_noreap(task::Ptr{lws_threadpool_task})::lws_threadpool_task_status
end

function lws_threadpool_task_sync(task, stop)
    @ccall libwebsockets.lws_threadpool_task_sync(task::Ptr{lws_threadpool_task}, stop::Cint)::Cvoid
end

function lws_threadpool_dump(tp)
    @ccall libwebsockets.lws_threadpool_dump(tp::Ptr{lws_threadpool})::Cvoid
end

function lws_threadpool_get_task_wsi(wsi)
    @ccall libwebsockets.lws_threadpool_get_task_wsi(wsi::Ptr{lws})::Ptr{lws_threadpool_task}
end

function lws_threadpool_foreach_task_wsi(wsi, user, cb)
    @ccall libwebsockets.lws_threadpool_foreach_task_wsi(wsi::Ptr{lws}, user::Ptr{Cvoid}, cb::Ptr{Cvoid})::Cint
end

const lws_tokenize_elem = Int32
const LWS_TOKZE_ERRS = 5 % Int32
const LWS_TOKZE_ERR_BROKEN_UTF8 = -5 % Int32
const LWS_TOKZE_ERR_UNTERM_STRING = -4 % Int32
const LWS_TOKZE_ERR_MALFORMED_FLOAT = -3 % Int32
const LWS_TOKZE_ERR_NUM_ON_LHS = -2 % Int32
const LWS_TOKZE_ERR_COMMA_LIST = -1 % Int32
const LWS_TOKZE_ENDED = 0 % Int32
const LWS_TOKZE_DELIMITER = 1 % Int32
const LWS_TOKZE_TOKEN = 2 % Int32
const LWS_TOKZE_INTEGER = 3 % Int32
const LWS_TOKZE_FLOAT = 4 % Int32
const LWS_TOKZE_TOKEN_NAME_EQUALS = 5 % Int32
const LWS_TOKZE_TOKEN_NAME_COLON = 6 % Int32
const LWS_TOKZE_QUOTED_STRING = 7 % Int32

const lws_tokenize_delimiter_tracking = UInt32
const LWSTZ_DT_NEED_FIRST_CONTENT = 0 % UInt32
const LWSTZ_DT_NEED_DELIM = 1 % UInt32
const LWSTZ_DT_NEED_NEXT_CONTENT = 2 % UInt32

struct lws_tokenize
    start::Ptr{Cchar}
    token::Ptr{Cchar}
    len::Csize_t
    token_len::Csize_t
    flags::UInt16
    delim::UInt8
    e::Int8
end

const lws_tokenize_t = lws_tokenize

function lws_tokenize_init(ts, start, flags)
    @ccall libwebsockets.lws_tokenize_init(ts::Ptr{lws_tokenize}, start::Ptr{Cchar}, flags::Cint)::Cvoid
end

function lws_tokenize(ts)
    @ccall libwebsockets.lws_tokenize(ts::Ptr{lws_tokenize})::lws_tokenize_elem
end

function lws_tokenize_cstr(ts, str, max)
    @ccall libwebsockets.lws_tokenize_cstr(ts::Ptr{lws_tokenize}, str::Ptr{Cchar}, max::Csize_t)::Cint
end

# typedef int ( * lws_strexp_expand_cb ) ( void * priv , const char * name , char * out , size_t * pos , size_t olen , size_t * exp_ofs )
const lws_strexp_expand_cb = Ptr{Cvoid}

mutable struct lws_strexp
    name::NTuple{32, Cchar}
    cb::lws_strexp_expand_cb
    priv::Ptr{Cvoid}
    out::Ptr{Cchar}
    olen::Csize_t
    pos::Csize_t
    exp_ofs::Csize_t
    name_pos::UInt8
    state::Cchar
    lws_strexp() = new()
end

const lws_strexp_t = lws_strexp

const __JL_Ctag_45 = Int32
const LSTRX_DONE = 0 % Int32
const LSTRX_FILLED_OUT = 1 % Int32
const LSTRX_FATAL_NAME_TOO_LONG = -1 % Int32
const LSTRX_FATAL_NAME_UNKNOWN = -2 % Int32

function lws_strexp_init(exp, priv, cb, out, olen)
    @ccall libwebsockets.lws_strexp_init(exp::Ptr{lws_strexp_t}, priv::Ptr{Cvoid}, cb::lws_strexp_expand_cb, out::Ptr{Cchar}, olen::Csize_t)::Cvoid
end

function lws_strexp_reset_out(exp, out, olen)
    @ccall libwebsockets.lws_strexp_reset_out(exp::Ptr{lws_strexp_t}, out::Ptr{Cchar}, olen::Csize_t)::Cvoid
end

function lws_strexp_expand(exp, in, len, pused_in, pused_out)
    @ccall libwebsockets.lws_strexp_expand(exp::Ptr{lws_strexp_t}, in::Ptr{Cchar}, len::Csize_t, pused_in::Ptr{Csize_t}, pused_out::Ptr{Csize_t})::Cint
end

function lws_strcmp_wildcard(wildcard, wlen, check, clen)
    @ccall libwebsockets.lws_strcmp_wildcard(wildcard::Ptr{Cchar}, wlen::Csize_t, check::Ptr{Cchar}, clen::Csize_t)::Cint
end

const lwsac_cached_file_t = Ptr{Cuchar}

const lws_list_ptr = Ptr{Cvoid}

# typedef int ( * lws_list_ptr_sort_func_t ) ( lws_list_ptr a , lws_list_ptr b )
const lws_list_ptr_sort_func_t = Ptr{Cvoid}

function lws_list_ptr_insert(phead, add, sort)
    @ccall libwebsockets.lws_list_ptr_insert(phead::Ptr{lws_list_ptr}, add::Ptr{lws_list_ptr}, sort::lws_list_ptr_sort_func_t)::Cvoid
end

function lwsac_use(head, ensure, chunk_size)
    @ccall libwebsockets.lwsac_use(head::Ptr{Ptr{lwsac}}, ensure::Csize_t, chunk_size::Csize_t)::Ptr{Cvoid}
end

function lwsac_use_backfill(head, ensure, chunk_size)
    @ccall libwebsockets.lwsac_use_backfill(head::Ptr{Ptr{lwsac}}, ensure::Csize_t, chunk_size::Csize_t)::Ptr{Cvoid}
end

function lwsac_free(head)
    @ccall libwebsockets.lwsac_free(head::Ptr{Ptr{lwsac}})::Cvoid
end

function lwsac_detach(head)
    @ccall libwebsockets.lwsac_detach(head::Ptr{Ptr{lwsac}})::Cvoid
end

function lwsac_reference(head)
    @ccall libwebsockets.lwsac_reference(head::Ptr{lwsac})::Cvoid
end

function lwsac_unreference(head)
    @ccall libwebsockets.lwsac_unreference(head::Ptr{Ptr{lwsac}})::Cvoid
end

function lwsac_extend(head, amount)
    @ccall libwebsockets.lwsac_extend(head::Ptr{lwsac}, amount::Csize_t)::Cint
end

function lwsac_use_cached_file_start(cache)
    @ccall libwebsockets.lwsac_use_cached_file_start(cache::lwsac_cached_file_t)::Cvoid
end

function lwsac_use_cached_file_end(cache)
    @ccall libwebsockets.lwsac_use_cached_file_end(cache::Ptr{lwsac_cached_file_t})::Cvoid
end

function lwsac_use_cached_file_detach(cache)
    @ccall libwebsockets.lwsac_use_cached_file_detach(cache::Ptr{lwsac_cached_file_t})::Cvoid
end

function lwsac_cached_file(filepath, cache, len)
    @ccall libwebsockets.lwsac_cached_file(filepath::Ptr{Cchar}, cache::Ptr{lwsac_cached_file_t}, len::Ptr{Csize_t})::Cint
end

function lwsac_sizeof(first)
    @ccall libwebsockets.lwsac_sizeof(first::Cint)::Csize_t
end

function lwsac_get_tail_pos(lac)
    @ccall libwebsockets.lwsac_get_tail_pos(lac::Ptr{lwsac})::Csize_t
end

function lwsac_get_next(lac)
    @ccall libwebsockets.lwsac_get_next(lac::Ptr{lwsac})::Ptr{lwsac}
end

function lwsac_align(length)
    @ccall libwebsockets.lwsac_align(length::Csize_t)::Csize_t
end

function lwsac_info(head)
    @ccall libwebsockets.lwsac_info(head::Ptr{lwsac})::Cvoid
end

function lwsac_total_alloc(head)
    @ccall libwebsockets.lwsac_total_alloc(head::Ptr{lwsac})::UInt64
end

function lwsac_total_overhead(head)
    @ccall libwebsockets.lwsac_total_overhead(head::Ptr{lwsac})::UInt64
end

function lwsac_scan_extant(head, find, len, nul)
    @ccall libwebsockets.lwsac_scan_extant(head::Ptr{lwsac}, find::Ptr{UInt8}, len::Csize_t, nul::Cint)::Ptr{UInt8}
end

mutable struct lws_fts end

mutable struct lws_fts_file end

struct lws_fts_result_filepath
    next::Ptr{lws_fts_result_filepath}
    matches::Cint
    matches_length::Cint
    lines_in_file::Cint
    filepath_length::Cint
end

struct lws_fts_result_autocomplete
    next::Ptr{lws_fts_result_autocomplete}
    instances::Cint
    agg_instances::Cint
    ac_length::Cint
    elided::Cchar
    has_children::Cchar
end

mutable struct lws_fts_result
    filepath_head::Ptr{lws_fts_result_filepath}
    autocomplete_head::Ptr{lws_fts_result_autocomplete}
    duration_ms::Cint
    effective_flags::Cint
    lws_fts_result() = new()
end

function lws_fts_create(fd)
    @ccall libwebsockets.lws_fts_create(fd::Cint)::Ptr{lws_fts}
end

function lws_fts_destroy(trie)
    @ccall libwebsockets.lws_fts_destroy(trie::Ptr{Ptr{lws_fts}})::Cvoid
end

function lws_fts_file_index(t, filepath, filepath_len, priority)
    @ccall libwebsockets.lws_fts_file_index(t::Ptr{lws_fts}, filepath::Ptr{Cchar}, filepath_len::Cint, priority::Cint)::Cint
end

function lws_fts_fill(t, file_index, buf, len)
    @ccall libwebsockets.lws_fts_fill(t::Ptr{lws_fts}, file_index::UInt32, buf::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_fts_serialize(t)
    @ccall libwebsockets.lws_fts_serialize(t::Ptr{lws_fts})::Cint
end

function lws_fts_open(filepath)
    @ccall libwebsockets.lws_fts_open(filepath::Ptr{Cchar})::Ptr{lws_fts_file}
end

mutable struct lws_fts_search_params
    needle::Ptr{Cchar}
    only_filepath::Ptr{Cchar}
    results_head::Ptr{lwsac}
    flags::Cint
    max_autocomplete::Cint
    max_files::Cint
    max_lines::Cint
    lws_fts_search_params() = new()
end

function lws_fts_search(jtf, ftsp)
    @ccall libwebsockets.lws_fts_search(jtf::Ptr{lws_fts_file}, ftsp::Ptr{lws_fts_search_params})::Ptr{lws_fts_result}
end

function lws_fts_close(jtf)
    @ccall libwebsockets.lws_fts_close(jtf::Ptr{lws_fts_file})::Cvoid
end

mutable struct lws_diskcache_scan end

function lws_diskcache_create(cache_dir_base, cache_size_limit)
    @ccall libwebsockets.lws_diskcache_create(cache_dir_base::Ptr{Cchar}, cache_size_limit::UInt64)::Ptr{lws_diskcache_scan}
end

function lws_diskcache_destroy(lds)
    @ccall libwebsockets.lws_diskcache_destroy(lds::Ptr{Ptr{lws_diskcache_scan}})::Cvoid
end

function lws_diskcache_prepare(cache_base_dir, mode, uid)
    @ccall libwebsockets.lws_diskcache_prepare(cache_base_dir::Ptr{Cchar}, mode::Cint, uid::uid_t)::Cint
end

function lws_diskcache_query(lds, is_bot, hash_hex, _fd, cache, cache_len, extant_cache_len)
    @ccall libwebsockets.lws_diskcache_query(lds::Ptr{lws_diskcache_scan}, is_bot::Cint, hash_hex::Ptr{Cchar}, _fd::Ptr{Cint}, cache::Ptr{Cchar}, cache_len::Cint, extant_cache_len::Ptr{Csize_t})::Cint
end

function lws_diskcache_finalize_name(cache)
    @ccall libwebsockets.lws_diskcache_finalize_name(cache::Ptr{Cchar})::Cint
end

function lws_diskcache_trim(lds)
    @ccall libwebsockets.lws_diskcache_trim(lds::Ptr{lws_diskcache_scan})::Cint
end

function lws_diskcache_secs_to_idle(lds)
    @ccall libwebsockets.lws_diskcache_secs_to_idle(lds::Ptr{lws_diskcache_scan})::Cint
end

const lws_seq_events_t = UInt32
const LWSSEQ_CREATED = 0 % UInt32
const LWSSEQ_DESTROYED = 1 % UInt32
const LWSSEQ_TIMED_OUT = 2 % UInt32
const LWSSEQ_HEARTBEAT = 3 % UInt32
const LWSSEQ_WSI_CONNECTED = 4 % UInt32
const LWSSEQ_WSI_CONN_FAIL = 5 % UInt32
const LWSSEQ_WSI_CONN_CLOSE = 6 % UInt32
const LWSSEQ_SS_STATE_BASE = 7 % UInt32
const LWSSEQ_USER_BASE = 100 % UInt32

const lws_seq_cb_return = UInt32
const LWSSEQ_RET_CONTINUE = 0 % UInt32
const LWSSEQ_RET_DESTROY = 1 % UInt32

const lws_seq_cb_return_t = lws_seq_cb_return

# typedef lws_seq_cb_return_t ( * lws_seq_event_cb ) ( struct lws_sequencer * seq , void * user , int event , void * data , void * aux )
const lws_seq_event_cb = Ptr{Cvoid}

struct lws_seq_info
    data::NTuple{64, UInt8}
end

function Base.getproperty(x::Ptr{lws_seq_info}, f::Symbol)
    f === :context && return Ptr{Ptr{lws_context}}(x + 0)
    f === :tsi && return Ptr{Cint}(x + 8)
    f === :user_size && return Ptr{Csize_t}(x + 16)
    f === :puser && return Ptr{Ptr{Ptr{Cvoid}}}(x + 24)
    f === :cb && return Ptr{lws_seq_event_cb}(x + 32)
    f === :name && return Ptr{Ptr{Cchar}}(x + 40)
    f === :retry && return Ptr{Ptr{lws_retry_bo_t}}(x + 48)
    f === :wakesuspend && return (Ptr{UInt8}(x + 56), 0, 1)
    return getfield(x, f)
end

function Base.getproperty(x::lws_seq_info, f::Symbol)
    r = Ref{lws_seq_info}(x)
    ptr = Base.unsafe_convert(Ptr{lws_seq_info}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_seq_info}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

const lws_seq_info_t = lws_seq_info

function lws_seq_create(info)
    @ccall libwebsockets.lws_seq_create(info::Ptr{lws_seq_info_t})::Ptr{lws_sequencer}
end

function lws_seq_destroy(seq)
    @ccall libwebsockets.lws_seq_destroy(seq::Ptr{Ptr{lws_sequencer}})::Cvoid
end

function lws_seq_queue_event(seq, e, data, aux)
    @ccall libwebsockets.lws_seq_queue_event(seq::Ptr{lws_sequencer}, e::lws_seq_events_t, data::Ptr{Cvoid}, aux::Ptr{Cvoid})::Cint
end

function lws_seq_check_wsi(seq, wsi)
    @ccall libwebsockets.lws_seq_check_wsi(seq::Ptr{lws_sequencer}, wsi::Ptr{lws})::Cint
end

function lws_seq_timeout_us(seq, us)
    @ccall libwebsockets.lws_seq_timeout_us(seq::Ptr{lws_sequencer}, us::lws_usec_t)::Cint
end

function lws_seq_from_user(u)
    @ccall libwebsockets.lws_seq_from_user(u::Ptr{Cvoid})::Ptr{lws_sequencer}
end

function lws_seq_us_since_creation(seq)
    @ccall libwebsockets.lws_seq_us_since_creation(seq::Ptr{lws_sequencer})::lws_usec_t
end

function lws_seq_name(seq)
    @ccall libwebsockets.lws_seq_name(seq::Ptr{lws_sequencer})::Ptr{Cchar}
end

function lws_seq_get_context(seq)
    @ccall libwebsockets.lws_seq_get_context(seq::Ptr{lws_sequencer})::Ptr{lws_context}
end

const lws_ss_tx_ordinal_t = UInt32

const lws_ss_constate_t = UInt32
const LWSSSCS_CREATING = 1 % UInt32
const LWSSSCS_DISCONNECTED = 2 % UInt32
const LWSSSCS_UNREACHABLE = 3 % UInt32
const LWSSSCS_AUTH_FAILED = 4 % UInt32
const LWSSSCS_CONNECTED = 5 % UInt32
const LWSSSCS_CONNECTING = 6 % UInt32
const LWSSSCS_DESTROYING = 7 % UInt32
const LWSSSCS_POLL = 8 % UInt32
const LWSSSCS_ALL_RETRIES_FAILED = 9 % UInt32
const LWSSSCS_QOS_ACK_REMOTE = 10 % UInt32
const LWSSSCS_QOS_NACK_REMOTE = 11 % UInt32
const LWSSSCS_QOS_ACK_LOCAL = 12 % UInt32
const LWSSSCS_QOS_NACK_LOCAL = 13 % UInt32
const LWSSSCS_TIMEOUT = 14 % UInt32
const LWSSSCS_SERVER_TXN = 15 % UInt32
const LWSSSCS_SERVER_UPGRADE = 16 % UInt32
const LWSSSCS_EVENT_WAIT_CANCELLED = 17 % UInt32
const LWSSSCS_UPSTREAM_LINK_RETRY = 18 % UInt32
const LWSSSCS_SINK_JOIN = 19 % UInt32
const LWSSSCS_SINK_PART = 20 % UInt32
const LWSSSCS_USER_BASE = 1000 % UInt32

const __JL_Ctag_48 = UInt32
const LWSSS_FLAG_SOM = 1 % UInt32
const LWSSS_FLAG_EOM = 2 % UInt32
const LWSSS_FLAG_POLL = 4 % UInt32
const LWSSS_FLAG_RELATED_START = 8 % UInt32
const LWSSS_FLAG_RELATED_END = 16 % UInt32
const LWSSS_FLAG_RIDESHARE = 32 % UInt32
const LWSSS_FLAG_PERF_JSON = 64 % UInt32
const LWSSS_SER_RXPRE_RX_PAYLOAD = 85 % UInt32
const LWSSS_SER_RXPRE_CREATE_RESULT = 86 % UInt32
const LWSSS_SER_RXPRE_CONNSTATE = 87 % UInt32
const LWSSS_SER_RXPRE_TXCR_UPDATE = 88 % UInt32
const LWSSS_SER_RXPRE_METADATA = 89 % UInt32
const LWSSS_SER_RXPRE_TLSNEG_ENCLAVE_SIGN = 90 % UInt32
const LWSSS_SER_RXPRE_PERF = 91 % UInt32
const LWSSS_SER_TXPRE_STREAMTYPE = 170 % UInt32
const LWSSS_SER_TXPRE_ONWARD_CONNECT = 171 % UInt32
const LWSSS_SER_TXPRE_DESTROYING = 172 % UInt32
const LWSSS_SER_TXPRE_TX_PAYLOAD = 173 % UInt32
const LWSSS_SER_TXPRE_METADATA = 174 % UInt32
const LWSSS_SER_TXPRE_TXCR_UPDATE = 175 % UInt32
const LWSSS_SER_TXPRE_TIMEOUT_UPDATE = 176 % UInt32
const LWSSS_SER_TXPRE_PAYLOAD_LENGTH_HINT = 177 % UInt32
const LWSSS_SER_TXPRE_TLSNEG_ENCLAVE_SIGNED = 178 % UInt32

const lws_ss_conn_states_t = UInt32
const LPCSPROX_WAIT_INITIAL_TX = 1 % UInt32
const LPCSPROX_REPORTING_FAIL = 2 % UInt32
const LPCSPROX_REPORTING_OK = 3 % UInt32
const LPCSPROX_OPERATIONAL = 4 % UInt32
const LPCSPROX_DESTROYED = 5 % UInt32
const LPCSCLI_SENDING_INITIAL_TX = 6 % UInt32
const LPCSCLI_WAITING_CREATE_RESULT = 7 % UInt32
const LPCSCLI_LOCAL_CONNECTED = 8 % UInt32
const LPCSCLI_ONWARD_CONNECT = 9 % UInt32
const LPCSCLI_OPERATIONAL = 10 % UInt32

const lws_ss_state_return = Int32
const LWSSSSRET_TX_DONT_SEND = 1 % Int32
const LWSSSSRET_OK = 0 % Int32
const LWSSSSRET_DISCONNECT_ME = -1 % Int32
const LWSSSSRET_DESTROY_ME = -2 % Int32

const lws_ss_state_return_t = lws_ss_state_return

const __JL_Ctag_50 = UInt32
const LWSSSINFLAGS_REGISTER_SINK = 1 % UInt32
const LWSSSINFLAGS_PROXIED = 2 % UInt32
const LWSSSINFLAGS_SERVER = 4 % UInt32
const LWSSSINFLAGS_ACCEPTED = 8 % UInt32

# typedef lws_ss_state_return_t ( * lws_sscb_rx ) ( void * userobj , const uint8_t * buf , size_t len , int flags )
const lws_sscb_rx = Ptr{Cvoid}

# typedef lws_ss_state_return_t ( * lws_sscb_tx ) ( void * userobj , lws_ss_tx_ordinal_t ord , uint8_t * buf , size_t * len , int * flags )
const lws_sscb_tx = Ptr{Cvoid}

# typedef lws_ss_state_return_t ( * lws_sscb_state ) ( void * userobj , void * h_src , lws_ss_constate_t state , lws_ss_tx_ordinal_t ack )
const lws_sscb_state = Ptr{Cvoid}

mutable struct lws_ss_info
    streamtype::Ptr{Cchar}
    user_alloc::Csize_t
    handle_offset::Csize_t
    opaque_user_data_offset::Csize_t
    rx::lws_sscb_rx
    tx::lws_sscb_tx
    state::lws_sscb_state
    manual_initial_tx_credit::Cint
    client_pid::UInt32
    flags::UInt8
    sss_protocol_version::UInt8
    lws_ss_info() = new()
end

const lws_ss_info_t = lws_ss_info

function lws_ss_create(context, tsi, ssi, opaque_user_data, ppss, seq_owner, ppayload_fmt)
    @ccall libwebsockets.lws_ss_create(context::Ptr{lws_context}, tsi::Cint, ssi::Ptr{lws_ss_info_t}, opaque_user_data::Ptr{Cvoid}, ppss::Ptr{Ptr{lws_ss_handle}}, seq_owner::Ptr{lws_sequencer}, ppayload_fmt::Ptr{Ptr{Cchar}})::Cint
end

function lws_ss_destroy(ppss)
    @ccall libwebsockets.lws_ss_destroy(ppss::Ptr{Ptr{lws_ss_handle}})::Cvoid
end

function lws_ss_request_tx(pss)
    @ccall libwebsockets.lws_ss_request_tx(pss::Ptr{lws_ss_handle})::lws_ss_state_return_t
end

function lws_ss_request_tx_len(pss, len)
    @ccall libwebsockets.lws_ss_request_tx_len(pss::Ptr{lws_ss_handle}, len::Culong)::lws_ss_state_return_t
end

function lws_ss_client_connect(h)
    @ccall libwebsockets.lws_ss_client_connect(h::Ptr{lws_ss_handle})::lws_ss_state_return_t
end

function lws_ss_get_sequencer(h)
    @ccall libwebsockets.lws_ss_get_sequencer(h::Ptr{lws_ss_handle})::Ptr{lws_sequencer}
end

function lws_ss_proxy_create(context, bind, port)
    @ccall libwebsockets.lws_ss_proxy_create(context::Ptr{lws_context}, bind::Ptr{Cchar}, port::Cint)::Cint
end

function lws_ss_state_name(state)
    @ccall libwebsockets.lws_ss_state_name(state::Cint)::Ptr{Cchar}
end

function lws_ss_get_context(h)
    @ccall libwebsockets.lws_ss_get_context(h::Ptr{lws_ss_handle})::Ptr{lws_context}
end

function lws_ss_start_timeout(h, timeout_ms)
    @ccall libwebsockets.lws_ss_start_timeout(h::Ptr{lws_ss_handle}, timeout_ms::Cuint)::Cvoid
end

function lws_ss_cancel_timeout(h)
    @ccall libwebsockets.lws_ss_cancel_timeout(h::Ptr{lws_ss_handle})::Cvoid
end

function lws_ss_to_user_object(h)
    @ccall libwebsockets.lws_ss_to_user_object(h::Ptr{lws_ss_handle})::Ptr{Cvoid}
end

function lws_ss_rideshare(h)
    @ccall libwebsockets.lws_ss_rideshare(h::Ptr{lws_ss_handle})::Ptr{Cchar}
end

function lws_ss_set_metadata(h, name, value, len)
    @ccall libwebsockets.lws_ss_set_metadata(h::Ptr{lws_ss_handle}, name::Ptr{Cchar}, value::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_ss_alloc_set_metadata(h, name, value, len)
    @ccall libwebsockets.lws_ss_alloc_set_metadata(h::Ptr{lws_ss_handle}, name::Ptr{Cchar}, value::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_ss_get_metadata(h, name, value, len)
    @ccall libwebsockets.lws_ss_get_metadata(h::Ptr{lws_ss_handle}, name::Ptr{Cchar}, value::Ptr{Ptr{Cvoid}}, len::Ptr{Csize_t})::Cint
end

function lws_ss_server_ack(h, nack)
    @ccall libwebsockets.lws_ss_server_ack(h::Ptr{lws_ss_handle}, nack::Cint)::Cvoid
end

# typedef void ( * lws_sssfec_cb ) ( struct lws_ss_handle * h , void * arg )
const lws_sssfec_cb = Ptr{Cvoid}

function lws_ss_server_foreach_client(h, cb, arg)
    @ccall libwebsockets.lws_ss_server_foreach_client(h::Ptr{lws_ss_handle}, cb::lws_sssfec_cb, arg::Ptr{Cvoid})::Cvoid
end

function lws_ss_change_handlers(h, rx, tx, state)
    @ccall libwebsockets.lws_ss_change_handlers(h::Ptr{lws_ss_handle}, rx::lws_sscb_rx, tx::lws_sscb_tx, state::lws_sscb_state)::Cvoid
end

function lws_ss_add_peer_tx_credit(h, add)
    @ccall libwebsockets.lws_ss_add_peer_tx_credit(h::Ptr{lws_ss_handle}, add::Int32)::Cint
end

function lws_ss_get_est_peer_tx_credit(h)
    @ccall libwebsockets.lws_ss_get_est_peer_tx_credit(h::Ptr{lws_ss_handle})::Cint
end

function lws_ss_tag(h)
    @ccall libwebsockets.lws_ss_tag(h::Ptr{lws_ss_handle})::Ptr{Cchar}
end

# typedef int ( * plugin_auth_status_cb ) ( struct lws_ss_handle * ss , int status )
const plugin_auth_status_cb = Ptr{Cvoid}

struct lws_metric_policy
    next::Ptr{lws_metric_policy}
    name::Ptr{Cchar}
    report::Ptr{Cchar}
    us_schedule::UInt64
    us_decay_unit::UInt32
    min_contributors::UInt8
end

const lws_metric_policy_t = lws_metric_policy

struct lws_ss_x509
    data::NTuple{40, UInt8}
end

function Base.getproperty(x::Ptr{lws_ss_x509}, f::Symbol)
    f === :next && return Ptr{Ptr{lws_ss_x509}}(x + 0)
    f === :vhost_name && return Ptr{Ptr{Cchar}}(x + 8)
    f === :ca_der && return Ptr{Ptr{UInt8}}(x + 16)
    f === :ca_der_len && return Ptr{Csize_t}(x + 24)
    f === :keep && return (Ptr{UInt8}(x + 32), 0, 1)
    return getfield(x, f)
end

function Base.getproperty(x::lws_ss_x509, f::Symbol)
    r = Ref{lws_ss_x509}(x)
    ptr = Base.unsafe_convert(Ptr{lws_ss_x509}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_ss_x509}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

const lws_ss_x509_t = lws_ss_x509

const __JL_Ctag_51 = UInt32
const LWSSSPOLF_OPPORTUNISTIC = 1 % UInt32
const LWSSSPOLF_NAILED_UP = 2 % UInt32
const LWSSSPOLF_URGENT_TX = 4 % UInt32
const LWSSSPOLF_URGENT_RX = 8 % UInt32
const LWSSSPOLF_TLS = 16 % UInt32
const LWSSSPOLF_LONG_POLL = 32 % UInt32
const LWSSSPOLF_AUTH_BEARER = 64 % UInt32
const LWSSSPOLF_HTTP_NO_CONTENT_LENGTH = 128 % UInt32
const LWSSSPOLF_QUIRK_NGHTTP2_END_STREAM = 256 % UInt32
const LWSSSPOLF_H2_QUIRK_OVERFLOWS_TXCR = 512 % UInt32
const LWSSSPOLF_H2_QUIRK_UNCLEAN_HPACK_STATE = 1024 % UInt32
const LWSSSPOLF_HTTP_MULTIPART = 2048 % UInt32
const LWSSSPOLF_HTTP_X_WWW_FORM_URLENCODED = 4096 % UInt32
const LWSSSPOLF_LOCAL_SINK = 8192 % UInt32
const LWSSSPOLF_WAKE_SUSPEND__VALIDITY = 16384 % UInt32
const LWSSSPOLF_SERVER = 32768 % UInt32
const LWSSSPOLF_ALLOW_REDIRECTS = 65536 % UInt32
const LWSSSPOLF_HTTP_MULTIPART_IN = 131072 % UInt32
const LWSSSPOLF_ATTR_LOW_LATENCY = 262144 % UInt32
const LWSSSPOLF_ATTR_HIGH_THROUGHPUT = 524288 % UInt32
const LWSSSPOLF_ATTR_HIGH_RELIABILITY = 1048576 % UInt32
const LWSSSPOLF_ATTR_LOW_COST = 2097152 % UInt32
const LWSSSPOLF_PERF = 4194304 % UInt32
const LWSSSPOLF_DIRECT_PROTO_STR = 8388608 % UInt32
const LWSSSPOLF_HTTP_CACHE_COOKIES = 16777216 % UInt32
const LWSSSPOLF_PRIORITIZE_READS = 33554432 % UInt32

struct lws_ss_trust_store
    next::Ptr{lws_ss_trust_store}
    name::Ptr{Cchar}
    ssx509::NTuple{6, Ptr{lws_ss_x509_t}}
    count::Cint
end

const lws_ss_trust_store_t = lws_ss_trust_store

const __JL_Ctag_52 = UInt32
const LWSSSP_H1 = 0 % UInt32
const LWSSSP_H2 = 1 % UInt32
const LWSSSP_WS = 2 % UInt32
const LWSSSP_MQTT = 3 % UInt32
const LWSSSP_RAW = 4 % UInt32
const LWSSS_HBI_AUTH = 0 % UInt32
const LWSSS_HBI_DSN = 1 % UInt32
const LWSSS_HBI_FWV = 2 % UInt32
const LWSSS_HBI_TYPE = 3 % UInt32
const _LWSSS_HBI_COUNT = 4 % UInt32

struct lws_ss_metadata
    data::NTuple{40, UInt8}
end

function Base.getproperty(x::Ptr{lws_ss_metadata}, f::Symbol)
    f === :next && return Ptr{Ptr{lws_ss_metadata}}(x + 0)
    f === :name && return Ptr{Ptr{Cchar}}(x + 8)
    f === :value__may_own_heap && return Ptr{Ptr{Cvoid}}(x + 16)
    f === :length && return Ptr{Csize_t}(x + 24)
    f === :value_length && return Ptr{UInt8}(x + 32)
    f === :value_is_http_token && return Ptr{UInt8}(x + 33)
    f === :value_on_lws_heap && return (Ptr{UInt8}(x + 32), 16, 1)
    return getfield(x, f)
end

function Base.getproperty(x::lws_ss_metadata, f::Symbol)
    r = Ref{lws_ss_metadata}(x)
    ptr = Base.unsafe_convert(Ptr{lws_ss_metadata}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_ss_metadata}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

const lws_ss_metadata_t = lws_ss_metadata

mutable struct lws_ss_http_respmap
    resp::UInt16
    state::UInt16
    lws_ss_http_respmap() = new()
end

const lws_ss_http_respmap_t = lws_ss_http_respmap

struct lws_ss_auth
    next::Ptr{lws_ss_auth}
    name::Ptr{Cchar}
    type::Ptr{Cchar}
    streamtype::Ptr{Cchar}
    blob_index::UInt8
end

const lws_ss_auth_t = lws_ss_auth

struct __JL_Ctag_71
    data::NTuple{112, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_71}, f::Symbol)
    f === :http && return Ptr{Cvoid}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_71, f::Symbol)
    r = Ref{__JL_Ctag_71}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_71}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_71}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct __JL_Ctag_75
    data::NTuple{16, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_75}, f::Symbol)
    f === :store && return Ptr{Ptr{lws_ss_trust_store_t}}(x + 0)
    f === :server && return Ptr{__JL_Ctag_76}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_75, f::Symbol)
    r = Ref{__JL_Ctag_75}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_75}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_75}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_ss_policy
    data::NTuple{248, UInt8}
end

function Base.getproperty(x::Ptr{lws_ss_policy}, f::Symbol)
    f === :next && return Ptr{Ptr{lws_ss_policy}}(x + 0)
    f === :streamtype && return Ptr{Ptr{Cchar}}(x + 8)
    f === :endpoint && return Ptr{Ptr{Cchar}}(x + 16)
    f === :rideshare_streamtype && return Ptr{Ptr{Cchar}}(x + 24)
    f === :payload_fmt && return Ptr{Ptr{Cchar}}(x + 32)
    f === :socks5_proxy && return Ptr{Ptr{Cchar}}(x + 40)
    f === :metadata && return Ptr{Ptr{lws_ss_metadata_t}}(x + 48)
    f === :metrics && return Ptr{Ptr{lws_metric_policy_t}}(x + 56)
    f === :auth && return Ptr{Ptr{lws_ss_auth_t}}(x + 64)
    f === :u && return Ptr{__JL_Ctag_71}(x + 72)
    f === :trust && return Ptr{__JL_Ctag_75}(x + 184)
    f === :retry_bo && return Ptr{Ptr{lws_retry_bo_t}}(x + 200)
    f === :proxy_buflen && return Ptr{UInt32}(x + 208)
    f === :proxy_buflen_rxflow_on_above && return Ptr{UInt32}(x + 212)
    f === :proxy_buflen_rxflow_off_below && return Ptr{UInt32}(x + 216)
    f === :client_buflen && return Ptr{UInt32}(x + 220)
    f === :client_buflen_rxflow_on_above && return Ptr{UInt32}(x + 224)
    f === :client_buflen_rxflow_off_below && return Ptr{UInt32}(x + 228)
    f === :timeout_ms && return Ptr{UInt32}(x + 232)
    f === :flags && return Ptr{UInt32}(x + 236)
    f === :port && return Ptr{UInt16}(x + 240)
    f === :metadata_count && return Ptr{UInt8}(x + 242)
    f === :protocol && return Ptr{UInt8}(x + 243)
    f === :client_cert && return Ptr{UInt8}(x + 244)
    f === :priority && return Ptr{UInt8}(x + 245)
    return getfield(x, f)
end

function Base.getproperty(x::lws_ss_policy, f::Symbol)
    r = Ref{lws_ss_policy}(x)
    ptr = Base.unsafe_convert(Ptr{lws_ss_policy}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_ss_policy}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const lws_ss_policy_t = lws_ss_policy

function lws_ss_policy_parse_begin(context, overlay)
    @ccall libwebsockets.lws_ss_policy_parse_begin(context::Ptr{lws_context}, overlay::Cint)::Cint
end

function lws_ss_policy_parse_abandon(context)
    @ccall libwebsockets.lws_ss_policy_parse_abandon(context::Ptr{lws_context})::Cint
end

function lws_ss_policy_parse(context, buf, len)
    @ccall libwebsockets.lws_ss_policy_parse(context::Ptr{lws_context}, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

function lws_ss_policy_overlay(context, overlay)
    @ccall libwebsockets.lws_ss_policy_overlay(context::Ptr{lws_context}, overlay::Ptr{Cchar})::Cint
end

function lws_ss_policy_get(context)
    @ccall libwebsockets.lws_ss_policy_get(context::Ptr{lws_context})::Ptr{lws_ss_policy_t}
end

function lws_ss_auth_get(context)
    @ccall libwebsockets.lws_ss_auth_get(context::Ptr{lws_context})::Ptr{lws_ss_auth_t}
end

mutable struct lws_sspc_handle end

function lws_sspc_create(context, tsi, ssi, opaque_user_data, ppss, seq_owner, ppayload_fmt)
    @ccall libwebsockets.lws_sspc_create(context::Ptr{lws_context}, tsi::Cint, ssi::Ptr{lws_ss_info_t}, opaque_user_data::Ptr{Cvoid}, ppss::Ptr{Ptr{lws_sspc_handle}}, seq_owner::Ptr{lws_sequencer}, ppayload_fmt::Ptr{Ptr{Cchar}})::Cint
end

function lws_sspc_destroy(ppss)
    @ccall libwebsockets.lws_sspc_destroy(ppss::Ptr{Ptr{lws_sspc_handle}})::Cvoid
end

function lws_sspc_request_tx(pss)
    @ccall libwebsockets.lws_sspc_request_tx(pss::Ptr{lws_sspc_handle})::lws_ss_state_return_t
end

function lws_sspc_request_tx_len(h, len)
    @ccall libwebsockets.lws_sspc_request_tx_len(h::Ptr{lws_sspc_handle}, len::Culong)::lws_ss_state_return_t
end

function lws_sspc_client_connect(h)
    @ccall libwebsockets.lws_sspc_client_connect(h::Ptr{lws_sspc_handle})::lws_ss_state_return_t
end

function lws_sspc_get_sequencer(h)
    @ccall libwebsockets.lws_sspc_get_sequencer(h::Ptr{lws_sspc_handle})::Ptr{lws_sequencer}
end

function lws_sspc_proxy_create(context)
    @ccall libwebsockets.lws_sspc_proxy_create(context::Ptr{lws_context})::Cint
end

function lws_sspc_get_context(h)
    @ccall libwebsockets.lws_sspc_get_context(h::Ptr{lws_sspc_handle})::Ptr{lws_context}
end

function lws_sspc_rideshare(h)
    @ccall libwebsockets.lws_sspc_rideshare(h::Ptr{lws_sspc_handle})::Ptr{Cchar}
end

function lws_sspc_set_metadata(h, name, value, len)
    @ccall libwebsockets.lws_sspc_set_metadata(h::Ptr{lws_sspc_handle}, name::Ptr{Cchar}, value::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_sspc_get_metadata(h, name, value, len)
    @ccall libwebsockets.lws_sspc_get_metadata(h::Ptr{lws_sspc_handle}, name::Ptr{Cchar}, value::Ptr{Ptr{Cvoid}}, len::Ptr{Csize_t})::Cint
end

function lws_sspc_add_peer_tx_credit(h, add)
    @ccall libwebsockets.lws_sspc_add_peer_tx_credit(h::Ptr{lws_sspc_handle}, add::Int32)::Cint
end

function lws_sspc_get_est_peer_tx_credit(h)
    @ccall libwebsockets.lws_sspc_get_est_peer_tx_credit(h::Ptr{lws_sspc_handle})::Cint
end

function lws_sspc_start_timeout(h, timeout_ms)
    @ccall libwebsockets.lws_sspc_start_timeout(h::Ptr{lws_sspc_handle}, timeout_ms::Cuint)::Cvoid
end

function lws_sspc_cancel_timeout(h)
    @ccall libwebsockets.lws_sspc_cancel_timeout(h::Ptr{lws_sspc_handle})::Cvoid
end

function lws_sspc_to_user_object(h)
    @ccall libwebsockets.lws_sspc_to_user_object(h::Ptr{lws_sspc_handle})::Ptr{Cvoid}
end

function lws_sspc_change_handlers(h, rx, tx, state)
    @ccall libwebsockets.lws_sspc_change_handlers(h::Ptr{lws_sspc_handle}, rx::Ptr{Cvoid}, tx::Ptr{Cvoid}, state::Ptr{Cvoid})::Cvoid
end

function lws_sspc_tag(h)
    @ccall libwebsockets.lws_sspc_tag(h::Ptr{lws_sspc_handle})::Ptr{Cchar}
end

struct __JL_Ctag_70
    data::NTuple{8, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_70}, f::Symbol)
    f === :value && return Ptr{Ptr{Cchar}}(x + 0)
    f === :bvalue && return Ptr{Ptr{UInt8}}(x + 0)
    f === :lvalue && return Ptr{Culong}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_70, f::Symbol)
    r = Ref{__JL_Ctag_70}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_70}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_70}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct lws_token_map
    data::NTuple{16, UInt8}
end

function Base.getproperty(x::Ptr{lws_token_map}, f::Symbol)
    f === :u && return Ptr{__JL_Ctag_70}(x + 0)
    f === :name_index && return Ptr{Cshort}(x + 8)
    f === :length_or_zero && return Ptr{Cshort}(x + 10)
    return getfield(x, f)
end

function Base.getproperty(x::lws_token_map, f::Symbol)
    r = Ref{lws_token_map}(x)
    ptr = Base.unsafe_convert(Ptr{lws_token_map}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{lws_token_map}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

const lws_token_map_t = lws_token_map

const __JL_Ctag_53 = UInt32
const LTMI_END_OF_ARRAY = 0 % UInt32
const LTMI_PROTOCOL_BASE = 2048 % UInt32
const LTMI_TRANSPORT_BASE = 4096 % UInt32

mutable struct lws_abs end

const lws_abs_t = lws_abs

function lws_abs_get_token(token_map, name_index)
    @ccall libwebsockets.lws_abs_get_token(token_map::Ptr{lws_token_map_t}, name_index::Cshort)::Ptr{lws_token_map_t}
end

const lws_abs_transport_inst_t = Cvoid

const lws_abs_protocol_inst_t = Cvoid

function lws_abstract_alloc(vhost, user, abstract_path, ap_tokens, at_tokens, seq, opaque_user_data)
    @ccall libwebsockets.lws_abstract_alloc(vhost::Ptr{lws_vhost}, user::Ptr{Cvoid}, abstract_path::Ptr{Cchar}, ap_tokens::Ptr{lws_token_map_t}, at_tokens::Ptr{lws_token_map_t}, seq::Ptr{lws_sequencer}, opaque_user_data::Ptr{Cvoid})::Ptr{lws_abs_t}
end

function lws_abstract_free(pabs)
    @ccall libwebsockets.lws_abstract_free(pabs::Ptr{Ptr{lws_abs_t}})::Cvoid
end

function lws_abs_bind_and_create_instance(ai)
    @ccall libwebsockets.lws_abs_bind_and_create_instance(ai::Ptr{lws_abs_t})::Ptr{lws_abs_t}
end

function lws_abs_destroy_instance(ai)
    @ccall libwebsockets.lws_abs_destroy_instance(ai::Ptr{Ptr{lws_abs_t}})::Cvoid
end

const __JL_Ctag_54 = UInt32
const LWS_AP_FLAG_PIPELINE_TRANSACTIONS = 1 % UInt32
const LWS_AP_FLAG_MUXABLE_STREAM = 2 % UInt32

mutable struct lws_abs_protocol
    name::Ptr{Cchar}
    alloc::Cint
    flags::Cint
    create::Ptr{Cvoid}
    destroy::Ptr{Cvoid}
    compare::Ptr{Cvoid}
    accept::Ptr{Cvoid}
    rx::Ptr{Cvoid}
    writeable::Ptr{Cvoid}
    closed::Ptr{Cvoid}
    heartbeat::Ptr{Cvoid}
    child_bind::Ptr{Cvoid}
    lws_abs_protocol() = new()
end

const lws_abs_protocol_t = lws_abs_protocol

function lws_abs_protocol_get_by_name(name)
    @ccall libwebsockets.lws_abs_protocol_get_by_name(name::Ptr{Cchar})::Ptr{lws_abs_protocol_t}
end

mutable struct lws_abs_transport
    name::Ptr{Cchar}
    alloc::Cint
    create::Ptr{Cvoid}
    destroy::Ptr{Cvoid}
    compare::Ptr{Cvoid}
    tx::Ptr{Cvoid}
    client_conn::Ptr{Cvoid}
    close::Ptr{Cvoid}
    ask_for_writeable::Ptr{Cvoid}
    set_timeout::Ptr{Cvoid}
    state::Ptr{Cvoid}
    lws_abs_transport() = new()
end

const lws_abs_transport_t = lws_abs_transport

function lws_abs_transport_get_by_name(name)
    @ccall libwebsockets.lws_abs_transport_get_by_name(name::Ptr{Cchar})::Ptr{lws_abs_transport_t}
end

const __JL_Ctag_55 = UInt32
const LTMI_PEER_V_DNS_ADDRESS = 4096 % UInt32
const LTMI_PEER_LV_PORT = 4097 % UInt32
const LTMI_PEER_LV_TLS_FLAGS = 4098 % UInt32

const __JL_Ctag_56 = UInt32
const LWS_AUT_EXPECT_TEST_END = 1 % UInt32
const LWS_AUT_EXPECT_LOCAL_CLOSE = 2 % UInt32
const LWS_AUT_EXPECT_DO_REMOTE_CLOSE = 4 % UInt32
const LWS_AUT_EXPECT_TX = 8 % UInt32
const LWS_AUT_EXPECT_RX = 16 % UInt32
const LWS_AUT_EXPECT_SHOULD_FAIL = 32 % UInt32
const LWS_AUT_EXPECT_SHOULD_TIMEOUT = 64 % UInt32

const lws_unit_test_packet_disposition = UInt32
const LPE_CONTINUE = 0 % UInt32
const LPE_SUCCEEDED = 1 % UInt32
const LPE_FAILED = 2 % UInt32
const LPE_FAILED_UNEXPECTED_TIMEOUT = 3 % UInt32
const LPE_FAILED_UNEXPECTED_PASS = 4 % UInt32
const LPE_FAILED_UNEXPECTED_CLOSE = 5 % UInt32
const LPE_SKIPPED = 6 % UInt32
const LPE_CLOSING = 7 % UInt32

# typedef int ( * lws_unit_test_packet_test_cb ) ( const void * cb_user , int disposition )
const lws_unit_test_packet_test_cb = Ptr{Cvoid}

# typedef int ( * lws_unit_test_packet_cb ) ( lws_abs_t * instance )
const lws_unit_test_packet_cb = Ptr{Cvoid}

struct lws_unit_test_packet
    buffer::Ptr{Cvoid}
    pre::lws_unit_test_packet_cb
    len::Csize_t
    flags::UInt32
end

const lws_unit_test_packet_t = lws_unit_test_packet

struct lws_unit_test
    name::Ptr{Cchar}
    expect_array::Ptr{lws_unit_test_packet_t}
    max_secs::Cint
end

const lws_unit_test_t = lws_unit_test

const __JL_Ctag_58 = UInt32
const LTMI_PEER_V_EXPECT_TEST = 4096 % UInt32
const LTMI_PEER_V_EXPECT_RESULT_CB = 4097 % UInt32
const LTMI_PEER_V_EXPECT_RESULT_CB_ARG = 4098 % UInt32

function lws_unit_test_result_name(in)
    @ccall libwebsockets.lws_unit_test_result_name(in::Cint)::Ptr{Cchar}
end

# typedef void ( * lws_test_sequence_cb ) ( const void * cb_user )
const lws_test_sequence_cb = Ptr{Cvoid}

mutable struct lws_test_sequencer_args
    abs::Ptr{lws_abs_t}
    tests::Ptr{lws_unit_test_t}
    results::Ptr{Cint}
    results_max::Cint
    count_tests::Ptr{Cint}
    count_passes::Ptr{Cint}
    cb::lws_test_sequence_cb
    cb_user::Ptr{Cvoid}
    lws_test_sequencer_args() = new()
end

const lws_test_sequencer_args_t = lws_test_sequencer_args

function lws_abs_unit_test_sequencer(args)
    @ccall libwebsockets.lws_abs_unit_test_sequencer(args::Ptr{lws_test_sequencer_args_t})::Cint
end

const dns_query_type = UInt32
const LWS_ADNS_RECORD_A = 1 % UInt32
const LWS_ADNS_RECORD_CNAME = 5 % UInt32
const LWS_ADNS_RECORD_MX = 15 % UInt32
const LWS_ADNS_RECORD_AAAA = 28 % UInt32

const adns_query_type_t = dns_query_type

const lws_async_dns_retcode_t = Int32
const LADNS_RET_FAILED_WSI_CLOSED = -4 % Int32
const LADNS_RET_NXDOMAIN = -3 % Int32
const LADNS_RET_TIMEDOUT = -2 % Int32
const LADNS_RET_FAILED = -1 % Int32
const LADNS_RET_FOUND = 0 % Int32
const LADNS_RET_CONTINUING = 1 % Int32

# typedef struct lws * ( * lws_async_dns_cb_t ) ( struct lws * wsi , const char * ads , const struct addrinfo * result , int n , void * opaque )
const lws_async_dns_cb_t = Ptr{Cvoid}

function lws_async_dns_query(context, tsi, name, qtype, cb, wsi, opaque)
    @ccall libwebsockets.lws_async_dns_query(context::Ptr{lws_context}, tsi::Cint, name::Ptr{Cchar}, qtype::adns_query_type_t, cb::lws_async_dns_cb_t, wsi::Ptr{lws}, opaque::Ptr{Cvoid})::lws_async_dns_retcode_t
end

function lws_async_dns_freeaddrinfo(ai)
    @ccall libwebsockets.lws_async_dns_freeaddrinfo(ai::Ptr{Ptr{addrinfo}})::Cvoid
end

mutable struct lws_tls_session_dump
    tag::NTuple{96, Cchar}
    blob::Ptr{Cvoid}
    opaque::Ptr{Cvoid}
    blob_len::Csize_t
    lws_tls_session_dump() = new()
end

# typedef int ( * lws_tls_sess_cb_t ) ( struct lws_context * cx , struct lws_tls_session_dump * info )
const lws_tls_sess_cb_t = Ptr{Cvoid}

function lws_tls_session_dump_save(vh, host, port, cb_save, opq)
    @ccall libwebsockets.lws_tls_session_dump_save(vh::Ptr{lws_vhost}, host::Ptr{Cchar}, port::UInt16, cb_save::lws_tls_sess_cb_t, opq::Ptr{Cvoid})::Cint
end

function lws_tls_session_dump_load(vh, host, port, cb_load, opq)
    @ccall libwebsockets.lws_tls_session_dump_load(vh::Ptr{lws_vhost}, host::Ptr{Cchar}, port::UInt16, cb_load::lws_tls_sess_cb_t, opq::Ptr{Cvoid})::Cint
end

const lws_genhash_types = UInt32
const LWS_GENHASH_TYPE_UNKNOWN = 0 % UInt32
const LWS_GENHASH_TYPE_MD5 = 1 % UInt32
const LWS_GENHASH_TYPE_SHA1 = 2 % UInt32
const LWS_GENHASH_TYPE_SHA256 = 3 % UInt32
const LWS_GENHASH_TYPE_SHA384 = 4 % UInt32
const LWS_GENHASH_TYPE_SHA512 = 5 % UInt32

const lws_genhmac_types = UInt32
const LWS_GENHMAC_TYPE_UNKNOWN = 0 % UInt32
const LWS_GENHMAC_TYPE_SHA256 = 1 % UInt32
const LWS_GENHMAC_TYPE_SHA384 = 2 % UInt32
const LWS_GENHMAC_TYPE_SHA512 = 3 % UInt32

struct lws_genhash_ctx
    type::UInt8
    evp_type::Ptr{EVP_MD}
    mdctx::Ptr{EVP_MD_CTX}
end

struct lws_genhmac_ctx
    type::UInt8
    evp_type::Ptr{EVP_MD}
    ctx::Ptr{EVP_MD_CTX}
    key::Ptr{EVP_PKEY}
end

function lws_genhash_size(type)
    @ccall libwebsockets.lws_genhash_size(type::lws_genhash_types)::Csize_t
end

function lws_genhmac_size(type)
    @ccall libwebsockets.lws_genhmac_size(type::lws_genhmac_types)::Csize_t
end

function lws_genhash_init(ctx, type)
    @ccall libwebsockets.lws_genhash_init(ctx::Ptr{lws_genhash_ctx}, type::lws_genhash_types)::Cint
end

function lws_genhash_update(ctx, in, len)
    @ccall libwebsockets.lws_genhash_update(ctx::Ptr{lws_genhash_ctx}, in::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_genhash_destroy(ctx, result)
    @ccall libwebsockets.lws_genhash_destroy(ctx::Ptr{lws_genhash_ctx}, result::Ptr{Cvoid})::Cint
end

function lws_genhmac_init(ctx, type, key, key_len)
    @ccall libwebsockets.lws_genhmac_init(ctx::Ptr{lws_genhmac_ctx}, type::lws_genhmac_types, key::Ptr{UInt8}, key_len::Csize_t)::Cint
end

function lws_genhmac_update(ctx, in, len)
    @ccall libwebsockets.lws_genhmac_update(ctx::Ptr{lws_genhmac_ctx}, in::Ptr{Cvoid}, len::Csize_t)::Cint
end

function lws_genhmac_destroy(ctx, result)
    @ccall libwebsockets.lws_genhmac_destroy(ctx::Ptr{lws_genhmac_ctx}, result::Ptr{Cvoid})::Cint
end

const enum_genrsa_mode = UInt32
const LGRSAM_PKCS1_1_5 = 0 % UInt32
const LGRSAM_PKCS1_OAEP_PSS = 1 % UInt32
const LGRSAM_COUNT = 2 % UInt32

struct lws_genrsa_ctx
    bn::NTuple{12, Ptr{BIGNUM}}
    ctx::Ptr{EVP_PKEY_CTX}
    rsa::Ptr{RSA}
    context::Ptr{lws_context}
    mode::enum_genrsa_mode
end

function lws_genrsa_create(ctx, el, context, mode, oaep_hashid)
    @ccall libwebsockets.lws_genrsa_create(ctx::Ptr{lws_genrsa_ctx}, el::Ptr{lws_gencrypto_keyelem}, context::Ptr{lws_context}, mode::enum_genrsa_mode, oaep_hashid::lws_genhash_types)::Cint
end

function lws_genrsa_destroy_elements(el)
    @ccall libwebsockets.lws_genrsa_destroy_elements(el::Ptr{lws_gencrypto_keyelem})::Cvoid
end

function lws_genrsa_new_keypair(context, ctx, mode, el, bits)
    @ccall libwebsockets.lws_genrsa_new_keypair(context::Ptr{lws_context}, ctx::Ptr{lws_genrsa_ctx}, mode::enum_genrsa_mode, el::Ptr{lws_gencrypto_keyelem}, bits::Cint)::Cint
end

function lws_genrsa_public_encrypt(ctx, in, in_len, out)
    @ccall libwebsockets.lws_genrsa_public_encrypt(ctx::Ptr{lws_genrsa_ctx}, in::Ptr{UInt8}, in_len::Csize_t, out::Ptr{UInt8})::Cint
end

function lws_genrsa_private_encrypt(ctx, in, in_len, out)
    @ccall libwebsockets.lws_genrsa_private_encrypt(ctx::Ptr{lws_genrsa_ctx}, in::Ptr{UInt8}, in_len::Csize_t, out::Ptr{UInt8})::Cint
end

function lws_genrsa_public_decrypt(ctx, in, in_len, out, out_max)
    @ccall libwebsockets.lws_genrsa_public_decrypt(ctx::Ptr{lws_genrsa_ctx}, in::Ptr{UInt8}, in_len::Csize_t, out::Ptr{UInt8}, out_max::Csize_t)::Cint
end

function lws_genrsa_private_decrypt(ctx, in, in_len, out, out_max)
    @ccall libwebsockets.lws_genrsa_private_decrypt(ctx::Ptr{lws_genrsa_ctx}, in::Ptr{UInt8}, in_len::Csize_t, out::Ptr{UInt8}, out_max::Csize_t)::Cint
end

function lws_genrsa_hash_sig_verify(ctx, in, hash_type, sig, sig_len)
    @ccall libwebsockets.lws_genrsa_hash_sig_verify(ctx::Ptr{lws_genrsa_ctx}, in::Ptr{UInt8}, hash_type::lws_genhash_types, sig::Ptr{UInt8}, sig_len::Csize_t)::Cint
end

function lws_genrsa_hash_sign(ctx, in, hash_type, sig, sig_len)
    @ccall libwebsockets.lws_genrsa_hash_sign(ctx::Ptr{lws_genrsa_ctx}, in::Ptr{UInt8}, hash_type::lws_genhash_types, sig::Ptr{UInt8}, sig_len::Csize_t)::Cint
end

function lws_genrsa_destroy(ctx)
    @ccall libwebsockets.lws_genrsa_destroy(ctx::Ptr{lws_genrsa_ctx})::Cvoid
end

function lws_genrsa_render_pkey_asn1(ctx, _private, pkey_asn1, pkey_asn1_len)
    @ccall libwebsockets.lws_genrsa_render_pkey_asn1(ctx::Ptr{lws_genrsa_ctx}, _private::Cint, pkey_asn1::Ptr{UInt8}, pkey_asn1_len::Csize_t)::Cint
end

const enum_aes_modes = UInt32
const LWS_GAESM_CBC = 0 % UInt32
const LWS_GAESM_CFB128 = 1 % UInt32
const LWS_GAESM_CFB8 = 2 % UInt32
const LWS_GAESM_CTR = 3 % UInt32
const LWS_GAESM_ECB = 4 % UInt32
const LWS_GAESM_OFB = 5 % UInt32
const LWS_GAESM_XTS = 6 % UInt32
const LWS_GAESM_GCM = 7 % UInt32
const LWS_GAESM_KW = 8 % UInt32

const enum_aes_operation = UInt32
const LWS_GAESO_ENC = 0 % UInt32
const LWS_GAESO_DEC = 1 % UInt32

const enum_aes_padding = UInt32
const LWS_GAESP_NO_PADDING = 0 % UInt32
const LWS_GAESP_WITH_PADDING = 1 % UInt32

struct lws_genaes_ctx
    ctx::Ptr{EVP_CIPHER_CTX}
    cipher::Ptr{EVP_CIPHER}
    engine::Ptr{ENGINE}
    init::Cchar
    tag::NTuple{16, Cuchar}
    k::Ptr{lws_gencrypto_keyelem}
    op::enum_aes_operation
    mode::enum_aes_modes
    padding::enum_aes_padding
    taglen::Cint
    underway::Cchar
end

function lws_genaes_create(ctx, op, mode, el, padding, engine)
    @ccall libwebsockets.lws_genaes_create(ctx::Ptr{lws_genaes_ctx}, op::enum_aes_operation, mode::enum_aes_modes, el::Ptr{lws_gencrypto_keyelem}, padding::enum_aes_padding, engine::Ptr{Cvoid})::Cint
end

function lws_genaes_destroy(ctx, tag, tlen)
    @ccall libwebsockets.lws_genaes_destroy(ctx::Ptr{lws_genaes_ctx}, tag::Ptr{Cuchar}, tlen::Csize_t)::Cint
end

function lws_genaes_crypt(ctx, in, len, out, iv_or_nonce_ctr_or_data_unit_16, stream_block_16, nc_or_iv_off, taglen)
    @ccall libwebsockets.lws_genaes_crypt(ctx::Ptr{lws_genaes_ctx}, in::Ptr{UInt8}, len::Csize_t, out::Ptr{UInt8}, iv_or_nonce_ctr_or_data_unit_16::Ptr{UInt8}, stream_block_16::Ptr{UInt8}, nc_or_iv_off::Ptr{Csize_t}, taglen::Cint)::Cint
end

const enum_genec_alg = UInt32
const LEGENEC_UNKNOWN = 0 % UInt32
const LEGENEC_ECDH = 1 % UInt32
const LEGENEC_ECDSA = 2 % UInt32

struct lws_ec_curves
    name::Ptr{Cchar}
    tls_lib_nid::Cint
    key_bytes::UInt16
end

struct lws_genec_ctx
    ctx::NTuple{2, Ptr{EVP_PKEY_CTX}}
    context::Ptr{lws_context}
    curve_table::Ptr{lws_ec_curves}
    genec_alg::enum_genec_alg
    has_private::Cchar
end

const enum_lws_dh_side = UInt32
const LDHS_OURS = 0 % UInt32
const LDHS_THEIRS = 1 % UInt32

function lws_genecdh_create(ctx, context, curve_table)
    @ccall libwebsockets.lws_genecdh_create(ctx::Ptr{lws_genec_ctx}, context::Ptr{lws_context}, curve_table::Ptr{lws_ec_curves})::Cint
end

function lws_genecdh_set_key(ctx, el, side)
    @ccall libwebsockets.lws_genecdh_set_key(ctx::Ptr{lws_genec_ctx}, el::Ptr{lws_gencrypto_keyelem}, side::enum_lws_dh_side)::Cint
end

function lws_genecdh_new_keypair(ctx, side, curve_name, el)
    @ccall libwebsockets.lws_genecdh_new_keypair(ctx::Ptr{lws_genec_ctx}, side::enum_lws_dh_side, curve_name::Ptr{Cchar}, el::Ptr{lws_gencrypto_keyelem})::Cint
end

function lws_genecdh_compute_shared_secret(ctx, ss, ss_len)
    @ccall libwebsockets.lws_genecdh_compute_shared_secret(ctx::Ptr{lws_genec_ctx}, ss::Ptr{UInt8}, ss_len::Ptr{Cint})::Cint
end

function lws_genecdsa_create(ctx, context, curve_table)
    @ccall libwebsockets.lws_genecdsa_create(ctx::Ptr{lws_genec_ctx}, context::Ptr{lws_context}, curve_table::Ptr{lws_ec_curves})::Cint
end

function lws_genecdsa_new_keypair(ctx, curve_name, el)
    @ccall libwebsockets.lws_genecdsa_new_keypair(ctx::Ptr{lws_genec_ctx}, curve_name::Ptr{Cchar}, el::Ptr{lws_gencrypto_keyelem})::Cint
end

function lws_genecdsa_set_key(ctx, el)
    @ccall libwebsockets.lws_genecdsa_set_key(ctx::Ptr{lws_genec_ctx}, el::Ptr{lws_gencrypto_keyelem})::Cint
end

function lws_genecdsa_hash_sig_verify_jws(ctx, in, hash_type, keybits, sig, sig_len)
    @ccall libwebsockets.lws_genecdsa_hash_sig_verify_jws(ctx::Ptr{lws_genec_ctx}, in::Ptr{UInt8}, hash_type::lws_genhash_types, keybits::Cint, sig::Ptr{UInt8}, sig_len::Csize_t)::Cint
end

function lws_genecdsa_hash_sign_jws(ctx, in, hash_type, keybits, sig, sig_len)
    @ccall libwebsockets.lws_genecdsa_hash_sign_jws(ctx::Ptr{lws_genec_ctx}, in::Ptr{UInt8}, hash_type::lws_genhash_types, keybits::Cint, sig::Ptr{UInt8}, sig_len::Csize_t)::Cint
end

function lws_genec_destroy(ctx)
    @ccall libwebsockets.lws_genec_destroy(ctx::Ptr{lws_genec_ctx})::Cvoid
end

function lws_genec_destroy_elements(el)
    @ccall libwebsockets.lws_genec_destroy_elements(el::Ptr{lws_gencrypto_keyelem})::Cvoid
end

function lws_genec_dump(el)
    @ccall libwebsockets.lws_genec_dump(el::Ptr{lws_gencrypto_keyelem})::Cint
end

const enum_jwk_meta_tok = UInt32
const JWK_META_KTY = 0 % UInt32
const JWK_META_KID = 1 % UInt32
const JWK_META_USE = 2 % UInt32
const JWK_META_KEY_OPS = 3 % UInt32
const JWK_META_X5C = 4 % UInt32
const JWK_META_ALG = 5 % UInt32
const LWS_COUNT_JWK_ELEMENTS = 6 % UInt32

# typedef int ( * lws_jwk_key_import_callback ) ( struct lws_jwk * s , void * user )
const lws_jwk_key_import_callback = Ptr{Cvoid}

mutable struct lws_jwk_parse_state
    jwk::Ptr{lws_jwk}
    b64::NTuple{1366, Cchar}
    per_key_cb::lws_jwk_key_import_callback
    user::Ptr{Cvoid}
    pos::Cint
    cose_state::Cint
    seen::Cint
    possible::Cushort
    lws_jwk_parse_state() = new()
end

function lws_jwk_import(jwk, cb, user, in, len)
    @ccall libwebsockets.lws_jwk_import(jwk::Ptr{lws_jwk}, cb::lws_jwk_key_import_callback, user::Ptr{Cvoid}, in::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_jwk_destroy(jwk)
    @ccall libwebsockets.lws_jwk_destroy(jwk::Ptr{lws_jwk})::Cvoid
end

function lws_jwk_dup_oct(jwk, key, len)
    @ccall libwebsockets.lws_jwk_dup_oct(jwk::Ptr{lws_jwk}, key::Ptr{Cvoid}, len::Cint)::Cint
end

function lws_jwk_export(jwk, flags, p, len)
    @ccall libwebsockets.lws_jwk_export(jwk::Ptr{lws_jwk}, flags::Cint, p::Ptr{Cchar}, len::Ptr{Cint})::Cint
end

function lws_jwk_load(jwk, filename, cb, user)
    @ccall libwebsockets.lws_jwk_load(jwk::Ptr{lws_jwk}, filename::Ptr{Cchar}, cb::lws_jwk_key_import_callback, user::Ptr{Cvoid})::Cint
end

function lws_jwk_save(jwk, filename)
    @ccall libwebsockets.lws_jwk_save(jwk::Ptr{lws_jwk}, filename::Ptr{Cchar})::Cint
end

function lws_jwk_rfc7638_fingerprint(jwk, digest32)
    @ccall libwebsockets.lws_jwk_rfc7638_fingerprint(jwk::Ptr{lws_jwk}, digest32::Ptr{Cchar})::Cint
end

function lws_jwk_strdup_meta(jwk, idx, in, len)
    @ccall libwebsockets.lws_jwk_strdup_meta(jwk::Ptr{lws_jwk}, idx::enum_jwk_meta_tok, in::Ptr{Cchar}, len::Cint)::Cint
end

function lws_jwk_dump(jwk)
    @ccall libwebsockets.lws_jwk_dump(jwk::Ptr{lws_jwk})::Cint
end

function lws_jwk_generate(context, jwk, kty, bits, curve)
    @ccall libwebsockets.lws_jwk_generate(context::Ptr{lws_context}, jwk::Ptr{lws_jwk}, kty::lws_gencrypto_kty, bits::Cint, curve::Ptr{Cchar})::Cint
end

const lws_jws_jose_hdr_indexes = UInt32
const LJJHI_ALG = 0 % UInt32
const LJJHI_JKU = 1 % UInt32
const LJJHI_JWK = 2 % UInt32
const LJJHI_KID = 3 % UInt32
const LJJHI_X5U = 4 % UInt32
const LJJHI_X5C = 5 % UInt32
const LJJHI_X5T = 6 % UInt32
const LJJHI_X5T_S256 = 7 % UInt32
const LJJHI_TYP = 8 % UInt32
const LJJHI_CTY = 9 % UInt32
const LJJHI_CRIT = 10 % UInt32
const LJJHI_RECIPS_HDR = 11 % UInt32
const LJJHI_RECIPS_HDR_ALG = 12 % UInt32
const LJJHI_RECIPS_HDR_KID = 13 % UInt32
const LJJHI_RECIPS_EKEY = 14 % UInt32
const LJJHI_ENC = 15 % UInt32
const LJJHI_ZIP = 16 % UInt32
const LJJHI_EPK = 17 % UInt32
const LJJHI_APU = 18 % UInt32
const LJJHI_APV = 19 % UInt32
const LJJHI_IV = 20 % UInt32
const LJJHI_TAG = 21 % UInt32
const LJJHI_P2S = 22 % UInt32
const LJJHI_P2C = 23 % UInt32
const LWS_COUNT_JOSE_HDR_ELEMENTS = 24 % UInt32

const lws_jose_algtype = UInt32
const LWS_JOSE_ENCTYPE_NONE = 0 % UInt32
const LWS_JOSE_ENCTYPE_RSASSA_PKCS1_1_5 = 1 % UInt32
const LWS_JOSE_ENCTYPE_RSASSA_PKCS1_OAEP = 2 % UInt32
const LWS_JOSE_ENCTYPE_RSASSA_PKCS1_PSS = 3 % UInt32
const LWS_JOSE_ENCTYPE_ECDSA = 4 % UInt32
const LWS_JOSE_ENCTYPE_ECDHES = 5 % UInt32
const LWS_JOSE_ENCTYPE_AES_CBC = 6 % UInt32
const LWS_JOSE_ENCTYPE_AES_CFB128 = 7 % UInt32
const LWS_JOSE_ENCTYPE_AES_CFB8 = 8 % UInt32
const LWS_JOSE_ENCTYPE_AES_CTR = 9 % UInt32
const LWS_JOSE_ENCTYPE_AES_ECB = 10 % UInt32
const LWS_JOSE_ENCTYPE_AES_OFB = 11 % UInt32
const LWS_JOSE_ENCTYPE_AES_XTS = 12 % UInt32
const LWS_JOSE_ENCTYPE_AES_GCM = 13 % UInt32

struct lws_jose_jwe_alg
    hash_type::lws_genhash_types
    hmac_type::lws_genhmac_types
    algtype_signing::lws_jose_algtype
    algtype_crypto::lws_jose_algtype
    alg::Ptr{Cchar}
    curve_name::Ptr{Cchar}
    keybits_min::Cushort
    keybits_fixed::Cushort
    ivbits::Cushort
end

struct lws_jws_recpient
    unprot::NTuple{24, lws_gencrypto_keyelem}
    jwk_ephemeral::lws_jwk
    jwk::lws_jwk
end

struct lws_jose
    e::NTuple{24, lws_gencrypto_keyelem}
    recipient::NTuple{3, lws_jws_recpient}
    typ::NTuple{32, Cchar}
    alg::Ptr{lws_jose_jwe_alg}
    enc_alg::Ptr{lws_jose_jwe_alg}
    recipients::Cint
end

function lws_jose_init(jose)
    @ccall libwebsockets.lws_jose_init(jose::Ptr{lws_jose})::Cvoid
end

function lws_jose_destroy(jose)
    @ccall libwebsockets.lws_jose_destroy(jose::Ptr{lws_jose})::Cvoid
end

function lws_gencrypto_jws_alg_to_definition(alg, jose)
    @ccall libwebsockets.lws_gencrypto_jws_alg_to_definition(alg::Ptr{Cchar}, jose::Ptr{Ptr{lws_jose_jwe_alg}})::Cint
end

function lws_gencrypto_jwe_alg_to_definition(alg, jose)
    @ccall libwebsockets.lws_gencrypto_jwe_alg_to_definition(alg::Ptr{Cchar}, jose::Ptr{Ptr{lws_jose_jwe_alg}})::Cint
end

function lws_gencrypto_jwe_enc_to_definition(enc, jose)
    @ccall libwebsockets.lws_gencrypto_jwe_enc_to_definition(enc::Ptr{Cchar}, jose::Ptr{Ptr{lws_jose_jwe_alg}})::Cint
end

function lws_jws_parse_jose(jose, buf, len, temp, temp_len)
    @ccall libwebsockets.lws_jws_parse_jose(jose::Ptr{lws_jose}, buf::Ptr{Cchar}, len::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jwe_parse_jose(jose, buf, len, temp, temp_len)
    @ccall libwebsockets.lws_jwe_parse_jose(jose::Ptr{lws_jose}, buf::Ptr{Cchar}, len::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

const enum_jws_sig_elements = UInt32
const LJWS_JOSE = 0 % UInt32
const LJWS_PYLD = 1 % UInt32
const LJWS_SIG = 2 % UInt32
const LJWS_UHDR = 3 % UInt32
const LJWE_JOSE = 0 % UInt32
const LJWE_EKEY = 1 % UInt32
const LJWE_IV = 2 % UInt32
const LJWE_CTXT = 3 % UInt32
const LJWE_ATAG = 4 % UInt32
const LJWE_AAD = 5 % UInt32
const LWS_JWS_MAX_COMPACT_BLOCKS = 6 % UInt32

struct lws_jws_map
    buf::NTuple{6, Ptr{Cchar}}
    len::NTuple{6, UInt32}
end

struct lws_jws
    jwk::Ptr{lws_jwk}
    context::Ptr{lws_context}
    map::lws_jws_map
    map_b64::lws_jws_map
end

function lws_jws_init(jws, jwk, context)
    @ccall libwebsockets.lws_jws_init(jws::Ptr{lws_jws}, jwk::Ptr{lws_jwk}, context::Ptr{lws_context})::Cvoid
end

function lws_jws_destroy(jws)
    @ccall libwebsockets.lws_jws_destroy(jws::Ptr{lws_jws})::Cvoid
end

function lws_jws_sig_confirm_compact(map, jwk, context, temp, temp_len)
    @ccall libwebsockets.lws_jws_sig_confirm_compact(map::Ptr{lws_jws_map}, jwk::Ptr{lws_jwk}, context::Ptr{lws_context}, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jws_sig_confirm_compact_b64_map(map_b64, jwk, context, temp, temp_len)
    @ccall libwebsockets.lws_jws_sig_confirm_compact_b64_map(map_b64::Ptr{lws_jws_map}, jwk::Ptr{lws_jwk}, context::Ptr{lws_context}, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jws_sig_confirm_compact_b64(in, len, map, jwk, context, temp, temp_len)
    @ccall libwebsockets.lws_jws_sig_confirm_compact_b64(in::Ptr{Cchar}, len::Csize_t, map::Ptr{lws_jws_map}, jwk::Ptr{lws_jwk}, context::Ptr{lws_context}, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jws_sig_confirm(map_b64, map, jwk, context)
    @ccall libwebsockets.lws_jws_sig_confirm(map_b64::Ptr{lws_jws_map}, map::Ptr{lws_jws_map}, jwk::Ptr{lws_jwk}, context::Ptr{lws_context})::Cint
end

function lws_jws_sign_from_b64(jose, jws, b64_sig, sig_len)
    @ccall libwebsockets.lws_jws_sign_from_b64(jose::Ptr{lws_jose}, jws::Ptr{lws_jws}, b64_sig::Ptr{Cchar}, sig_len::Csize_t)::Cint
end

function lws_jws_compact_decode(in, len, map, map_b64, out, out_len)
    @ccall libwebsockets.lws_jws_compact_decode(in::Ptr{Cchar}, len::Cint, map::Ptr{lws_jws_map}, map_b64::Ptr{lws_jws_map}, out::Ptr{Cchar}, out_len::Ptr{Cint})::Cint
end

function lws_jws_compact_encode(map_b64, map, buf, out_len)
    @ccall libwebsockets.lws_jws_compact_encode(map_b64::Ptr{lws_jws_map}, map::Ptr{lws_jws_map}, buf::Ptr{Cchar}, out_len::Ptr{Cint})::Cint
end

function lws_jws_sig_confirm_json(in, len, jws, jwk, context, temp, temp_len)
    @ccall libwebsockets.lws_jws_sig_confirm_json(in::Ptr{Cchar}, len::Csize_t, jws::Ptr{lws_jws}, jwk::Ptr{lws_jwk}, context::Ptr{lws_context}, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jws_write_flattened_json(jws, flattened, len)
    @ccall libwebsockets.lws_jws_write_flattened_json(jws::Ptr{lws_jws}, flattened::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_jws_write_compact(jws, compact, len)
    @ccall libwebsockets.lws_jws_write_compact(jws::Ptr{lws_jws}, compact::Ptr{Cchar}, len::Csize_t)::Cint
end

function lws_jws_dup_element(map, idx, temp, temp_len, in, in_len, actual_alloc)
    @ccall libwebsockets.lws_jws_dup_element(map::Ptr{lws_jws_map}, idx::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint}, in::Ptr{Cvoid}, in_len::Csize_t, actual_alloc::Csize_t)::Cint
end

function lws_jws_randomize_element(context, map, idx, temp, temp_len, random_len, actual_alloc)
    @ccall libwebsockets.lws_jws_randomize_element(context::Ptr{lws_context}, map::Ptr{lws_jws_map}, idx::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint}, random_len::Csize_t, actual_alloc::Csize_t)::Cint
end

function lws_jws_alloc_element(map, idx, temp, temp_len, len, actual_alloc)
    @ccall libwebsockets.lws_jws_alloc_element(map::Ptr{lws_jws_map}, idx::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint}, len::Csize_t, actual_alloc::Csize_t)::Cint
end

function lws_jws_encode_b64_element(map, idx, temp, temp_len, in, in_len)
    @ccall libwebsockets.lws_jws_encode_b64_element(map::Ptr{lws_jws_map}, idx::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint}, in::Ptr{Cvoid}, in_len::Csize_t)::Cint
end

function lws_jws_b64_compact_map(in, len, map)
    @ccall libwebsockets.lws_jws_b64_compact_map(in::Ptr{Cchar}, len::Cint, map::Ptr{lws_jws_map})::Cint
end

function lws_jws_base64_enc(in, in_len, out, out_max)
    @ccall libwebsockets.lws_jws_base64_enc(in::Ptr{Cchar}, in_len::Csize_t, out::Ptr{Cchar}, out_max::Csize_t)::Cint
end

function lws_jws_encode_section(in, in_len, first, p, _end)
    @ccall libwebsockets.lws_jws_encode_section(in::Ptr{Cchar}, in_len::Csize_t, first::Cint, p::Ptr{Ptr{Cchar}}, _end::Ptr{Cchar})::Cint
end

function lws_jwt_signed_validate(ctx, jwk, alg_list, com, len, temp, tl, out, out_len)
    @ccall libwebsockets.lws_jwt_signed_validate(ctx::Ptr{lws_context}, jwk::Ptr{lws_jwk}, alg_list::Ptr{Cchar}, com::Ptr{Cchar}, len::Csize_t, temp::Ptr{Cchar}, tl::Cint, out::Ptr{Cchar}, out_len::Ptr{Csize_t})::Cint
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_jwt_sign_compact(ctx, jwk, alg, out, out_len, temp, tl, format, va_list...)
        :(@ccall(libwebsockets.lws_jwt_sign_compact(ctx::Ptr{lws_context}, jwk::Ptr{lws_jwk}, alg::Ptr{Cchar}, out::Ptr{Cchar}, out_len::Ptr{Csize_t}, temp::Ptr{Cchar}, tl::Cint, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

mutable struct lws_jwt_sign_info
    alg::Ptr{Cchar}
    jose_hdr::Ptr{Cchar}
    jose_hdr_len::Csize_t
    out::Ptr{Cchar}
    out_len::Ptr{Csize_t}
    temp::Ptr{Cchar}
    tl::Cint
    lws_jwt_sign_info() = new()
end

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_jwt_sign_via_info(ctx, jwk, info, format, va_list...)
        :(@ccall(libwebsockets.lws_jwt_sign_via_info(ctx::Ptr{lws_context}, jwk::Ptr{lws_jwk}, info::Ptr{lws_jwt_sign_info}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

function lws_jwt_token_sanity(in, in_len, iss, aud, csrf_in, sub, sub_len, exp_unix_time)
    @ccall libwebsockets.lws_jwt_token_sanity(in::Ptr{Cchar}, in_len::Csize_t, iss::Ptr{Cchar}, aud::Ptr{Cchar}, csrf_in::Ptr{Cchar}, sub::Ptr{Cchar}, sub_len::Csize_t, exp_unix_time::Ptr{Culong})::Cint
end

struct lws_jwt_sign_set_cookie
    jwk::Ptr{lws_jwk}
    alg::Ptr{Cchar}
    iss::Ptr{Cchar}
    aud::Ptr{Cchar}
    cookie_name::Ptr{Cchar}
    sub::NTuple{33, Cchar}
    extra_json::Ptr{Cchar}
    extra_json_len::Csize_t
    csrf_in::Ptr{Cchar}
    expiry_unix_time::Culong
end

function lws_jwt_sign_token_set_http_cookie(wsi, i, p, _end)
    @ccall libwebsockets.lws_jwt_sign_token_set_http_cookie(wsi::Ptr{lws}, i::Ptr{lws_jwt_sign_set_cookie}, p::Ptr{Ptr{UInt8}}, _end::Ptr{UInt8})::Cint
end

function lws_jwt_get_http_cookie_validate_jwt(wsi, i, out, out_len)
    @ccall libwebsockets.lws_jwt_get_http_cookie_validate_jwt(wsi::Ptr{lws}, i::Ptr{lws_jwt_sign_set_cookie}, out::Ptr{Cchar}, out_len::Ptr{Csize_t})::Cint
end

struct lws_jwe
    data::NTuple{4344, UInt8}
end

function Base.getproperty(x::Ptr{lws_jwe}, f::Symbol)
    f === :jose && return Ptr{lws_jose}(x + 0)
    f === :jws && return Ptr{lws_jws}(x + 3368)
    f === :jwk && return Ptr{lws_jwk}(x + 3528)
    f === :cek && return Ptr{NTuple{512, UInt8}}(x + 3824)
    f === :cek_valid && return (Ptr{Cuint}(x + 4336), 0, 1)
    f === :recip && return Ptr{Cint}(x + 4340)
    return getfield(x, f)
end

function Base.getproperty(x::lws_jwe, f::Symbol)
    r = Ref{lws_jwe}(x)
    ptr = Base.unsafe_convert(Ptr{lws_jwe}, r)
    fptr = getproperty(ptr, f)
    begin
        if fptr isa Ptr
            return GC.@preserve(r, unsafe_load(fptr))
        else
            (baseptr, offset, width) = fptr
            ty = eltype(baseptr)
            baseptr32 = convert(Ptr{UInt32}, baseptr)
            u64 = GC.@preserve(r, unsafe_load(baseptr32))
            if offset + width > 32
                u64 |= GC.@preserve(r, unsafe_load(baseptr32 + 4)) << 32
            end
            u64 = u64 >> offset & (1 << width - 1)
            return u64 % ty
        end
    end
end

function Base.setproperty!(x::Ptr{lws_jwe}, f::Symbol, v)
    fptr = getproperty(x, f)
    if fptr isa Ptr
        unsafe_store!(getproperty(x, f), v)
    else
        (baseptr, offset, width) = fptr
        baseptr32 = convert(Ptr{UInt32}, baseptr)
        u64 = unsafe_load(baseptr32)
        straddle = offset + width > 32
        if straddle
            u64 |= unsafe_load(baseptr32 + 4) << 32
        end
        mask = 1 << width - 1
        u64 &= ~(mask << offset)
        u64 |= (unsigned(v) & mask) << offset
        unsafe_store!(baseptr32, u64 & typemax(UInt32))
        if straddle
            unsafe_store!(baseptr32 + 4, u64 >> 32)
        end
    end
end

function lws_jwe_init(jwe, context)
    @ccall libwebsockets.lws_jwe_init(jwe::Ptr{lws_jwe}, context::Ptr{lws_context})::Cvoid
end

function lws_jwe_destroy(jwe)
    @ccall libwebsockets.lws_jwe_destroy(jwe::Ptr{lws_jwe})::Cvoid
end

function lws_jwe_be64(c, p8)
    @ccall libwebsockets.lws_jwe_be64(c::UInt64, p8::Ptr{UInt8})::Cvoid
end

function lws_jwe_render_compact(jwe, out, out_len)
    @ccall libwebsockets.lws_jwe_render_compact(jwe::Ptr{lws_jwe}, out::Ptr{Cchar}, out_len::Csize_t)::Cint
end

function lws_jwe_render_flattened(jwe, out, out_len)
    @ccall libwebsockets.lws_jwe_render_flattened(jwe::Ptr{lws_jwe}, out::Ptr{Cchar}, out_len::Csize_t)::Cint
end

function lws_jwe_json_parse(jwe, buf, len, temp, temp_len)
    @ccall libwebsockets.lws_jwe_json_parse(jwe::Ptr{lws_jwe}, buf::Ptr{UInt8}, len::Cint, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jwe_auth_and_decrypt(jwe, temp, temp_len)
    @ccall libwebsockets.lws_jwe_auth_and_decrypt(jwe::Ptr{lws_jwe}, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jwe_encrypt(jwe, temp, temp_len)
    @ccall libwebsockets.lws_jwe_encrypt(jwe::Ptr{lws_jwe}, temp::Ptr{Cchar}, temp_len::Ptr{Cint})::Cint
end

function lws_jwe_create_packet(jwe, payload, len, nonce, out, out_len, context)
    @ccall libwebsockets.lws_jwe_create_packet(jwe::Ptr{lws_jwe}, payload::Ptr{Cchar}, len::Csize_t, nonce::Ptr{Cchar}, out::Ptr{Cchar}, out_len::Csize_t, context::Ptr{lws_context})::Cint
end

function lws_jwe_auth_and_decrypt_cbc_hs(jwe, enc_cek, aad, aad_len)
    @ccall libwebsockets.lws_jwe_auth_and_decrypt_cbc_hs(jwe::Ptr{lws_jwe}, enc_cek::Ptr{UInt8}, aad::Ptr{UInt8}, aad_len::Cint)::Cint
end

function lws_jwa_concat_kdf(jwe, direct, out, shared_secret, sslen)
    @ccall libwebsockets.lws_jwa_concat_kdf(jwe::Ptr{lws_jwe}, direct::Cint, out::Ptr{UInt8}, shared_secret::Ptr{UInt8}, sslen::Cint)::Cint
end

const lws_event_lib_ops_flags = UInt32
const LELOF_ISPOLL = 1 % UInt32
const LELOF_DESTROY_FINAL = 0 % UInt32

const __JL_Ctag_60 = UInt32
const LWS_EV_READ = 1 % UInt32
const LWS_EV_WRITE = 2 % UInt32
const LWS_EV_START = 4 % UInt32
const LWS_EV_STOP = 8 % UInt32

function lws_evlib_wsi_to_evlib_pt(wsi)
    @ccall libwebsockets.lws_evlib_wsi_to_evlib_pt(wsi::Ptr{lws})::Ptr{Cvoid}
end

function lws_evlib_tsi_to_evlib_pt(ctx, tsi)
    @ccall libwebsockets.lws_evlib_tsi_to_evlib_pt(ctx::Ptr{lws_context}, tsi::Cint)::Ptr{Cvoid}
end

function lws_realloc(ptr, size, reason)
    @ccall libwebsockets.lws_realloc(ptr::Ptr{Cvoid}, size::Csize_t, reason::Ptr{Cchar})::Ptr{Cvoid}
end

function lws_vhost_destroy1(vh)
    @ccall libwebsockets.lws_vhost_destroy1(vh::Ptr{lws_vhost})::Cvoid
end

function lws_close_free_wsi(wsi, reason, caller)
    @ccall libwebsockets.lws_close_free_wsi(wsi::Ptr{lws}, reason::lws_close_status, caller::Ptr{Cchar})::Cvoid
end

function lws_vhost_foreach_listen_wsi(cx, arg, cb)
    @ccall libwebsockets.lws_vhost_foreach_listen_wsi(cx::Ptr{lws_context}, arg::Ptr{Cvoid}, cb::lws_dll2_foreach_cb_t)::Cint
end

mutable struct lws_context_per_thread end

function lws_service_do_ripe_rxflow(pt)
    @ccall libwebsockets.lws_service_do_ripe_rxflow(pt::Ptr{lws_context_per_thread})::Cvoid
end

function wsi_from_fd(context, fd)
    @ccall libwebsockets.wsi_from_fd(context::Ptr{lws_context}, fd::Cint)::Ptr{lws}
end

function _lws_plat_service_forced_tsi(context, tsi)
    @ccall libwebsockets._lws_plat_service_forced_tsi(context::Ptr{lws_context}, tsi::Cint)::Cint
end

function lws_context_destroy2(context)
    @ccall libwebsockets.lws_context_destroy2(context::Ptr{lws_context})::Cvoid
end

function lws_destroy_event_pipe(wsi)
    @ccall libwebsockets.lws_destroy_event_pipe(wsi::Ptr{lws})::Cvoid
end

function __lws_close_free_wsi_final(wsi)
    @ccall libwebsockets.__lws_close_free_wsi_final(wsi::Ptr{lws})::Cvoid
end

function lws_i2c_command(ctx, ads7, c)
    @ccall libwebsockets.lws_i2c_command(ctx::Ptr{lws_i2c_ops_t}, ads7::UInt8, c::UInt8)::Cint
end

function lws_i2c_command_list(ctx, ads7, buf, len)
    @ccall libwebsockets.lws_i2c_command_list(ctx::Ptr{lws_i2c_ops_t}, ads7::UInt8, buf::Ptr{UInt8}, len::Csize_t)::Cint
end

const __JL_Ctag_61 = UInt32
const LWSSPIMODE_CPOL = 1 % UInt32
const LWSSPIMODE_CPHA = 2 % UInt32
const LWS_SPI_BUSMODE_CLK_IDLE_LOW_SAMP_RISING = 0 % UInt32
const LWS_SPI_BUSMODE_CLK_IDLE_HIGH_SAMP_RISING = 1 % UInt32
const LWS_SPI_BUSMODE_CLK_IDLE_LOW_SAMP_FALLING = 2 % UInt32
const LWS_SPI_BUSMODE_CLK_IDLE_HIGH_SAMP_FALLING = 3 % UInt32
const LWS_SPI_TXN_HALF_DUPLEX_DISCRETE = 0 % UInt32

const lws_gpio_irq_t = UInt32
const LWSGGPIO_IRQ_NONE = 0 % UInt32
const LWSGGPIO_IRQ_RISING = 1 % UInt32
const LWSGGPIO_IRQ_FALLING = 2 % UInt32
const LWSGGPIO_IRQ_CHANGE = 3 % UInt32
const LWSGGPIO_IRQ_LOW = 4 % UInt32
const LWSGGPIO_IRQ_HIGH = 5 % UInt32

const __JL_Ctag_63 = UInt32
const LWSGGPIO_FL_READ = 1 % UInt32
const LWSGGPIO_FL_WRITE = 2 % UInt32
const LWSGGPIO_FL_PULLUP = 4 % UInt32
const LWSGGPIO_FL_PULLDOWN = 8 % UInt32
const LWSGGPIO_FL_START_LOW = 16 % UInt32

# typedef void ( * lws_gpio_irq_cb_t ) ( void * arg )
const lws_gpio_irq_cb_t = Ptr{Cvoid}

struct lws_gpio_ops
    mode::Ptr{Cvoid}
    read::Ptr{Cvoid}
    set::Ptr{Cvoid}
    irq_mode::Ptr{Cvoid}
end

const lws_gpio_ops_t = lws_gpio_ops

mutable struct lws_bb_i2c
    bb_ops::lws_i2c_ops_t
    scl::_lws_plat_gpio_t
    sda::_lws_plat_gpio_t
    gpio::Ptr{lws_gpio_ops_t}
    delay::Ptr{Cvoid}
    lws_bb_i2c() = new()
end

const lws_bb_i2c_t = lws_bb_i2c

mutable struct lws_bb_spi
    bb_ops::lws_spi_ops_t
    gpio::Ptr{lws_gpio_ops_t}
    clk::_lws_plat_gpio_t
    ncs::NTuple{4, _lws_plat_gpio_t}
    ncmd::NTuple{4, _lws_plat_gpio_t}
    mosi::_lws_plat_gpio_t
    miso::_lws_plat_gpio_t
    flags::UInt8
    lws_bb_spi() = new()
end

const lws_bb_spi_t = lws_bb_spi

const lws_button_idx_t = UInt16

# typedef void ( * lws_button_cb_t ) ( void * opaque , lws_button_idx_t idx , int state )
const lws_button_cb_t = Ptr{Cvoid}

const __JL_Ctag_64 = UInt32
const LWSBTNRGMFLAG_CLASSIFY_DOUBLECLICK = 1 % UInt32

struct lws_button_regime
    ms_min_down::UInt16
    ms_min_down_longpress::UInt16
    ms_up_settle::UInt16
    ms_doubleclick_grace::UInt16
    ms_repeat_down::UInt16
    flags::UInt8
end

const lws_button_regime_t = lws_button_regime

struct lws_button_map
    gpio::_lws_plat_gpio_t
    smd_interaction_name::Ptr{Cchar}
    regime::Ptr{lws_button_regime_t}
end

const lws_button_map_t = lws_button_map

mutable struct lws_button_controller
    smd_bc_name::Ptr{Cchar}
    gpio_ops::Ptr{lws_gpio_ops_t}
    button_map::Ptr{lws_button_map_t}
    active_state_bitmap::lws_button_idx_t
    count_buttons::UInt8
    lws_button_controller() = new()
end

const lws_button_controller_t = lws_button_controller

mutable struct lws_button_state end

function lws_button_controller_create(ctx, controller)
    @ccall libwebsockets.lws_button_controller_create(ctx::Ptr{lws_context}, controller::Ptr{lws_button_controller_t})::Ptr{lws_button_state}
end

function lws_button_controller_destroy(bcs)
    @ccall libwebsockets.lws_button_controller_destroy(bcs::Ptr{lws_button_state})::Cvoid
end

function lws_button_get_bit(bcs, name)
    @ccall libwebsockets.lws_button_get_bit(bcs::Ptr{lws_button_state}, name::Ptr{Cchar})::lws_button_idx_t
end

function lws_button_enable(bcs, _reset, _set)
    @ccall libwebsockets.lws_button_enable(bcs::Ptr{lws_button_state}, _reset::lws_button_idx_t, _set::lws_button_idx_t)::Cvoid
end

const __JL_Ctag_65 = UInt32
const LLSI_CURR = 0 % UInt32
const LLSI_NEXT = 1 % UInt32
const LLSI_TRANS = 2 % UInt32

struct lws_led_state_ch
    seq::Ptr{lws_led_sequence_def_t}
    ph::lws_led_seq_phase_t
    step::lws_led_seq_phase_t
    phase_budget::Cint
    last::lws_led_intensity_t
end

const lws_led_state_ch_t = lws_led_state_ch

struct lws_led_state_chs
    seqs::NTuple{3, lws_led_state_ch_t}
end

const lws_led_state_chs_t = lws_led_state_chs

struct lws_led_gpio_map
    name::Ptr{Cchar}
    gpio::_lws_plat_gpio_t
    intensity_correction::lws_led_lookup_t
    pwm_ops::Ptr{lws_pwm_ops}
    active_level::UInt8
end

const lws_led_gpio_map_t = lws_led_gpio_map

mutable struct lws_led_gpio_controller
    led_ops::lws_led_ops_t
    gpio_ops::Ptr{lws_gpio_ops_t}
    led_map::Ptr{lws_led_gpio_map_t}
    count_leds::UInt8
    lws_led_gpio_controller() = new()
end

const lws_led_gpio_controller_t = lws_led_gpio_controller

function lws_led_transition(lcs, name, next, trans)
    @ccall libwebsockets.lws_led_transition(lcs::Ptr{lws_led_state}, name::Ptr{Cchar}, next::Ptr{lws_led_sequence_def_t}, trans::Ptr{lws_led_sequence_def_t})::Cint
end

function lws_led_func_linear(n)
    @ccall libwebsockets.lws_led_func_linear(n::lws_led_seq_phase_t)::lws_led_intensity_t
end

function lws_led_func_sine(n)
    @ccall libwebsockets.lws_led_func_sine(n::lws_led_seq_phase_t)::lws_led_intensity_t
end

const lws_display_t = lws_display

const lws_display_controller_state = UInt32
const LWSDISPS_OFF = 0 % UInt32
const LWSDISPS_AUTODIMMED = 1 % UInt32
const LWSDISPS_BECOMING_ACTIVE = 2 % UInt32
const LWSDISPS_ACTIVE = 3 % UInt32
const LWSDISPS_GOING_OFF = 4 % UInt32

mutable struct lws_display_state
    sul_autodim::lws_sorted_usec_list_t
    disp::Ptr{lws_display_t}
    ctx::Ptr{lws_context}
    autodim_ms::Cint
    off_ms::Cint
    bl_lcs::Ptr{lws_led_state}
    chs::lws_led_state_chs_t
    state::lws_display_controller_state
    lws_display_state() = new()
end

const lws_display_state_t = lws_display_state

function lws_display_state_init(lds, ctx, autodim_ms, off_ms, bl_lcs, disp)
    @ccall libwebsockets.lws_display_state_init(lds::Ptr{lws_display_state_t}, ctx::Ptr{lws_context}, autodim_ms::Cint, off_ms::Cint, bl_lcs::Ptr{lws_led_state}, disp::Ptr{lws_display_t})::Cvoid
end

function lws_display_state_set_brightness(lds, pwmseq)
    @ccall libwebsockets.lws_display_state_set_brightness(lds::Ptr{lws_display_state_t}, pwmseq::Ptr{lws_led_sequence_def_t})::Cvoid
end

function lws_display_state_active(lds)
    @ccall libwebsockets.lws_display_state_active(lds::Ptr{lws_display_state_t})::Cvoid
end

function lws_display_state_off(lds)
    @ccall libwebsockets.lws_display_state_off(lds::Ptr{lws_display_state_t})::Cvoid
end

mutable struct lws_display_ssd1306
    disp::lws_display_t
    i2c::Ptr{lws_i2c_ops_t}
    gpio::Ptr{lws_gpio_ops_t}
    reset_gpio::_lws_plat_gpio_t
    i2c7_address::UInt8
    lws_display_ssd1306() = new()
end

const lws_display_ssd1306_t = lws_display_ssd1306

mutable struct lws_display_ili9341
    disp::lws_display_t
    spi::Ptr{lws_spi_ops_t}
    gpio::Ptr{lws_gpio_ops_t}
    reset_gpio::_lws_plat_gpio_t
    spi_index::UInt8
    lws_display_ili9341() = new()
end

const lws_display_ili9341_t = lws_display_ili9341

const lws_settings_ops_t = lws_settings_ops

# automatic type deduction for variadic arguments may not be what you want, please use with caution
@generated function lws_settings_plat_printf(si, name, format, va_list...)
        :(@ccall(libwebsockets.lws_settings_plat_printf(si::Ptr{lws_settings_instance_t}, name::Ptr{Cchar}, format::Ptr{Cchar}; $(to_c_type_pairs(va_list)...))::Cint))
    end

function lws_settings_init(so, opaque_plat)
    @ccall libwebsockets.lws_settings_init(so::Ptr{lws_settings_ops_t}, opaque_plat::Ptr{Cvoid})::Ptr{lws_settings_instance_t}
end

function lws_settings_deinit(si)
    @ccall libwebsockets.lws_settings_deinit(si::Ptr{Ptr{lws_settings_instance_t}})::Cvoid
end

const lws_wifi_ch_t = UInt8

const lws_wifi_rssi_t = Int8

const lws_netdev_type_t = UInt32
const LWSNDTYP_UNKNOWN = 0 % UInt32
const LWSNDTYP_WIFI = 1 % UInt32
const LWSNDTYP_ETH = 2 % UInt32

mutable struct lws_netdevs
    owner::lws_dll2_owner_t
    owner_creds::lws_dll2_owner_t
    ac_creds::Ptr{lwsac}
    si::Ptr{lws_settings_instance_t}
    sa46_dns_resolver::lws_sockaddr46
    refcount_creds::UInt8
    lws_netdevs() = new()
end

const lws_netdevs_t = lws_netdevs

const __JL_Ctag_68 = UInt32
const LNDIW_ALG_OPEN = 0 % UInt32
const LNDIW_ALG_WPA2 = 1 % UInt32
const LNDIW_MODE_STA = 1 % UInt32
const LNDIW_MODE_AP = 2 % UInt32
const LNDIW_UP = 128 % UInt32
const LNDIW_ACQ_IPv4 = 1 % UInt32
const LNDIW_ACQ_IPv6 = 2 % UInt32

const lws_netdev_wifi_state_t = UInt32
const LWSNDVWIFI_STATE_INITIAL = 0 % UInt32
const LWSNDVWIFI_STATE_SCAN = 1 % UInt32
const LWSNDVWIFI_STATE_AP = 2 % UInt32
const LWSNDVWIFI_STATE_AP_SCAN = 3 % UInt32
const LWSNDVWIFI_STATE_STAT_GRP_AP = 4 % UInt32
const LWSNDVWIFI_STATE_STAT_GRP_AP_SCAN = 5 % UInt32
const LWSNDVWIFI_STATE_STAT = 6 % UInt32
const LWSNDVWIFI_STATE_STAT_HAPPY = 7 % UInt32

struct lws_wifi_creds
    list::lws_dll2_t
    bssid::NTuple{6, UInt8}
    passphrase::NTuple{64, Cchar}
    ssid::NTuple{33, Cchar}
    alg::UInt8
end

const lws_wifi_creds_t = lws_wifi_creds

mutable struct lws_netdev_instance_wifi
    inst::lws_netdev_instance_t
    scan::lws_dll2_owner_t
    sul_scan::lws_sorted_usec_list_t
    ap_cred::Ptr{lws_wifi_creds_t}
    ap_ip::Ptr{Cchar}
    sta_ads::Ptr{Cchar}
    current_attempt_ssid::NTuple{33, Cchar}
    current_attempt_bssid::NTuple{6, UInt8}
    flags::UInt8
    state::UInt8
    lws_netdev_instance_wifi() = new()
end

const lws_netdev_instance_wifi_t = lws_netdev_instance_wifi

mutable struct lws_wifi_sta
    list::lws_dll2_t
    last_seen::UInt32
    last_tried::UInt32
    bssid::NTuple{6, UInt8}
    ssid::Ptr{Cchar}
    ssid_len::UInt8
    ch::lws_wifi_ch_t
    rssi::NTuple{8, lws_wifi_rssi_t}
    rssi_avg::Int16
    authmode::UInt8
    rssi_count::UInt8
    rssi_next::UInt8
    lws_wifi_sta() = new()
end

const lws_wifi_sta_t = lws_wifi_sta

function lws_netdevs_from_ctx(ctx)
    @ccall libwebsockets.lws_netdevs_from_ctx(ctx::Ptr{lws_context})::Ptr{lws_netdevs_t}
end

function lws_netdev_credentials_settings_set(nds)
    @ccall libwebsockets.lws_netdev_credentials_settings_set(nds::Ptr{lws_netdevs_t})::Cint
end

function lws_netdev_credentials_settings_get(nds)
    @ccall libwebsockets.lws_netdev_credentials_settings_get(nds::Ptr{lws_netdevs_t})::Cint
end

function lws_netdev_find(netdevs, ifname)
    @ccall libwebsockets.lws_netdev_find(netdevs::Ptr{lws_netdevs_t}, ifname::Ptr{Cchar})::Ptr{lws_netdev_instance_t}
end

function lws_netdev_plat_init()
    @ccall libwebsockets.lws_netdev_plat_init()::Cint
end

function lws_netdev_plat_wifi_init()
    @ccall libwebsockets.lws_netdev_plat_wifi_init()::Cint
end

struct __JL_Ctag_73
    data::NTuple{16, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_73}, f::Symbol)
    f === :ws && return Ptr{__JL_Ctag_74}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_73, f::Symbol)
    r = Ref{__JL_Ctag_73}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_73}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_73}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

struct __JL_Ctag_72
    data::NTuple{112, UInt8}
end

function Base.getproperty(x::Ptr{__JL_Ctag_72}, f::Symbol)
    f === :method && return Ptr{Ptr{Cchar}}(x + 0)
    f === :url && return Ptr{Ptr{Cchar}}(x + 8)
    f === :multipart_name && return Ptr{Ptr{Cchar}}(x + 16)
    f === :multipart_filename && return Ptr{Ptr{Cchar}}(x + 24)
    f === :multipart_content_type && return Ptr{Ptr{Cchar}}(x + 32)
    f === :blob_header && return Ptr{NTuple{4, Ptr{Cchar}}}(x + 40)
    f === :auth_preamble && return Ptr{Ptr{Cchar}}(x + 72)
    f === :respmap && return Ptr{Ptr{lws_ss_http_respmap_t}}(x + 80)
    f === :u && return Ptr{__JL_Ctag_73}(x + 88)
    f === :resp_expect && return Ptr{UInt16}(x + 104)
    f === :count_respmap && return Ptr{UInt8}(x + 106)
    f === :fail_redirect && return (Ptr{UInt8}(x + 104), 24, 1)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_72, f::Symbol)
    r = Ref{__JL_Ctag_72}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_72}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_72}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end

mutable struct __JL_Ctag_74
    subprotocol::Ptr{Cchar}
    binary::UInt8
    __JL_Ctag_74() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_74}, f::Symbol)
    f === :subprotocol && return Ptr{Ptr{Cchar}}(x + 0)
    f === :binary && return Ptr{UInt8}(x + 8)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_74, f::Symbol)
    r = Ref{__JL_Ctag_74}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_74}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_74}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


mutable struct __JL_Ctag_76
    cert::Ptr{lws_ss_x509_t}
    key::Ptr{lws_ss_x509_t}
    __JL_Ctag_76() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_76}, f::Symbol)
    f === :cert && return Ptr{Ptr{lws_ss_x509_t}}(x + 0)
    f === :key && return Ptr{Ptr{lws_ss_x509_t}}(x + 8)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_76, f::Symbol)
    r = Ref{__JL_Ctag_76}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_76}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_76}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


mutable struct __JL_Ctag_79
    filepath::Ptr{Cchar}
    __JL_Ctag_79() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_79}, f::Symbol)
    f === :filepath && return Ptr{Ptr{Cchar}}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_79, f::Symbol)
    r = Ref{__JL_Ctag_79}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_79}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_79}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


mutable struct __JL_Ctag_84
    response::Cint
    __JL_Ctag_84() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_84}, f::Symbol)
    f === :response && return Ptr{Cint}(x + 0)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_84, f::Symbol)
    r = Ref{__JL_Ctag_84}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_84}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_84}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


mutable struct __JL_Ctag_87
    sum::NTuple{2, u_mt_t}
    min::u_mt_t
    max::u_mt_t
    count::NTuple{2, UInt32}
    __JL_Ctag_87() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_87}, f::Symbol)
    f === :sum && return Ptr{NTuple{2, u_mt_t}}(x + 0)
    f === :min && return Ptr{u_mt_t}(x + 16)
    f === :max && return Ptr{u_mt_t}(x + 24)
    f === :count && return Ptr{NTuple{2, UInt32}}(x + 32)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_87, f::Symbol)
    r = Ref{__JL_Ctag_87}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_87}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_87}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


mutable struct __JL_Ctag_88
    head::Ptr{lws_metric_bucket_t}
    total_count::UInt64
    list_size::UInt32
    __JL_Ctag_88() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_88}, f::Symbol)
    f === :head && return Ptr{Ptr{lws_metric_bucket_t}}(x + 0)
    f === :total_count && return Ptr{UInt64}(x + 8)
    f === :list_size && return Ptr{UInt32}(x + 16)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_88, f::Symbol)
    r = Ref{__JL_Ctag_88}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_88}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_88}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


mutable struct __JL_Ctag_90
    len::Cint
    name::NTuple{64, Cchar}
    __JL_Ctag_90() = new()
end
function Base.getproperty(x::Ptr{__JL_Ctag_90}, f::Symbol)
    f === :len && return Ptr{Cint}(x + 0)
    f === :name && return Ptr{NTuple{64, Cchar}}(x + 4)
    return getfield(x, f)
end

function Base.getproperty(x::__JL_Ctag_90, f::Symbol)
    r = Ref{__JL_Ctag_90}(x)
    ptr = Base.unsafe_convert(Ptr{__JL_Ctag_90}, r)
    fptr = getproperty(ptr, f)
    GC.@preserve r unsafe_load(fptr)
end

function Base.setproperty!(x::Ptr{__JL_Ctag_90}, f::Symbol, v)
    unsafe_store!(getproperty(x, f), v)
end


const LWS_INSTALL_DATADIR = "/workspace/destdir/share"

const LWS_INSTALL_LIBDIR = "/workspace/destdir/lib"

const LWS_LIBRARY_VERSION_MAJOR = 4

const LWS_LIBRARY_VERSION_MINOR = 3

# Skipping MacroDefinition: LWS_LIBRARY_VERSION_PATCH_ELABORATED 3 - v4 .3.3 - 42 - g5102a5c8

const LWS_LIBRARY_VERSION_PATCH = 3

const LWS_LIBRARY_VERSION_NUMBER = LWS_LIBRARY_VERSION_MAJOR * 1000000 + LWS_LIBRARY_VERSION_MINOR * 1000 + LWS_LIBRARY_VERSION_PATCH

const LWS_MAX_SMP = 1

const LWS_BUILD_HASH = "v4.3.3-42-g5102a5c8"

const LWS_LIBRARY_VERSION = "4.3.3-v4.3.3-42-g5102a5c8"

const LWS_LOGGING_BITFIELD_CLEAR = 0

const LWS_LOGGING_BITFIELD_SET = 0

const LWS_OPENSSL_CLIENT_CERTS = "../share"

const LWS_US_PER_SEC = lws_usec_t(1000000)

const LWS_MS_PER_SEC = lws_usec_t(1000)

const LWS_US_PER_MS = lws_usec_t(1000)

const LWS_NS_PER_US = lws_usec_t(1000)

const LWS_KI = 1024

const LWS_MI = LWS_KI * 1024

const LWS_GI = LWS_MI * 1024

const LWS_TI = uint64_t(LWS_GI) * 1024

const LWS_PI = uint64_t(LWS_TI) * 1024

const lws_intptr_t = intptr_t

# Skipping MacroDefinition: LWS_INLINE inline

const LWS_O_RDONLY = O_RDONLY

const LWS_O_WRONLY = O_WRONLY

const LWS_O_CREAT = O_CREAT

const LWS_O_TRUNC = O_TRUNC

const LWS_INVALID_FILE = -1

const LWS_SOCK_INVALID = -1

# Skipping MacroDefinition: LWS_WARN_UNUSED_RESULT __attribute__ ( ( warn_unused_result ) )

# Skipping MacroDefinition: LWS_WARN_DEPRECATED __attribute__ ( ( deprecated ) )

const OPENSSL_SYS_MACOSX = 1

const OPENSSL_CONFIGURED_API = 30000

const RC4_INT = Cuint

const OPENSSL_VERSION_MAJOR = 3

const OPENSSL_VERSION_MINOR = 0

const OPENSSL_VERSION_PATCH = 15

const OPENSSL_VERSION_PRE_RELEASE = ""

const OPENSSL_VERSION_BUILD_METADATA = ""

const OPENSSL_SHLIB_VERSION = 3

const OPENSSL_VERSION_STR = "3.0.15"

const OPENSSL_FULL_VERSION_STR = "3.0.15"

const OPENSSL_RELEASE_DATE = "3 Sep 2024"

const OPENSSL_VERSION_TEXT = "OpenSSL 3.0.15 3 Sep 2024"

const _OPENSSL_VERSION_PRE_RELEASE = Clong(0x00)

const OPENSSL_VERSION_NUMBER = ((OPENSSL_VERSION_MAJOR << 28 | OPENSSL_VERSION_MINOR << 20) | OPENSSL_VERSION_PATCH << 4) | _OPENSSL_VERSION_PRE_RELEASE

# Skipping MacroDefinition: NON_EMPTY_TRANSLATION_UNIT static void * dummy = & dummy ;

const OPENSSL_API_LEVEL = OPENSSL_CONFIGURED_API

const OSSL_DEPRECATEDIN_3_0 = OSSL_DEPRECATED(3.0)

# Skipping MacroDefinition: OSSL_DEPRECATEDIN_1_1_1 OSSL_DEPRECATED ( 1.1.1 )

# Skipping MacroDefinition: OSSL_DEPRECATEDIN_1_1_0 OSSL_DEPRECATED ( 1.1.0 )

# Skipping MacroDefinition: OSSL_DEPRECATEDIN_1_0_2 OSSL_DEPRECATED ( 1.0.2 )

# Skipping MacroDefinition: OSSL_DEPRECATEDIN_1_0_1 OSSL_DEPRECATED ( 1.0.1 )

# Skipping MacroDefinition: OSSL_DEPRECATEDIN_1_0_0 OSSL_DEPRECATED ( 1.0.0 )

# Skipping MacroDefinition: OSSL_DEPRECATEDIN_0_9_8 OSSL_DEPRECATED ( 0.9.8 )

const OPENSSL_FILE = __FILE__

const OPENSSL_LINE = __LINE__

# Skipping MacroDefinition: OPENSSL_FUNC __func__

# Skipping MacroDefinition: OPENSSL_EXPORT extern

# Skipping MacroDefinition: OPENSSL_EXTERN extern

const ossl_ssize_t = ssize_t

const OSSL_SSIZE_MAX = ssize_t(SIZE_MAX >> 1)

# Skipping MacroDefinition: ossl_inline inline

const ossl_noreturn = Union{}

# Skipping MacroDefinition: ossl_unused __attribute__ ( ( unused ) )

const _STACK = OPENSSL_STACK

const sk_num = OPENSSL_sk_num

const sk_value = OPENSSL_sk_value

const sk_set = OPENSSL_sk_set

const sk_new = OPENSSL_sk_new

const sk_new_null = OPENSSL_sk_new_null

const sk_free = OPENSSL_sk_free

const sk_pop_free = OPENSSL_sk_pop_free

const sk_deep_copy = OPENSSL_sk_deep_copy

const sk_insert = OPENSSL_sk_insert

const sk_delete = OPENSSL_sk_delete

const sk_delete_ptr = OPENSSL_sk_delete_ptr

const sk_find = OPENSSL_sk_find

const sk_find_ex = OPENSSL_sk_find_ex

const sk_push = OPENSSL_sk_push

const sk_unshift = OPENSSL_sk_unshift

const sk_shift = OPENSSL_sk_shift

const sk_pop = OPENSSL_sk_pop

const sk_zero = OPENSSL_sk_zero

const sk_set_cmp_func = OPENSSL_sk_set_cmp_func

const sk_dup = OPENSSL_sk_dup

const sk_sort = OPENSSL_sk_sort

const sk_is_sorted = OPENSSL_sk_is_sorted

const ASN1_F_A2D_ASN1_OBJECT = 0

const ASN1_F_A2I_ASN1_INTEGER = 0

const ASN1_F_A2I_ASN1_STRING = 0

const ASN1_F_APPEND_EXP = 0

const ASN1_F_ASN1_BIO_INIT = 0

const ASN1_F_ASN1_BIT_STRING_SET_BIT = 0

const ASN1_F_ASN1_CB = 0

const ASN1_F_ASN1_CHECK_TLEN = 0

const ASN1_F_ASN1_COLLECT = 0

const ASN1_F_ASN1_D2I_EX_PRIMITIVE = 0

const ASN1_F_ASN1_D2I_FP = 0

const ASN1_F_ASN1_D2I_READ_BIO = 0

const ASN1_F_ASN1_DIGEST = 0

const ASN1_F_ASN1_DO_ADB = 0

const ASN1_F_ASN1_DO_LOCK = 0

const ASN1_F_ASN1_DUP = 0

const ASN1_F_ASN1_ENC_SAVE = 0

const ASN1_F_ASN1_EX_C2I = 0

const ASN1_F_ASN1_FIND_END = 0

const ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 0

const ASN1_F_ASN1_GENERATE_V3 = 0

const ASN1_F_ASN1_GET_INT64 = 0

const ASN1_F_ASN1_GET_OBJECT = 0

const ASN1_F_ASN1_GET_UINT64 = 0

const ASN1_F_ASN1_I2D_BIO = 0

const ASN1_F_ASN1_I2D_FP = 0

const ASN1_F_ASN1_ITEM_D2I_FP = 0

const ASN1_F_ASN1_ITEM_DUP = 0

const ASN1_F_ASN1_ITEM_EMBED_D2I = 0

const ASN1_F_ASN1_ITEM_EMBED_NEW = 0

const ASN1_F_ASN1_ITEM_FLAGS_I2D = 0

const ASN1_F_ASN1_ITEM_I2D_BIO = 0

const ASN1_F_ASN1_ITEM_I2D_FP = 0

const ASN1_F_ASN1_ITEM_PACK = 0

const ASN1_F_ASN1_ITEM_SIGN = 0

const ASN1_F_ASN1_ITEM_SIGN_CTX = 0

const ASN1_F_ASN1_ITEM_UNPACK = 0

const ASN1_F_ASN1_ITEM_VERIFY = 0

const ASN1_F_ASN1_MBSTRING_NCOPY = 0

const ASN1_F_ASN1_OBJECT_NEW = 0

const ASN1_F_ASN1_OUTPUT_DATA = 0

const ASN1_F_ASN1_PCTX_NEW = 0

const ASN1_F_ASN1_PRIMITIVE_NEW = 0

const ASN1_F_ASN1_SCTX_NEW = 0

const ASN1_F_ASN1_SIGN = 0

const ASN1_F_ASN1_STR2TYPE = 0

const ASN1_F_ASN1_STRING_GET_INT64 = 0

const ASN1_F_ASN1_STRING_GET_UINT64 = 0

const ASN1_F_ASN1_STRING_SET = 0

const ASN1_F_ASN1_STRING_TABLE_ADD = 0

const ASN1_F_ASN1_STRING_TO_BN = 0

const ASN1_F_ASN1_STRING_TYPE_NEW = 0

const ASN1_F_ASN1_TEMPLATE_EX_D2I = 0

const ASN1_F_ASN1_TEMPLATE_NEW = 0

const ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 0

const ASN1_F_ASN1_TIME_ADJ = 0

const ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 0

const ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 0

const ASN1_F_ASN1_UTCTIME_ADJ = 0

const ASN1_F_ASN1_VERIFY = 0

const ASN1_F_B64_READ_ASN1 = 0

const ASN1_F_B64_WRITE_ASN1 = 0

const ASN1_F_BIO_NEW_NDEF = 0

const ASN1_F_BITSTR_CB = 0

const ASN1_F_BN_TO_ASN1_STRING = 0

const ASN1_F_C2I_ASN1_BIT_STRING = 0

const ASN1_F_C2I_ASN1_INTEGER = 0

const ASN1_F_C2I_ASN1_OBJECT = 0

const ASN1_F_C2I_IBUF = 0

const ASN1_F_C2I_UINT64_INT = 0

const ASN1_F_COLLECT_DATA = 0

const ASN1_F_D2I_ASN1_OBJECT = 0

const ASN1_F_D2I_ASN1_UINTEGER = 0

const ASN1_F_D2I_AUTOPRIVATEKEY = 0

const ASN1_F_D2I_PRIVATEKEY = 0

const ASN1_F_D2I_PUBLICKEY = 0

const ASN1_F_DO_BUF = 0

const ASN1_F_DO_CREATE = 0

const ASN1_F_DO_DUMP = 0

const ASN1_F_DO_TCREATE = 0

const ASN1_F_I2A_ASN1_OBJECT = 0

const ASN1_F_I2D_ASN1_BIO_STREAM = 0

const ASN1_F_I2D_ASN1_OBJECT = 0

const ASN1_F_I2D_DSA_PUBKEY = 0

const ASN1_F_I2D_EC_PUBKEY = 0

const ASN1_F_I2D_PRIVATEKEY = 0

const ASN1_F_I2D_PUBLICKEY = 0

const ASN1_F_I2D_RSA_PUBKEY = 0

const ASN1_F_LONG_C2I = 0

const ASN1_F_NDEF_PREFIX = 0

const ASN1_F_NDEF_SUFFIX = 0

const ASN1_F_OID_MODULE_INIT = 0

const ASN1_F_PARSE_TAGGING = 0

const ASN1_F_PKCS5_PBE2_SET_IV = 0

const ASN1_F_PKCS5_PBE2_SET_SCRYPT = 0

const ASN1_F_PKCS5_PBE_SET = 0

const ASN1_F_PKCS5_PBE_SET0_ALGOR = 0

const ASN1_F_PKCS5_PBKDF2_SET = 0

const ASN1_F_PKCS5_SCRYPT_SET = 0

const ASN1_F_SMIME_READ_ASN1 = 0

const ASN1_F_SMIME_TEXT = 0

const ASN1_F_STABLE_GET = 0

const ASN1_F_STBL_MODULE_INIT = 0

const ASN1_F_UINT32_C2I = 0

const ASN1_F_UINT32_NEW = 0

const ASN1_F_UINT64_C2I = 0

const ASN1_F_UINT64_NEW = 0

const ASN1_F_X509_CRL_ADD0_REVOKED = 0

const ASN1_F_X509_INFO_NEW = 0

const ASN1_F_X509_NAME_ENCODE = 0

const ASN1_F_X509_NAME_EX_D2I = 0

const ASN1_F_X509_NAME_EX_NEW = 0

const ASN1_F_X509_PKEY_NEW = 0

const ASYNC_F_ASYNC_CTX_NEW = 0

const ASYNC_F_ASYNC_INIT_THREAD = 0

const ASYNC_F_ASYNC_JOB_NEW = 0

const ASYNC_F_ASYNC_PAUSE_JOB = 0

const ASYNC_F_ASYNC_START_FUNC = 0

const ASYNC_F_ASYNC_START_JOB = 0

const ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD = 0

const BIO_F_ACPT_STATE = 0

const BIO_F_ADDRINFO_WRAP = 0

const BIO_F_ADDR_STRINGS = 0

const BIO_F_BIO_ACCEPT = 0

const BIO_F_BIO_ACCEPT_EX = 0

const BIO_F_BIO_ACCEPT_NEW = 0

const BIO_F_BIO_ADDR_NEW = 0

const BIO_F_BIO_BIND = 0

const BIO_F_BIO_CALLBACK_CTRL = 0

const BIO_F_BIO_CONNECT = 0

const BIO_F_BIO_CONNECT_NEW = 0

const BIO_F_BIO_CTRL = 0

const BIO_F_BIO_GETS = 0

const BIO_F_BIO_GET_HOST_IP = 0

const BIO_F_BIO_GET_NEW_INDEX = 0

const BIO_F_BIO_GET_PORT = 0

const BIO_F_BIO_LISTEN = 0

const BIO_F_BIO_LOOKUP = 0

const BIO_F_BIO_LOOKUP_EX = 0

const BIO_F_BIO_MAKE_PAIR = 0

const BIO_F_BIO_METH_NEW = 0

const BIO_F_BIO_NEW = 0

const BIO_F_BIO_NEW_DGRAM_SCTP = 0

const BIO_F_BIO_NEW_FILE = 0

const BIO_F_BIO_NEW_MEM_BUF = 0

const BIO_F_BIO_NREAD = 0

const BIO_F_BIO_NREAD0 = 0

const BIO_F_BIO_NWRITE = 0

const BIO_F_BIO_NWRITE0 = 0

const BIO_F_BIO_PARSE_HOSTSERV = 0

const BIO_F_BIO_PUTS = 0

const BIO_F_BIO_READ = 0

const BIO_F_BIO_READ_EX = 0

const BIO_F_BIO_READ_INTERN = 0

const BIO_F_BIO_SOCKET = 0

const BIO_F_BIO_SOCKET_NBIO = 0

const BIO_F_BIO_SOCK_INFO = 0

const BIO_F_BIO_SOCK_INIT = 0

const BIO_F_BIO_WRITE = 0

const BIO_F_BIO_WRITE_EX = 0

const BIO_F_BIO_WRITE_INTERN = 0

const BIO_F_BUFFER_CTRL = 0

const BIO_F_CONN_CTRL = 0

const BIO_F_CONN_STATE = 0

const BIO_F_DGRAM_SCTP_NEW = 0

const BIO_F_DGRAM_SCTP_READ = 0

const BIO_F_DGRAM_SCTP_WRITE = 0

const BIO_F_DOAPR_OUTCH = 0

const BIO_F_FILE_CTRL = 0

const BIO_F_FILE_READ = 0

const BIO_F_LINEBUFFER_CTRL = 0

const BIO_F_LINEBUFFER_NEW = 0

const BIO_F_MEM_WRITE = 0

const BIO_F_NBIOF_NEW = 0

const BIO_F_SLG_WRITE = 0

const BIO_F_SSL_NEW = 0

const BN_F_BNRAND = 0

const BN_F_BNRAND_RANGE = 0

const BN_F_BN_BLINDING_CONVERT_EX = 0

const BN_F_BN_BLINDING_CREATE_PARAM = 0

const BN_F_BN_BLINDING_INVERT_EX = 0

const BN_F_BN_BLINDING_NEW = 0

const BN_F_BN_BLINDING_UPDATE = 0

const BN_F_BN_BN2DEC = 0

const BN_F_BN_BN2HEX = 0

const BN_F_BN_COMPUTE_WNAF = 0

const BN_F_BN_CTX_GET = 0

const BN_F_BN_CTX_NEW = 0

const BN_F_BN_CTX_START = 0

const BN_F_BN_DIV = 0

const BN_F_BN_DIV_RECP = 0

const BN_F_BN_EXP = 0

const BN_F_BN_EXPAND_INTERNAL = 0

const BN_F_BN_GENCB_NEW = 0

const BN_F_BN_GENERATE_DSA_NONCE = 0

const BN_F_BN_GENERATE_PRIME_EX = 0

const BN_F_BN_GF2M_MOD = 0

const BN_F_BN_GF2M_MOD_EXP = 0

const BN_F_BN_GF2M_MOD_MUL = 0

const BN_F_BN_GF2M_MOD_SOLVE_QUAD = 0

const BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 0

const BN_F_BN_GF2M_MOD_SQR = 0

const BN_F_BN_GF2M_MOD_SQRT = 0

const BN_F_BN_LSHIFT = 0

const BN_F_BN_MOD_EXP2_MONT = 0

const BN_F_BN_MOD_EXP_MONT = 0

const BN_F_BN_MOD_EXP_MONT_CONSTTIME = 0

const BN_F_BN_MOD_EXP_MONT_WORD = 0

const BN_F_BN_MOD_EXP_RECP = 0

const BN_F_BN_MOD_EXP_SIMPLE = 0

const BN_F_BN_MOD_INVERSE = 0

const BN_F_BN_MOD_INVERSE_NO_BRANCH = 0

const BN_F_BN_MOD_LSHIFT_QUICK = 0

const BN_F_BN_MOD_SQRT = 0

const BN_F_BN_MONT_CTX_NEW = 0

const BN_F_BN_MPI2BN = 0

const BN_F_BN_NEW = 0

const BN_F_BN_POOL_GET = 0

const BN_F_BN_RAND = 0

const BN_F_BN_RAND_RANGE = 0

const BN_F_BN_RECP_CTX_NEW = 0

const BN_F_BN_RSHIFT = 0

const BN_F_BN_SET_WORDS = 0

const BN_F_BN_STACK_PUSH = 0

const BN_F_BN_USUB = 0

const BUF_F_BUF_MEM_GROW = 0

const BUF_F_BUF_MEM_GROW_CLEAN = 0

const BUF_F_BUF_MEM_NEW = 0

const CMS_F_CHECK_CONTENT = 0

const CMS_F_CMS_ADD0_CERT = 0

const CMS_F_CMS_ADD0_RECIPIENT_KEY = 0

const CMS_F_CMS_ADD0_RECIPIENT_PASSWORD = 0

const CMS_F_CMS_ADD1_RECEIPTREQUEST = 0

const CMS_F_CMS_ADD1_RECIPIENT_CERT = 0

const CMS_F_CMS_ADD1_SIGNER = 0

const CMS_F_CMS_ADD1_SIGNINGTIME = 0

const CMS_F_CMS_COMPRESS = 0

const CMS_F_CMS_COMPRESSEDDATA_CREATE = 0

const CMS_F_CMS_COMPRESSEDDATA_INIT_BIO = 0

const CMS_F_CMS_COPY_CONTENT = 0

const CMS_F_CMS_COPY_MESSAGEDIGEST = 0

const CMS_F_CMS_DATA = 0

const CMS_F_CMS_DATAFINAL = 0

const CMS_F_CMS_DATAINIT = 0

const CMS_F_CMS_DECRYPT = 0

const CMS_F_CMS_DECRYPT_SET1_KEY = 0

const CMS_F_CMS_DECRYPT_SET1_PASSWORD = 0

const CMS_F_CMS_DECRYPT_SET1_PKEY = 0

const CMS_F_CMS_DIGESTALGORITHM_FIND_CTX = 0

const CMS_F_CMS_DIGESTALGORITHM_INIT_BIO = 0

const CMS_F_CMS_DIGESTEDDATA_DO_FINAL = 0

const CMS_F_CMS_DIGEST_VERIFY = 0

const CMS_F_CMS_ENCODE_RECEIPT = 0

const CMS_F_CMS_ENCRYPT = 0

const CMS_F_CMS_ENCRYPTEDCONTENT_INIT = 0

const CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO = 0

const CMS_F_CMS_ENCRYPTEDDATA_DECRYPT = 0

const CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT = 0

const CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY = 0

const CMS_F_CMS_ENVELOPEDDATA_CREATE = 0

const CMS_F_CMS_ENVELOPEDDATA_INIT_BIO = 0

const CMS_F_CMS_ENVELOPED_DATA_INIT = 0

const CMS_F_CMS_ENV_ASN1_CTRL = 0

const CMS_F_CMS_FINAL = 0

const CMS_F_CMS_GET0_CERTIFICATE_CHOICES = 0

const CMS_F_CMS_GET0_CONTENT = 0

const CMS_F_CMS_GET0_ECONTENT_TYPE = 0

const CMS_F_CMS_GET0_ENVELOPED = 0

const CMS_F_CMS_GET0_REVOCATION_CHOICES = 0

const CMS_F_CMS_GET0_SIGNED = 0

const CMS_F_CMS_MSGSIGDIGEST_ADD1 = 0

const CMS_F_CMS_RECEIPTREQUEST_CREATE0 = 0

const CMS_F_CMS_RECEIPT_VERIFY = 0

const CMS_F_CMS_RECIPIENTINFO_DECRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_ENCRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG = 0

const CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID = 0

const CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS = 0

const CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP = 0

const CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID = 0

const CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP = 0

const CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP = 0

const CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS = 0

const CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID = 0

const CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT = 0

const CMS_F_CMS_RECIPIENTINFO_SET0_KEY = 0

const CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD = 0

const CMS_F_CMS_RECIPIENTINFO_SET0_PKEY = 0

const CMS_F_CMS_SD_ASN1_CTRL = 0

const CMS_F_CMS_SET1_IAS = 0

const CMS_F_CMS_SET1_KEYID = 0

const CMS_F_CMS_SET1_SIGNERIDENTIFIER = 0

const CMS_F_CMS_SET_DETACHED = 0

const CMS_F_CMS_SIGN = 0

const CMS_F_CMS_SIGNED_DATA_INIT = 0

const CMS_F_CMS_SIGNERINFO_CONTENT_SIGN = 0

const CMS_F_CMS_SIGNERINFO_SIGN = 0

const CMS_F_CMS_SIGNERINFO_VERIFY = 0

const CMS_F_CMS_SIGNERINFO_VERIFY_CERT = 0

const CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT = 0

const CMS_F_CMS_SIGN_RECEIPT = 0

const CMS_F_CMS_SI_CHECK_ATTRIBUTES = 0

const CMS_F_CMS_STREAM = 0

const CMS_F_CMS_UNCOMPRESS = 0

const CMS_F_CMS_VERIFY = 0

const CMS_F_KEK_UNWRAP_KEY = 0

const COMP_F_BIO_ZLIB_FLUSH = 0

const COMP_F_BIO_ZLIB_NEW = 0

const COMP_F_BIO_ZLIB_READ = 0

const COMP_F_BIO_ZLIB_WRITE = 0

const COMP_F_COMP_CTX_NEW = 0

const CONF_F_CONF_DUMP_FP = 0

const CONF_F_CONF_LOAD = 0

const CONF_F_CONF_LOAD_FP = 0

const CONF_F_CONF_PARSE_LIST = 0

const CONF_F_DEF_LOAD = 0

const CONF_F_DEF_LOAD_BIO = 0

const CONF_F_GET_NEXT_FILE = 0

const CONF_F_MODULE_ADD = 0

const CONF_F_MODULE_INIT = 0

const CONF_F_MODULE_LOAD_DSO = 0

const CONF_F_MODULE_RUN = 0

const CONF_F_NCONF_DUMP_BIO = 0

const CONF_F_NCONF_DUMP_FP = 0

const CONF_F_NCONF_GET_NUMBER_E = 0

const CONF_F_NCONF_GET_SECTION = 0

const CONF_F_NCONF_GET_STRING = 0

const CONF_F_NCONF_LOAD = 0

const CONF_F_NCONF_LOAD_BIO = 0

const CONF_F_NCONF_LOAD_FP = 0

const CONF_F_NCONF_NEW = 0

const CONF_F_PROCESS_INCLUDE = 0

const CONF_F_SSL_MODULE_INIT = 0

const CONF_F_STR_COPY = 0

const CRYPTO_F_CMAC_CTX_NEW = 0

const CRYPTO_F_CRYPTO_DUP_EX_DATA = 0

const CRYPTO_F_CRYPTO_FREE_EX_DATA = 0

const CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 0

const CRYPTO_F_CRYPTO_MEMDUP = 0

const CRYPTO_F_CRYPTO_NEW_EX_DATA = 0

const CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 0

const CRYPTO_F_CRYPTO_OCB128_INIT = 0

const CRYPTO_F_CRYPTO_SET_EX_DATA = 0

const CRYPTO_F_GET_AND_LOCK = 0

const CRYPTO_F_OPENSSL_ATEXIT = 0

const CRYPTO_F_OPENSSL_BUF2HEXSTR = 0

const CRYPTO_F_OPENSSL_FOPEN = 0

const CRYPTO_F_OPENSSL_HEXSTR2BUF = 0

const CRYPTO_F_OPENSSL_INIT_CRYPTO = 0

const CRYPTO_F_OPENSSL_LH_NEW = 0

const CRYPTO_F_OPENSSL_SK_DEEP_COPY = 0

const CRYPTO_F_OPENSSL_SK_DUP = 0

const CRYPTO_F_PKEY_HMAC_INIT = 0

const CRYPTO_F_PKEY_POLY1305_INIT = 0

const CRYPTO_F_PKEY_SIPHASH_INIT = 0

const CRYPTO_F_SK_RESERVE = 0

const CT_F_CTLOG_NEW = 0

const CT_F_CTLOG_NEW_FROM_BASE64 = 0

const CT_F_CTLOG_NEW_FROM_CONF = 0

const CT_F_CTLOG_STORE_LOAD_CTX_NEW = 0

const CT_F_CTLOG_STORE_LOAD_FILE = 0

const CT_F_CTLOG_STORE_LOAD_LOG = 0

const CT_F_CTLOG_STORE_NEW = 0

const CT_F_CT_BASE64_DECODE = 0

const CT_F_CT_POLICY_EVAL_CTX_NEW = 0

const CT_F_CT_V1_LOG_ID_FROM_PKEY = 0

const CT_F_I2O_SCT = 0

const CT_F_I2O_SCT_LIST = 0

const CT_F_I2O_SCT_SIGNATURE = 0

const CT_F_O2I_SCT = 0

const CT_F_O2I_SCT_LIST = 0

const CT_F_O2I_SCT_SIGNATURE = 0

const CT_F_SCT_CTX_NEW = 0

const CT_F_SCT_CTX_VERIFY = 0

const CT_F_SCT_NEW = 0

const CT_F_SCT_NEW_FROM_BASE64 = 0

const CT_F_SCT_SET0_LOG_ID = 0

const CT_F_SCT_SET1_EXTENSIONS = 0

const CT_F_SCT_SET1_LOG_ID = 0

const CT_F_SCT_SET1_SIGNATURE = 0

const CT_F_SCT_SET_LOG_ENTRY_TYPE = 0

const CT_F_SCT_SET_SIGNATURE_NID = 0

const CT_F_SCT_SET_VERSION = 0

const DH_F_COMPUTE_KEY = 0

const DH_F_DHPARAMS_PRINT_FP = 0

const DH_F_DH_BUILTIN_GENPARAMS = 0

const DH_F_DH_CHECK_EX = 0

const DH_F_DH_CHECK_PARAMS_EX = 0

const DH_F_DH_CHECK_PUB_KEY_EX = 0

const DH_F_DH_CMS_DECRYPT = 0

const DH_F_DH_CMS_SET_PEERKEY = 0

const DH_F_DH_CMS_SET_SHARED_INFO = 0

const DH_F_DH_METH_DUP = 0

const DH_F_DH_METH_NEW = 0

const DH_F_DH_METH_SET1_NAME = 0

const DH_F_DH_NEW_BY_NID = 0

const DH_F_DH_NEW_METHOD = 0

const DH_F_DH_PARAM_DECODE = 0

const DH_F_DH_PKEY_PUBLIC_CHECK = 0

const DH_F_DH_PRIV_DECODE = 0

const DH_F_DH_PRIV_ENCODE = 0

const DH_F_DH_PUB_DECODE = 0

const DH_F_DH_PUB_ENCODE = 0

const DH_F_DO_DH_PRINT = 0

const DH_F_GENERATE_KEY = 0

const DH_F_PKEY_DH_CTRL_STR = 0

const DH_F_PKEY_DH_DERIVE = 0

const DH_F_PKEY_DH_INIT = 0

const DH_F_PKEY_DH_KEYGEN = 0

const DSA_F_DSAPARAMS_PRINT = 0

const DSA_F_DSAPARAMS_PRINT_FP = 0

const DSA_F_DSA_BUILTIN_PARAMGEN = 0

const DSA_F_DSA_BUILTIN_PARAMGEN2 = 0

const DSA_F_DSA_DO_SIGN = 0

const DSA_F_DSA_DO_VERIFY = 0

const DSA_F_DSA_METH_DUP = 0

const DSA_F_DSA_METH_NEW = 0

const DSA_F_DSA_METH_SET1_NAME = 0

const DSA_F_DSA_NEW_METHOD = 0

const DSA_F_DSA_PARAM_DECODE = 0

const DSA_F_DSA_PRINT_FP = 0

const DSA_F_DSA_PRIV_DECODE = 0

const DSA_F_DSA_PRIV_ENCODE = 0

const DSA_F_DSA_PUB_DECODE = 0

const DSA_F_DSA_PUB_ENCODE = 0

const DSA_F_DSA_SIGN = 0

const DSA_F_DSA_SIGN_SETUP = 0

const DSA_F_DSA_SIG_NEW = 0

const DSA_F_OLD_DSA_PRIV_DECODE = 0

const DSA_F_PKEY_DSA_CTRL = 0

const DSA_F_PKEY_DSA_CTRL_STR = 0

const DSA_F_PKEY_DSA_KEYGEN = 0

const EC_F_BN_TO_FELEM = 0

const EC_F_D2I_ECPARAMETERS = 0

const EC_F_D2I_ECPKPARAMETERS = 0

const EC_F_D2I_ECPRIVATEKEY = 0

const EC_F_DO_EC_KEY_PRINT = 0

const EC_F_ECDH_CMS_DECRYPT = 0

const EC_F_ECDH_CMS_SET_SHARED_INFO = 0

const EC_F_ECDH_COMPUTE_KEY = 0

const EC_F_ECDH_SIMPLE_COMPUTE_KEY = 0

const EC_F_ECDSA_DO_SIGN_EX = 0

const EC_F_ECDSA_DO_VERIFY = 0

const EC_F_ECDSA_SIGN_EX = 0

const EC_F_ECDSA_SIGN_SETUP = 0

const EC_F_ECDSA_SIG_NEW = 0

const EC_F_ECDSA_VERIFY = 0

const EC_F_ECD_ITEM_VERIFY = 0

const EC_F_ECKEY_PARAM2TYPE = 0

const EC_F_ECKEY_PARAM_DECODE = 0

const EC_F_ECKEY_PRIV_DECODE = 0

const EC_F_ECKEY_PRIV_ENCODE = 0

const EC_F_ECKEY_PUB_DECODE = 0

const EC_F_ECKEY_PUB_ENCODE = 0

const EC_F_ECKEY_TYPE2PARAM = 0

const EC_F_ECPARAMETERS_PRINT = 0

const EC_F_ECPARAMETERS_PRINT_FP = 0

const EC_F_ECPKPARAMETERS_PRINT = 0

const EC_F_ECPKPARAMETERS_PRINT_FP = 0

const EC_F_ECP_NISTZ256_GET_AFFINE = 0

const EC_F_ECP_NISTZ256_INV_MOD_ORD = 0

const EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = 0

const EC_F_ECP_NISTZ256_POINTS_MUL = 0

const EC_F_ECP_NISTZ256_PRE_COMP_NEW = 0

const EC_F_ECP_NISTZ256_WINDOWED_MUL = 0

const EC_F_ECX_KEY_OP = 0

const EC_F_ECX_PRIV_ENCODE = 0

const EC_F_ECX_PUB_ENCODE = 0

const EC_F_EC_ASN1_GROUP2CURVE = 0

const EC_F_EC_ASN1_GROUP2FIELDID = 0

const EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 0

const EC_F_EC_GF2M_SIMPLE_FIELD_INV = 0

const EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 0

const EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 0

const EC_F_EC_GF2M_SIMPLE_LADDER_POST = 0

const EC_F_EC_GF2M_SIMPLE_LADDER_PRE = 0

const EC_F_EC_GF2M_SIMPLE_OCT2POINT = 0

const EC_F_EC_GF2M_SIMPLE_POINT2OCT = 0

const EC_F_EC_GF2M_SIMPLE_POINTS_MUL = 0

const EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 0

const EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 0

const EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 0

const EC_F_EC_GFP_MONT_FIELD_DECODE = 0

const EC_F_EC_GFP_MONT_FIELD_ENCODE = 0

const EC_F_EC_GFP_MONT_FIELD_INV = 0

const EC_F_EC_GFP_MONT_FIELD_MUL = 0

const EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 0

const EC_F_EC_GFP_MONT_FIELD_SQR = 0

const EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 0

const EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = 0

const EC_F_EC_GFP_NISTP224_POINTS_MUL = 0

const EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = 0

const EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = 0

const EC_F_EC_GFP_NISTP256_POINTS_MUL = 0

const EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = 0

const EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = 0

const EC_F_EC_GFP_NISTP521_POINTS_MUL = 0

const EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = 0

const EC_F_EC_GFP_NIST_FIELD_MUL = 0

const EC_F_EC_GFP_NIST_FIELD_SQR = 0

const EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 0

const EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = 0

const EC_F_EC_GFP_SIMPLE_FIELD_INV = 0

const EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 0

const EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 0

const EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 0

const EC_F_EC_GFP_SIMPLE_OCT2POINT = 0

const EC_F_EC_GFP_SIMPLE_POINT2OCT = 0

const EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 0

const EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 0

const EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 0

const EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 0

const EC_F_EC_GROUP_CHECK = 0

const EC_F_EC_GROUP_CHECK_DISCRIMINANT = 0

const EC_F_EC_GROUP_COPY = 0

const EC_F_EC_GROUP_GET_CURVE = 0

const EC_F_EC_GROUP_GET_CURVE_GF2M = 0

const EC_F_EC_GROUP_GET_CURVE_GFP = 0

const EC_F_EC_GROUP_GET_DEGREE = 0

const EC_F_EC_GROUP_GET_ECPARAMETERS = 0

const EC_F_EC_GROUP_GET_ECPKPARAMETERS = 0

const EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 0

const EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 0

const EC_F_EC_GROUP_NEW = 0

const EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 0

const EC_F_EC_GROUP_NEW_FROM_DATA = 0

const EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = 0

const EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = 0

const EC_F_EC_GROUP_SET_CURVE = 0

const EC_F_EC_GROUP_SET_CURVE_GF2M = 0

const EC_F_EC_GROUP_SET_CURVE_GFP = 0

const EC_F_EC_GROUP_SET_GENERATOR = 0

const EC_F_EC_GROUP_SET_SEED = 0

const EC_F_EC_KEY_CHECK_KEY = 0

const EC_F_EC_KEY_COPY = 0

const EC_F_EC_KEY_GENERATE_KEY = 0

const EC_F_EC_KEY_NEW = 0

const EC_F_EC_KEY_NEW_METHOD = 0

const EC_F_EC_KEY_OCT2PRIV = 0

const EC_F_EC_KEY_PRINT = 0

const EC_F_EC_KEY_PRINT_FP = 0

const EC_F_EC_KEY_PRIV2BUF = 0

const EC_F_EC_KEY_PRIV2OCT = 0

const EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = 0

const EC_F_EC_KEY_SIMPLE_CHECK_KEY = 0

const EC_F_EC_KEY_SIMPLE_OCT2PRIV = 0

const EC_F_EC_KEY_SIMPLE_PRIV2OCT = 0

const EC_F_EC_PKEY_CHECK = 0

const EC_F_EC_PKEY_PARAM_CHECK = 0

const EC_F_EC_POINTS_MAKE_AFFINE = 0

const EC_F_EC_POINTS_MUL = 0

const EC_F_EC_POINT_ADD = 0

const EC_F_EC_POINT_BN2POINT = 0

const EC_F_EC_POINT_CMP = 0

const EC_F_EC_POINT_COPY = 0

const EC_F_EC_POINT_DBL = 0

const EC_F_EC_POINT_GET_AFFINE_COORDINATES = 0

const EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 0

const EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 0

const EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 0

const EC_F_EC_POINT_INVERT = 0

const EC_F_EC_POINT_IS_AT_INFINITY = 0

const EC_F_EC_POINT_IS_ON_CURVE = 0

const EC_F_EC_POINT_MAKE_AFFINE = 0

const EC_F_EC_POINT_NEW = 0

const EC_F_EC_POINT_OCT2POINT = 0

const EC_F_EC_POINT_POINT2BUF = 0

const EC_F_EC_POINT_POINT2OCT = 0

const EC_F_EC_POINT_SET_AFFINE_COORDINATES = 0

const EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 0

const EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 0

const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = 0

const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 0

const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 0

const EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 0

const EC_F_EC_POINT_SET_TO_INFINITY = 0

const EC_F_EC_PRE_COMP_NEW = 0

const EC_F_EC_SCALAR_MUL_LADDER = 0

const EC_F_EC_WNAF_MUL = 0

const EC_F_EC_WNAF_PRECOMPUTE_MULT = 0

const EC_F_I2D_ECPARAMETERS = 0

const EC_F_I2D_ECPKPARAMETERS = 0

const EC_F_I2D_ECPRIVATEKEY = 0

const EC_F_I2O_ECPUBLICKEY = 0

const EC_F_NISTP224_PRE_COMP_NEW = 0

const EC_F_NISTP256_PRE_COMP_NEW = 0

const EC_F_NISTP521_PRE_COMP_NEW = 0

const EC_F_O2I_ECPUBLICKEY = 0

const EC_F_OLD_EC_PRIV_DECODE = 0

const EC_F_OSSL_ECDH_COMPUTE_KEY = 0

const EC_F_OSSL_ECDSA_SIGN_SIG = 0

const EC_F_OSSL_ECDSA_VERIFY_SIG = 0

const EC_F_PKEY_ECD_CTRL = 0

const EC_F_PKEY_ECD_DIGESTSIGN = 0

const EC_F_PKEY_ECD_DIGESTSIGN25519 = 0

const EC_F_PKEY_ECD_DIGESTSIGN448 = 0

const EC_F_PKEY_ECX_DERIVE = 0

const EC_F_PKEY_EC_CTRL = 0

const EC_F_PKEY_EC_CTRL_STR = 0

const EC_F_PKEY_EC_DERIVE = 0

const EC_F_PKEY_EC_INIT = 0

const EC_F_PKEY_EC_KDF_DERIVE = 0

const EC_F_PKEY_EC_KEYGEN = 0

const EC_F_PKEY_EC_PARAMGEN = 0

const EC_F_PKEY_EC_SIGN = 0

const EC_F_VALIDATE_ECX_DERIVE = 0

const ENGINE_F_DIGEST_UPDATE = 0

const ENGINE_F_DYNAMIC_CTRL = 0

const ENGINE_F_DYNAMIC_GET_DATA_CTX = 0

const ENGINE_F_DYNAMIC_LOAD = 0

const ENGINE_F_DYNAMIC_SET_DATA_CTX = 0

const ENGINE_F_ENGINE_ADD = 0

const ENGINE_F_ENGINE_BY_ID = 0

const ENGINE_F_ENGINE_CMD_IS_EXECUTABLE = 0

const ENGINE_F_ENGINE_CTRL = 0

const ENGINE_F_ENGINE_CTRL_CMD = 0

const ENGINE_F_ENGINE_CTRL_CMD_STRING = 0

const ENGINE_F_ENGINE_FINISH = 0

const ENGINE_F_ENGINE_GET_CIPHER = 0

const ENGINE_F_ENGINE_GET_DIGEST = 0

const ENGINE_F_ENGINE_GET_FIRST = 0

const ENGINE_F_ENGINE_GET_LAST = 0

const ENGINE_F_ENGINE_GET_NEXT = 0

const ENGINE_F_ENGINE_GET_PKEY_ASN1_METH = 0

const ENGINE_F_ENGINE_GET_PKEY_METH = 0

const ENGINE_F_ENGINE_GET_PREV = 0

const ENGINE_F_ENGINE_INIT = 0

const ENGINE_F_ENGINE_LIST_ADD = 0

const ENGINE_F_ENGINE_LIST_REMOVE = 0

const ENGINE_F_ENGINE_LOAD_PRIVATE_KEY = 0

const ENGINE_F_ENGINE_LOAD_PUBLIC_KEY = 0

const ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT = 0

const ENGINE_F_ENGINE_NEW = 0

const ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR = 0

const ENGINE_F_ENGINE_REMOVE = 0

const ENGINE_F_ENGINE_SET_DEFAULT_STRING = 0

const ENGINE_F_ENGINE_SET_ID = 0

const ENGINE_F_ENGINE_SET_NAME = 0

const ENGINE_F_ENGINE_TABLE_REGISTER = 0

const ENGINE_F_ENGINE_UNLOCKED_FINISH = 0

const ENGINE_F_ENGINE_UP_REF = 0

const ENGINE_F_INT_CLEANUP_ITEM = 0

const ENGINE_F_INT_CTRL_HELPER = 0

const ENGINE_F_INT_ENGINE_CONFIGURE = 0

const ENGINE_F_INT_ENGINE_MODULE_INIT = 0

const ENGINE_F_OSSL_HMAC_INIT = 0

const EVP_F_AESNI_INIT_KEY = 0

const EVP_F_AESNI_XTS_INIT_KEY = 0

const EVP_F_AES_GCM_CTRL = 0

const EVP_F_AES_INIT_KEY = 0

const EVP_F_AES_OCB_CIPHER = 0

const EVP_F_AES_T4_INIT_KEY = 0

const EVP_F_AES_T4_XTS_INIT_KEY = 0

const EVP_F_AES_WRAP_CIPHER = 0

const EVP_F_AES_XTS_INIT_KEY = 0

const EVP_F_ALG_MODULE_INIT = 0

const EVP_F_ARIA_CCM_INIT_KEY = 0

const EVP_F_ARIA_GCM_CTRL = 0

const EVP_F_ARIA_GCM_INIT_KEY = 0

const EVP_F_ARIA_INIT_KEY = 0

const EVP_F_B64_NEW = 0

const EVP_F_CAMELLIA_INIT_KEY = 0

const EVP_F_CHACHA20_POLY1305_CTRL = 0

const EVP_F_CMLL_T4_INIT_KEY = 0

const EVP_F_DES_EDE3_WRAP_CIPHER = 0

const EVP_F_DO_SIGVER_INIT = 0

const EVP_F_ENC_NEW = 0

const EVP_F_EVP_CIPHERINIT_EX = 0

const EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 0

const EVP_F_EVP_CIPHER_CTX_COPY = 0

const EVP_F_EVP_CIPHER_CTX_CTRL = 0

const EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 0

const EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 0

const EVP_F_EVP_DECRYPTFINAL_EX = 0

const EVP_F_EVP_DECRYPTUPDATE = 0

const EVP_F_EVP_DIGESTFINALXOF = 0

const EVP_F_EVP_DIGESTINIT_EX = 0

const EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 0

const EVP_F_EVP_ENCRYPTFINAL_EX = 0

const EVP_F_EVP_ENCRYPTUPDATE = 0

const EVP_F_EVP_MD_CTX_COPY_EX = 0

const EVP_F_EVP_MD_SIZE = 0

const EVP_F_EVP_OPENINIT = 0

const EVP_F_EVP_PBE_ALG_ADD = 0

const EVP_F_EVP_PBE_ALG_ADD_TYPE = 0

const EVP_F_EVP_PBE_CIPHERINIT = 0

const EVP_F_EVP_PBE_SCRYPT = 0

const EVP_F_EVP_PKCS82PKEY = 0

const EVP_F_EVP_PKEY2PKCS8 = 0

const EVP_F_EVP_PKEY_ASN1_ADD0 = 0

const EVP_F_EVP_PKEY_CHECK = 0

const EVP_F_EVP_PKEY_COPY_PARAMETERS = 0

const EVP_F_EVP_PKEY_CTX_CTRL = 0

const EVP_F_EVP_PKEY_CTX_CTRL_STR = 0

const EVP_F_EVP_PKEY_CTX_DUP = 0

const EVP_F_EVP_PKEY_CTX_MD = 0

const EVP_F_EVP_PKEY_DECRYPT = 0

const EVP_F_EVP_PKEY_DECRYPT_INIT = 0

const EVP_F_EVP_PKEY_DECRYPT_OLD = 0

const EVP_F_EVP_PKEY_DERIVE = 0

const EVP_F_EVP_PKEY_DERIVE_INIT = 0

const EVP_F_EVP_PKEY_DERIVE_SET_PEER = 0

const EVP_F_EVP_PKEY_ENCRYPT = 0

const EVP_F_EVP_PKEY_ENCRYPT_INIT = 0

const EVP_F_EVP_PKEY_ENCRYPT_OLD = 0

const EVP_F_EVP_PKEY_GET0_DH = 0

const EVP_F_EVP_PKEY_GET0_DSA = 0

const EVP_F_EVP_PKEY_GET0_EC_KEY = 0

const EVP_F_EVP_PKEY_GET0_HMAC = 0

const EVP_F_EVP_PKEY_GET0_POLY1305 = 0

const EVP_F_EVP_PKEY_GET0_RSA = 0

const EVP_F_EVP_PKEY_GET0_SIPHASH = 0

const EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 0

const EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 0

const EVP_F_EVP_PKEY_KEYGEN = 0

const EVP_F_EVP_PKEY_KEYGEN_INIT = 0

const EVP_F_EVP_PKEY_METH_ADD0 = 0

const EVP_F_EVP_PKEY_METH_NEW = 0

const EVP_F_EVP_PKEY_NEW = 0

const EVP_F_EVP_PKEY_NEW_CMAC_KEY = 0

const EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 0

const EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 0

const EVP_F_EVP_PKEY_PARAMGEN = 0

const EVP_F_EVP_PKEY_PARAMGEN_INIT = 0

const EVP_F_EVP_PKEY_PARAM_CHECK = 0

const EVP_F_EVP_PKEY_PUBLIC_CHECK = 0

const EVP_F_EVP_PKEY_SET1_ENGINE = 0

const EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 0

const EVP_F_EVP_PKEY_SIGN = 0

const EVP_F_EVP_PKEY_SIGN_INIT = 0

const EVP_F_EVP_PKEY_VERIFY = 0

const EVP_F_EVP_PKEY_VERIFY_INIT = 0

const EVP_F_EVP_PKEY_VERIFY_RECOVER = 0

const EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 0

const EVP_F_EVP_SIGNFINAL = 0

const EVP_F_EVP_VERIFYFINAL = 0

const EVP_F_INT_CTX_NEW = 0

const EVP_F_OK_NEW = 0

const EVP_F_PKCS5_PBE_KEYIVGEN = 0

const EVP_F_PKCS5_V2_PBE_KEYIVGEN = 0

const EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 0

const EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 0

const EVP_F_PKEY_SET_TYPE = 0

const EVP_F_RC2_MAGIC_TO_METH = 0

const EVP_F_RC5_CTRL = 0

const EVP_F_R_32_12_16_INIT_KEY = 0

const EVP_F_S390X_AES_GCM_CTRL = 0

const EVP_F_UPDATE = 0

const KDF_F_PKEY_HKDF_CTRL_STR = 0

const KDF_F_PKEY_HKDF_DERIVE = 0

const KDF_F_PKEY_HKDF_INIT = 0

const KDF_F_PKEY_SCRYPT_CTRL_STR = 0

const KDF_F_PKEY_SCRYPT_CTRL_UINT64 = 0

const KDF_F_PKEY_SCRYPT_DERIVE = 0

const KDF_F_PKEY_SCRYPT_INIT = 0

const KDF_F_PKEY_SCRYPT_SET_MEMBUF = 0

const KDF_F_PKEY_TLS1_PRF_CTRL_STR = 0

const KDF_F_PKEY_TLS1_PRF_DERIVE = 0

const KDF_F_PKEY_TLS1_PRF_INIT = 0

const KDF_F_TLS1_PRF_ALG = 0

const KDF_R_INVALID_DIGEST = 0

const KDF_R_MISSING_ITERATION_COUNT = 0

const KDF_R_MISSING_KEY = 0

const KDF_R_MISSING_MESSAGE_DIGEST = 0

const KDF_R_MISSING_PARAMETER = 0

const KDF_R_MISSING_PASS = 0

const KDF_R_MISSING_SALT = 0

const KDF_R_MISSING_SECRET = 0

const KDF_R_MISSING_SEED = 0

const KDF_R_UNKNOWN_PARAMETER_TYPE = 0

const KDF_R_VALUE_ERROR = 0

const KDF_R_VALUE_MISSING = 0

const OBJ_F_OBJ_ADD_OBJECT = 0

const OBJ_F_OBJ_ADD_SIGID = 0

const OBJ_F_OBJ_CREATE = 0

const OBJ_F_OBJ_DUP = 0

const OBJ_F_OBJ_NAME_NEW_INDEX = 0

const OBJ_F_OBJ_NID2LN = 0

const OBJ_F_OBJ_NID2OBJ = 0

const OBJ_F_OBJ_NID2SN = 0

const OBJ_F_OBJ_TXT2OBJ = 0

const OCSP_F_D2I_OCSP_NONCE = 0

const OCSP_F_OCSP_BASIC_ADD1_STATUS = 0

const OCSP_F_OCSP_BASIC_SIGN = 0

const OCSP_F_OCSP_BASIC_SIGN_CTX = 0

const OCSP_F_OCSP_BASIC_VERIFY = 0

const OCSP_F_OCSP_CERT_ID_NEW = 0

const OCSP_F_OCSP_CHECK_DELEGATED = 0

const OCSP_F_OCSP_CHECK_IDS = 0

const OCSP_F_OCSP_CHECK_ISSUER = 0

const OCSP_F_OCSP_CHECK_VALIDITY = 0

const OCSP_F_OCSP_MATCH_ISSUERID = 0

const OCSP_F_OCSP_PARSE_URL = 0

const OCSP_F_OCSP_REQUEST_SIGN = 0

const OCSP_F_OCSP_REQUEST_VERIFY = 0

const OCSP_F_OCSP_RESPONSE_GET1_BASIC = 0

const OCSP_F_PARSE_HTTP_LINE1 = 0

const PEM_F_B2I_DSS = 0

const PEM_F_B2I_PVK_BIO = 0

const PEM_F_B2I_RSA = 0

const PEM_F_CHECK_BITLEN_DSA = 0

const PEM_F_CHECK_BITLEN_RSA = 0

const PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 0

const PEM_F_D2I_PKCS8PRIVATEKEY_FP = 0

const PEM_F_DO_B2I = 0

const PEM_F_DO_B2I_BIO = 0

const PEM_F_DO_BLOB_HEADER = 0

const PEM_F_DO_I2B = 0

const PEM_F_DO_PK8PKEY = 0

const PEM_F_DO_PK8PKEY_FP = 0

const PEM_F_DO_PVK_BODY = 0

const PEM_F_DO_PVK_HEADER = 0

const PEM_F_GET_HEADER_AND_DATA = 0

const PEM_F_GET_NAME = 0

const PEM_F_I2B_PVK = 0

const PEM_F_I2B_PVK_BIO = 0

const PEM_F_LOAD_IV = 0

const PEM_F_PEM_ASN1_READ = 0

const PEM_F_PEM_ASN1_READ_BIO = 0

const PEM_F_PEM_ASN1_WRITE = 0

const PEM_F_PEM_ASN1_WRITE_BIO = 0

const PEM_F_PEM_DEF_CALLBACK = 0

const PEM_F_PEM_DO_HEADER = 0

const PEM_F_PEM_GET_EVP_CIPHER_INFO = 0

const PEM_F_PEM_READ = 0

const PEM_F_PEM_READ_BIO = 0

const PEM_F_PEM_READ_BIO_DHPARAMS = 0

const PEM_F_PEM_READ_BIO_EX = 0

const PEM_F_PEM_READ_BIO_PARAMETERS = 0

const PEM_F_PEM_READ_BIO_PRIVATEKEY = 0

const PEM_F_PEM_READ_DHPARAMS = 0

const PEM_F_PEM_READ_PRIVATEKEY = 0

const PEM_F_PEM_SIGNFINAL = 0

const PEM_F_PEM_WRITE = 0

const PEM_F_PEM_WRITE_BIO = 0

const PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL = 0

const PEM_F_PEM_WRITE_PRIVATEKEY = 0

const PEM_F_PEM_X509_INFO_READ = 0

const PEM_F_PEM_X509_INFO_READ_BIO = 0

const PEM_F_PEM_X509_INFO_WRITE_BIO = 0

const PKCS12_F_OPENSSL_ASC2UNI = 0

const PKCS12_F_OPENSSL_UNI2ASC = 0

const PKCS12_F_OPENSSL_UNI2UTF8 = 0

const PKCS12_F_OPENSSL_UTF82UNI = 0

const PKCS12_F_PKCS12_CREATE = 0

const PKCS12_F_PKCS12_GEN_MAC = 0

const PKCS12_F_PKCS12_INIT = 0

const PKCS12_F_PKCS12_ITEM_DECRYPT_D2I = 0

const PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT = 0

const PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG = 0

const PKCS12_F_PKCS12_KEY_GEN_ASC = 0

const PKCS12_F_PKCS12_KEY_GEN_UNI = 0

const PKCS12_F_PKCS12_KEY_GEN_UTF8 = 0

const PKCS12_F_PKCS12_NEWPASS = 0

const PKCS12_F_PKCS12_PACK_P7DATA = 0

const PKCS12_F_PKCS12_PACK_P7ENCDATA = 0

const PKCS12_F_PKCS12_PARSE = 0

const PKCS12_F_PKCS12_PBE_CRYPT = 0

const PKCS12_F_PKCS12_PBE_KEYIVGEN = 0

const PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF = 0

const PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8 = 0

const PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT = 0

const PKCS12_F_PKCS12_SETUP_MAC = 0

const PKCS12_F_PKCS12_SET_MAC = 0

const PKCS12_F_PKCS12_UNPACK_AUTHSAFES = 0

const PKCS12_F_PKCS12_UNPACK_P7DATA = 0

const PKCS12_F_PKCS12_VERIFY_MAC = 0

const PKCS12_F_PKCS8_ENCRYPT = 0

const PKCS12_F_PKCS8_SET0_PBE = 0

const PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = 0

const PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = 0

const PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 0

const PKCS7_F_PKCS7_ADD_CERTIFICATE = 0

const PKCS7_F_PKCS7_ADD_CRL = 0

const PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 0

const PKCS7_F_PKCS7_ADD_SIGNATURE = 0

const PKCS7_F_PKCS7_ADD_SIGNER = 0

const PKCS7_F_PKCS7_BIO_ADD_DIGEST = 0

const PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = 0

const PKCS7_F_PKCS7_CTRL = 0

const PKCS7_F_PKCS7_DATADECODE = 0

const PKCS7_F_PKCS7_DATAFINAL = 0

const PKCS7_F_PKCS7_DATAINIT = 0

const PKCS7_F_PKCS7_DATAVERIFY = 0

const PKCS7_F_PKCS7_DECRYPT = 0

const PKCS7_F_PKCS7_DECRYPT_RINFO = 0

const PKCS7_F_PKCS7_ENCODE_RINFO = 0

const PKCS7_F_PKCS7_ENCRYPT = 0

const PKCS7_F_PKCS7_FINAL = 0

const PKCS7_F_PKCS7_FIND_DIGEST = 0

const PKCS7_F_PKCS7_GET0_SIGNERS = 0

const PKCS7_F_PKCS7_RECIP_INFO_SET = 0

const PKCS7_F_PKCS7_SET_CIPHER = 0

const PKCS7_F_PKCS7_SET_CONTENT = 0

const PKCS7_F_PKCS7_SET_DIGEST = 0

const PKCS7_F_PKCS7_SET_TYPE = 0

const PKCS7_F_PKCS7_SIGN = 0

const PKCS7_F_PKCS7_SIGNATUREVERIFY = 0

const PKCS7_F_PKCS7_SIGNER_INFO_SET = 0

const PKCS7_F_PKCS7_SIGNER_INFO_SIGN = 0

const PKCS7_F_PKCS7_SIGN_ADD_SIGNER = 0

const PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 0

const PKCS7_F_PKCS7_VERIFY = 0

const RAND_F_DATA_COLLECT_METHOD = 0

const RAND_F_DRBG_BYTES = 0

const RAND_F_DRBG_GET_ENTROPY = 0

const RAND_F_DRBG_SETUP = 0

const RAND_F_GET_ENTROPY = 0

const RAND_F_RAND_BYTES = 0

const RAND_F_RAND_DRBG_ENABLE_LOCKING = 0

const RAND_F_RAND_DRBG_GENERATE = 0

const RAND_F_RAND_DRBG_GET_ENTROPY = 0

const RAND_F_RAND_DRBG_GET_NONCE = 0

const RAND_F_RAND_DRBG_INSTANTIATE = 0

const RAND_F_RAND_DRBG_NEW = 0

const RAND_F_RAND_DRBG_RESEED = 0

const RAND_F_RAND_DRBG_RESTART = 0

const RAND_F_RAND_DRBG_SET = 0

const RAND_F_RAND_DRBG_SET_DEFAULTS = 0

const RAND_F_RAND_DRBG_UNINSTANTIATE = 0

const RAND_F_RAND_LOAD_FILE = 0

const RAND_F_RAND_POOL_ACQUIRE_ENTROPY = 0

const RAND_F_RAND_POOL_ADD = 0

const RAND_F_RAND_POOL_ADD_BEGIN = 0

const RAND_F_RAND_POOL_ADD_END = 0

const RAND_F_RAND_POOL_ATTACH = 0

const RAND_F_RAND_POOL_BYTES_NEEDED = 0

const RAND_F_RAND_POOL_GROW = 0

const RAND_F_RAND_POOL_NEW = 0

const RAND_F_RAND_PSEUDO_BYTES = 0

const RAND_F_RAND_WRITE_FILE = 0

const RSA_F_CHECK_PADDING_MD = 0

const RSA_F_ENCODE_PKCS1 = 0

const RSA_F_INT_RSA_VERIFY = 0

const RSA_F_OLD_RSA_PRIV_DECODE = 0

const RSA_F_PKEY_PSS_INIT = 0

const RSA_F_PKEY_RSA_CTRL = 0

const RSA_F_PKEY_RSA_CTRL_STR = 0

const RSA_F_PKEY_RSA_SIGN = 0

const RSA_F_PKEY_RSA_VERIFY = 0

const RSA_F_PKEY_RSA_VERIFYRECOVER = 0

const RSA_F_RSA_ALGOR_TO_MD = 0

const RSA_F_RSA_BUILTIN_KEYGEN = 0

const RSA_F_RSA_CHECK_KEY = 0

const RSA_F_RSA_CHECK_KEY_EX = 0

const RSA_F_RSA_CMS_DECRYPT = 0

const RSA_F_RSA_CMS_VERIFY = 0

const RSA_F_RSA_ITEM_VERIFY = 0

const RSA_F_RSA_METH_DUP = 0

const RSA_F_RSA_METH_NEW = 0

const RSA_F_RSA_METH_SET1_NAME = 0

const RSA_F_RSA_MGF1_TO_MD = 0

const RSA_F_RSA_MULTIP_INFO_NEW = 0

const RSA_F_RSA_NEW_METHOD = 0

const RSA_F_RSA_NULL = 0

const RSA_F_RSA_NULL_PRIVATE_DECRYPT = 0

const RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 0

const RSA_F_RSA_NULL_PUBLIC_DECRYPT = 0

const RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 0

const RSA_F_RSA_OSSL_PRIVATE_DECRYPT = 0

const RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = 0

const RSA_F_RSA_OSSL_PUBLIC_DECRYPT = 0

const RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = 0

const RSA_F_RSA_PADDING_ADD_NONE = 0

const RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 0

const RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = 0

const RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 0

const RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = 0

const RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 0

const RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 0

const RSA_F_RSA_PADDING_ADD_SSLV23 = 0

const RSA_F_RSA_PADDING_ADD_X931 = 0

const RSA_F_RSA_PADDING_CHECK_NONE = 0

const RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 0

const RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = 0

const RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 0

const RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 0

const RSA_F_RSA_PADDING_CHECK_SSLV23 = 0

const RSA_F_RSA_PADDING_CHECK_X931 = 0

const RSA_F_RSA_PARAM_DECODE = 0

const RSA_F_RSA_PRINT = 0

const RSA_F_RSA_PRINT_FP = 0

const RSA_F_RSA_PRIV_DECODE = 0

const RSA_F_RSA_PRIV_ENCODE = 0

const RSA_F_RSA_PSS_GET_PARAM = 0

const RSA_F_RSA_PSS_TO_CTX = 0

const RSA_F_RSA_PUB_DECODE = 0

const RSA_F_RSA_SETUP_BLINDING = 0

const RSA_F_RSA_SIGN = 0

const RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 0

const RSA_F_RSA_VERIFY = 0

const RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 0

const RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = 0

const RSA_F_SETUP_TBUF = 0

const OSSL_STORE_F_FILE_CTRL = 0

const OSSL_STORE_F_FILE_FIND = 0

const OSSL_STORE_F_FILE_GET_PASS = 0

const OSSL_STORE_F_FILE_LOAD = 0

const OSSL_STORE_F_FILE_LOAD_TRY_DECODE = 0

const OSSL_STORE_F_FILE_NAME_TO_URI = 0

const OSSL_STORE_F_FILE_OPEN = 0

const OSSL_STORE_F_OSSL_STORE_ATTACH_PEM_BIO = 0

const OSSL_STORE_F_OSSL_STORE_EXPECT = 0

const OSSL_STORE_F_OSSL_STORE_FILE_ATTACH_PEM_BIO_INT = 0

const OSSL_STORE_F_OSSL_STORE_FIND = 0

const OSSL_STORE_F_OSSL_STORE_GET0_LOADER_INT = 0

const OSSL_STORE_F_OSSL_STORE_INFO_GET1_CERT = 0

const OSSL_STORE_F_OSSL_STORE_INFO_GET1_CRL = 0

const OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME = 0

const OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME_DESCRIPTION = 0

const OSSL_STORE_F_OSSL_STORE_INFO_GET1_PARAMS = 0

const OSSL_STORE_F_OSSL_STORE_INFO_GET1_PKEY = 0

const OSSL_STORE_F_OSSL_STORE_INFO_NEW_CERT = 0

const OSSL_STORE_F_OSSL_STORE_INFO_NEW_CRL = 0

const OSSL_STORE_F_OSSL_STORE_INFO_NEW_EMBEDDED = 0

const OSSL_STORE_F_OSSL_STORE_INFO_NEW_NAME = 0

const OSSL_STORE_F_OSSL_STORE_INFO_NEW_PARAMS = 0

const OSSL_STORE_F_OSSL_STORE_INFO_NEW_PKEY = 0

const OSSL_STORE_F_OSSL_STORE_INFO_SET0_NAME_DESCRIPTION = 0

const OSSL_STORE_F_OSSL_STORE_INIT_ONCE = 0

const OSSL_STORE_F_OSSL_STORE_LOADER_NEW = 0

const OSSL_STORE_F_OSSL_STORE_OPEN = 0

const OSSL_STORE_F_OSSL_STORE_OPEN_INT = 0

const OSSL_STORE_F_OSSL_STORE_REGISTER_LOADER_INT = 0

const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ALIAS = 0

const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ISSUER_SERIAL = 0

const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT = 0

const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_NAME = 0

const OSSL_STORE_F_OSSL_STORE_UNREGISTER_LOADER_INT = 0

const OSSL_STORE_F_TRY_DECODE_PARAMS = 0

const OSSL_STORE_F_TRY_DECODE_PKCS12 = 0

const OSSL_STORE_F_TRY_DECODE_PKCS8ENCRYPTED = 0

const TS_F_DEF_SERIAL_CB = 0

const TS_F_DEF_TIME_CB = 0

const TS_F_ESS_ADD_SIGNING_CERT = 0

const TS_F_ESS_ADD_SIGNING_CERT_V2 = 0

const TS_F_ESS_CERT_ID_NEW_INIT = 0

const TS_F_ESS_CERT_ID_V2_NEW_INIT = 0

const TS_F_ESS_SIGNING_CERT_NEW_INIT = 0

const TS_F_ESS_SIGNING_CERT_V2_NEW_INIT = 0

const TS_F_INT_TS_RESP_VERIFY_TOKEN = 0

const TS_F_PKCS7_TO_TS_TST_INFO = 0

const TS_F_TS_ACCURACY_SET_MICROS = 0

const TS_F_TS_ACCURACY_SET_MILLIS = 0

const TS_F_TS_ACCURACY_SET_SECONDS = 0

const TS_F_TS_CHECK_IMPRINTS = 0

const TS_F_TS_CHECK_NONCES = 0

const TS_F_TS_CHECK_POLICY = 0

const TS_F_TS_CHECK_SIGNING_CERTS = 0

const TS_F_TS_CHECK_STATUS_INFO = 0

const TS_F_TS_COMPUTE_IMPRINT = 0

const TS_F_TS_CONF_INVALID = 0

const TS_F_TS_CONF_LOAD_CERT = 0

const TS_F_TS_CONF_LOAD_CERTS = 0

const TS_F_TS_CONF_LOAD_KEY = 0

const TS_F_TS_CONF_LOOKUP_FAIL = 0

const TS_F_TS_CONF_SET_DEFAULT_ENGINE = 0

const TS_F_TS_GET_STATUS_TEXT = 0

const TS_F_TS_MSG_IMPRINT_SET_ALGO = 0

const TS_F_TS_REQ_SET_MSG_IMPRINT = 0

const TS_F_TS_REQ_SET_NONCE = 0

const TS_F_TS_REQ_SET_POLICY_ID = 0

const TS_F_TS_RESP_CREATE_RESPONSE = 0

const TS_F_TS_RESP_CREATE_TST_INFO = 0

const TS_F_TS_RESP_CTX_ADD_FAILURE_INFO = 0

const TS_F_TS_RESP_CTX_ADD_MD = 0

const TS_F_TS_RESP_CTX_ADD_POLICY = 0

const TS_F_TS_RESP_CTX_NEW = 0

const TS_F_TS_RESP_CTX_SET_ACCURACY = 0

const TS_F_TS_RESP_CTX_SET_CERTS = 0

const TS_F_TS_RESP_CTX_SET_DEF_POLICY = 0

const TS_F_TS_RESP_CTX_SET_SIGNER_CERT = 0

const TS_F_TS_RESP_CTX_SET_STATUS_INFO = 0

const TS_F_TS_RESP_GET_POLICY = 0

const TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION = 0

const TS_F_TS_RESP_SET_STATUS_INFO = 0

const TS_F_TS_RESP_SET_TST_INFO = 0

const TS_F_TS_RESP_SIGN = 0

const TS_F_TS_RESP_VERIFY_SIGNATURE = 0

const TS_F_TS_TST_INFO_SET_ACCURACY = 0

const TS_F_TS_TST_INFO_SET_MSG_IMPRINT = 0

const TS_F_TS_TST_INFO_SET_NONCE = 0

const TS_F_TS_TST_INFO_SET_POLICY_ID = 0

const TS_F_TS_TST_INFO_SET_SERIAL = 0

const TS_F_TS_TST_INFO_SET_TIME = 0

const TS_F_TS_TST_INFO_SET_TSA = 0

const TS_F_TS_VERIFY = 0

const TS_F_TS_VERIFY_CERT = 0

const TS_F_TS_VERIFY_CTX_NEW = 0

const UI_F_CLOSE_CONSOLE = 0

const UI_F_ECHO_CONSOLE = 0

const UI_F_GENERAL_ALLOCATE_BOOLEAN = 0

const UI_F_GENERAL_ALLOCATE_PROMPT = 0

const UI_F_NOECHO_CONSOLE = 0

const UI_F_OPEN_CONSOLE = 0

const UI_F_UI_CONSTRUCT_PROMPT = 0

const UI_F_UI_CREATE_METHOD = 0

const UI_F_UI_CTRL = 0

const UI_F_UI_DUP_ERROR_STRING = 0

const UI_F_UI_DUP_INFO_STRING = 0

const UI_F_UI_DUP_INPUT_BOOLEAN = 0

const UI_F_UI_DUP_INPUT_STRING = 0

const UI_F_UI_DUP_USER_DATA = 0

const UI_F_UI_DUP_VERIFY_STRING = 0

const UI_F_UI_GET0_RESULT = 0

const UI_F_UI_GET_RESULT_LENGTH = 0

const UI_F_UI_NEW_METHOD = 0

const UI_F_UI_PROCESS = 0

const UI_F_UI_SET_RESULT = 0

const UI_F_UI_SET_RESULT_EX = 0

const X509_F_ADD_CERT_DIR = 0

const X509_F_BUILD_CHAIN = 0

const X509_F_BY_FILE_CTRL = 0

const X509_F_CHECK_NAME_CONSTRAINTS = 0

const X509_F_CHECK_POLICY = 0

const X509_F_DANE_I2D = 0

const X509_F_DIR_CTRL = 0

const X509_F_GET_CERT_BY_SUBJECT = 0

const X509_F_I2D_X509_AUX = 0

const X509_F_LOOKUP_CERTS_SK = 0

const X509_F_NETSCAPE_SPKI_B64_DECODE = 0

const X509_F_NETSCAPE_SPKI_B64_ENCODE = 0

const X509_F_NEW_DIR = 0

const X509_F_X509AT_ADD1_ATTR = 0

const X509_F_X509V3_ADD_EXT = 0

const X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 0

const X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 0

const X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 0

const X509_F_X509_ATTRIBUTE_GET0_DATA = 0

const X509_F_X509_ATTRIBUTE_SET1_DATA = 0

const X509_F_X509_CHECK_PRIVATE_KEY = 0

const X509_F_X509_CRL_DIFF = 0

const X509_F_X509_CRL_METHOD_NEW = 0

const X509_F_X509_CRL_PRINT_FP = 0

const X509_F_X509_EXTENSION_CREATE_BY_NID = 0

const X509_F_X509_EXTENSION_CREATE_BY_OBJ = 0

const X509_F_X509_GET_PUBKEY_PARAMETERS = 0

const X509_F_X509_LOAD_CERT_CRL_FILE = 0

const X509_F_X509_LOAD_CERT_FILE = 0

const X509_F_X509_LOAD_CRL_FILE = 0

const X509_F_X509_LOOKUP_METH_NEW = 0

const X509_F_X509_LOOKUP_NEW = 0

const X509_F_X509_NAME_ADD_ENTRY = 0

const X509_F_X509_NAME_CANON = 0

const X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 0

const X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 0

const X509_F_X509_NAME_ENTRY_SET_OBJECT = 0

const X509_F_X509_NAME_ONELINE = 0

const X509_F_X509_NAME_PRINT = 0

const X509_F_X509_OBJECT_NEW = 0

const X509_F_X509_PRINT_EX_FP = 0

const X509_F_X509_PUBKEY_DECODE = 0

const X509_F_X509_PUBKEY_GET = 0

const X509_F_X509_PUBKEY_GET0 = 0

const X509_F_X509_PUBKEY_SET = 0

const X509_F_X509_REQ_CHECK_PRIVATE_KEY = 0

const X509_F_X509_REQ_PRINT_EX = 0

const X509_F_X509_REQ_PRINT_FP = 0

const X509_F_X509_REQ_TO_X509 = 0

const X509_F_X509_STORE_ADD_CERT = 0

const X509_F_X509_STORE_ADD_CRL = 0

const X509_F_X509_STORE_ADD_LOOKUP = 0

const X509_F_X509_STORE_CTX_GET1_ISSUER = 0

const X509_F_X509_STORE_CTX_INIT = 0

const X509_F_X509_STORE_CTX_NEW = 0

const X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 0

const X509_F_X509_STORE_NEW = 0

const X509_F_X509_TO_X509_REQ = 0

const X509_F_X509_TRUST_ADD = 0

const X509_F_X509_TRUST_SET = 0

const X509_F_X509_VERIFY_CERT = 0

const X509_F_X509_VERIFY_PARAM_NEW = 0

const X509V3_F_A2I_GENERAL_NAME = 0

const X509V3_F_ADDR_VALIDATE_PATH_INTERNAL = 0

const X509V3_F_ASIDENTIFIERCHOICE_CANONIZE = 0

const X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL = 0

const X509V3_F_BIGNUM_TO_STRING = 0

const X509V3_F_COPY_EMAIL = 0

const X509V3_F_COPY_ISSUER = 0

const X509V3_F_DO_DIRNAME = 0

const X509V3_F_DO_EXT_I2D = 0

const X509V3_F_DO_EXT_NCONF = 0

const X509V3_F_GNAMES_FROM_SECTNAME = 0

const X509V3_F_I2S_ASN1_ENUMERATED = 0

const X509V3_F_I2S_ASN1_IA5STRING = 0

const X509V3_F_I2S_ASN1_INTEGER = 0

const X509V3_F_I2V_AUTHORITY_INFO_ACCESS = 0

const X509V3_F_LEVEL_ADD_NODE = 0

const X509V3_F_NOTICE_SECTION = 0

const X509V3_F_NREF_NOS = 0

const X509V3_F_POLICY_CACHE_CREATE = 0

const X509V3_F_POLICY_CACHE_NEW = 0

const X509V3_F_POLICY_DATA_NEW = 0

const X509V3_F_POLICY_SECTION = 0

const X509V3_F_PROCESS_PCI_VALUE = 0

const X509V3_F_R2I_CERTPOL = 0

const X509V3_F_R2I_PCI = 0

const X509V3_F_S2I_ASN1_IA5STRING = 0

const X509V3_F_S2I_ASN1_INTEGER = 0

const X509V3_F_S2I_ASN1_OCTET_STRING = 0

const X509V3_F_S2I_SKEY_ID = 0

const X509V3_F_SET_DIST_POINT_NAME = 0

const X509V3_F_SXNET_ADD_ID_ASC = 0

const X509V3_F_SXNET_ADD_ID_INTEGER = 0

const X509V3_F_SXNET_ADD_ID_ULONG = 0

const X509V3_F_SXNET_GET_ID_ASC = 0

const X509V3_F_SXNET_GET_ID_ULONG = 0

const X509V3_F_TREE_INIT = 0

const X509V3_F_V2I_ASIDENTIFIERS = 0

const X509V3_F_V2I_ASN1_BIT_STRING = 0

const X509V3_F_V2I_AUTHORITY_INFO_ACCESS = 0

const X509V3_F_V2I_AUTHORITY_KEYID = 0

const X509V3_F_V2I_BASIC_CONSTRAINTS = 0

const X509V3_F_V2I_CRLD = 0

const X509V3_F_V2I_EXTENDED_KEY_USAGE = 0

const X509V3_F_V2I_GENERAL_NAMES = 0

const X509V3_F_V2I_GENERAL_NAME_EX = 0

const X509V3_F_V2I_IDP = 0

const X509V3_F_V2I_IPADDRBLOCKS = 0

const X509V3_F_V2I_ISSUER_ALT = 0

const X509V3_F_V2I_NAME_CONSTRAINTS = 0

const X509V3_F_V2I_POLICY_CONSTRAINTS = 0

const X509V3_F_V2I_POLICY_MAPPINGS = 0

const X509V3_F_V2I_SUBJECT_ALT = 0

const X509V3_F_V2I_TLS_FEATURE = 0

const X509V3_F_V3_GENERIC_EXTENSION = 0

const X509V3_F_X509V3_ADD1_I2D = 0

const X509V3_F_X509V3_ADD_VALUE = 0

const X509V3_F_X509V3_EXT_ADD = 0

const X509V3_F_X509V3_EXT_ADD_ALIAS = 0

const X509V3_F_X509V3_EXT_I2D = 0

const X509V3_F_X509V3_EXT_NCONF = 0

const X509V3_F_X509V3_GET_SECTION = 0

const X509V3_F_X509V3_GET_STRING = 0

const X509V3_F_X509V3_GET_VALUE_BOOL = 0

const X509V3_F_X509V3_PARSE_LIST = 0

const X509V3_F_X509_PURPOSE_ADD = 0

const X509V3_F_X509_PURPOSE_SET = 0

const EVP_R_OPERATION_NOT_INITIALIZED = 151

const EVP_R_OPERATON_NOT_INITIALIZED = EVP_R_OPERATION_NOT_INITIALIZED

const CRYPTO_R_BAD_ALGORITHM_NAME = 117

const CRYPTO_R_CONFLICTING_NAMES = 118

const CRYPTO_R_HEX_STRING_TOO_SHORT = 121

const CRYPTO_R_ILLEGAL_HEX_DIGIT = 102

const CRYPTO_R_INSUFFICIENT_DATA_SPACE = 106

const CRYPTO_R_INSUFFICIENT_PARAM_SIZE = 107

const CRYPTO_R_INSUFFICIENT_SECURE_DATA_SPACE = 108

const CRYPTO_R_INVALID_NEGATIVE_VALUE = 122

const CRYPTO_R_INVALID_NULL_ARGUMENT = 109

const CRYPTO_R_INVALID_OSSL_PARAM_TYPE = 110

const CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103

const CRYPTO_R_PROVIDER_ALREADY_EXISTS = 104

const CRYPTO_R_PROVIDER_SECTION_ERROR = 105

const CRYPTO_R_RANDOM_SECTION_ERROR = 119

const CRYPTO_R_SECURE_MALLOC_FAILURE = 111

const CRYPTO_R_STRING_TOO_LONG = 112

const CRYPTO_R_TOO_MANY_BYTES = 113

const CRYPTO_R_TOO_MANY_RECORDS = 114

const CRYPTO_R_TOO_SMALL_BUFFER = 116

const CRYPTO_R_UNKNOWN_NAME_IN_RANDOM_SECTION = 120

const CRYPTO_R_ZERO_LENGTH_NUMBER = 115

const OSSL_PARAM_INTEGER = 1

const OSSL_PARAM_UNSIGNED_INTEGER = 2

const OSSL_PARAM_REAL = 3

const OSSL_PARAM_UTF8_STRING = 4

const OSSL_PARAM_OCTET_STRING = 5

const OSSL_PARAM_UTF8_PTR = 6

const OSSL_PARAM_OCTET_PTR = 7

const SSLeay = OpenSSL_version_num

const SSLeay_version = OpenSSL_version

const SSLEAY_VERSION_NUMBER = OPENSSL_VERSION_NUMBER

const OPENSSL_VERSION = 0

const SSLEAY_VERSION = OPENSSL_VERSION

const OPENSSL_CFLAGS = 1

const SSLEAY_CFLAGS = OPENSSL_CFLAGS

const OPENSSL_BUILT_ON = 2

const SSLEAY_BUILT_ON = OPENSSL_BUILT_ON

const OPENSSL_PLATFORM = 3

const SSLEAY_PLATFORM = OPENSSL_PLATFORM

const OPENSSL_DIR = 4

const SSLEAY_DIR = OPENSSL_DIR

const OPENSSL_ENGINES_DIR = 5

const OPENSSL_VERSION_STRING = 6

const OPENSSL_FULL_VERSION_STRING = 7

const OPENSSL_MODULES_DIR = 8

const OPENSSL_CPU_INFO = 9

const OPENSSL_INFO_CONFIG_DIR = 1001

const OPENSSL_INFO_ENGINES_DIR = 1002

const OPENSSL_INFO_MODULES_DIR = 1003

const OPENSSL_INFO_DSO_EXTENSION = 1004

const OPENSSL_INFO_DIR_FILENAME_SEPARATOR = 1005

const OPENSSL_INFO_LIST_SEPARATOR = 1006

const OPENSSL_INFO_SEED_SOURCE = 1007

const OPENSSL_INFO_CPU_SETTINGS = 1008

const CRYPTO_EX_INDEX_SSL = 0

const CRYPTO_EX_INDEX_SSL_CTX = 1

const CRYPTO_EX_INDEX_SSL_SESSION = 2

const CRYPTO_EX_INDEX_X509 = 3

const CRYPTO_EX_INDEX_X509_STORE = 4

const CRYPTO_EX_INDEX_X509_STORE_CTX = 5

const CRYPTO_EX_INDEX_DH = 6

const CRYPTO_EX_INDEX_DSA = 7

const CRYPTO_EX_INDEX_EC_KEY = 8

const CRYPTO_EX_INDEX_RSA = 9

const CRYPTO_EX_INDEX_ENGINE = 10

const CRYPTO_EX_INDEX_UI = 11

const CRYPTO_EX_INDEX_BIO = 12

const CRYPTO_EX_INDEX_APP = 13

const CRYPTO_EX_INDEX_UI_METHOD = 14

const CRYPTO_EX_INDEX_RAND_DRBG = 15

const CRYPTO_EX_INDEX_DRBG = CRYPTO_EX_INDEX_RAND_DRBG

const CRYPTO_EX_INDEX_OSSL_LIB_CTX = 16

const CRYPTO_EX_INDEX_EVP_PKEY = 17

const CRYPTO_EX_INDEX__COUNT = 18

const CRYPTO_LOCK = 1

const CRYPTO_UNLOCK = 2

const CRYPTO_READ = 4

const CRYPTO_WRITE = 8

const OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = Clong(0x00000001)

const OPENSSL_INIT_LOAD_CRYPTO_STRINGS = Clong(0x00000002)

const OPENSSL_INIT_ADD_ALL_CIPHERS = Clong(0x00000004)

const OPENSSL_INIT_ADD_ALL_DIGESTS = Clong(0x00000008)

const OPENSSL_INIT_NO_ADD_ALL_CIPHERS = Clong(0x00000010)

const OPENSSL_INIT_NO_ADD_ALL_DIGESTS = Clong(0x00000020)

const OPENSSL_INIT_LOAD_CONFIG = Clong(0x00000040)

const OPENSSL_INIT_NO_LOAD_CONFIG = Clong(0x00000080)

const OPENSSL_INIT_ASYNC = Clong(0x00000100)

const OPENSSL_INIT_ENGINE_RDRAND = Clong(0x00000200)

const OPENSSL_INIT_ENGINE_DYNAMIC = Clong(0x00000400)

const OPENSSL_INIT_ENGINE_OPENSSL = Clong(0x00000800)

const OPENSSL_INIT_ENGINE_CRYPTODEV = Clong(0x00001000)

const OPENSSL_INIT_ENGINE_CAPI = Clong(0x00002000)

const OPENSSL_INIT_ENGINE_PADLOCK = Clong(0x00004000)

const OPENSSL_INIT_ENGINE_AFALG = Clong(0x00008000)

const OPENSSL_INIT_ATFORK = Clong(0x00020000)

const OPENSSL_INIT_NO_ATEXIT = Clong(0x00080000)

const OPENSSL_INIT_ENGINE_ALL_BUILTIN = (((OPENSSL_INIT_ENGINE_RDRAND | OPENSSL_INIT_ENGINE_DYNAMIC) | OPENSSL_INIT_ENGINE_CRYPTODEV) | OPENSSL_INIT_ENGINE_CAPI) | OPENSSL_INIT_ENGINE_PADLOCK

const CRYPTO_ONCE_STATIC_INIT = PTHREAD_ONCE_INIT

const COMP_R_ZLIB_DEFLATE_ERROR = 99

const COMP_R_ZLIB_INFLATE_ERROR = 100

const COMP_R_ZLIB_NOT_SUPPORTED = 101

const BIO_R_ACCEPT_ERROR = 100

const BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141

const BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129

const BIO_R_BAD_FOPEN_MODE = 101

const BIO_R_BROKEN_PIPE = 124

const BIO_R_CONNECT_ERROR = 103

const BIO_R_CONNECT_TIMEOUT = 147

const BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107

const BIO_R_GETSOCKNAME_ERROR = 132

const BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133

const BIO_R_GETTING_SOCKTYPE = 134

const BIO_R_INVALID_ARGUMENT = 125

const BIO_R_INVALID_SOCKET = 135

const BIO_R_IN_USE = 123

const BIO_R_LENGTH_TOO_LONG = 102

const BIO_R_LISTEN_V6_ONLY = 136

const BIO_R_LOOKUP_RETURNED_NOTHING = 142

const BIO_R_MALFORMED_HOST_OR_SERVICE = 130

const BIO_R_NBIO_CONNECT_ERROR = 110

const BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143

const BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144

const BIO_R_NO_PORT_DEFINED = 113

const BIO_R_NO_SUCH_FILE = 128

const BIO_R_NULL_PARAMETER = 115

const BIO_R_TRANSFER_ERROR = 104

const BIO_R_TRANSFER_TIMEOUT = 105

const BIO_R_UNABLE_TO_BIND_SOCKET = 117

const BIO_R_UNABLE_TO_CREATE_SOCKET = 118

const BIO_R_UNABLE_TO_KEEPALIVE = 137

const BIO_R_UNABLE_TO_LISTEN_SOCKET = 119

const BIO_R_UNABLE_TO_NODELAY = 138

const BIO_R_UNABLE_TO_REUSEADDR = 139

const BIO_R_UNAVAILABLE_IP_FAMILY = 145

const BIO_R_UNINITIALIZED = 120

const BIO_R_UNKNOWN_INFO_TYPE = 140

const BIO_R_UNSUPPORTED_IP_FAMILY = 146

const BIO_R_UNSUPPORTED_METHOD = 121

const BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131

const BIO_R_WRITE_TO_READ_ONLY_BIO = 126

const BIO_R_WSASTARTUP = 122

const BIO_TYPE_DESCRIPTOR = 0x0100

const BIO_TYPE_FILTER = 0x0200

const BIO_TYPE_SOURCE_SINK = 0x0400

const BIO_TYPE_NONE = 0

const BIO_TYPE_MEM = 1 | BIO_TYPE_SOURCE_SINK

const BIO_TYPE_FILE = 2 | BIO_TYPE_SOURCE_SINK

const BIO_TYPE_FD = (4 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR

const BIO_TYPE_SOCKET = (5 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR

const BIO_TYPE_NULL = 6 | BIO_TYPE_SOURCE_SINK

const BIO_TYPE_SSL = 7 | BIO_TYPE_FILTER

const BIO_TYPE_MD = 8 | BIO_TYPE_FILTER

const BIO_TYPE_BUFFER = 9 | BIO_TYPE_FILTER

const BIO_TYPE_CIPHER = 10 | BIO_TYPE_FILTER

const BIO_TYPE_BASE64 = 11 | BIO_TYPE_FILTER

const BIO_TYPE_CONNECT = (12 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR

const BIO_TYPE_ACCEPT = (13 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR

const BIO_TYPE_NBIO_TEST = 16 | BIO_TYPE_FILTER

const BIO_TYPE_NULL_FILTER = 17 | BIO_TYPE_FILTER

const BIO_TYPE_BIO = 19 | BIO_TYPE_SOURCE_SINK

const BIO_TYPE_LINEBUFFER = 20 | BIO_TYPE_FILTER

const BIO_TYPE_DGRAM = (21 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR

const BIO_TYPE_ASN1 = 22 | BIO_TYPE_FILTER

const BIO_TYPE_COMP = 23 | BIO_TYPE_FILTER

const BIO_TYPE_CORE_TO_PROV = 25 | BIO_TYPE_SOURCE_SINK

const BIO_TYPE_START = 128

const BIO_NOCLOSE = 0x00

const BIO_CLOSE = 0x01

const BIO_CTRL_RESET = 1

const BIO_CTRL_EOF = 2

const BIO_CTRL_INFO = 3

const BIO_CTRL_SET = 4

const BIO_CTRL_GET = 5

const BIO_CTRL_PUSH = 6

const BIO_CTRL_POP = 7

const BIO_CTRL_GET_CLOSE = 8

const BIO_CTRL_SET_CLOSE = 9

const BIO_CTRL_PENDING = 10

const BIO_CTRL_FLUSH = 11

const BIO_CTRL_DUP = 12

const BIO_CTRL_WPENDING = 13

const BIO_CTRL_SET_CALLBACK = 14

const BIO_CTRL_GET_CALLBACK = 15

const BIO_CTRL_PEEK = 29

const BIO_CTRL_SET_FILENAME = 30

const BIO_CTRL_DGRAM_CONNECT = 31

const BIO_CTRL_DGRAM_SET_CONNECTED = 32

const BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33

const BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34

const BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35

const BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36

const BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37

const BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38

const BIO_CTRL_DGRAM_MTU_DISCOVER = 39

const BIO_CTRL_DGRAM_QUERY_MTU = 40

const BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47

const BIO_CTRL_DGRAM_GET_MTU = 41

const BIO_CTRL_DGRAM_SET_MTU = 42

const BIO_CTRL_DGRAM_MTU_EXCEEDED = 43

const BIO_CTRL_DGRAM_GET_PEER = 46

const BIO_CTRL_DGRAM_SET_PEER = 44

const BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45

const BIO_CTRL_DGRAM_SET_DONT_FRAG = 48

const BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49

const BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50

const BIO_CTRL_DGRAM_SET_PEEK_MODE = 71

const BIO_CTRL_GET_KTLS_SEND = 73

const BIO_CTRL_GET_KTLS_RECV = 76

const BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY = 77

const BIO_CTRL_DGRAM_SCTP_MSG_WAITING = 78

const BIO_CTRL_SET_PREFIX = 79

const BIO_CTRL_SET_INDENT = 80

const BIO_CTRL_GET_INDENT = 81

const BIO_FP_READ = 0x02

const BIO_FP_WRITE = 0x04

const BIO_FP_APPEND = 0x08

const BIO_FP_TEXT = 0x10

const BIO_FLAGS_READ = 0x01

const BIO_FLAGS_WRITE = 0x02

const BIO_FLAGS_IO_SPECIAL = 0x04

const BIO_FLAGS_RWS = (BIO_FLAGS_READ | BIO_FLAGS_WRITE) | BIO_FLAGS_IO_SPECIAL

const BIO_FLAGS_SHOULD_RETRY = 0x08

const BIO_FLAGS_UPLINK = 0

const BIO_FLAGS_BASE64_NO_NL = 0x0100

const BIO_FLAGS_MEM_RDONLY = 0x0200

const BIO_FLAGS_NONCLEAR_RST = 0x0400

const BIO_FLAGS_IN_EOF = 0x0800

const BIO_RR_SSL_X509_LOOKUP = 0x01

const BIO_RR_CONNECT = 0x02

const BIO_RR_ACCEPT = 0x03

const BIO_CB_FREE = 0x01

const BIO_CB_READ = 0x02

const BIO_CB_WRITE = 0x03

const BIO_CB_PUTS = 0x04

const BIO_CB_GETS = 0x05

const BIO_CB_CTRL = 0x06

const BIO_CB_RETURN = 0x80

const BIO_C_SET_CONNECT = 100

const BIO_C_DO_STATE_MACHINE = 101

const BIO_C_SET_NBIO = 102

const BIO_C_SET_FD = 104

const BIO_C_GET_FD = 105

const BIO_C_SET_FILE_PTR = 106

const BIO_C_GET_FILE_PTR = 107

const BIO_C_SET_FILENAME = 108

const BIO_C_SET_SSL = 109

const BIO_C_GET_SSL = 110

const BIO_C_SET_MD = 111

const BIO_C_GET_MD = 112

const BIO_C_GET_CIPHER_STATUS = 113

const BIO_C_SET_BUF_MEM = 114

const BIO_C_GET_BUF_MEM_PTR = 115

const BIO_C_GET_BUFF_NUM_LINES = 116

const BIO_C_SET_BUFF_SIZE = 117

const BIO_C_SET_ACCEPT = 118

const BIO_C_SSL_MODE = 119

const BIO_C_GET_MD_CTX = 120

const BIO_C_SET_BUFF_READ_DATA = 122

const BIO_C_GET_CONNECT = 123

const BIO_C_GET_ACCEPT = 124

const BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125

const BIO_C_GET_SSL_NUM_RENEGOTIATES = 126

const BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127

const BIO_C_FILE_SEEK = 128

const BIO_C_GET_CIPHER_CTX = 129

const BIO_C_SET_BUF_MEM_EOF_RETURN = 130

const BIO_C_SET_BIND_MODE = 131

const BIO_C_GET_BIND_MODE = 132

const BIO_C_FILE_TELL = 133

const BIO_C_GET_SOCKS = 134

const BIO_C_SET_SOCKS = 135

const BIO_C_SET_WRITE_BUF_SIZE = 136

const BIO_C_GET_WRITE_BUF_SIZE = 137

const BIO_C_MAKE_BIO_PAIR = 138

const BIO_C_DESTROY_BIO_PAIR = 139

const BIO_C_GET_WRITE_GUARANTEE = 140

const BIO_C_GET_READ_REQUEST = 141

const BIO_C_SHUTDOWN_WR = 142

const BIO_C_NREAD0 = 143

const BIO_C_NREAD = 144

const BIO_C_NWRITE0 = 145

const BIO_C_NWRITE = 146

const BIO_C_RESET_READ_REQUEST = 147

const BIO_C_SET_MD_CTX = 148

const BIO_C_SET_PREFIX = 149

const BIO_C_GET_PREFIX = 150

const BIO_C_SET_SUFFIX = 151

const BIO_C_GET_SUFFIX = 152

const BIO_C_SET_EX_ARG = 153

const BIO_C_GET_EX_ARG = 154

const BIO_C_SET_CONNECT_MODE = 155

const BIO_FAMILY_IPV4 = 4

const BIO_FAMILY_IPV6 = 6

const BIO_FAMILY_IPANY = 256

const BIO_BIND_NORMAL = 0

const BIO_SOCK_REUSEADDR = 0x01

const BIO_BIND_REUSEADDR = BIO_SOCK_REUSEADDR

const BIO_BIND_REUSEADDR_IF_UNUSED = BIO_SOCK_REUSEADDR

const BIO_SOCK_V6_ONLY = 0x02

const BIO_SOCK_KEEPALIVE = 0x04

const BIO_SOCK_NONBLOCK = 0x08

const BIO_SOCK_NODELAY = 0x10

const ossl_bio__attr__ = x

const BUF_MEM_FLAG_SECURE = 0x01

const OSSL_FUNC_CORE_GETTABLE_PARAMS = 1

const OSSL_FUNC_CORE_GET_PARAMS = 2

const OSSL_FUNC_CORE_THREAD_START = 3

const OSSL_FUNC_CORE_GET_LIBCTX = 4

const OSSL_FUNC_CORE_NEW_ERROR = 5

const OSSL_FUNC_CORE_SET_ERROR_DEBUG = 6

const OSSL_FUNC_CORE_VSET_ERROR = 7

const OSSL_FUNC_CORE_SET_ERROR_MARK = 8

const OSSL_FUNC_CORE_CLEAR_LAST_ERROR_MARK = 9

const OSSL_FUNC_CORE_POP_ERROR_TO_MARK = 10

const OSSL_FUNC_CORE_OBJ_ADD_SIGID = 11

const OSSL_FUNC_CORE_OBJ_CREATE = 12

const OSSL_FUNC_CRYPTO_MALLOC = 20

const OSSL_FUNC_CRYPTO_ZALLOC = 21

const OSSL_FUNC_CRYPTO_FREE = 22

const OSSL_FUNC_CRYPTO_CLEAR_FREE = 23

const OSSL_FUNC_CRYPTO_REALLOC = 24

const OSSL_FUNC_CRYPTO_CLEAR_REALLOC = 25

const OSSL_FUNC_CRYPTO_SECURE_MALLOC = 26

const OSSL_FUNC_CRYPTO_SECURE_ZALLOC = 27

const OSSL_FUNC_CRYPTO_SECURE_FREE = 28

const OSSL_FUNC_CRYPTO_SECURE_CLEAR_FREE = 29

const OSSL_FUNC_CRYPTO_SECURE_ALLOCATED = 30

const OSSL_FUNC_OPENSSL_CLEANSE = 31

const OSSL_FUNC_BIO_NEW_FILE = 40

const OSSL_FUNC_BIO_NEW_MEMBUF = 41

const OSSL_FUNC_BIO_READ_EX = 42

const OSSL_FUNC_BIO_WRITE_EX = 43

const OSSL_FUNC_BIO_UP_REF = 44

const OSSL_FUNC_BIO_FREE = 45

const OSSL_FUNC_BIO_VPRINTF = 46

const OSSL_FUNC_BIO_VSNPRINTF = 47

const OSSL_FUNC_BIO_PUTS = 48

const OSSL_FUNC_BIO_GETS = 49

const OSSL_FUNC_BIO_CTRL = 50

const OSSL_FUNC_SELF_TEST_CB = 100

const OSSL_FUNC_GET_ENTROPY = 101

const OSSL_FUNC_CLEANUP_ENTROPY = 102

const OSSL_FUNC_GET_NONCE = 103

const OSSL_FUNC_CLEANUP_NONCE = 104

const OSSL_FUNC_PROVIDER_REGISTER_CHILD_CB = 105

const OSSL_FUNC_PROVIDER_DEREGISTER_CHILD_CB = 106

const OSSL_FUNC_PROVIDER_NAME = 107

const OSSL_FUNC_PROVIDER_GET0_PROVIDER_CTX = 108

const OSSL_FUNC_PROVIDER_GET0_DISPATCH = 109

const OSSL_FUNC_PROVIDER_UP_REF = 110

const OSSL_FUNC_PROVIDER_FREE = 111

const OSSL_FUNC_PROVIDER_TEARDOWN = 1024

const OSSL_FUNC_PROVIDER_GETTABLE_PARAMS = 1025

const OSSL_FUNC_PROVIDER_GET_PARAMS = 1026

const OSSL_FUNC_PROVIDER_QUERY_OPERATION = 1027

const OSSL_FUNC_PROVIDER_UNQUERY_OPERATION = 1028

const OSSL_FUNC_PROVIDER_GET_REASON_STRINGS = 1029

const OSSL_FUNC_PROVIDER_GET_CAPABILITIES = 1030

const OSSL_FUNC_PROVIDER_SELF_TEST = 1031

const OSSL_OP_DIGEST = 1

const OSSL_OP_CIPHER = 2

const OSSL_OP_MAC = 3

const OSSL_OP_KDF = 4

const OSSL_OP_RAND = 5

const OSSL_OP_KEYMGMT = 10

const OSSL_OP_KEYEXCH = 11

const OSSL_OP_SIGNATURE = 12

const OSSL_OP_ASYM_CIPHER = 13

const OSSL_OP_KEM = 14

const OSSL_OP_ENCODER = 20

const OSSL_OP_DECODER = 21

const OSSL_OP_STORE = 22

const OSSL_OP__HIGHEST = 22

const OSSL_FUNC_DIGEST_NEWCTX = 1

const OSSL_FUNC_DIGEST_INIT = 2

const OSSL_FUNC_DIGEST_UPDATE = 3

const OSSL_FUNC_DIGEST_FINAL = 4

const OSSL_FUNC_DIGEST_DIGEST = 5

const OSSL_FUNC_DIGEST_FREECTX = 6

const OSSL_FUNC_DIGEST_DUPCTX = 7

const OSSL_FUNC_DIGEST_GET_PARAMS = 8

const OSSL_FUNC_DIGEST_SET_CTX_PARAMS = 9

const OSSL_FUNC_DIGEST_GET_CTX_PARAMS = 10

const OSSL_FUNC_DIGEST_GETTABLE_PARAMS = 11

const OSSL_FUNC_DIGEST_SETTABLE_CTX_PARAMS = 12

const OSSL_FUNC_DIGEST_GETTABLE_CTX_PARAMS = 13

const OSSL_FUNC_CIPHER_NEWCTX = 1

const OSSL_FUNC_CIPHER_ENCRYPT_INIT = 2

const OSSL_FUNC_CIPHER_DECRYPT_INIT = 3

const OSSL_FUNC_CIPHER_UPDATE = 4

const OSSL_FUNC_CIPHER_FINAL = 5

const OSSL_FUNC_CIPHER_CIPHER = 6

const OSSL_FUNC_CIPHER_FREECTX = 7

const OSSL_FUNC_CIPHER_DUPCTX = 8

const OSSL_FUNC_CIPHER_GET_PARAMS = 9

const OSSL_FUNC_CIPHER_GET_CTX_PARAMS = 10

const OSSL_FUNC_CIPHER_SET_CTX_PARAMS = 11

const OSSL_FUNC_CIPHER_GETTABLE_PARAMS = 12

const OSSL_FUNC_CIPHER_GETTABLE_CTX_PARAMS = 13

const OSSL_FUNC_CIPHER_SETTABLE_CTX_PARAMS = 14

const OSSL_FUNC_MAC_NEWCTX = 1

const OSSL_FUNC_MAC_DUPCTX = 2

const OSSL_FUNC_MAC_FREECTX = 3

const OSSL_FUNC_MAC_INIT = 4

const OSSL_FUNC_MAC_UPDATE = 5

const OSSL_FUNC_MAC_FINAL = 6

const OSSL_FUNC_MAC_GET_PARAMS = 7

const OSSL_FUNC_MAC_GET_CTX_PARAMS = 8

const OSSL_FUNC_MAC_SET_CTX_PARAMS = 9

const OSSL_FUNC_MAC_GETTABLE_PARAMS = 10

const OSSL_FUNC_MAC_GETTABLE_CTX_PARAMS = 11

const OSSL_FUNC_MAC_SETTABLE_CTX_PARAMS = 12

const OSSL_FUNC_KDF_NEWCTX = 1

const OSSL_FUNC_KDF_DUPCTX = 2

const OSSL_FUNC_KDF_FREECTX = 3

const OSSL_FUNC_KDF_RESET = 4

const OSSL_FUNC_KDF_DERIVE = 5

const OSSL_FUNC_KDF_GETTABLE_PARAMS = 6

const OSSL_FUNC_KDF_GETTABLE_CTX_PARAMS = 7

const OSSL_FUNC_KDF_SETTABLE_CTX_PARAMS = 8

const OSSL_FUNC_KDF_GET_PARAMS = 9

const OSSL_FUNC_KDF_GET_CTX_PARAMS = 10

const OSSL_FUNC_KDF_SET_CTX_PARAMS = 11

const OSSL_FUNC_RAND_NEWCTX = 1

const OSSL_FUNC_RAND_FREECTX = 2

const OSSL_FUNC_RAND_INSTANTIATE = 3

const OSSL_FUNC_RAND_UNINSTANTIATE = 4

const OSSL_FUNC_RAND_GENERATE = 5

const OSSL_FUNC_RAND_RESEED = 6

const OSSL_FUNC_RAND_NONCE = 7

const OSSL_FUNC_RAND_ENABLE_LOCKING = 8

const OSSL_FUNC_RAND_LOCK = 9

const OSSL_FUNC_RAND_UNLOCK = 10

const OSSL_FUNC_RAND_GETTABLE_PARAMS = 11

const OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS = 12

const OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS = 13

const OSSL_FUNC_RAND_GET_PARAMS = 14

const OSSL_FUNC_RAND_GET_CTX_PARAMS = 15

const OSSL_FUNC_RAND_SET_CTX_PARAMS = 16

const OSSL_FUNC_RAND_VERIFY_ZEROIZATION = 17

const OSSL_FUNC_RAND_GET_SEED = 18

const OSSL_FUNC_RAND_CLEAR_SEED = 19

const OSSL_KEYMGMT_SELECT_PRIVATE_KEY = 0x01

const OSSL_KEYMGMT_SELECT_PUBLIC_KEY = 0x02

const OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS = 0x04

const OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS = 0x80

const OSSL_KEYMGMT_SELECT_ALL_PARAMETERS = OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS | OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS

const OSSL_KEYMGMT_SELECT_KEYPAIR = OSSL_KEYMGMT_SELECT_PRIVATE_KEY | OSSL_KEYMGMT_SELECT_PUBLIC_KEY

const OSSL_KEYMGMT_SELECT_ALL = OSSL_KEYMGMT_SELECT_KEYPAIR | OSSL_KEYMGMT_SELECT_ALL_PARAMETERS

const OSSL_KEYMGMT_VALIDATE_FULL_CHECK = 0

const OSSL_KEYMGMT_VALIDATE_QUICK_CHECK = 1

const OSSL_FUNC_KEYMGMT_NEW = 1

const OSSL_FUNC_KEYMGMT_GEN_INIT = 2

const OSSL_FUNC_KEYMGMT_GEN_SET_TEMPLATE = 3

const OSSL_FUNC_KEYMGMT_GEN_SET_PARAMS = 4

const OSSL_FUNC_KEYMGMT_GEN_SETTABLE_PARAMS = 5

const OSSL_FUNC_KEYMGMT_GEN = 6

const OSSL_FUNC_KEYMGMT_GEN_CLEANUP = 7

const OSSL_FUNC_KEYMGMT_LOAD = 8

const OSSL_FUNC_KEYMGMT_FREE = 10

const OSSL_FUNC_KEYMGMT_GET_PARAMS = 11

const OSSL_FUNC_KEYMGMT_GETTABLE_PARAMS = 12

const OSSL_FUNC_KEYMGMT_SET_PARAMS = 13

const OSSL_FUNC_KEYMGMT_SETTABLE_PARAMS = 14

const OSSL_FUNC_KEYMGMT_QUERY_OPERATION_NAME = 20

const OSSL_FUNC_KEYMGMT_HAS = 21

const OSSL_FUNC_KEYMGMT_VALIDATE = 22

const OSSL_FUNC_KEYMGMT_MATCH = 23

const OSSL_FUNC_KEYMGMT_IMPORT = 40

const OSSL_FUNC_KEYMGMT_IMPORT_TYPES = 41

const OSSL_FUNC_KEYMGMT_EXPORT = 42

const OSSL_FUNC_KEYMGMT_EXPORT_TYPES = 43

const OSSL_FUNC_KEYMGMT_DUP = 44

const OSSL_FUNC_KEYEXCH_NEWCTX = 1

const OSSL_FUNC_KEYEXCH_INIT = 2

const OSSL_FUNC_KEYEXCH_DERIVE = 3

const OSSL_FUNC_KEYEXCH_SET_PEER = 4

const OSSL_FUNC_KEYEXCH_FREECTX = 5

const OSSL_FUNC_KEYEXCH_DUPCTX = 6

const OSSL_FUNC_KEYEXCH_SET_CTX_PARAMS = 7

const OSSL_FUNC_KEYEXCH_SETTABLE_CTX_PARAMS = 8

const OSSL_FUNC_KEYEXCH_GET_CTX_PARAMS = 9

const OSSL_FUNC_KEYEXCH_GETTABLE_CTX_PARAMS = 10

const OSSL_FUNC_SIGNATURE_NEWCTX = 1

const OSSL_FUNC_SIGNATURE_SIGN_INIT = 2

const OSSL_FUNC_SIGNATURE_SIGN = 3

const OSSL_FUNC_SIGNATURE_VERIFY_INIT = 4

const OSSL_FUNC_SIGNATURE_VERIFY = 5

const OSSL_FUNC_SIGNATURE_VERIFY_RECOVER_INIT = 6

const OSSL_FUNC_SIGNATURE_VERIFY_RECOVER = 7

const OSSL_FUNC_SIGNATURE_DIGEST_SIGN_INIT = 8

const OSSL_FUNC_SIGNATURE_DIGEST_SIGN_UPDATE = 9

const OSSL_FUNC_SIGNATURE_DIGEST_SIGN_FINAL = 10

const OSSL_FUNC_SIGNATURE_DIGEST_SIGN = 11

const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_INIT = 12

const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_UPDATE = 13

const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_FINAL = 14

const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY = 15

const OSSL_FUNC_SIGNATURE_FREECTX = 16

const OSSL_FUNC_SIGNATURE_DUPCTX = 17

const OSSL_FUNC_SIGNATURE_GET_CTX_PARAMS = 18

const OSSL_FUNC_SIGNATURE_GETTABLE_CTX_PARAMS = 19

const OSSL_FUNC_SIGNATURE_SET_CTX_PARAMS = 20

const OSSL_FUNC_SIGNATURE_SETTABLE_CTX_PARAMS = 21

const OSSL_FUNC_SIGNATURE_GET_CTX_MD_PARAMS = 22

const OSSL_FUNC_SIGNATURE_GETTABLE_CTX_MD_PARAMS = 23

const OSSL_FUNC_SIGNATURE_SET_CTX_MD_PARAMS = 24

const OSSL_FUNC_SIGNATURE_SETTABLE_CTX_MD_PARAMS = 25

const OSSL_FUNC_ASYM_CIPHER_NEWCTX = 1

const OSSL_FUNC_ASYM_CIPHER_ENCRYPT_INIT = 2

const OSSL_FUNC_ASYM_CIPHER_ENCRYPT = 3

const OSSL_FUNC_ASYM_CIPHER_DECRYPT_INIT = 4

const OSSL_FUNC_ASYM_CIPHER_DECRYPT = 5

const OSSL_FUNC_ASYM_CIPHER_FREECTX = 6

const OSSL_FUNC_ASYM_CIPHER_DUPCTX = 7

const OSSL_FUNC_ASYM_CIPHER_GET_CTX_PARAMS = 8

const OSSL_FUNC_ASYM_CIPHER_GETTABLE_CTX_PARAMS = 9

const OSSL_FUNC_ASYM_CIPHER_SET_CTX_PARAMS = 10

const OSSL_FUNC_ASYM_CIPHER_SETTABLE_CTX_PARAMS = 11

const OSSL_FUNC_KEM_NEWCTX = 1

const OSSL_FUNC_KEM_ENCAPSULATE_INIT = 2

const OSSL_FUNC_KEM_ENCAPSULATE = 3

const OSSL_FUNC_KEM_DECAPSULATE_INIT = 4

const OSSL_FUNC_KEM_DECAPSULATE = 5

const OSSL_FUNC_KEM_FREECTX = 6

const OSSL_FUNC_KEM_DUPCTX = 7

const OSSL_FUNC_KEM_GET_CTX_PARAMS = 8

const OSSL_FUNC_KEM_GETTABLE_CTX_PARAMS = 9

const OSSL_FUNC_KEM_SET_CTX_PARAMS = 10

const OSSL_FUNC_KEM_SETTABLE_CTX_PARAMS = 11

const OSSL_FUNC_ENCODER_NEWCTX = 1

const OSSL_FUNC_ENCODER_FREECTX = 2

const OSSL_FUNC_ENCODER_GET_PARAMS = 3

const OSSL_FUNC_ENCODER_GETTABLE_PARAMS = 4

const OSSL_FUNC_ENCODER_SET_CTX_PARAMS = 5

const OSSL_FUNC_ENCODER_SETTABLE_CTX_PARAMS = 6

const OSSL_FUNC_ENCODER_DOES_SELECTION = 10

const OSSL_FUNC_ENCODER_ENCODE = 11

const OSSL_FUNC_ENCODER_IMPORT_OBJECT = 20

const OSSL_FUNC_ENCODER_FREE_OBJECT = 21

const OSSL_FUNC_DECODER_NEWCTX = 1

const OSSL_FUNC_DECODER_FREECTX = 2

const OSSL_FUNC_DECODER_GET_PARAMS = 3

const OSSL_FUNC_DECODER_GETTABLE_PARAMS = 4

const OSSL_FUNC_DECODER_SET_CTX_PARAMS = 5

const OSSL_FUNC_DECODER_SETTABLE_CTX_PARAMS = 6

const OSSL_FUNC_DECODER_DOES_SELECTION = 10

const OSSL_FUNC_DECODER_DECODE = 11

const OSSL_FUNC_DECODER_EXPORT_OBJECT = 20

const OSSL_FUNC_STORE_OPEN = 1

const OSSL_FUNC_STORE_ATTACH = 2

const OSSL_FUNC_STORE_SETTABLE_CTX_PARAMS = 3

const OSSL_FUNC_STORE_SET_CTX_PARAMS = 4

const OSSL_FUNC_STORE_LOAD = 5

const OSSL_FUNC_STORE_EOF = 6

const OSSL_FUNC_STORE_CLOSE = 7

const OSSL_FUNC_STORE_EXPORT_OBJECT = 8

const EVP_R_AES_KEY_SETUP_FAILED = 143

const EVP_R_ARIA_KEY_SETUP_FAILED = 176

const EVP_R_BAD_ALGORITHM_NAME = 200

const EVP_R_BAD_DECRYPT = 100

const EVP_R_BAD_KEY_LENGTH = 195

const EVP_R_BUFFER_TOO_SMALL = 155

const EVP_R_CACHE_CONSTANTS_FAILED = 225

const EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157

const EVP_R_CANNOT_GET_PARAMETERS = 197

const EVP_R_CANNOT_SET_PARAMETERS = 198

const EVP_R_CIPHER_NOT_GCM_MODE = 184

const EVP_R_CIPHER_PARAMETER_ERROR = 122

const EVP_R_COMMAND_NOT_SUPPORTED = 147

const EVP_R_CONFLICTING_ALGORITHM_NAME = 201

const EVP_R_COPY_ERROR = 173

const EVP_R_CTRL_NOT_IMPLEMENTED = 132

const EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133

const EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138

const EVP_R_DECODE_ERROR = 114

const EVP_R_DEFAULT_QUERY_PARSE_ERROR = 210

const EVP_R_DIFFERENT_KEY_TYPES = 101

const EVP_R_DIFFERENT_PARAMETERS = 153

const EVP_R_ERROR_LOADING_SECTION = 165

const EVP_R_EXPECTING_AN_HMAC_KEY = 174

const EVP_R_EXPECTING_AN_RSA_KEY = 127

const EVP_R_EXPECTING_A_DH_KEY = 128

const EVP_R_EXPECTING_A_DSA_KEY = 129

const EVP_R_EXPECTING_A_ECX_KEY = 219

const EVP_R_EXPECTING_A_EC_KEY = 142

const EVP_R_EXPECTING_A_POLY1305_KEY = 164

const EVP_R_EXPECTING_A_SIPHASH_KEY = 175

const EVP_R_FINAL_ERROR = 188

const EVP_R_GENERATE_ERROR = 214

const EVP_R_GET_RAW_KEY_FAILED = 182

const EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171

const EVP_R_INACCESSIBLE_DOMAIN_PARAMETERS = 204

const EVP_R_INACCESSIBLE_KEY = 203

const EVP_R_INITIALIZATION_ERROR = 134

const EVP_R_INPUT_NOT_INITIALIZED = 111

const EVP_R_INVALID_CUSTOM_LENGTH = 185

const EVP_R_INVALID_DIGEST = 152

const EVP_R_INVALID_IV_LENGTH = 194

const EVP_R_INVALID_KEY = 163

const EVP_R_INVALID_KEY_LENGTH = 130

const EVP_R_INVALID_LENGTH = 221

const EVP_R_INVALID_NULL_ALGORITHM = 218

const EVP_R_INVALID_OPERATION = 148

const EVP_R_INVALID_PROVIDER_FUNCTIONS = 193

const EVP_R_INVALID_SALT_LENGTH = 186

const EVP_R_INVALID_SECRET_LENGTH = 223

const EVP_R_INVALID_SEED_LENGTH = 220

const EVP_R_INVALID_VALUE = 222

const EVP_R_KEYMGMT_EXPORT_FAILURE = 205

const EVP_R_KEY_SETUP_FAILED = 180

const EVP_R_LOCKING_NOT_SUPPORTED = 213

const EVP_R_MEMORY_LIMIT_EXCEEDED = 172

const EVP_R_MESSAGE_DIGEST_IS_NULL = 159

const EVP_R_METHOD_NOT_SUPPORTED = 144

const EVP_R_MISSING_PARAMETERS = 103

const EVP_R_NOT_ABLE_TO_COPY_CTX = 190

const EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178

const EVP_R_NO_CIPHER_SET = 131

const EVP_R_NO_DEFAULT_DIGEST = 158

const EVP_R_NO_DIGEST_SET = 139

const EVP_R_NO_IMPORT_FUNCTION = 206

const EVP_R_NO_KEYMGMT_AVAILABLE = 199

const EVP_R_NO_KEYMGMT_PRESENT = 196

const EVP_R_NO_KEY_SET = 154

const EVP_R_NO_OPERATION_SET = 149

const EVP_R_NULL_MAC_PKEY_CTX = 208

const EVP_R_ONLY_ONESHOT_SUPPORTED = 177

const EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150

const EVP_R_OUTPUT_WOULD_OVERFLOW = 202

const EVP_R_PARAMETER_TOO_LARGE = 187

const EVP_R_PARTIALLY_OVERLAPPING = 162

const EVP_R_PBKDF2_ERROR = 181

const EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179

const EVP_R_PRIVATE_KEY_DECODE_ERROR = 145

const EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146

const EVP_R_PUBLIC_KEY_NOT_RSA = 106

const EVP_R_SETTING_XOF_FAILED = 227

const EVP_R_SET_DEFAULT_PROPERTY_FAILURE = 209

const EVP_R_TOO_MANY_RECORDS = 183

const EVP_R_UNABLE_TO_ENABLE_LOCKING = 212

const EVP_R_UNABLE_TO_GET_MAXIMUM_REQUEST_SIZE = 215

const EVP_R_UNABLE_TO_GET_RANDOM_STRENGTH = 216

const EVP_R_UNABLE_TO_LOCK_CONTEXT = 211

const EVP_R_UNABLE_TO_SET_CALLBACKS = 217

const EVP_R_UNKNOWN_CIPHER = 160

const EVP_R_UNKNOWN_DIGEST = 161

const EVP_R_UNKNOWN_KEY_TYPE = 207

const EVP_R_UNKNOWN_OPTION = 169

const EVP_R_UNKNOWN_PBE_ALGORITHM = 121

const EVP_R_UNSUPPORTED_ALGORITHM = 156

const EVP_R_UNSUPPORTED_CIPHER = 107

const EVP_R_UNSUPPORTED_KEYLENGTH = 123

const EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124

const EVP_R_UNSUPPORTED_KEY_SIZE = 108

const EVP_R_UNSUPPORTED_KEY_TYPE = 224

const EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135

const EVP_R_UNSUPPORTED_PRF = 125

const EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118

const EVP_R_UNSUPPORTED_SALT_TYPE = 126

const EVP_R_UPDATE_ERROR = 189

const EVP_R_WRAP_MODE_NOT_ALLOWED = 170

const EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109

const EVP_R_XTS_DATA_UNIT_IS_TOO_LARGE = 191

const EVP_R_XTS_DUPLICATED_KEYS = 192

const BN_R_ARG2_LT_ARG3 = 100

const BN_R_BAD_RECIPROCAL = 101

const BN_R_BIGNUM_TOO_LONG = 114

const BN_R_BITS_TOO_SMALL = 118

const BN_R_CALLED_WITH_EVEN_MODULUS = 102

const BN_R_DIV_BY_ZERO = 103

const BN_R_ENCODING_ERROR = 104

const BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105

const BN_R_INPUT_NOT_REDUCED = 110

const BN_R_INVALID_LENGTH = 106

const BN_R_INVALID_RANGE = 115

const BN_R_INVALID_SHIFT = 119

const BN_R_NOT_A_SQUARE = 111

const BN_R_NOT_INITIALIZED = 107

const BN_R_NO_INVERSE = 108

const BN_R_NO_PRIME_CANDIDATE = 121

const BN_R_NO_SOLUTION = 116

const BN_R_NO_SUITABLE_DIGEST = 120

const BN_R_PRIVATE_KEY_TOO_LARGE = 117

const BN_R_P_IS_NOT_PRIME = 112

const BN_R_TOO_MANY_ITERATIONS = 113

const BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109

const BN_ULONG = Culong

const BN_BYTES = 8

const BN_BITS2 = BN_BYTES * 8

const BN_BITS = BN_BITS2 * 2

const BN_TBIT = BN_ULONG(1) << (BN_BITS2 - 1)

const BN_FLG_MALLOCED = 0x01

const BN_FLG_STATIC_DATA = 0x02

const BN_FLG_CONSTTIME = 0x04

const BN_FLG_SECURE = 0x08

const BN_FLG_EXP_CONSTTIME = BN_FLG_CONSTTIME

const BN_FLG_FREE = 0x8000

const BN_RAND_TOP_ANY = -1

const BN_RAND_TOP_ONE = 0

const BN_RAND_TOP_TWO = 1

const BN_RAND_BOTTOM_ANY = 0

const BN_RAND_BOTTOM_ODD = 1

const BN_prime_checks = 0

const BN_BLINDING_NO_UPDATE = 0x00000001

const BN_BLINDING_NO_RECREATE = 0x00000002

const get_rfc2409_prime_768 = BN_get_rfc2409_prime_768

const get_rfc2409_prime_1024 = BN_get_rfc2409_prime_1024

const get_rfc3526_prime_1536 = BN_get_rfc3526_prime_1536

const get_rfc3526_prime_2048 = BN_get_rfc3526_prime_2048

const get_rfc3526_prime_3072 = BN_get_rfc3526_prime_3072

const get_rfc3526_prime_4096 = BN_get_rfc3526_prime_4096

const get_rfc3526_prime_6144 = BN_get_rfc3526_prime_6144

const get_rfc3526_prime_8192 = BN_get_rfc3526_prime_8192

const OSSL_PARAM_UNMODIFIED = size_t - 1

const OSSL_PARAM_END = {NULL, 0, NULL, 0, 0}

const EVP_MAX_MD_SIZE = 64

const EVP_MAX_KEY_LENGTH = 64

const EVP_MAX_IV_LENGTH = 16

const EVP_MAX_BLOCK_LENGTH = 32

const PKCS5_SALT_LEN = 8

const PKCS5_DEFAULT_ITER = 2048

const SN_undef = "UNDEF"

const LN_undef = "undefined"

const NID_undef = 0

const OBJ_undef = Clong(0)

const SN_itu_t = "ITU-T"

const LN_itu_t = "itu-t"

const NID_itu_t = 645

const OBJ_itu_t = Clong(0)

const NID_ccitt = 404

const OBJ_ccitt = OBJ_itu_t

const SN_iso = "ISO"

const LN_iso = "iso"

const NID_iso = 181

const OBJ_iso = Clong(1)

const SN_joint_iso_itu_t = "JOINT-ISO-ITU-T"

const LN_joint_iso_itu_t = "joint-iso-itu-t"

const NID_joint_iso_itu_t = 646

const OBJ_joint_iso_itu_t = Clong(2)

const NID_joint_iso_ccitt = 393

const OBJ_joint_iso_ccitt = OBJ_joint_iso_itu_t

const SN_member_body = "member-body"

const LN_member_body = "ISO Member Body"

const NID_member_body = 182

const OBJ_member_body = (OBJ_iso, Clong(2))

const SN_identified_organization = "identified-organization"

const NID_identified_organization = 676

const OBJ_identified_organization = (OBJ_iso, Clong(3))

const SN_gmac = "GMAC"

const LN_gmac = "gmac"

const NID_gmac = 1195

const OBJ_gmac = (OBJ_iso, Clong(0), Clong(9797), Clong(3), Clong(4))

const SN_hmac_md5 = "HMAC-MD5"

const LN_hmac_md5 = "hmac-md5"

const NID_hmac_md5 = 780

const OBJ_hmac_md5 = (OBJ_identified_organization, Clong(6), Clong(1), Clong(5), Clong(5), Clong(8), Clong(1), Clong(1))

const SN_hmac_sha1 = "HMAC-SHA1"

const LN_hmac_sha1 = "hmac-sha1"

const NID_hmac_sha1 = 781

const OBJ_hmac_sha1 = (OBJ_identified_organization, Clong(6), Clong(1), Clong(5), Clong(5), Clong(8), Clong(1), Clong(2))

const SN_x509ExtAdmission = "x509ExtAdmission"

const LN_x509ExtAdmission = "Professional Information or basis for Admission"

const NID_x509ExtAdmission = 1093

const OBJ_x509ExtAdmission = (OBJ_identified_organization, Clong(36), Clong(8), Clong(3), Clong(3))

const SN_certicom_arc = "certicom-arc"

const NID_certicom_arc = 677

const OBJ_certicom_arc = (OBJ_identified_organization, Clong(132))

const SN_ieee = "ieee"

const NID_ieee = 1170

const OBJ_ieee = (OBJ_identified_organization, Clong(111))

const SN_ieee_siswg = "ieee-siswg"

const LN_ieee_siswg = "IEEE Security in Storage Working Group"

const NID_ieee_siswg = 1171

const OBJ_ieee_siswg = (OBJ_ieee, Clong(2), Clong(1619))

const SN_international_organizations = "international-organizations"

const LN_international_organizations = "International Organizations"

const NID_international_organizations = 647

const OBJ_international_organizations = (OBJ_joint_iso_itu_t, Clong(23))

const SN_wap = "wap"

const NID_wap = 678

const OBJ_wap = (OBJ_international_organizations, Clong(43))

const SN_wap_wsg = "wap-wsg"

const NID_wap_wsg = 679

const OBJ_wap_wsg = (OBJ_wap, Clong(1))

const SN_selected_attribute_types = "selected-attribute-types"

const LN_selected_attribute_types = "Selected Attribute Types"

const NID_selected_attribute_types = 394

const OBJ_selected_attribute_types = (OBJ_joint_iso_itu_t, Clong(5), Clong(1), Clong(5))

const SN_clearance = "clearance"

const NID_clearance = 395

const OBJ_clearance = (OBJ_selected_attribute_types, Clong(55))

const SN_ISO_US = "ISO-US"

const LN_ISO_US = "ISO US Member Body"

const NID_ISO_US = 183

const OBJ_ISO_US = (OBJ_member_body, Clong(840))

const SN_X9_57 = "X9-57"

const LN_X9_57 = "X9.57"

const NID_X9_57 = 184

const OBJ_X9_57 = (OBJ_ISO_US, Clong(10040))

const SN_X9cm = "X9cm"

const LN_X9cm = "X9.57 CM ?"

const NID_X9cm = 185

const OBJ_X9cm = (OBJ_X9_57, Clong(4))

const SN_ISO_CN = "ISO-CN"

const LN_ISO_CN = "ISO CN Member Body"

const NID_ISO_CN = 1140

const OBJ_ISO_CN = (OBJ_member_body, Clong(156))

const SN_oscca = "oscca"

const NID_oscca = 1141

const OBJ_oscca = (OBJ_ISO_CN, Clong(10197))

const SN_sm_scheme = "sm-scheme"

const NID_sm_scheme = 1142

const OBJ_sm_scheme = (OBJ_oscca, Clong(1))

const SN_dsa = "DSA"

const LN_dsa = "dsaEncryption"

const NID_dsa = 116

const OBJ_dsa = (OBJ_X9cm, Clong(1))

const SN_dsaWithSHA1 = "DSA-SHA1"

const LN_dsaWithSHA1 = "dsaWithSHA1"

const NID_dsaWithSHA1 = 113

const OBJ_dsaWithSHA1 = (OBJ_X9cm, Clong(3))

const SN_ansi_X9_62 = "ansi-X9-62"

const LN_ansi_X9_62 = "ANSI X9.62"

const NID_ansi_X9_62 = 405

const OBJ_ansi_X9_62 = (OBJ_ISO_US, Clong(10045))

const OBJ_X9_62_id_fieldType = (OBJ_ansi_X9_62, Clong(1))

const SN_X9_62_prime_field = "prime-field"

const NID_X9_62_prime_field = 406

const OBJ_X9_62_prime_field = (OBJ_X9_62_id_fieldType, Clong(1))

const SN_X9_62_characteristic_two_field = "characteristic-two-field"

const NID_X9_62_characteristic_two_field = 407

const OBJ_X9_62_characteristic_two_field = (OBJ_X9_62_id_fieldType, Clong(2))

const SN_X9_62_id_characteristic_two_basis = "id-characteristic-two-basis"

const NID_X9_62_id_characteristic_two_basis = 680

const OBJ_X9_62_id_characteristic_two_basis = (OBJ_X9_62_characteristic_two_field, Clong(3))

const SN_X9_62_onBasis = "onBasis"

const NID_X9_62_onBasis = 681

const OBJ_X9_62_onBasis = (OBJ_X9_62_id_characteristic_two_basis, Clong(1))

const SN_X9_62_tpBasis = "tpBasis"

const NID_X9_62_tpBasis = 682

const OBJ_X9_62_tpBasis = (OBJ_X9_62_id_characteristic_two_basis, Clong(2))

const SN_X9_62_ppBasis = "ppBasis"

const NID_X9_62_ppBasis = 683

const OBJ_X9_62_ppBasis = (OBJ_X9_62_id_characteristic_two_basis, Clong(3))

const OBJ_X9_62_id_publicKeyType = (OBJ_ansi_X9_62, Clong(2))

const SN_X9_62_id_ecPublicKey = "id-ecPublicKey"

const NID_X9_62_id_ecPublicKey = 408

const OBJ_X9_62_id_ecPublicKey = (OBJ_X9_62_id_publicKeyType, Clong(1))

const OBJ_X9_62_ellipticCurve = (OBJ_ansi_X9_62, Clong(3))

const OBJ_X9_62_c_TwoCurve = (OBJ_X9_62_ellipticCurve, Clong(0))

const SN_X9_62_c2pnb163v1 = "c2pnb163v1"

const NID_X9_62_c2pnb163v1 = 684

const OBJ_X9_62_c2pnb163v1 = (OBJ_X9_62_c_TwoCurve, Clong(1))

const SN_X9_62_c2pnb163v2 = "c2pnb163v2"

const NID_X9_62_c2pnb163v2 = 685

const OBJ_X9_62_c2pnb163v2 = (OBJ_X9_62_c_TwoCurve, Clong(2))

const SN_X9_62_c2pnb163v3 = "c2pnb163v3"

const NID_X9_62_c2pnb163v3 = 686

const OBJ_X9_62_c2pnb163v3 = (OBJ_X9_62_c_TwoCurve, Clong(3))

const SN_X9_62_c2pnb176v1 = "c2pnb176v1"

const NID_X9_62_c2pnb176v1 = 687

const OBJ_X9_62_c2pnb176v1 = (OBJ_X9_62_c_TwoCurve, Clong(4))

const SN_X9_62_c2tnb191v1 = "c2tnb191v1"

const NID_X9_62_c2tnb191v1 = 688

const OBJ_X9_62_c2tnb191v1 = (OBJ_X9_62_c_TwoCurve, Clong(5))

const SN_X9_62_c2tnb191v2 = "c2tnb191v2"

const NID_X9_62_c2tnb191v2 = 689

const OBJ_X9_62_c2tnb191v2 = (OBJ_X9_62_c_TwoCurve, Clong(6))

const SN_X9_62_c2tnb191v3 = "c2tnb191v3"

const NID_X9_62_c2tnb191v3 = 690

const OBJ_X9_62_c2tnb191v3 = (OBJ_X9_62_c_TwoCurve, Clong(7))

const SN_X9_62_c2onb191v4 = "c2onb191v4"

const NID_X9_62_c2onb191v4 = 691

const OBJ_X9_62_c2onb191v4 = (OBJ_X9_62_c_TwoCurve, Clong(8))

const SN_X9_62_c2onb191v5 = "c2onb191v5"

const NID_X9_62_c2onb191v5 = 692

const OBJ_X9_62_c2onb191v5 = (OBJ_X9_62_c_TwoCurve, Clong(9))

const SN_X9_62_c2pnb208w1 = "c2pnb208w1"

const NID_X9_62_c2pnb208w1 = 693

const OBJ_X9_62_c2pnb208w1 = (OBJ_X9_62_c_TwoCurve, Clong(10))

const SN_X9_62_c2tnb239v1 = "c2tnb239v1"

const NID_X9_62_c2tnb239v1 = 694

const OBJ_X9_62_c2tnb239v1 = (OBJ_X9_62_c_TwoCurve, Clong(11))

const SN_X9_62_c2tnb239v2 = "c2tnb239v2"

const NID_X9_62_c2tnb239v2 = 695

const OBJ_X9_62_c2tnb239v2 = (OBJ_X9_62_c_TwoCurve, Clong(12))

const SN_X9_62_c2tnb239v3 = "c2tnb239v3"

const NID_X9_62_c2tnb239v3 = 696

const OBJ_X9_62_c2tnb239v3 = (OBJ_X9_62_c_TwoCurve, Clong(13))

const SN_X9_62_c2onb239v4 = "c2onb239v4"

const NID_X9_62_c2onb239v4 = 697

const OBJ_X9_62_c2onb239v4 = (OBJ_X9_62_c_TwoCurve, Clong(14))

const SN_X9_62_c2onb239v5 = "c2onb239v5"

const NID_X9_62_c2onb239v5 = 698

const OBJ_X9_62_c2onb239v5 = (OBJ_X9_62_c_TwoCurve, Clong(15))

const SN_X9_62_c2pnb272w1 = "c2pnb272w1"

const NID_X9_62_c2pnb272w1 = 699

const OBJ_X9_62_c2pnb272w1 = (OBJ_X9_62_c_TwoCurve, Clong(16))

const SN_X9_62_c2pnb304w1 = "c2pnb304w1"

const NID_X9_62_c2pnb304w1 = 700

const OBJ_X9_62_c2pnb304w1 = (OBJ_X9_62_c_TwoCurve, Clong(17))

const SN_X9_62_c2tnb359v1 = "c2tnb359v1"

const NID_X9_62_c2tnb359v1 = 701

const OBJ_X9_62_c2tnb359v1 = (OBJ_X9_62_c_TwoCurve, Clong(18))

const SN_X9_62_c2pnb368w1 = "c2pnb368w1"

const NID_X9_62_c2pnb368w1 = 702

const OBJ_X9_62_c2pnb368w1 = (OBJ_X9_62_c_TwoCurve, Clong(19))

const SN_X9_62_c2tnb431r1 = "c2tnb431r1"

const NID_X9_62_c2tnb431r1 = 703

const OBJ_X9_62_c2tnb431r1 = (OBJ_X9_62_c_TwoCurve, Clong(20))

const OBJ_X9_62_primeCurve = (OBJ_X9_62_ellipticCurve, Clong(1))

const SN_X9_62_prime192v1 = "prime192v1"

const NID_X9_62_prime192v1 = 409

const OBJ_X9_62_prime192v1 = (OBJ_X9_62_primeCurve, Clong(1))

const SN_X9_62_prime192v2 = "prime192v2"

const NID_X9_62_prime192v2 = 410

const OBJ_X9_62_prime192v2 = (OBJ_X9_62_primeCurve, Clong(2))

const SN_X9_62_prime192v3 = "prime192v3"

const NID_X9_62_prime192v3 = 411

const OBJ_X9_62_prime192v3 = (OBJ_X9_62_primeCurve, Clong(3))

const SN_X9_62_prime239v1 = "prime239v1"

const NID_X9_62_prime239v1 = 412

const OBJ_X9_62_prime239v1 = (OBJ_X9_62_primeCurve, Clong(4))

const SN_X9_62_prime239v2 = "prime239v2"

const NID_X9_62_prime239v2 = 413

const OBJ_X9_62_prime239v2 = (OBJ_X9_62_primeCurve, Clong(5))

const SN_X9_62_prime239v3 = "prime239v3"

const NID_X9_62_prime239v3 = 414

const OBJ_X9_62_prime239v3 = (OBJ_X9_62_primeCurve, Clong(6))

const SN_X9_62_prime256v1 = "prime256v1"

const NID_X9_62_prime256v1 = 415

const OBJ_X9_62_prime256v1 = (OBJ_X9_62_primeCurve, Clong(7))

const OBJ_X9_62_id_ecSigType = (OBJ_ansi_X9_62, Clong(4))

const SN_ecdsa_with_SHA1 = "ecdsa-with-SHA1"

const NID_ecdsa_with_SHA1 = 416

const OBJ_ecdsa_with_SHA1 = (OBJ_X9_62_id_ecSigType, Clong(1))

const SN_ecdsa_with_Recommended = "ecdsa-with-Recommended"

const NID_ecdsa_with_Recommended = 791

const OBJ_ecdsa_with_Recommended = (OBJ_X9_62_id_ecSigType, Clong(2))

const SN_ecdsa_with_Specified = "ecdsa-with-Specified"

const NID_ecdsa_with_Specified = 792

const OBJ_ecdsa_with_Specified = (OBJ_X9_62_id_ecSigType, Clong(3))

const SN_ecdsa_with_SHA224 = "ecdsa-with-SHA224"

const NID_ecdsa_with_SHA224 = 793

const OBJ_ecdsa_with_SHA224 = (OBJ_ecdsa_with_Specified, Clong(1))

const SN_ecdsa_with_SHA256 = "ecdsa-with-SHA256"

const NID_ecdsa_with_SHA256 = 794

const OBJ_ecdsa_with_SHA256 = (OBJ_ecdsa_with_Specified, Clong(2))

const SN_ecdsa_with_SHA384 = "ecdsa-with-SHA384"

const NID_ecdsa_with_SHA384 = 795

const OBJ_ecdsa_with_SHA384 = (OBJ_ecdsa_with_Specified, Clong(3))

const SN_ecdsa_with_SHA512 = "ecdsa-with-SHA512"

const NID_ecdsa_with_SHA512 = 796

const OBJ_ecdsa_with_SHA512 = (OBJ_ecdsa_with_Specified, Clong(4))

const OBJ_secg_ellipticCurve = (OBJ_certicom_arc, Clong(0))

const SN_secp112r1 = "secp112r1"

const NID_secp112r1 = 704

const OBJ_secp112r1 = (OBJ_secg_ellipticCurve, Clong(6))

const SN_secp112r2 = "secp112r2"

const NID_secp112r2 = 705

const OBJ_secp112r2 = (OBJ_secg_ellipticCurve, Clong(7))

const SN_secp128r1 = "secp128r1"

const NID_secp128r1 = 706

const OBJ_secp128r1 = (OBJ_secg_ellipticCurve, Clong(28))

const SN_secp128r2 = "secp128r2"

const NID_secp128r2 = 707

const OBJ_secp128r2 = (OBJ_secg_ellipticCurve, Clong(29))

const SN_secp160k1 = "secp160k1"

const NID_secp160k1 = 708

const OBJ_secp160k1 = (OBJ_secg_ellipticCurve, Clong(9))

const SN_secp160r1 = "secp160r1"

const NID_secp160r1 = 709

const OBJ_secp160r1 = (OBJ_secg_ellipticCurve, Clong(8))

const SN_secp160r2 = "secp160r2"

const NID_secp160r2 = 710

const OBJ_secp160r2 = (OBJ_secg_ellipticCurve, Clong(30))

const SN_secp192k1 = "secp192k1"

const NID_secp192k1 = 711

const OBJ_secp192k1 = (OBJ_secg_ellipticCurve, Clong(31))

const SN_secp224k1 = "secp224k1"

const NID_secp224k1 = 712

const OBJ_secp224k1 = (OBJ_secg_ellipticCurve, Clong(32))

const SN_secp224r1 = "secp224r1"

const NID_secp224r1 = 713

const OBJ_secp224r1 = (OBJ_secg_ellipticCurve, Clong(33))

const SN_secp256k1 = "secp256k1"

const NID_secp256k1 = 714

const OBJ_secp256k1 = (OBJ_secg_ellipticCurve, Clong(10))

const SN_secp384r1 = "secp384r1"

const NID_secp384r1 = 715

const OBJ_secp384r1 = (OBJ_secg_ellipticCurve, Clong(34))

const SN_secp521r1 = "secp521r1"

const NID_secp521r1 = 716

const OBJ_secp521r1 = (OBJ_secg_ellipticCurve, Clong(35))

const SN_sect113r1 = "sect113r1"

const NID_sect113r1 = 717

const OBJ_sect113r1 = (OBJ_secg_ellipticCurve, Clong(4))

const SN_sect113r2 = "sect113r2"

const NID_sect113r2 = 718

const OBJ_sect113r2 = (OBJ_secg_ellipticCurve, Clong(5))

const SN_sect131r1 = "sect131r1"

const NID_sect131r1 = 719

const OBJ_sect131r1 = (OBJ_secg_ellipticCurve, Clong(22))

const SN_sect131r2 = "sect131r2"

const NID_sect131r2 = 720

const OBJ_sect131r2 = (OBJ_secg_ellipticCurve, Clong(23))

const SN_sect163k1 = "sect163k1"

const NID_sect163k1 = 721

const OBJ_sect163k1 = (OBJ_secg_ellipticCurve, Clong(1))

const SN_sect163r1 = "sect163r1"

const NID_sect163r1 = 722

const OBJ_sect163r1 = (OBJ_secg_ellipticCurve, Clong(2))

const SN_sect163r2 = "sect163r2"

const NID_sect163r2 = 723

const OBJ_sect163r2 = (OBJ_secg_ellipticCurve, Clong(15))

const SN_sect193r1 = "sect193r1"

const NID_sect193r1 = 724

const OBJ_sect193r1 = (OBJ_secg_ellipticCurve, Clong(24))

const SN_sect193r2 = "sect193r2"

const NID_sect193r2 = 725

const OBJ_sect193r2 = (OBJ_secg_ellipticCurve, Clong(25))

const SN_sect233k1 = "sect233k1"

const NID_sect233k1 = 726

const OBJ_sect233k1 = (OBJ_secg_ellipticCurve, Clong(26))

const SN_sect233r1 = "sect233r1"

const NID_sect233r1 = 727

const OBJ_sect233r1 = (OBJ_secg_ellipticCurve, Clong(27))

const SN_sect239k1 = "sect239k1"

const NID_sect239k1 = 728

const OBJ_sect239k1 = (OBJ_secg_ellipticCurve, Clong(3))

const SN_sect283k1 = "sect283k1"

const NID_sect283k1 = 729

const OBJ_sect283k1 = (OBJ_secg_ellipticCurve, Clong(16))

const SN_sect283r1 = "sect283r1"

const NID_sect283r1 = 730

const OBJ_sect283r1 = (OBJ_secg_ellipticCurve, Clong(17))

const SN_sect409k1 = "sect409k1"

const NID_sect409k1 = 731

const OBJ_sect409k1 = (OBJ_secg_ellipticCurve, Clong(36))

const SN_sect409r1 = "sect409r1"

const NID_sect409r1 = 732

const OBJ_sect409r1 = (OBJ_secg_ellipticCurve, Clong(37))

const SN_sect571k1 = "sect571k1"

const NID_sect571k1 = 733

const OBJ_sect571k1 = (OBJ_secg_ellipticCurve, Clong(38))

const SN_sect571r1 = "sect571r1"

const NID_sect571r1 = 734

const OBJ_sect571r1 = (OBJ_secg_ellipticCurve, Clong(39))

const OBJ_wap_wsg_idm_ecid = (OBJ_wap_wsg, Clong(4))

const SN_wap_wsg_idm_ecid_wtls1 = "wap-wsg-idm-ecid-wtls1"

const NID_wap_wsg_idm_ecid_wtls1 = 735

const OBJ_wap_wsg_idm_ecid_wtls1 = (OBJ_wap_wsg_idm_ecid, Clong(1))

const SN_wap_wsg_idm_ecid_wtls3 = "wap-wsg-idm-ecid-wtls3"

const NID_wap_wsg_idm_ecid_wtls3 = 736

const OBJ_wap_wsg_idm_ecid_wtls3 = (OBJ_wap_wsg_idm_ecid, Clong(3))

const SN_wap_wsg_idm_ecid_wtls4 = "wap-wsg-idm-ecid-wtls4"

const NID_wap_wsg_idm_ecid_wtls4 = 737

const OBJ_wap_wsg_idm_ecid_wtls4 = (OBJ_wap_wsg_idm_ecid, Clong(4))

const SN_wap_wsg_idm_ecid_wtls5 = "wap-wsg-idm-ecid-wtls5"

const NID_wap_wsg_idm_ecid_wtls5 = 738

const OBJ_wap_wsg_idm_ecid_wtls5 = (OBJ_wap_wsg_idm_ecid, Clong(5))

const SN_wap_wsg_idm_ecid_wtls6 = "wap-wsg-idm-ecid-wtls6"

const NID_wap_wsg_idm_ecid_wtls6 = 739

const OBJ_wap_wsg_idm_ecid_wtls6 = (OBJ_wap_wsg_idm_ecid, Clong(6))

const SN_wap_wsg_idm_ecid_wtls7 = "wap-wsg-idm-ecid-wtls7"

const NID_wap_wsg_idm_ecid_wtls7 = 740

const OBJ_wap_wsg_idm_ecid_wtls7 = (OBJ_wap_wsg_idm_ecid, Clong(7))

const SN_wap_wsg_idm_ecid_wtls8 = "wap-wsg-idm-ecid-wtls8"

const NID_wap_wsg_idm_ecid_wtls8 = 741

const OBJ_wap_wsg_idm_ecid_wtls8 = (OBJ_wap_wsg_idm_ecid, Clong(8))

const SN_wap_wsg_idm_ecid_wtls9 = "wap-wsg-idm-ecid-wtls9"

const NID_wap_wsg_idm_ecid_wtls9 = 742

const OBJ_wap_wsg_idm_ecid_wtls9 = (OBJ_wap_wsg_idm_ecid, Clong(9))

const SN_wap_wsg_idm_ecid_wtls10 = "wap-wsg-idm-ecid-wtls10"

const NID_wap_wsg_idm_ecid_wtls10 = 743

const OBJ_wap_wsg_idm_ecid_wtls10 = (OBJ_wap_wsg_idm_ecid, Clong(10))

const SN_wap_wsg_idm_ecid_wtls11 = "wap-wsg-idm-ecid-wtls11"

const NID_wap_wsg_idm_ecid_wtls11 = 744

const OBJ_wap_wsg_idm_ecid_wtls11 = (OBJ_wap_wsg_idm_ecid, Clong(11))

const SN_wap_wsg_idm_ecid_wtls12 = "wap-wsg-idm-ecid-wtls12"

const NID_wap_wsg_idm_ecid_wtls12 = 745

const OBJ_wap_wsg_idm_ecid_wtls12 = (OBJ_wap_wsg_idm_ecid, Clong(12))

const SN_cast5_cbc = "CAST5-CBC"

const LN_cast5_cbc = "cast5-cbc"

const NID_cast5_cbc = 108

const OBJ_cast5_cbc = (OBJ_ISO_US, Clong(113533), Clong(7), Clong(66), Clong(10))

const SN_cast5_ecb = "CAST5-ECB"

const LN_cast5_ecb = "cast5-ecb"

const NID_cast5_ecb = 109

const SN_cast5_cfb64 = "CAST5-CFB"

const LN_cast5_cfb64 = "cast5-cfb"

const NID_cast5_cfb64 = 110

const SN_cast5_ofb64 = "CAST5-OFB"

const LN_cast5_ofb64 = "cast5-ofb"

const NID_cast5_ofb64 = 111

const LN_pbeWithMD5AndCast5_CBC = "pbeWithMD5AndCast5CBC"

const NID_pbeWithMD5AndCast5_CBC = 112

const OBJ_pbeWithMD5AndCast5_CBC = (OBJ_ISO_US, Clong(113533), Clong(7), Clong(66), Clong(12))

const SN_id_PasswordBasedMAC = "id-PasswordBasedMAC"

const LN_id_PasswordBasedMAC = "password based MAC"

const NID_id_PasswordBasedMAC = 782

const OBJ_id_PasswordBasedMAC = (OBJ_ISO_US, Clong(113533), Clong(7), Clong(66), Clong(13))

const SN_id_DHBasedMac = "id-DHBasedMac"

const LN_id_DHBasedMac = "Diffie-Hellman based MAC"

const NID_id_DHBasedMac = 783

const OBJ_id_DHBasedMac = (OBJ_ISO_US, Clong(113533), Clong(7), Clong(66), Clong(30))

const SN_rsadsi = "rsadsi"

const LN_rsadsi = "RSA Data Security, Inc."

const NID_rsadsi = 1

const OBJ_rsadsi = (OBJ_ISO_US, Clong(113549))

const SN_pkcs = "pkcs"

const LN_pkcs = "RSA Data Security, Inc. PKCS"

const NID_pkcs = 2

const OBJ_pkcs = (OBJ_rsadsi, Clong(1))

const SN_pkcs1 = "pkcs1"

const NID_pkcs1 = 186

const OBJ_pkcs1 = (OBJ_pkcs, Clong(1))

const LN_rsaEncryption = "rsaEncryption"

const NID_rsaEncryption = 6

const OBJ_rsaEncryption = (OBJ_pkcs1, Clong(1))

const SN_md2WithRSAEncryption = "RSA-MD2"

const LN_md2WithRSAEncryption = "md2WithRSAEncryption"

const NID_md2WithRSAEncryption = 7

const OBJ_md2WithRSAEncryption = (OBJ_pkcs1, Clong(2))

const SN_md4WithRSAEncryption = "RSA-MD4"

const LN_md4WithRSAEncryption = "md4WithRSAEncryption"

const NID_md4WithRSAEncryption = 396

const OBJ_md4WithRSAEncryption = (OBJ_pkcs1, Clong(3))

const SN_md5WithRSAEncryption = "RSA-MD5"

const LN_md5WithRSAEncryption = "md5WithRSAEncryption"

const NID_md5WithRSAEncryption = 8

const OBJ_md5WithRSAEncryption = (OBJ_pkcs1, Clong(4))

const SN_sha1WithRSAEncryption = "RSA-SHA1"

const LN_sha1WithRSAEncryption = "sha1WithRSAEncryption"

const NID_sha1WithRSAEncryption = 65

const OBJ_sha1WithRSAEncryption = (OBJ_pkcs1, Clong(5))

const SN_rsaesOaep = "RSAES-OAEP"

const LN_rsaesOaep = "rsaesOaep"

const NID_rsaesOaep = 919

const OBJ_rsaesOaep = (OBJ_pkcs1, Clong(7))

const SN_mgf1 = "MGF1"

const LN_mgf1 = "mgf1"

const NID_mgf1 = 911

const OBJ_mgf1 = (OBJ_pkcs1, Clong(8))

const SN_pSpecified = "PSPECIFIED"

const LN_pSpecified = "pSpecified"

const NID_pSpecified = 935

const OBJ_pSpecified = (OBJ_pkcs1, Clong(9))

const SN_rsassaPss = "RSASSA-PSS"

const LN_rsassaPss = "rsassaPss"

const NID_rsassaPss = 912

const OBJ_rsassaPss = (OBJ_pkcs1, Clong(10))

const SN_sha256WithRSAEncryption = "RSA-SHA256"

const LN_sha256WithRSAEncryption = "sha256WithRSAEncryption"

const NID_sha256WithRSAEncryption = 668

const OBJ_sha256WithRSAEncryption = (OBJ_pkcs1, Clong(11))

const SN_sha384WithRSAEncryption = "RSA-SHA384"

const LN_sha384WithRSAEncryption = "sha384WithRSAEncryption"

const NID_sha384WithRSAEncryption = 669

const OBJ_sha384WithRSAEncryption = (OBJ_pkcs1, Clong(12))

const SN_sha512WithRSAEncryption = "RSA-SHA512"

const LN_sha512WithRSAEncryption = "sha512WithRSAEncryption"

const NID_sha512WithRSAEncryption = 670

const OBJ_sha512WithRSAEncryption = (OBJ_pkcs1, Clong(13))

const SN_sha224WithRSAEncryption = "RSA-SHA224"

const LN_sha224WithRSAEncryption = "sha224WithRSAEncryption"

const NID_sha224WithRSAEncryption = 671

const OBJ_sha224WithRSAEncryption = (OBJ_pkcs1, Clong(14))

const SN_sha512_224WithRSAEncryption = "RSA-SHA512/224"

const LN_sha512_224WithRSAEncryption = "sha512-224WithRSAEncryption"

const NID_sha512_224WithRSAEncryption = 1145

const OBJ_sha512_224WithRSAEncryption = (OBJ_pkcs1, Clong(15))

const SN_sha512_256WithRSAEncryption = "RSA-SHA512/256"

const LN_sha512_256WithRSAEncryption = "sha512-256WithRSAEncryption"

const NID_sha512_256WithRSAEncryption = 1146

const OBJ_sha512_256WithRSAEncryption = (OBJ_pkcs1, Clong(16))

const SN_pkcs3 = "pkcs3"

const NID_pkcs3 = 27

const OBJ_pkcs3 = (OBJ_pkcs, Clong(3))

const LN_dhKeyAgreement = "dhKeyAgreement"

const NID_dhKeyAgreement = 28

const OBJ_dhKeyAgreement = (OBJ_pkcs3, Clong(1))

const SN_pkcs5 = "pkcs5"

const NID_pkcs5 = 187

const OBJ_pkcs5 = (OBJ_pkcs, Clong(5))

const SN_pbeWithMD2AndDES_CBC = "PBE-MD2-DES"

const LN_pbeWithMD2AndDES_CBC = "pbeWithMD2AndDES-CBC"

const NID_pbeWithMD2AndDES_CBC = 9

const OBJ_pbeWithMD2AndDES_CBC = (OBJ_pkcs5, Clong(1))

const SN_pbeWithMD5AndDES_CBC = "PBE-MD5-DES"

const LN_pbeWithMD5AndDES_CBC = "pbeWithMD5AndDES-CBC"

const NID_pbeWithMD5AndDES_CBC = 10

const OBJ_pbeWithMD5AndDES_CBC = (OBJ_pkcs5, Clong(3))

const SN_pbeWithMD2AndRC2_CBC = "PBE-MD2-RC2-64"

const LN_pbeWithMD2AndRC2_CBC = "pbeWithMD2AndRC2-CBC"

const NID_pbeWithMD2AndRC2_CBC = 168

const OBJ_pbeWithMD2AndRC2_CBC = (OBJ_pkcs5, Clong(4))

const SN_pbeWithMD5AndRC2_CBC = "PBE-MD5-RC2-64"

const LN_pbeWithMD5AndRC2_CBC = "pbeWithMD5AndRC2-CBC"

const NID_pbeWithMD5AndRC2_CBC = 169

const OBJ_pbeWithMD5AndRC2_CBC = (OBJ_pkcs5, Clong(6))

const SN_pbeWithSHA1AndDES_CBC = "PBE-SHA1-DES"

const LN_pbeWithSHA1AndDES_CBC = "pbeWithSHA1AndDES-CBC"

const NID_pbeWithSHA1AndDES_CBC = 170

const OBJ_pbeWithSHA1AndDES_CBC = (OBJ_pkcs5, Clong(10))

const SN_pbeWithSHA1AndRC2_CBC = "PBE-SHA1-RC2-64"

const LN_pbeWithSHA1AndRC2_CBC = "pbeWithSHA1AndRC2-CBC"

const NID_pbeWithSHA1AndRC2_CBC = 68

const OBJ_pbeWithSHA1AndRC2_CBC = (OBJ_pkcs5, Clong(11))

const LN_id_pbkdf2 = "PBKDF2"

const NID_id_pbkdf2 = 69

const OBJ_id_pbkdf2 = (OBJ_pkcs5, Clong(12))

const LN_pbes2 = "PBES2"

const NID_pbes2 = 161

const OBJ_pbes2 = (OBJ_pkcs5, Clong(13))

const LN_pbmac1 = "PBMAC1"

const NID_pbmac1 = 162

const OBJ_pbmac1 = (OBJ_pkcs5, Clong(14))

const SN_pkcs7 = "pkcs7"

const NID_pkcs7 = 20

const OBJ_pkcs7 = (OBJ_pkcs, Clong(7))

const LN_pkcs7_data = "pkcs7-data"

const NID_pkcs7_data = 21

const OBJ_pkcs7_data = (OBJ_pkcs7, Clong(1))

const LN_pkcs7_signed = "pkcs7-signedData"

const NID_pkcs7_signed = 22

const OBJ_pkcs7_signed = (OBJ_pkcs7, Clong(2))

const LN_pkcs7_enveloped = "pkcs7-envelopedData"

const NID_pkcs7_enveloped = 23

const OBJ_pkcs7_enveloped = (OBJ_pkcs7, Clong(3))

const LN_pkcs7_signedAndEnveloped = "pkcs7-signedAndEnvelopedData"

const NID_pkcs7_signedAndEnveloped = 24

const OBJ_pkcs7_signedAndEnveloped = (OBJ_pkcs7, Clong(4))

const LN_pkcs7_digest = "pkcs7-digestData"

const NID_pkcs7_digest = 25

const OBJ_pkcs7_digest = (OBJ_pkcs7, Clong(5))

const LN_pkcs7_encrypted = "pkcs7-encryptedData"

const NID_pkcs7_encrypted = 26

const OBJ_pkcs7_encrypted = (OBJ_pkcs7, Clong(6))

const SN_pkcs9 = "pkcs9"

const NID_pkcs9 = 47

const OBJ_pkcs9 = (OBJ_pkcs, Clong(9))

const LN_pkcs9_emailAddress = "emailAddress"

const NID_pkcs9_emailAddress = 48

const OBJ_pkcs9_emailAddress = (OBJ_pkcs9, Clong(1))

const LN_pkcs9_unstructuredName = "unstructuredName"

const NID_pkcs9_unstructuredName = 49

const OBJ_pkcs9_unstructuredName = (OBJ_pkcs9, Clong(2))

const LN_pkcs9_contentType = "contentType"

const NID_pkcs9_contentType = 50

const OBJ_pkcs9_contentType = (OBJ_pkcs9, Clong(3))

const LN_pkcs9_messageDigest = "messageDigest"

const NID_pkcs9_messageDigest = 51

const OBJ_pkcs9_messageDigest = (OBJ_pkcs9, Clong(4))

const LN_pkcs9_signingTime = "signingTime"

const NID_pkcs9_signingTime = 52

const OBJ_pkcs9_signingTime = (OBJ_pkcs9, Clong(5))

const LN_pkcs9_countersignature = "countersignature"

const NID_pkcs9_countersignature = 53

const OBJ_pkcs9_countersignature = (OBJ_pkcs9, Clong(6))

const LN_pkcs9_challengePassword = "challengePassword"

const NID_pkcs9_challengePassword = 54

const OBJ_pkcs9_challengePassword = (OBJ_pkcs9, Clong(7))

const LN_pkcs9_unstructuredAddress = "unstructuredAddress"

const NID_pkcs9_unstructuredAddress = 55

const OBJ_pkcs9_unstructuredAddress = (OBJ_pkcs9, Clong(8))

const LN_pkcs9_extCertAttributes = "extendedCertificateAttributes"

const NID_pkcs9_extCertAttributes = 56

const OBJ_pkcs9_extCertAttributes = (OBJ_pkcs9, Clong(9))

const SN_ext_req = "extReq"

const LN_ext_req = "Extension Request"

const NID_ext_req = 172

const OBJ_ext_req = (OBJ_pkcs9, Clong(14))

const SN_SMIMECapabilities = "SMIME-CAPS"

const LN_SMIMECapabilities = "S/MIME Capabilities"

const NID_SMIMECapabilities = 167

const OBJ_SMIMECapabilities = (OBJ_pkcs9, Clong(15))

const SN_SMIME = "SMIME"

const LN_SMIME = "S/MIME"

const NID_SMIME = 188

const OBJ_SMIME = (OBJ_pkcs9, Clong(16))

const SN_id_smime_mod = "id-smime-mod"

const NID_id_smime_mod = 189

const OBJ_id_smime_mod = (OBJ_SMIME, Clong(0))

const SN_id_smime_ct = "id-smime-ct"

const NID_id_smime_ct = 190

const OBJ_id_smime_ct = (OBJ_SMIME, Clong(1))

const SN_id_smime_aa = "id-smime-aa"

const NID_id_smime_aa = 191

const OBJ_id_smime_aa = (OBJ_SMIME, Clong(2))

const SN_id_smime_alg = "id-smime-alg"

const NID_id_smime_alg = 192

const OBJ_id_smime_alg = (OBJ_SMIME, Clong(3))

const SN_id_smime_cd = "id-smime-cd"

const NID_id_smime_cd = 193

const OBJ_id_smime_cd = (OBJ_SMIME, Clong(4))

const SN_id_smime_spq = "id-smime-spq"

const NID_id_smime_spq = 194

const OBJ_id_smime_spq = (OBJ_SMIME, Clong(5))

const SN_id_smime_cti = "id-smime-cti"

const NID_id_smime_cti = 195

const OBJ_id_smime_cti = (OBJ_SMIME, Clong(6))

const SN_id_smime_mod_cms = "id-smime-mod-cms"

const NID_id_smime_mod_cms = 196

const OBJ_id_smime_mod_cms = (OBJ_id_smime_mod, Clong(1))

const SN_id_smime_mod_ess = "id-smime-mod-ess"

const NID_id_smime_mod_ess = 197

const OBJ_id_smime_mod_ess = (OBJ_id_smime_mod, Clong(2))

const SN_id_smime_mod_oid = "id-smime-mod-oid"

const NID_id_smime_mod_oid = 198

const OBJ_id_smime_mod_oid = (OBJ_id_smime_mod, Clong(3))

const SN_id_smime_mod_msg_v3 = "id-smime-mod-msg-v3"

const NID_id_smime_mod_msg_v3 = 199

const OBJ_id_smime_mod_msg_v3 = (OBJ_id_smime_mod, Clong(4))

const SN_id_smime_mod_ets_eSignature_88 = "id-smime-mod-ets-eSignature-88"

const NID_id_smime_mod_ets_eSignature_88 = 200

const OBJ_id_smime_mod_ets_eSignature_88 = (OBJ_id_smime_mod, Clong(5))

const SN_id_smime_mod_ets_eSignature_97 = "id-smime-mod-ets-eSignature-97"

const NID_id_smime_mod_ets_eSignature_97 = 201

const OBJ_id_smime_mod_ets_eSignature_97 = (OBJ_id_smime_mod, Clong(6))

const SN_id_smime_mod_ets_eSigPolicy_88 = "id-smime-mod-ets-eSigPolicy-88"

const NID_id_smime_mod_ets_eSigPolicy_88 = 202

const OBJ_id_smime_mod_ets_eSigPolicy_88 = (OBJ_id_smime_mod, Clong(7))

const SN_id_smime_mod_ets_eSigPolicy_97 = "id-smime-mod-ets-eSigPolicy-97"

const NID_id_smime_mod_ets_eSigPolicy_97 = 203

const OBJ_id_smime_mod_ets_eSigPolicy_97 = (OBJ_id_smime_mod, Clong(8))

const SN_id_smime_ct_receipt = "id-smime-ct-receipt"

const NID_id_smime_ct_receipt = 204

const OBJ_id_smime_ct_receipt = (OBJ_id_smime_ct, Clong(1))

const SN_id_smime_ct_authData = "id-smime-ct-authData"

const NID_id_smime_ct_authData = 205

const OBJ_id_smime_ct_authData = (OBJ_id_smime_ct, Clong(2))

const SN_id_smime_ct_publishCert = "id-smime-ct-publishCert"

const NID_id_smime_ct_publishCert = 206

const OBJ_id_smime_ct_publishCert = (OBJ_id_smime_ct, Clong(3))

const SN_id_smime_ct_TSTInfo = "id-smime-ct-TSTInfo"

const NID_id_smime_ct_TSTInfo = 207

const OBJ_id_smime_ct_TSTInfo = (OBJ_id_smime_ct, Clong(4))

const SN_id_smime_ct_TDTInfo = "id-smime-ct-TDTInfo"

const NID_id_smime_ct_TDTInfo = 208

const OBJ_id_smime_ct_TDTInfo = (OBJ_id_smime_ct, Clong(5))

const SN_id_smime_ct_contentInfo = "id-smime-ct-contentInfo"

const NID_id_smime_ct_contentInfo = 209

const OBJ_id_smime_ct_contentInfo = (OBJ_id_smime_ct, Clong(6))

const SN_id_smime_ct_DVCSRequestData = "id-smime-ct-DVCSRequestData"

const NID_id_smime_ct_DVCSRequestData = 210

const OBJ_id_smime_ct_DVCSRequestData = (OBJ_id_smime_ct, Clong(7))

const SN_id_smime_ct_DVCSResponseData = "id-smime-ct-DVCSResponseData"

const NID_id_smime_ct_DVCSResponseData = 211

const OBJ_id_smime_ct_DVCSResponseData = (OBJ_id_smime_ct, Clong(8))

const SN_id_smime_ct_compressedData = "id-smime-ct-compressedData"

const NID_id_smime_ct_compressedData = 786

const OBJ_id_smime_ct_compressedData = (OBJ_id_smime_ct, Clong(9))

const SN_id_smime_ct_contentCollection = "id-smime-ct-contentCollection"

const NID_id_smime_ct_contentCollection = 1058

const OBJ_id_smime_ct_contentCollection = (OBJ_id_smime_ct, Clong(19))

const SN_id_smime_ct_authEnvelopedData = "id-smime-ct-authEnvelopedData"

const NID_id_smime_ct_authEnvelopedData = 1059

const OBJ_id_smime_ct_authEnvelopedData = (OBJ_id_smime_ct, Clong(23))

const SN_id_ct_routeOriginAuthz = "id-ct-routeOriginAuthz"

const NID_id_ct_routeOriginAuthz = 1234

const OBJ_id_ct_routeOriginAuthz = (OBJ_id_smime_ct, Clong(24))

const SN_id_ct_rpkiManifest = "id-ct-rpkiManifest"

const NID_id_ct_rpkiManifest = 1235

const OBJ_id_ct_rpkiManifest = (OBJ_id_smime_ct, Clong(26))

const SN_id_ct_asciiTextWithCRLF = "id-ct-asciiTextWithCRLF"

const NID_id_ct_asciiTextWithCRLF = 787

const OBJ_id_ct_asciiTextWithCRLF = (OBJ_id_smime_ct, Clong(27))

const SN_id_ct_xml = "id-ct-xml"

const NID_id_ct_xml = 1060

const OBJ_id_ct_xml = (OBJ_id_smime_ct, Clong(28))

const SN_id_ct_rpkiGhostbusters = "id-ct-rpkiGhostbusters"

const NID_id_ct_rpkiGhostbusters = 1236

const OBJ_id_ct_rpkiGhostbusters = (OBJ_id_smime_ct, Clong(35))

const SN_id_ct_resourceTaggedAttest = "id-ct-resourceTaggedAttest"

const NID_id_ct_resourceTaggedAttest = 1237

const OBJ_id_ct_resourceTaggedAttest = (OBJ_id_smime_ct, Clong(36))

const SN_id_ct_geofeedCSVwithCRLF = "id-ct-geofeedCSVwithCRLF"

const NID_id_ct_geofeedCSVwithCRLF = 1246

const OBJ_id_ct_geofeedCSVwithCRLF = (OBJ_id_smime_ct, Clong(47))

const SN_id_ct_signedChecklist = "id-ct-signedChecklist"

const NID_id_ct_signedChecklist = 1247

const OBJ_id_ct_signedChecklist = (OBJ_id_smime_ct, Clong(48))

const SN_id_smime_aa_receiptRequest = "id-smime-aa-receiptRequest"

const NID_id_smime_aa_receiptRequest = 212

const OBJ_id_smime_aa_receiptRequest = (OBJ_id_smime_aa, Clong(1))

const SN_id_smime_aa_securityLabel = "id-smime-aa-securityLabel"

const NID_id_smime_aa_securityLabel = 213

const OBJ_id_smime_aa_securityLabel = (OBJ_id_smime_aa, Clong(2))

const SN_id_smime_aa_mlExpandHistory = "id-smime-aa-mlExpandHistory"

const NID_id_smime_aa_mlExpandHistory = 214

const OBJ_id_smime_aa_mlExpandHistory = (OBJ_id_smime_aa, Clong(3))

const SN_id_smime_aa_contentHint = "id-smime-aa-contentHint"

const NID_id_smime_aa_contentHint = 215

const OBJ_id_smime_aa_contentHint = (OBJ_id_smime_aa, Clong(4))

const SN_id_smime_aa_msgSigDigest = "id-smime-aa-msgSigDigest"

const NID_id_smime_aa_msgSigDigest = 216

const OBJ_id_smime_aa_msgSigDigest = (OBJ_id_smime_aa, Clong(5))

const SN_id_smime_aa_encapContentType = "id-smime-aa-encapContentType"

const NID_id_smime_aa_encapContentType = 217

const OBJ_id_smime_aa_encapContentType = (OBJ_id_smime_aa, Clong(6))

const SN_id_smime_aa_contentIdentifier = "id-smime-aa-contentIdentifier"

const NID_id_smime_aa_contentIdentifier = 218

const OBJ_id_smime_aa_contentIdentifier = (OBJ_id_smime_aa, Clong(7))

const SN_id_smime_aa_macValue = "id-smime-aa-macValue"

const NID_id_smime_aa_macValue = 219

const OBJ_id_smime_aa_macValue = (OBJ_id_smime_aa, Clong(8))

const SN_id_smime_aa_equivalentLabels = "id-smime-aa-equivalentLabels"

const NID_id_smime_aa_equivalentLabels = 220

const OBJ_id_smime_aa_equivalentLabels = (OBJ_id_smime_aa, Clong(9))

const SN_id_smime_aa_contentReference = "id-smime-aa-contentReference"

const NID_id_smime_aa_contentReference = 221

const OBJ_id_smime_aa_contentReference = (OBJ_id_smime_aa, Clong(10))

const SN_id_smime_aa_encrypKeyPref = "id-smime-aa-encrypKeyPref"

const NID_id_smime_aa_encrypKeyPref = 222

const OBJ_id_smime_aa_encrypKeyPref = (OBJ_id_smime_aa, Clong(11))

const SN_id_smime_aa_signingCertificate = "id-smime-aa-signingCertificate"

const NID_id_smime_aa_signingCertificate = 223

const OBJ_id_smime_aa_signingCertificate = (OBJ_id_smime_aa, Clong(12))

const SN_id_smime_aa_smimeEncryptCerts = "id-smime-aa-smimeEncryptCerts"

const NID_id_smime_aa_smimeEncryptCerts = 224

const OBJ_id_smime_aa_smimeEncryptCerts = (OBJ_id_smime_aa, Clong(13))

const SN_id_smime_aa_timeStampToken = "id-smime-aa-timeStampToken"

const NID_id_smime_aa_timeStampToken = 225

const OBJ_id_smime_aa_timeStampToken = (OBJ_id_smime_aa, Clong(14))

const SN_id_smime_aa_ets_sigPolicyId = "id-smime-aa-ets-sigPolicyId"

const NID_id_smime_aa_ets_sigPolicyId = 226

const OBJ_id_smime_aa_ets_sigPolicyId = (OBJ_id_smime_aa, Clong(15))

const SN_id_smime_aa_ets_commitmentType = "id-smime-aa-ets-commitmentType"

const NID_id_smime_aa_ets_commitmentType = 227

const OBJ_id_smime_aa_ets_commitmentType = (OBJ_id_smime_aa, Clong(16))

const SN_id_smime_aa_ets_signerLocation = "id-smime-aa-ets-signerLocation"

const NID_id_smime_aa_ets_signerLocation = 228

const OBJ_id_smime_aa_ets_signerLocation = (OBJ_id_smime_aa, Clong(17))

const SN_id_smime_aa_ets_signerAttr = "id-smime-aa-ets-signerAttr"

const NID_id_smime_aa_ets_signerAttr = 229

const OBJ_id_smime_aa_ets_signerAttr = (OBJ_id_smime_aa, Clong(18))

const SN_id_smime_aa_ets_otherSigCert = "id-smime-aa-ets-otherSigCert"

const NID_id_smime_aa_ets_otherSigCert = 230

const OBJ_id_smime_aa_ets_otherSigCert = (OBJ_id_smime_aa, Clong(19))

const SN_id_smime_aa_ets_contentTimestamp = "id-smime-aa-ets-contentTimestamp"

const NID_id_smime_aa_ets_contentTimestamp = 231

const OBJ_id_smime_aa_ets_contentTimestamp = (OBJ_id_smime_aa, Clong(20))

const SN_id_smime_aa_ets_CertificateRefs = "id-smime-aa-ets-CertificateRefs"

const NID_id_smime_aa_ets_CertificateRefs = 232

const OBJ_id_smime_aa_ets_CertificateRefs = (OBJ_id_smime_aa, Clong(21))

const SN_id_smime_aa_ets_RevocationRefs = "id-smime-aa-ets-RevocationRefs"

const NID_id_smime_aa_ets_RevocationRefs = 233

const OBJ_id_smime_aa_ets_RevocationRefs = (OBJ_id_smime_aa, Clong(22))

const SN_id_smime_aa_ets_certValues = "id-smime-aa-ets-certValues"

const NID_id_smime_aa_ets_certValues = 234

const OBJ_id_smime_aa_ets_certValues = (OBJ_id_smime_aa, Clong(23))

const SN_id_smime_aa_ets_revocationValues = "id-smime-aa-ets-revocationValues"

const NID_id_smime_aa_ets_revocationValues = 235

const OBJ_id_smime_aa_ets_revocationValues = (OBJ_id_smime_aa, Clong(24))

const SN_id_smime_aa_ets_escTimeStamp = "id-smime-aa-ets-escTimeStamp"

const NID_id_smime_aa_ets_escTimeStamp = 236

const OBJ_id_smime_aa_ets_escTimeStamp = (OBJ_id_smime_aa, Clong(25))

const SN_id_smime_aa_ets_certCRLTimestamp = "id-smime-aa-ets-certCRLTimestamp"

const NID_id_smime_aa_ets_certCRLTimestamp = 237

const OBJ_id_smime_aa_ets_certCRLTimestamp = (OBJ_id_smime_aa, Clong(26))

const SN_id_smime_aa_ets_archiveTimeStamp = "id-smime-aa-ets-archiveTimeStamp"

const NID_id_smime_aa_ets_archiveTimeStamp = 238

const OBJ_id_smime_aa_ets_archiveTimeStamp = (OBJ_id_smime_aa, Clong(27))

const SN_id_smime_aa_signatureType = "id-smime-aa-signatureType"

const NID_id_smime_aa_signatureType = 239

const OBJ_id_smime_aa_signatureType = (OBJ_id_smime_aa, Clong(28))

const SN_id_smime_aa_dvcs_dvc = "id-smime-aa-dvcs-dvc"

const NID_id_smime_aa_dvcs_dvc = 240

const OBJ_id_smime_aa_dvcs_dvc = (OBJ_id_smime_aa, Clong(29))

const SN_id_smime_aa_signingCertificateV2 = "id-smime-aa-signingCertificateV2"

const NID_id_smime_aa_signingCertificateV2 = 1086

const OBJ_id_smime_aa_signingCertificateV2 = (OBJ_id_smime_aa, Clong(47))

const SN_id_smime_alg_ESDHwith3DES = "id-smime-alg-ESDHwith3DES"

const NID_id_smime_alg_ESDHwith3DES = 241

const OBJ_id_smime_alg_ESDHwith3DES = (OBJ_id_smime_alg, Clong(1))

const SN_id_smime_alg_ESDHwithRC2 = "id-smime-alg-ESDHwithRC2"

const NID_id_smime_alg_ESDHwithRC2 = 242

const OBJ_id_smime_alg_ESDHwithRC2 = (OBJ_id_smime_alg, Clong(2))

const SN_id_smime_alg_3DESwrap = "id-smime-alg-3DESwrap"

const NID_id_smime_alg_3DESwrap = 243

const OBJ_id_smime_alg_3DESwrap = (OBJ_id_smime_alg, Clong(3))

const SN_id_smime_alg_RC2wrap = "id-smime-alg-RC2wrap"

const NID_id_smime_alg_RC2wrap = 244

const OBJ_id_smime_alg_RC2wrap = (OBJ_id_smime_alg, Clong(4))

const SN_id_smime_alg_ESDH = "id-smime-alg-ESDH"

const NID_id_smime_alg_ESDH = 245

const OBJ_id_smime_alg_ESDH = (OBJ_id_smime_alg, Clong(5))

const SN_id_smime_alg_CMS3DESwrap = "id-smime-alg-CMS3DESwrap"

const NID_id_smime_alg_CMS3DESwrap = 246

const OBJ_id_smime_alg_CMS3DESwrap = (OBJ_id_smime_alg, Clong(6))

const SN_id_smime_alg_CMSRC2wrap = "id-smime-alg-CMSRC2wrap"

const NID_id_smime_alg_CMSRC2wrap = 247

const OBJ_id_smime_alg_CMSRC2wrap = (OBJ_id_smime_alg, Clong(7))

const SN_id_alg_PWRI_KEK = "id-alg-PWRI-KEK"

const NID_id_alg_PWRI_KEK = 893

const OBJ_id_alg_PWRI_KEK = (OBJ_id_smime_alg, Clong(9))

const SN_id_smime_cd_ldap = "id-smime-cd-ldap"

const NID_id_smime_cd_ldap = 248

const OBJ_id_smime_cd_ldap = (OBJ_id_smime_cd, Clong(1))

const SN_id_smime_spq_ets_sqt_uri = "id-smime-spq-ets-sqt-uri"

const NID_id_smime_spq_ets_sqt_uri = 249

const OBJ_id_smime_spq_ets_sqt_uri = (OBJ_id_smime_spq, Clong(1))

const SN_id_smime_spq_ets_sqt_unotice = "id-smime-spq-ets-sqt-unotice"

const NID_id_smime_spq_ets_sqt_unotice = 250

const OBJ_id_smime_spq_ets_sqt_unotice = (OBJ_id_smime_spq, Clong(2))

const SN_id_smime_cti_ets_proofOfOrigin = "id-smime-cti-ets-proofOfOrigin"

const NID_id_smime_cti_ets_proofOfOrigin = 251

const OBJ_id_smime_cti_ets_proofOfOrigin = (OBJ_id_smime_cti, Clong(1))

const SN_id_smime_cti_ets_proofOfReceipt = "id-smime-cti-ets-proofOfReceipt"

const NID_id_smime_cti_ets_proofOfReceipt = 252

const OBJ_id_smime_cti_ets_proofOfReceipt = (OBJ_id_smime_cti, Clong(2))

const SN_id_smime_cti_ets_proofOfDelivery = "id-smime-cti-ets-proofOfDelivery"

const NID_id_smime_cti_ets_proofOfDelivery = 253

const OBJ_id_smime_cti_ets_proofOfDelivery = (OBJ_id_smime_cti, Clong(3))

const SN_id_smime_cti_ets_proofOfSender = "id-smime-cti-ets-proofOfSender"

const NID_id_smime_cti_ets_proofOfSender = 254

const OBJ_id_smime_cti_ets_proofOfSender = (OBJ_id_smime_cti, Clong(4))

const SN_id_smime_cti_ets_proofOfApproval = "id-smime-cti-ets-proofOfApproval"

const NID_id_smime_cti_ets_proofOfApproval = 255

const OBJ_id_smime_cti_ets_proofOfApproval = (OBJ_id_smime_cti, Clong(5))

const SN_id_smime_cti_ets_proofOfCreation = "id-smime-cti-ets-proofOfCreation"

const NID_id_smime_cti_ets_proofOfCreation = 256

const OBJ_id_smime_cti_ets_proofOfCreation = (OBJ_id_smime_cti, Clong(6))

const LN_friendlyName = "friendlyName"

const NID_friendlyName = 156

const OBJ_friendlyName = (OBJ_pkcs9, Clong(20))

const LN_localKeyID = "localKeyID"

const NID_localKeyID = 157

const OBJ_localKeyID = (OBJ_pkcs9, Clong(21))

const SN_ms_csp_name = "CSPName"

const LN_ms_csp_name = "Microsoft CSP Name"

const NID_ms_csp_name = 417

const OBJ_ms_csp_name = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(17), Clong(1))

const SN_LocalKeySet = "LocalKeySet"

const LN_LocalKeySet = "Microsoft Local Key set"

const NID_LocalKeySet = 856

const OBJ_LocalKeySet = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(17), Clong(2))

const OBJ_certTypes = (OBJ_pkcs9, Clong(22))

const LN_x509Certificate = "x509Certificate"

const NID_x509Certificate = 158

const OBJ_x509Certificate = (OBJ_certTypes, Clong(1))

const LN_sdsiCertificate = "sdsiCertificate"

const NID_sdsiCertificate = 159

const OBJ_sdsiCertificate = (OBJ_certTypes, Clong(2))

const OBJ_crlTypes = (OBJ_pkcs9, Clong(23))

const LN_x509Crl = "x509Crl"

const NID_x509Crl = 160

const OBJ_x509Crl = (OBJ_crlTypes, Clong(1))

const OBJ_pkcs12 = (OBJ_pkcs, Clong(12))

const OBJ_pkcs12_pbeids = (OBJ_pkcs12, Clong(1))

const SN_pbe_WithSHA1And128BitRC4 = "PBE-SHA1-RC4-128"

const LN_pbe_WithSHA1And128BitRC4 = "pbeWithSHA1And128BitRC4"

const NID_pbe_WithSHA1And128BitRC4 = 144

const OBJ_pbe_WithSHA1And128BitRC4 = (OBJ_pkcs12_pbeids, Clong(1))

const SN_pbe_WithSHA1And40BitRC4 = "PBE-SHA1-RC4-40"

const LN_pbe_WithSHA1And40BitRC4 = "pbeWithSHA1And40BitRC4"

const NID_pbe_WithSHA1And40BitRC4 = 145

const OBJ_pbe_WithSHA1And40BitRC4 = (OBJ_pkcs12_pbeids, Clong(2))

const SN_pbe_WithSHA1And3_Key_TripleDES_CBC = "PBE-SHA1-3DES"

const LN_pbe_WithSHA1And3_Key_TripleDES_CBC = "pbeWithSHA1And3-KeyTripleDES-CBC"

const NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146

const OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = (OBJ_pkcs12_pbeids, Clong(3))

const SN_pbe_WithSHA1And2_Key_TripleDES_CBC = "PBE-SHA1-2DES"

const LN_pbe_WithSHA1And2_Key_TripleDES_CBC = "pbeWithSHA1And2-KeyTripleDES-CBC"

const NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147

const OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = (OBJ_pkcs12_pbeids, Clong(4))

const SN_pbe_WithSHA1And128BitRC2_CBC = "PBE-SHA1-RC2-128"

const LN_pbe_WithSHA1And128BitRC2_CBC = "pbeWithSHA1And128BitRC2-CBC"

const NID_pbe_WithSHA1And128BitRC2_CBC = 148

const OBJ_pbe_WithSHA1And128BitRC2_CBC = (OBJ_pkcs12_pbeids, Clong(5))

const SN_pbe_WithSHA1And40BitRC2_CBC = "PBE-SHA1-RC2-40"

const LN_pbe_WithSHA1And40BitRC2_CBC = "pbeWithSHA1And40BitRC2-CBC"

const NID_pbe_WithSHA1And40BitRC2_CBC = 149

const OBJ_pbe_WithSHA1And40BitRC2_CBC = (OBJ_pkcs12_pbeids, Clong(6))

const OBJ_pkcs12_Version1 = (OBJ_pkcs12, Clong(10))

const OBJ_pkcs12_BagIds = (OBJ_pkcs12_Version1, Clong(1))

const LN_keyBag = "keyBag"

const NID_keyBag = 150

const OBJ_keyBag = (OBJ_pkcs12_BagIds, Clong(1))

const LN_pkcs8ShroudedKeyBag = "pkcs8ShroudedKeyBag"

const NID_pkcs8ShroudedKeyBag = 151

const OBJ_pkcs8ShroudedKeyBag = (OBJ_pkcs12_BagIds, Clong(2))

const LN_certBag = "certBag"

const NID_certBag = 152

const OBJ_certBag = (OBJ_pkcs12_BagIds, Clong(3))

const LN_crlBag = "crlBag"

const NID_crlBag = 153

const OBJ_crlBag = (OBJ_pkcs12_BagIds, Clong(4))

const LN_secretBag = "secretBag"

const NID_secretBag = 154

const OBJ_secretBag = (OBJ_pkcs12_BagIds, Clong(5))

const LN_safeContentsBag = "safeContentsBag"

const NID_safeContentsBag = 155

const OBJ_safeContentsBag = (OBJ_pkcs12_BagIds, Clong(6))

const SN_md2 = "MD2"

const LN_md2 = "md2"

const NID_md2 = 3

const OBJ_md2 = (OBJ_rsadsi, Clong(2), Clong(2))

const SN_md4 = "MD4"

const LN_md4 = "md4"

const NID_md4 = 257

const OBJ_md4 = (OBJ_rsadsi, Clong(2), Clong(4))

const SN_md5 = "MD5"

const LN_md5 = "md5"

const NID_md5 = 4

const OBJ_md5 = (OBJ_rsadsi, Clong(2), Clong(5))

const SN_md5_sha1 = "MD5-SHA1"

const LN_md5_sha1 = "md5-sha1"

const NID_md5_sha1 = 114

const LN_hmacWithMD5 = "hmacWithMD5"

const NID_hmacWithMD5 = 797

const OBJ_hmacWithMD5 = (OBJ_rsadsi, Clong(2), Clong(6))

const LN_hmacWithSHA1 = "hmacWithSHA1"

const NID_hmacWithSHA1 = 163

const OBJ_hmacWithSHA1 = (OBJ_rsadsi, Clong(2), Clong(7))

const SN_sm2 = "SM2"

const LN_sm2 = "sm2"

const NID_sm2 = 1172

const OBJ_sm2 = (OBJ_sm_scheme, Clong(301))

const SN_sm3 = "SM3"

const LN_sm3 = "sm3"

const NID_sm3 = 1143

const OBJ_sm3 = (OBJ_sm_scheme, Clong(401))

const SN_sm3WithRSAEncryption = "RSA-SM3"

const LN_sm3WithRSAEncryption = "sm3WithRSAEncryption"

const NID_sm3WithRSAEncryption = 1144

const OBJ_sm3WithRSAEncryption = (OBJ_sm_scheme, Clong(504))

const SN_SM2_with_SM3 = "SM2-SM3"

const LN_SM2_with_SM3 = "SM2-with-SM3"

const NID_SM2_with_SM3 = 1204

const OBJ_SM2_with_SM3 = (OBJ_sm_scheme, Clong(501))

const LN_hmacWithSHA224 = "hmacWithSHA224"

const NID_hmacWithSHA224 = 798

const OBJ_hmacWithSHA224 = (OBJ_rsadsi, Clong(2), Clong(8))

const LN_hmacWithSHA256 = "hmacWithSHA256"

const NID_hmacWithSHA256 = 799

const OBJ_hmacWithSHA256 = (OBJ_rsadsi, Clong(2), Clong(9))

const LN_hmacWithSHA384 = "hmacWithSHA384"

const NID_hmacWithSHA384 = 800

const OBJ_hmacWithSHA384 = (OBJ_rsadsi, Clong(2), Clong(10))

const LN_hmacWithSHA512 = "hmacWithSHA512"

const NID_hmacWithSHA512 = 801

const OBJ_hmacWithSHA512 = (OBJ_rsadsi, Clong(2), Clong(11))

const LN_hmacWithSHA512_224 = "hmacWithSHA512-224"

const NID_hmacWithSHA512_224 = 1193

const OBJ_hmacWithSHA512_224 = (OBJ_rsadsi, Clong(2), Clong(12))

const LN_hmacWithSHA512_256 = "hmacWithSHA512-256"

const NID_hmacWithSHA512_256 = 1194

const OBJ_hmacWithSHA512_256 = (OBJ_rsadsi, Clong(2), Clong(13))

const SN_rc2_cbc = "RC2-CBC"

const LN_rc2_cbc = "rc2-cbc"

const NID_rc2_cbc = 37

const OBJ_rc2_cbc = (OBJ_rsadsi, Clong(3), Clong(2))

const SN_rc2_ecb = "RC2-ECB"

const LN_rc2_ecb = "rc2-ecb"

const NID_rc2_ecb = 38

const SN_rc2_cfb64 = "RC2-CFB"

const LN_rc2_cfb64 = "rc2-cfb"

const NID_rc2_cfb64 = 39

const SN_rc2_ofb64 = "RC2-OFB"

const LN_rc2_ofb64 = "rc2-ofb"

const NID_rc2_ofb64 = 40

const SN_rc2_40_cbc = "RC2-40-CBC"

const LN_rc2_40_cbc = "rc2-40-cbc"

const NID_rc2_40_cbc = 98

const SN_rc2_64_cbc = "RC2-64-CBC"

const LN_rc2_64_cbc = "rc2-64-cbc"

const NID_rc2_64_cbc = 166

const SN_rc4 = "RC4"

const LN_rc4 = "rc4"

const NID_rc4 = 5

const OBJ_rc4 = (OBJ_rsadsi, Clong(3), Clong(4))

const SN_rc4_40 = "RC4-40"

const LN_rc4_40 = "rc4-40"

const NID_rc4_40 = 97

const SN_des_ede3_cbc = "DES-EDE3-CBC"

const LN_des_ede3_cbc = "des-ede3-cbc"

const NID_des_ede3_cbc = 44

const OBJ_des_ede3_cbc = (OBJ_rsadsi, Clong(3), Clong(7))

const SN_rc5_cbc = "RC5-CBC"

const LN_rc5_cbc = "rc5-cbc"

const NID_rc5_cbc = 120

const OBJ_rc5_cbc = (OBJ_rsadsi, Clong(3), Clong(8))

const SN_rc5_ecb = "RC5-ECB"

const LN_rc5_ecb = "rc5-ecb"

const NID_rc5_ecb = 121

const SN_rc5_cfb64 = "RC5-CFB"

const LN_rc5_cfb64 = "rc5-cfb"

const NID_rc5_cfb64 = 122

const SN_rc5_ofb64 = "RC5-OFB"

const LN_rc5_ofb64 = "rc5-ofb"

const NID_rc5_ofb64 = 123

const SN_ms_ext_req = "msExtReq"

const LN_ms_ext_req = "Microsoft Extension Request"

const NID_ms_ext_req = 171

const OBJ_ms_ext_req = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(2), Clong(1), Clong(14))

const SN_ms_code_ind = "msCodeInd"

const LN_ms_code_ind = "Microsoft Individual Code Signing"

const NID_ms_code_ind = 134

const OBJ_ms_code_ind = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(2), Clong(1), Clong(21))

const SN_ms_code_com = "msCodeCom"

const LN_ms_code_com = "Microsoft Commercial Code Signing"

const NID_ms_code_com = 135

const OBJ_ms_code_com = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(2), Clong(1), Clong(22))

const SN_ms_ctl_sign = "msCTLSign"

const LN_ms_ctl_sign = "Microsoft Trust List Signing"

const NID_ms_ctl_sign = 136

const OBJ_ms_ctl_sign = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(10), Clong(3), Clong(1))

const SN_ms_sgc = "msSGC"

const LN_ms_sgc = "Microsoft Server Gated Crypto"

const NID_ms_sgc = 137

const OBJ_ms_sgc = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(10), Clong(3), Clong(3))

const SN_ms_efs = "msEFS"

const LN_ms_efs = "Microsoft Encrypted File System"

const NID_ms_efs = 138

const OBJ_ms_efs = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(10), Clong(3), Clong(4))

const SN_ms_smartcard_login = "msSmartcardLogin"

const LN_ms_smartcard_login = "Microsoft Smartcard Login"

const NID_ms_smartcard_login = 648

const OBJ_ms_smartcard_login = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(20), Clong(2), Clong(2))

const SN_ms_upn = "msUPN"

const LN_ms_upn = "Microsoft User Principal Name"

const NID_ms_upn = 649

const OBJ_ms_upn = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(20), Clong(2), Clong(3))

const SN_idea_cbc = "IDEA-CBC"

const LN_idea_cbc = "idea-cbc"

const NID_idea_cbc = 34

const OBJ_idea_cbc = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(188), Clong(7), Clong(1), Clong(1), Clong(2))

const SN_idea_ecb = "IDEA-ECB"

const LN_idea_ecb = "idea-ecb"

const NID_idea_ecb = 36

const SN_idea_cfb64 = "IDEA-CFB"

const LN_idea_cfb64 = "idea-cfb"

const NID_idea_cfb64 = 35

const SN_idea_ofb64 = "IDEA-OFB"

const LN_idea_ofb64 = "idea-ofb"

const NID_idea_ofb64 = 46

const SN_bf_cbc = "BF-CBC"

const LN_bf_cbc = "bf-cbc"

const NID_bf_cbc = 91

const OBJ_bf_cbc = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(3029), Clong(1), Clong(2))

const SN_bf_ecb = "BF-ECB"

const LN_bf_ecb = "bf-ecb"

const NID_bf_ecb = 92

const SN_bf_cfb64 = "BF-CFB"

const LN_bf_cfb64 = "bf-cfb"

const NID_bf_cfb64 = 93

const SN_bf_ofb64 = "BF-OFB"

const LN_bf_ofb64 = "bf-ofb"

const NID_bf_ofb64 = 94

const SN_id_pkix = "PKIX"

const NID_id_pkix = 127

const OBJ_id_pkix = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(5), Clong(5), Clong(7))

const SN_id_pkix_mod = "id-pkix-mod"

const NID_id_pkix_mod = 258

const OBJ_id_pkix_mod = (OBJ_id_pkix, Clong(0))

const SN_id_pe = "id-pe"

const NID_id_pe = 175

const OBJ_id_pe = (OBJ_id_pkix, Clong(1))

const SN_id_qt = "id-qt"

const NID_id_qt = 259

const OBJ_id_qt = (OBJ_id_pkix, Clong(2))

const SN_id_kp = "id-kp"

const NID_id_kp = 128

const OBJ_id_kp = (OBJ_id_pkix, Clong(3))

const SN_id_it = "id-it"

const NID_id_it = 260

const OBJ_id_it = (OBJ_id_pkix, Clong(4))

const SN_id_pkip = "id-pkip"

const NID_id_pkip = 261

const OBJ_id_pkip = (OBJ_id_pkix, Clong(5))

const SN_id_alg = "id-alg"

const NID_id_alg = 262

const OBJ_id_alg = (OBJ_id_pkix, Clong(6))

const SN_id_cmc = "id-cmc"

const NID_id_cmc = 263

const OBJ_id_cmc = (OBJ_id_pkix, Clong(7))

const SN_id_on = "id-on"

const NID_id_on = 264

const OBJ_id_on = (OBJ_id_pkix, Clong(8))

const SN_id_pda = "id-pda"

const NID_id_pda = 265

const OBJ_id_pda = (OBJ_id_pkix, Clong(9))

const SN_id_aca = "id-aca"

const NID_id_aca = 266

const OBJ_id_aca = (OBJ_id_pkix, Clong(10))

const SN_id_qcs = "id-qcs"

const NID_id_qcs = 267

const OBJ_id_qcs = (OBJ_id_pkix, Clong(11))

const SN_id_cp = "id-cp"

const NID_id_cp = 1238

const OBJ_id_cp = (OBJ_id_pkix, Clong(14))

const SN_id_cct = "id-cct"

const NID_id_cct = 268

const OBJ_id_cct = (OBJ_id_pkix, Clong(12))

const SN_id_ppl = "id-ppl"

const NID_id_ppl = 662

const OBJ_id_ppl = (OBJ_id_pkix, Clong(21))

const SN_id_ad = "id-ad"

const NID_id_ad = 176

const OBJ_id_ad = (OBJ_id_pkix, Clong(48))

const SN_id_pkix1_explicit_88 = "id-pkix1-explicit-88"

const NID_id_pkix1_explicit_88 = 269

const OBJ_id_pkix1_explicit_88 = (OBJ_id_pkix_mod, Clong(1))

const SN_id_pkix1_implicit_88 = "id-pkix1-implicit-88"

const NID_id_pkix1_implicit_88 = 270

const OBJ_id_pkix1_implicit_88 = (OBJ_id_pkix_mod, Clong(2))

const SN_id_pkix1_explicit_93 = "id-pkix1-explicit-93"

const NID_id_pkix1_explicit_93 = 271

const OBJ_id_pkix1_explicit_93 = (OBJ_id_pkix_mod, Clong(3))

const SN_id_pkix1_implicit_93 = "id-pkix1-implicit-93"

const NID_id_pkix1_implicit_93 = 272

const OBJ_id_pkix1_implicit_93 = (OBJ_id_pkix_mod, Clong(4))

const SN_id_mod_crmf = "id-mod-crmf"

const NID_id_mod_crmf = 273

const OBJ_id_mod_crmf = (OBJ_id_pkix_mod, Clong(5))

const SN_id_mod_cmc = "id-mod-cmc"

const NID_id_mod_cmc = 274

const OBJ_id_mod_cmc = (OBJ_id_pkix_mod, Clong(6))

const SN_id_mod_kea_profile_88 = "id-mod-kea-profile-88"

const NID_id_mod_kea_profile_88 = 275

const OBJ_id_mod_kea_profile_88 = (OBJ_id_pkix_mod, Clong(7))

const SN_id_mod_kea_profile_93 = "id-mod-kea-profile-93"

const NID_id_mod_kea_profile_93 = 276

const OBJ_id_mod_kea_profile_93 = (OBJ_id_pkix_mod, Clong(8))

const SN_id_mod_cmp = "id-mod-cmp"

const NID_id_mod_cmp = 277

const OBJ_id_mod_cmp = (OBJ_id_pkix_mod, Clong(9))

const SN_id_mod_qualified_cert_88 = "id-mod-qualified-cert-88"

const NID_id_mod_qualified_cert_88 = 278

const OBJ_id_mod_qualified_cert_88 = (OBJ_id_pkix_mod, Clong(10))

const SN_id_mod_qualified_cert_93 = "id-mod-qualified-cert-93"

const NID_id_mod_qualified_cert_93 = 279

const OBJ_id_mod_qualified_cert_93 = (OBJ_id_pkix_mod, Clong(11))

const SN_id_mod_attribute_cert = "id-mod-attribute-cert"

const NID_id_mod_attribute_cert = 280

const OBJ_id_mod_attribute_cert = (OBJ_id_pkix_mod, Clong(12))

const SN_id_mod_timestamp_protocol = "id-mod-timestamp-protocol"

const NID_id_mod_timestamp_protocol = 281

const OBJ_id_mod_timestamp_protocol = (OBJ_id_pkix_mod, Clong(13))

const SN_id_mod_ocsp = "id-mod-ocsp"

const NID_id_mod_ocsp = 282

const OBJ_id_mod_ocsp = (OBJ_id_pkix_mod, Clong(14))

const SN_id_mod_dvcs = "id-mod-dvcs"

const NID_id_mod_dvcs = 283

const OBJ_id_mod_dvcs = (OBJ_id_pkix_mod, Clong(15))

const SN_id_mod_cmp2000 = "id-mod-cmp2000"

const NID_id_mod_cmp2000 = 284

const OBJ_id_mod_cmp2000 = (OBJ_id_pkix_mod, Clong(16))

const SN_info_access = "authorityInfoAccess"

const LN_info_access = "Authority Information Access"

const NID_info_access = 177

const OBJ_info_access = (OBJ_id_pe, Clong(1))

const SN_biometricInfo = "biometricInfo"

const LN_biometricInfo = "Biometric Info"

const NID_biometricInfo = 285

const OBJ_biometricInfo = (OBJ_id_pe, Clong(2))

const SN_qcStatements = "qcStatements"

const NID_qcStatements = 286

const OBJ_qcStatements = (OBJ_id_pe, Clong(3))

const SN_ac_auditEntity = "ac-auditEntity"

const NID_ac_auditEntity = 287

const OBJ_ac_auditEntity = (OBJ_id_pe, Clong(4))

const SN_ac_targeting = "ac-targeting"

const NID_ac_targeting = 288

const OBJ_ac_targeting = (OBJ_id_pe, Clong(5))

const SN_aaControls = "aaControls"

const NID_aaControls = 289

const OBJ_aaControls = (OBJ_id_pe, Clong(6))

const SN_sbgp_ipAddrBlock = "sbgp-ipAddrBlock"

const NID_sbgp_ipAddrBlock = 290

const OBJ_sbgp_ipAddrBlock = (OBJ_id_pe, Clong(7))

const SN_sbgp_autonomousSysNum = "sbgp-autonomousSysNum"

const NID_sbgp_autonomousSysNum = 291

const OBJ_sbgp_autonomousSysNum = (OBJ_id_pe, Clong(8))

const SN_sbgp_routerIdentifier = "sbgp-routerIdentifier"

const NID_sbgp_routerIdentifier = 292

const OBJ_sbgp_routerIdentifier = (OBJ_id_pe, Clong(9))

const SN_ac_proxying = "ac-proxying"

const NID_ac_proxying = 397

const OBJ_ac_proxying = (OBJ_id_pe, Clong(10))

const SN_sinfo_access = "subjectInfoAccess"

const LN_sinfo_access = "Subject Information Access"

const NID_sinfo_access = 398

const OBJ_sinfo_access = (OBJ_id_pe, Clong(11))

const SN_proxyCertInfo = "proxyCertInfo"

const LN_proxyCertInfo = "Proxy Certificate Information"

const NID_proxyCertInfo = 663

const OBJ_proxyCertInfo = (OBJ_id_pe, Clong(14))

const SN_tlsfeature = "tlsfeature"

const LN_tlsfeature = "TLS Feature"

const NID_tlsfeature = 1020

const OBJ_tlsfeature = (OBJ_id_pe, Clong(24))

const SN_sbgp_ipAddrBlockv2 = "sbgp-ipAddrBlockv2"

const NID_sbgp_ipAddrBlockv2 = 1239

const OBJ_sbgp_ipAddrBlockv2 = (OBJ_id_pe, Clong(28))

const SN_sbgp_autonomousSysNumv2 = "sbgp-autonomousSysNumv2"

const NID_sbgp_autonomousSysNumv2 = 1240

const OBJ_sbgp_autonomousSysNumv2 = (OBJ_id_pe, Clong(29))

const SN_id_qt_cps = "id-qt-cps"

const LN_id_qt_cps = "Policy Qualifier CPS"

const NID_id_qt_cps = 164

const OBJ_id_qt_cps = (OBJ_id_qt, Clong(1))

const SN_id_qt_unotice = "id-qt-unotice"

const LN_id_qt_unotice = "Policy Qualifier User Notice"

const NID_id_qt_unotice = 165

const OBJ_id_qt_unotice = (OBJ_id_qt, Clong(2))

const SN_textNotice = "textNotice"

const NID_textNotice = 293

const OBJ_textNotice = (OBJ_id_qt, Clong(3))

const SN_server_auth = "serverAuth"

const LN_server_auth = "TLS Web Server Authentication"

const NID_server_auth = 129

const OBJ_server_auth = (OBJ_id_kp, Clong(1))

const SN_client_auth = "clientAuth"

const LN_client_auth = "TLS Web Client Authentication"

const NID_client_auth = 130

const OBJ_client_auth = (OBJ_id_kp, Clong(2))

const SN_code_sign = "codeSigning"

const LN_code_sign = "Code Signing"

const NID_code_sign = 131

const OBJ_code_sign = (OBJ_id_kp, Clong(3))

const SN_email_protect = "emailProtection"

const LN_email_protect = "E-mail Protection"

const NID_email_protect = 132

const OBJ_email_protect = (OBJ_id_kp, Clong(4))

const SN_ipsecEndSystem = "ipsecEndSystem"

const LN_ipsecEndSystem = "IPSec End System"

const NID_ipsecEndSystem = 294

const OBJ_ipsecEndSystem = (OBJ_id_kp, Clong(5))

const SN_ipsecTunnel = "ipsecTunnel"

const LN_ipsecTunnel = "IPSec Tunnel"

const NID_ipsecTunnel = 295

const OBJ_ipsecTunnel = (OBJ_id_kp, Clong(6))

const SN_ipsecUser = "ipsecUser"

const LN_ipsecUser = "IPSec User"

const NID_ipsecUser = 296

const OBJ_ipsecUser = (OBJ_id_kp, Clong(7))

const SN_time_stamp = "timeStamping"

const LN_time_stamp = "Time Stamping"

const NID_time_stamp = 133

const OBJ_time_stamp = (OBJ_id_kp, Clong(8))

const SN_OCSP_sign = "OCSPSigning"

const LN_OCSP_sign = "OCSP Signing"

const NID_OCSP_sign = 180

const OBJ_OCSP_sign = (OBJ_id_kp, Clong(9))

const SN_dvcs = "DVCS"

const LN_dvcs = "dvcs"

const NID_dvcs = 297

const OBJ_dvcs = (OBJ_id_kp, Clong(10))

const SN_ipsec_IKE = "ipsecIKE"

const LN_ipsec_IKE = "ipsec Internet Key Exchange"

const NID_ipsec_IKE = 1022

const OBJ_ipsec_IKE = (OBJ_id_kp, Clong(17))

const SN_capwapAC = "capwapAC"

const LN_capwapAC = "Ctrl/provision WAP Access"

const NID_capwapAC = 1023

const OBJ_capwapAC = (OBJ_id_kp, Clong(18))

const SN_capwapWTP = "capwapWTP"

const LN_capwapWTP = "Ctrl/Provision WAP Termination"

const NID_capwapWTP = 1024

const OBJ_capwapWTP = (OBJ_id_kp, Clong(19))

const SN_sshClient = "secureShellClient"

const LN_sshClient = "SSH Client"

const NID_sshClient = 1025

const OBJ_sshClient = (OBJ_id_kp, Clong(21))

const SN_sshServer = "secureShellServer"

const LN_sshServer = "SSH Server"

const NID_sshServer = 1026

const OBJ_sshServer = (OBJ_id_kp, Clong(22))

const SN_sendRouter = "sendRouter"

const LN_sendRouter = "Send Router"

const NID_sendRouter = 1027

const OBJ_sendRouter = (OBJ_id_kp, Clong(23))

const SN_sendProxiedRouter = "sendProxiedRouter"

const LN_sendProxiedRouter = "Send Proxied Router"

const NID_sendProxiedRouter = 1028

const OBJ_sendProxiedRouter = (OBJ_id_kp, Clong(24))

const SN_sendOwner = "sendOwner"

const LN_sendOwner = "Send Owner"

const NID_sendOwner = 1029

const OBJ_sendOwner = (OBJ_id_kp, Clong(25))

const SN_sendProxiedOwner = "sendProxiedOwner"

const LN_sendProxiedOwner = "Send Proxied Owner"

const NID_sendProxiedOwner = 1030

const OBJ_sendProxiedOwner = (OBJ_id_kp, Clong(26))

const SN_cmcCA = "cmcCA"

const LN_cmcCA = "CMC Certificate Authority"

const NID_cmcCA = 1131

const OBJ_cmcCA = (OBJ_id_kp, Clong(27))

const SN_cmcRA = "cmcRA"

const LN_cmcRA = "CMC Registration Authority"

const NID_cmcRA = 1132

const OBJ_cmcRA = (OBJ_id_kp, Clong(28))

const SN_cmcArchive = "cmcArchive"

const LN_cmcArchive = "CMC Archive Server"

const NID_cmcArchive = 1219

const OBJ_cmcArchive = (OBJ_id_kp, Clong(29))

const SN_id_kp_bgpsec_router = "id-kp-bgpsec-router"

const LN_id_kp_bgpsec_router = "BGPsec Router"

const NID_id_kp_bgpsec_router = 1220

const OBJ_id_kp_bgpsec_router = (OBJ_id_kp, Clong(30))

const SN_id_kp_BrandIndicatorforMessageIdentification = "id-kp-BrandIndicatorforMessageIdentification"

const LN_id_kp_BrandIndicatorforMessageIdentification = "Brand Indicator for Message Identification"

const NID_id_kp_BrandIndicatorforMessageIdentification = 1221

const OBJ_id_kp_BrandIndicatorforMessageIdentification = (OBJ_id_kp, Clong(31))

const SN_cmKGA = "cmKGA"

const LN_cmKGA = "Certificate Management Key Generation Authority"

const NID_cmKGA = 1222

const OBJ_cmKGA = (OBJ_id_kp, Clong(32))

const SN_id_it_caProtEncCert = "id-it-caProtEncCert"

const NID_id_it_caProtEncCert = 298

const OBJ_id_it_caProtEncCert = (OBJ_id_it, Clong(1))

const SN_id_it_signKeyPairTypes = "id-it-signKeyPairTypes"

const NID_id_it_signKeyPairTypes = 299

const OBJ_id_it_signKeyPairTypes = (OBJ_id_it, Clong(2))

const SN_id_it_encKeyPairTypes = "id-it-encKeyPairTypes"

const NID_id_it_encKeyPairTypes = 300

const OBJ_id_it_encKeyPairTypes = (OBJ_id_it, Clong(3))

const SN_id_it_preferredSymmAlg = "id-it-preferredSymmAlg"

const NID_id_it_preferredSymmAlg = 301

const OBJ_id_it_preferredSymmAlg = (OBJ_id_it, Clong(4))

const SN_id_it_caKeyUpdateInfo = "id-it-caKeyUpdateInfo"

const NID_id_it_caKeyUpdateInfo = 302

const OBJ_id_it_caKeyUpdateInfo = (OBJ_id_it, Clong(5))

const SN_id_it_currentCRL = "id-it-currentCRL"

const NID_id_it_currentCRL = 303

const OBJ_id_it_currentCRL = (OBJ_id_it, Clong(6))

const SN_id_it_unsupportedOIDs = "id-it-unsupportedOIDs"

const NID_id_it_unsupportedOIDs = 304

const OBJ_id_it_unsupportedOIDs = (OBJ_id_it, Clong(7))

const SN_id_it_subscriptionRequest = "id-it-subscriptionRequest"

const NID_id_it_subscriptionRequest = 305

const OBJ_id_it_subscriptionRequest = (OBJ_id_it, Clong(8))

const SN_id_it_subscriptionResponse = "id-it-subscriptionResponse"

const NID_id_it_subscriptionResponse = 306

const OBJ_id_it_subscriptionResponse = (OBJ_id_it, Clong(9))

const SN_id_it_keyPairParamReq = "id-it-keyPairParamReq"

const NID_id_it_keyPairParamReq = 307

const OBJ_id_it_keyPairParamReq = (OBJ_id_it, Clong(10))

const SN_id_it_keyPairParamRep = "id-it-keyPairParamRep"

const NID_id_it_keyPairParamRep = 308

const OBJ_id_it_keyPairParamRep = (OBJ_id_it, Clong(11))

const SN_id_it_revPassphrase = "id-it-revPassphrase"

const NID_id_it_revPassphrase = 309

const OBJ_id_it_revPassphrase = (OBJ_id_it, Clong(12))

const SN_id_it_implicitConfirm = "id-it-implicitConfirm"

const NID_id_it_implicitConfirm = 310

const OBJ_id_it_implicitConfirm = (OBJ_id_it, Clong(13))

const SN_id_it_confirmWaitTime = "id-it-confirmWaitTime"

const NID_id_it_confirmWaitTime = 311

const OBJ_id_it_confirmWaitTime = (OBJ_id_it, Clong(14))

const SN_id_it_origPKIMessage = "id-it-origPKIMessage"

const NID_id_it_origPKIMessage = 312

const OBJ_id_it_origPKIMessage = (OBJ_id_it, Clong(15))

const SN_id_it_suppLangTags = "id-it-suppLangTags"

const NID_id_it_suppLangTags = 784

const OBJ_id_it_suppLangTags = (OBJ_id_it, Clong(16))

const SN_id_it_caCerts = "id-it-caCerts"

const NID_id_it_caCerts = 1223

const OBJ_id_it_caCerts = (OBJ_id_it, Clong(17))

const SN_id_it_rootCaKeyUpdate = "id-it-rootCaKeyUpdate"

const NID_id_it_rootCaKeyUpdate = 1224

const OBJ_id_it_rootCaKeyUpdate = (OBJ_id_it, Clong(18))

const SN_id_it_certReqTemplate = "id-it-certReqTemplate"

const NID_id_it_certReqTemplate = 1225

const OBJ_id_it_certReqTemplate = (OBJ_id_it, Clong(19))

const SN_id_regCtrl = "id-regCtrl"

const NID_id_regCtrl = 313

const OBJ_id_regCtrl = (OBJ_id_pkip, Clong(1))

const SN_id_regInfo = "id-regInfo"

const NID_id_regInfo = 314

const OBJ_id_regInfo = (OBJ_id_pkip, Clong(2))

const SN_id_regCtrl_regToken = "id-regCtrl-regToken"

const NID_id_regCtrl_regToken = 315

const OBJ_id_regCtrl_regToken = (OBJ_id_regCtrl, Clong(1))

const SN_id_regCtrl_authenticator = "id-regCtrl-authenticator"

const NID_id_regCtrl_authenticator = 316

const OBJ_id_regCtrl_authenticator = (OBJ_id_regCtrl, Clong(2))

const SN_id_regCtrl_pkiPublicationInfo = "id-regCtrl-pkiPublicationInfo"

const NID_id_regCtrl_pkiPublicationInfo = 317

const OBJ_id_regCtrl_pkiPublicationInfo = (OBJ_id_regCtrl, Clong(3))

const SN_id_regCtrl_pkiArchiveOptions = "id-regCtrl-pkiArchiveOptions"

const NID_id_regCtrl_pkiArchiveOptions = 318

const OBJ_id_regCtrl_pkiArchiveOptions = (OBJ_id_regCtrl, Clong(4))

const SN_id_regCtrl_oldCertID = "id-regCtrl-oldCertID"

const NID_id_regCtrl_oldCertID = 319

const OBJ_id_regCtrl_oldCertID = (OBJ_id_regCtrl, Clong(5))

const SN_id_regCtrl_protocolEncrKey = "id-regCtrl-protocolEncrKey"

const NID_id_regCtrl_protocolEncrKey = 320

const OBJ_id_regCtrl_protocolEncrKey = (OBJ_id_regCtrl, Clong(6))

const SN_id_regInfo_utf8Pairs = "id-regInfo-utf8Pairs"

const NID_id_regInfo_utf8Pairs = 321

const OBJ_id_regInfo_utf8Pairs = (OBJ_id_regInfo, Clong(1))

const SN_id_regInfo_certReq = "id-regInfo-certReq"

const NID_id_regInfo_certReq = 322

const OBJ_id_regInfo_certReq = (OBJ_id_regInfo, Clong(2))

const SN_id_alg_des40 = "id-alg-des40"

const NID_id_alg_des40 = 323

const OBJ_id_alg_des40 = (OBJ_id_alg, Clong(1))

const SN_id_alg_noSignature = "id-alg-noSignature"

const NID_id_alg_noSignature = 324

const OBJ_id_alg_noSignature = (OBJ_id_alg, Clong(2))

const SN_id_alg_dh_sig_hmac_sha1 = "id-alg-dh-sig-hmac-sha1"

const NID_id_alg_dh_sig_hmac_sha1 = 325

const OBJ_id_alg_dh_sig_hmac_sha1 = (OBJ_id_alg, Clong(3))

const SN_id_alg_dh_pop = "id-alg-dh-pop"

const NID_id_alg_dh_pop = 326

const OBJ_id_alg_dh_pop = (OBJ_id_alg, Clong(4))

const SN_id_cmc_statusInfo = "id-cmc-statusInfo"

const NID_id_cmc_statusInfo = 327

const OBJ_id_cmc_statusInfo = (OBJ_id_cmc, Clong(1))

const SN_id_cmc_identification = "id-cmc-identification"

const NID_id_cmc_identification = 328

const OBJ_id_cmc_identification = (OBJ_id_cmc, Clong(2))

const SN_id_cmc_identityProof = "id-cmc-identityProof"

const NID_id_cmc_identityProof = 329

const OBJ_id_cmc_identityProof = (OBJ_id_cmc, Clong(3))

const SN_id_cmc_dataReturn = "id-cmc-dataReturn"

const NID_id_cmc_dataReturn = 330

const OBJ_id_cmc_dataReturn = (OBJ_id_cmc, Clong(4))

const SN_id_cmc_transactionId = "id-cmc-transactionId"

const NID_id_cmc_transactionId = 331

const OBJ_id_cmc_transactionId = (OBJ_id_cmc, Clong(5))

const SN_id_cmc_senderNonce = "id-cmc-senderNonce"

const NID_id_cmc_senderNonce = 332

const OBJ_id_cmc_senderNonce = (OBJ_id_cmc, Clong(6))

const SN_id_cmc_recipientNonce = "id-cmc-recipientNonce"

const NID_id_cmc_recipientNonce = 333

const OBJ_id_cmc_recipientNonce = (OBJ_id_cmc, Clong(7))

const SN_id_cmc_addExtensions = "id-cmc-addExtensions"

const NID_id_cmc_addExtensions = 334

const OBJ_id_cmc_addExtensions = (OBJ_id_cmc, Clong(8))

const SN_id_cmc_encryptedPOP = "id-cmc-encryptedPOP"

const NID_id_cmc_encryptedPOP = 335

const OBJ_id_cmc_encryptedPOP = (OBJ_id_cmc, Clong(9))

const SN_id_cmc_decryptedPOP = "id-cmc-decryptedPOP"

const NID_id_cmc_decryptedPOP = 336

const OBJ_id_cmc_decryptedPOP = (OBJ_id_cmc, Clong(10))

const SN_id_cmc_lraPOPWitness = "id-cmc-lraPOPWitness"

const NID_id_cmc_lraPOPWitness = 337

const OBJ_id_cmc_lraPOPWitness = (OBJ_id_cmc, Clong(11))

const SN_id_cmc_getCert = "id-cmc-getCert"

const NID_id_cmc_getCert = 338

const OBJ_id_cmc_getCert = (OBJ_id_cmc, Clong(15))

const SN_id_cmc_getCRL = "id-cmc-getCRL"

const NID_id_cmc_getCRL = 339

const OBJ_id_cmc_getCRL = (OBJ_id_cmc, Clong(16))

const SN_id_cmc_revokeRequest = "id-cmc-revokeRequest"

const NID_id_cmc_revokeRequest = 340

const OBJ_id_cmc_revokeRequest = (OBJ_id_cmc, Clong(17))

const SN_id_cmc_regInfo = "id-cmc-regInfo"

const NID_id_cmc_regInfo = 341

const OBJ_id_cmc_regInfo = (OBJ_id_cmc, Clong(18))

const SN_id_cmc_responseInfo = "id-cmc-responseInfo"

const NID_id_cmc_responseInfo = 342

const OBJ_id_cmc_responseInfo = (OBJ_id_cmc, Clong(19))

const SN_id_cmc_queryPending = "id-cmc-queryPending"

const NID_id_cmc_queryPending = 343

const OBJ_id_cmc_queryPending = (OBJ_id_cmc, Clong(21))

const SN_id_cmc_popLinkRandom = "id-cmc-popLinkRandom"

const NID_id_cmc_popLinkRandom = 344

const OBJ_id_cmc_popLinkRandom = (OBJ_id_cmc, Clong(22))

const SN_id_cmc_popLinkWitness = "id-cmc-popLinkWitness"

const NID_id_cmc_popLinkWitness = 345

const OBJ_id_cmc_popLinkWitness = (OBJ_id_cmc, Clong(23))

const SN_id_cmc_confirmCertAcceptance = "id-cmc-confirmCertAcceptance"

const NID_id_cmc_confirmCertAcceptance = 346

const OBJ_id_cmc_confirmCertAcceptance = (OBJ_id_cmc, Clong(24))

const SN_id_on_personalData = "id-on-personalData"

const NID_id_on_personalData = 347

const OBJ_id_on_personalData = (OBJ_id_on, Clong(1))

const SN_id_on_permanentIdentifier = "id-on-permanentIdentifier"

const LN_id_on_permanentIdentifier = "Permanent Identifier"

const NID_id_on_permanentIdentifier = 858

const OBJ_id_on_permanentIdentifier = (OBJ_id_on, Clong(3))

const SN_XmppAddr = "id-on-xmppAddr"

const LN_XmppAddr = "XmppAddr"

const NID_XmppAddr = 1209

const OBJ_XmppAddr = (OBJ_id_on, Clong(5))

const SN_SRVName = "id-on-dnsSRV"

const LN_SRVName = "SRVName"

const NID_SRVName = 1210

const OBJ_SRVName = (OBJ_id_on, Clong(7))

const SN_NAIRealm = "id-on-NAIRealm"

const LN_NAIRealm = "NAIRealm"

const NID_NAIRealm = 1211

const OBJ_NAIRealm = (OBJ_id_on, Clong(8))

const SN_id_on_SmtpUTF8Mailbox = "id-on-SmtpUTF8Mailbox"

const LN_id_on_SmtpUTF8Mailbox = "Smtp UTF8 Mailbox"

const NID_id_on_SmtpUTF8Mailbox = 1208

const OBJ_id_on_SmtpUTF8Mailbox = (OBJ_id_on, Clong(9))

const SN_id_pda_dateOfBirth = "id-pda-dateOfBirth"

const NID_id_pda_dateOfBirth = 348

const OBJ_id_pda_dateOfBirth = (OBJ_id_pda, Clong(1))

const SN_id_pda_placeOfBirth = "id-pda-placeOfBirth"

const NID_id_pda_placeOfBirth = 349

const OBJ_id_pda_placeOfBirth = (OBJ_id_pda, Clong(2))

const SN_id_pda_gender = "id-pda-gender"

const NID_id_pda_gender = 351

const OBJ_id_pda_gender = (OBJ_id_pda, Clong(3))

const SN_id_pda_countryOfCitizenship = "id-pda-countryOfCitizenship"

const NID_id_pda_countryOfCitizenship = 352

const OBJ_id_pda_countryOfCitizenship = (OBJ_id_pda, Clong(4))

const SN_id_pda_countryOfResidence = "id-pda-countryOfResidence"

const NID_id_pda_countryOfResidence = 353

const OBJ_id_pda_countryOfResidence = (OBJ_id_pda, Clong(5))

const SN_id_aca_authenticationInfo = "id-aca-authenticationInfo"

const NID_id_aca_authenticationInfo = 354

const OBJ_id_aca_authenticationInfo = (OBJ_id_aca, Clong(1))

const SN_id_aca_accessIdentity = "id-aca-accessIdentity"

const NID_id_aca_accessIdentity = 355

const OBJ_id_aca_accessIdentity = (OBJ_id_aca, Clong(2))

const SN_id_aca_chargingIdentity = "id-aca-chargingIdentity"

const NID_id_aca_chargingIdentity = 356

const OBJ_id_aca_chargingIdentity = (OBJ_id_aca, Clong(3))

const SN_id_aca_group = "id-aca-group"

const NID_id_aca_group = 357

const OBJ_id_aca_group = (OBJ_id_aca, Clong(4))

const SN_id_aca_role = "id-aca-role"

const NID_id_aca_role = 358

const OBJ_id_aca_role = (OBJ_id_aca, Clong(5))

const SN_id_aca_encAttrs = "id-aca-encAttrs"

const NID_id_aca_encAttrs = 399

const OBJ_id_aca_encAttrs = (OBJ_id_aca, Clong(6))

const SN_id_qcs_pkixQCSyntax_v1 = "id-qcs-pkixQCSyntax-v1"

const NID_id_qcs_pkixQCSyntax_v1 = 359

const OBJ_id_qcs_pkixQCSyntax_v1 = (OBJ_id_qcs, Clong(1))

const SN_ipAddr_asNumber = "ipAddr-asNumber"

const NID_ipAddr_asNumber = 1241

const OBJ_ipAddr_asNumber = (OBJ_id_cp, Clong(2))

const SN_ipAddr_asNumberv2 = "ipAddr-asNumberv2"

const NID_ipAddr_asNumberv2 = 1242

const OBJ_ipAddr_asNumberv2 = (OBJ_id_cp, Clong(3))

const SN_id_cct_crs = "id-cct-crs"

const NID_id_cct_crs = 360

const OBJ_id_cct_crs = (OBJ_id_cct, Clong(1))

const SN_id_cct_PKIData = "id-cct-PKIData"

const NID_id_cct_PKIData = 361

const OBJ_id_cct_PKIData = (OBJ_id_cct, Clong(2))

const SN_id_cct_PKIResponse = "id-cct-PKIResponse"

const NID_id_cct_PKIResponse = 362

const OBJ_id_cct_PKIResponse = (OBJ_id_cct, Clong(3))

const SN_id_ppl_anyLanguage = "id-ppl-anyLanguage"

const LN_id_ppl_anyLanguage = "Any language"

const NID_id_ppl_anyLanguage = 664

const OBJ_id_ppl_anyLanguage = (OBJ_id_ppl, Clong(0))

const SN_id_ppl_inheritAll = "id-ppl-inheritAll"

const LN_id_ppl_inheritAll = "Inherit all"

const NID_id_ppl_inheritAll = 665

const OBJ_id_ppl_inheritAll = (OBJ_id_ppl, Clong(1))

const SN_Independent = "id-ppl-independent"

const LN_Independent = "Independent"

const NID_Independent = 667

const OBJ_Independent = (OBJ_id_ppl, Clong(2))

const SN_ad_OCSP = "OCSP"

const LN_ad_OCSP = "OCSP"

const NID_ad_OCSP = 178

const OBJ_ad_OCSP = (OBJ_id_ad, Clong(1))

const SN_ad_ca_issuers = "caIssuers"

const LN_ad_ca_issuers = "CA Issuers"

const NID_ad_ca_issuers = 179

const OBJ_ad_ca_issuers = (OBJ_id_ad, Clong(2))

const SN_ad_timeStamping = "ad_timestamping"

const LN_ad_timeStamping = "AD Time Stamping"

const NID_ad_timeStamping = 363

const OBJ_ad_timeStamping = (OBJ_id_ad, Clong(3))

const SN_ad_dvcs = "AD_DVCS"

const LN_ad_dvcs = "ad dvcs"

const NID_ad_dvcs = 364

const OBJ_ad_dvcs = (OBJ_id_ad, Clong(4))

const SN_caRepository = "caRepository"

const LN_caRepository = "CA Repository"

const NID_caRepository = 785

const OBJ_caRepository = (OBJ_id_ad, Clong(5))

const SN_rpkiManifest = "rpkiManifest"

const LN_rpkiManifest = "RPKI Manifest"

const NID_rpkiManifest = 1243

const OBJ_rpkiManifest = (OBJ_id_ad, Clong(10))

const SN_signedObject = "signedObject"

const LN_signedObject = "Signed Object"

const NID_signedObject = 1244

const OBJ_signedObject = (OBJ_id_ad, Clong(11))

const SN_rpkiNotify = "rpkiNotify"

const LN_rpkiNotify = "RPKI Notify"

const NID_rpkiNotify = 1245

const OBJ_rpkiNotify = (OBJ_id_ad, Clong(13))

const OBJ_id_pkix_OCSP = OBJ_ad_OCSP

const SN_id_pkix_OCSP_basic = "basicOCSPResponse"

const LN_id_pkix_OCSP_basic = "Basic OCSP Response"

const NID_id_pkix_OCSP_basic = 365

const OBJ_id_pkix_OCSP_basic = (OBJ_id_pkix_OCSP, Clong(1))

const SN_id_pkix_OCSP_Nonce = "Nonce"

const LN_id_pkix_OCSP_Nonce = "OCSP Nonce"

const NID_id_pkix_OCSP_Nonce = 366

const OBJ_id_pkix_OCSP_Nonce = (OBJ_id_pkix_OCSP, Clong(2))

const SN_id_pkix_OCSP_CrlID = "CrlID"

const LN_id_pkix_OCSP_CrlID = "OCSP CRL ID"

const NID_id_pkix_OCSP_CrlID = 367

const OBJ_id_pkix_OCSP_CrlID = (OBJ_id_pkix_OCSP, Clong(3))

const SN_id_pkix_OCSP_acceptableResponses = "acceptableResponses"

const LN_id_pkix_OCSP_acceptableResponses = "Acceptable OCSP Responses"

const NID_id_pkix_OCSP_acceptableResponses = 368

const OBJ_id_pkix_OCSP_acceptableResponses = (OBJ_id_pkix_OCSP, Clong(4))

const SN_id_pkix_OCSP_noCheck = "noCheck"

const LN_id_pkix_OCSP_noCheck = "OCSP No Check"

const NID_id_pkix_OCSP_noCheck = 369

const OBJ_id_pkix_OCSP_noCheck = (OBJ_id_pkix_OCSP, Clong(5))

const SN_id_pkix_OCSP_archiveCutoff = "archiveCutoff"

const LN_id_pkix_OCSP_archiveCutoff = "OCSP Archive Cutoff"

const NID_id_pkix_OCSP_archiveCutoff = 370

const OBJ_id_pkix_OCSP_archiveCutoff = (OBJ_id_pkix_OCSP, Clong(6))

const SN_id_pkix_OCSP_serviceLocator = "serviceLocator"

const LN_id_pkix_OCSP_serviceLocator = "OCSP Service Locator"

const NID_id_pkix_OCSP_serviceLocator = 371

const OBJ_id_pkix_OCSP_serviceLocator = (OBJ_id_pkix_OCSP, Clong(7))

const SN_id_pkix_OCSP_extendedStatus = "extendedStatus"

const LN_id_pkix_OCSP_extendedStatus = "Extended OCSP Status"

const NID_id_pkix_OCSP_extendedStatus = 372

const OBJ_id_pkix_OCSP_extendedStatus = (OBJ_id_pkix_OCSP, Clong(8))

const SN_id_pkix_OCSP_valid = "valid"

const NID_id_pkix_OCSP_valid = 373

const OBJ_id_pkix_OCSP_valid = (OBJ_id_pkix_OCSP, Clong(9))

const SN_id_pkix_OCSP_path = "path"

const NID_id_pkix_OCSP_path = 374

const OBJ_id_pkix_OCSP_path = (OBJ_id_pkix_OCSP, Clong(10))

const SN_id_pkix_OCSP_trustRoot = "trustRoot"

const LN_id_pkix_OCSP_trustRoot = "Trust Root"

const NID_id_pkix_OCSP_trustRoot = 375

const OBJ_id_pkix_OCSP_trustRoot = (OBJ_id_pkix_OCSP, Clong(11))

const SN_algorithm = "algorithm"

const LN_algorithm = "algorithm"

const NID_algorithm = 376

const OBJ_algorithm = (Clong(1), Clong(3), Clong(14), Clong(3), Clong(2))

const SN_md5WithRSA = "RSA-NP-MD5"

const LN_md5WithRSA = "md5WithRSA"

const NID_md5WithRSA = 104

const OBJ_md5WithRSA = (OBJ_algorithm, Clong(3))

const SN_des_ecb = "DES-ECB"

const LN_des_ecb = "des-ecb"

const NID_des_ecb = 29

const OBJ_des_ecb = (OBJ_algorithm, Clong(6))

const SN_des_cbc = "DES-CBC"

const LN_des_cbc = "des-cbc"

const NID_des_cbc = 31

const OBJ_des_cbc = (OBJ_algorithm, Clong(7))

const SN_des_ofb64 = "DES-OFB"

const LN_des_ofb64 = "des-ofb"

const NID_des_ofb64 = 45

const OBJ_des_ofb64 = (OBJ_algorithm, Clong(8))

const SN_des_cfb64 = "DES-CFB"

const LN_des_cfb64 = "des-cfb"

const NID_des_cfb64 = 30

const OBJ_des_cfb64 = (OBJ_algorithm, Clong(9))

const SN_rsaSignature = "rsaSignature"

const NID_rsaSignature = 377

const OBJ_rsaSignature = (OBJ_algorithm, Clong(11))

const SN_dsa_2 = "DSA-old"

const LN_dsa_2 = "dsaEncryption-old"

const NID_dsa_2 = 67

const OBJ_dsa_2 = (OBJ_algorithm, Clong(12))

const SN_dsaWithSHA = "DSA-SHA"

const LN_dsaWithSHA = "dsaWithSHA"

const NID_dsaWithSHA = 66

const OBJ_dsaWithSHA = (OBJ_algorithm, Clong(13))

const SN_shaWithRSAEncryption = "RSA-SHA"

const LN_shaWithRSAEncryption = "shaWithRSAEncryption"

const NID_shaWithRSAEncryption = 42

const OBJ_shaWithRSAEncryption = (OBJ_algorithm, Clong(15))

const SN_des_ede_ecb = "DES-EDE"

const LN_des_ede_ecb = "des-ede"

const NID_des_ede_ecb = 32

const OBJ_des_ede_ecb = (OBJ_algorithm, Clong(17))

const SN_des_ede3_ecb = "DES-EDE3"

const LN_des_ede3_ecb = "des-ede3"

const NID_des_ede3_ecb = 33

const SN_des_ede_cbc = "DES-EDE-CBC"

const LN_des_ede_cbc = "des-ede-cbc"

const NID_des_ede_cbc = 43

const SN_des_ede_cfb64 = "DES-EDE-CFB"

const LN_des_ede_cfb64 = "des-ede-cfb"

const NID_des_ede_cfb64 = 60

const SN_des_ede3_cfb64 = "DES-EDE3-CFB"

const LN_des_ede3_cfb64 = "des-ede3-cfb"

const NID_des_ede3_cfb64 = 61

const SN_des_ede_ofb64 = "DES-EDE-OFB"

const LN_des_ede_ofb64 = "des-ede-ofb"

const NID_des_ede_ofb64 = 62

const SN_des_ede3_ofb64 = "DES-EDE3-OFB"

const LN_des_ede3_ofb64 = "des-ede3-ofb"

const NID_des_ede3_ofb64 = 63

const SN_desx_cbc = "DESX-CBC"

const LN_desx_cbc = "desx-cbc"

const NID_desx_cbc = 80

const SN_sha = "SHA"

const LN_sha = "sha"

const NID_sha = 41

const OBJ_sha = (OBJ_algorithm, Clong(18))

const SN_sha1 = "SHA1"

const LN_sha1 = "sha1"

const NID_sha1 = 64

const OBJ_sha1 = (OBJ_algorithm, Clong(26))

const SN_dsaWithSHA1_2 = "DSA-SHA1-old"

const LN_dsaWithSHA1_2 = "dsaWithSHA1-old"

const NID_dsaWithSHA1_2 = 70

const OBJ_dsaWithSHA1_2 = (OBJ_algorithm, Clong(27))

const SN_sha1WithRSA = "RSA-SHA1-2"

const LN_sha1WithRSA = "sha1WithRSA"

const NID_sha1WithRSA = 115

const OBJ_sha1WithRSA = (OBJ_algorithm, Clong(29))

const SN_ripemd160 = "RIPEMD160"

const LN_ripemd160 = "ripemd160"

const NID_ripemd160 = 117

const OBJ_ripemd160 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(2), Clong(1))

const SN_ripemd160WithRSA = "RSA-RIPEMD160"

const LN_ripemd160WithRSA = "ripemd160WithRSA"

const NID_ripemd160WithRSA = 119

const OBJ_ripemd160WithRSA = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(1), Clong(2))

const SN_blake2bmac = "BLAKE2BMAC"

const LN_blake2bmac = "blake2bmac"

const NID_blake2bmac = 1201

const OBJ_blake2bmac = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(1722), Clong(12), Clong(2), Clong(1))

const SN_blake2smac = "BLAKE2SMAC"

const LN_blake2smac = "blake2smac"

const NID_blake2smac = 1202

const OBJ_blake2smac = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(1722), Clong(12), Clong(2), Clong(2))

const SN_blake2b512 = "BLAKE2b512"

const LN_blake2b512 = "blake2b512"

const NID_blake2b512 = 1056

const OBJ_blake2b512 = (OBJ_blake2bmac, Clong(16))

const SN_blake2s256 = "BLAKE2s256"

const LN_blake2s256 = "blake2s256"

const NID_blake2s256 = 1057

const OBJ_blake2s256 = (OBJ_blake2smac, Clong(8))

const SN_sxnet = "SXNetID"

const LN_sxnet = "Strong Extranet ID"

const NID_sxnet = 143

const OBJ_sxnet = (Clong(1), Clong(3), Clong(101), Clong(1), Clong(4), Clong(1))

const SN_X500 = "X500"

const LN_X500 = "directory services (X.500)"

const NID_X500 = 11

const OBJ_X500 = (Clong(2), Clong(5))

const SN_X509 = "X509"

const NID_X509 = 12

const OBJ_X509 = (OBJ_X500, Clong(4))

const SN_commonName = "CN"

const LN_commonName = "commonName"

const NID_commonName = 13

const OBJ_commonName = (OBJ_X509, Clong(3))

const SN_surname = "SN"

const LN_surname = "surname"

const NID_surname = 100

const OBJ_surname = (OBJ_X509, Clong(4))

const LN_serialNumber = "serialNumber"

const NID_serialNumber = 105

const OBJ_serialNumber = (OBJ_X509, Clong(5))

const SN_countryName = "C"

const LN_countryName = "countryName"

const NID_countryName = 14

const OBJ_countryName = (OBJ_X509, Clong(6))

const SN_localityName = "L"

const LN_localityName = "localityName"

const NID_localityName = 15

const OBJ_localityName = (OBJ_X509, Clong(7))

const SN_stateOrProvinceName = "ST"

const LN_stateOrProvinceName = "stateOrProvinceName"

const NID_stateOrProvinceName = 16

const OBJ_stateOrProvinceName = (OBJ_X509, Clong(8))

const SN_streetAddress = "street"

const LN_streetAddress = "streetAddress"

const NID_streetAddress = 660

const OBJ_streetAddress = (OBJ_X509, Clong(9))

const SN_organizationName = "O"

const LN_organizationName = "organizationName"

const NID_organizationName = 17

const OBJ_organizationName = (OBJ_X509, Clong(10))

const SN_organizationalUnitName = "OU"

const LN_organizationalUnitName = "organizationalUnitName"

const NID_organizationalUnitName = 18

const OBJ_organizationalUnitName = (OBJ_X509, Clong(11))

const SN_title = "title"

const LN_title = "title"

const NID_title = 106

const OBJ_title = (OBJ_X509, Clong(12))

const LN_description = "description"

const NID_description = 107

const OBJ_description = (OBJ_X509, Clong(13))

const LN_searchGuide = "searchGuide"

const NID_searchGuide = 859

const OBJ_searchGuide = (OBJ_X509, Clong(14))

const LN_businessCategory = "businessCategory"

const NID_businessCategory = 860

const OBJ_businessCategory = (OBJ_X509, Clong(15))

const LN_postalAddress = "postalAddress"

const NID_postalAddress = 861

const OBJ_postalAddress = (OBJ_X509, Clong(16))

const LN_postalCode = "postalCode"

const NID_postalCode = 661

const OBJ_postalCode = (OBJ_X509, Clong(17))

const LN_postOfficeBox = "postOfficeBox"

const NID_postOfficeBox = 862

const OBJ_postOfficeBox = (OBJ_X509, Clong(18))

const LN_physicalDeliveryOfficeName = "physicalDeliveryOfficeName"

const NID_physicalDeliveryOfficeName = 863

const OBJ_physicalDeliveryOfficeName = (OBJ_X509, Clong(19))

const LN_telephoneNumber = "telephoneNumber"

const NID_telephoneNumber = 864

const OBJ_telephoneNumber = (OBJ_X509, Clong(20))

const LN_telexNumber = "telexNumber"

const NID_telexNumber = 865

const OBJ_telexNumber = (OBJ_X509, Clong(21))

const LN_teletexTerminalIdentifier = "teletexTerminalIdentifier"

const NID_teletexTerminalIdentifier = 866

const OBJ_teletexTerminalIdentifier = (OBJ_X509, Clong(22))

const LN_facsimileTelephoneNumber = "facsimileTelephoneNumber"

const NID_facsimileTelephoneNumber = 867

const OBJ_facsimileTelephoneNumber = (OBJ_X509, Clong(23))

const LN_x121Address = "x121Address"

const NID_x121Address = 868

const OBJ_x121Address = (OBJ_X509, Clong(24))

const LN_internationaliSDNNumber = "internationaliSDNNumber"

const NID_internationaliSDNNumber = 869

const OBJ_internationaliSDNNumber = (OBJ_X509, Clong(25))

const LN_registeredAddress = "registeredAddress"

const NID_registeredAddress = 870

const OBJ_registeredAddress = (OBJ_X509, Clong(26))

const LN_destinationIndicator = "destinationIndicator"

const NID_destinationIndicator = 871

const OBJ_destinationIndicator = (OBJ_X509, Clong(27))

const LN_preferredDeliveryMethod = "preferredDeliveryMethod"

const NID_preferredDeliveryMethod = 872

const OBJ_preferredDeliveryMethod = (OBJ_X509, Clong(28))

const LN_presentationAddress = "presentationAddress"

const NID_presentationAddress = 873

const OBJ_presentationAddress = (OBJ_X509, Clong(29))

const LN_supportedApplicationContext = "supportedApplicationContext"

const NID_supportedApplicationContext = 874

const OBJ_supportedApplicationContext = (OBJ_X509, Clong(30))

const SN_member = "member"

const NID_member = 875

const OBJ_member = (OBJ_X509, Clong(31))

const SN_owner = "owner"

const NID_owner = 876

const OBJ_owner = (OBJ_X509, Clong(32))

const LN_roleOccupant = "roleOccupant"

const NID_roleOccupant = 877

const OBJ_roleOccupant = (OBJ_X509, Clong(33))

const SN_seeAlso = "seeAlso"

const NID_seeAlso = 878

const OBJ_seeAlso = (OBJ_X509, Clong(34))

const LN_userPassword = "userPassword"

const NID_userPassword = 879

const OBJ_userPassword = (OBJ_X509, Clong(35))

const LN_userCertificate = "userCertificate"

const NID_userCertificate = 880

const OBJ_userCertificate = (OBJ_X509, Clong(36))

const LN_cACertificate = "cACertificate"

const NID_cACertificate = 881

const OBJ_cACertificate = (OBJ_X509, Clong(37))

const LN_authorityRevocationList = "authorityRevocationList"

const NID_authorityRevocationList = 882

const OBJ_authorityRevocationList = (OBJ_X509, Clong(38))

const LN_certificateRevocationList = "certificateRevocationList"

const NID_certificateRevocationList = 883

const OBJ_certificateRevocationList = (OBJ_X509, Clong(39))

const LN_crossCertificatePair = "crossCertificatePair"

const NID_crossCertificatePair = 884

const OBJ_crossCertificatePair = (OBJ_X509, Clong(40))

const SN_name = "name"

const LN_name = "name"

const NID_name = 173

const OBJ_name = (OBJ_X509, Clong(41))

const SN_givenName = "GN"

const LN_givenName = "givenName"

const NID_givenName = 99

const OBJ_givenName = (OBJ_X509, Clong(42))

const SN_initials = "initials"

const LN_initials = "initials"

const NID_initials = 101

const OBJ_initials = (OBJ_X509, Clong(43))

const LN_generationQualifier = "generationQualifier"

const NID_generationQualifier = 509

const OBJ_generationQualifier = (OBJ_X509, Clong(44))

const LN_x500UniqueIdentifier = "x500UniqueIdentifier"

const NID_x500UniqueIdentifier = 503

const OBJ_x500UniqueIdentifier = (OBJ_X509, Clong(45))

const SN_dnQualifier = "dnQualifier"

const LN_dnQualifier = "dnQualifier"

const NID_dnQualifier = 174

const OBJ_dnQualifier = (OBJ_X509, Clong(46))

const LN_enhancedSearchGuide = "enhancedSearchGuide"

const NID_enhancedSearchGuide = 885

const OBJ_enhancedSearchGuide = (OBJ_X509, Clong(47))

const LN_protocolInformation = "protocolInformation"

const NID_protocolInformation = 886

const OBJ_protocolInformation = (OBJ_X509, Clong(48))

const LN_distinguishedName = "distinguishedName"

const NID_distinguishedName = 887

const OBJ_distinguishedName = (OBJ_X509, Clong(49))

const LN_uniqueMember = "uniqueMember"

const NID_uniqueMember = 888

const OBJ_uniqueMember = (OBJ_X509, Clong(50))

const LN_houseIdentifier = "houseIdentifier"

const NID_houseIdentifier = 889

const OBJ_houseIdentifier = (OBJ_X509, Clong(51))

const LN_supportedAlgorithms = "supportedAlgorithms"

const NID_supportedAlgorithms = 890

const OBJ_supportedAlgorithms = (OBJ_X509, Clong(52))

const LN_deltaRevocationList = "deltaRevocationList"

const NID_deltaRevocationList = 891

const OBJ_deltaRevocationList = (OBJ_X509, Clong(53))

const SN_dmdName = "dmdName"

const NID_dmdName = 892

const OBJ_dmdName = (OBJ_X509, Clong(54))

const LN_pseudonym = "pseudonym"

const NID_pseudonym = 510

const OBJ_pseudonym = (OBJ_X509, Clong(65))

const SN_role = "role"

const LN_role = "role"

const NID_role = 400

const OBJ_role = (OBJ_X509, Clong(72))

const LN_organizationIdentifier = "organizationIdentifier"

const NID_organizationIdentifier = 1089

const OBJ_organizationIdentifier = (OBJ_X509, Clong(97))

const SN_countryCode3c = "c3"

const LN_countryCode3c = "countryCode3c"

const NID_countryCode3c = 1090

const OBJ_countryCode3c = (OBJ_X509, Clong(98))

const SN_countryCode3n = "n3"

const LN_countryCode3n = "countryCode3n"

const NID_countryCode3n = 1091

const OBJ_countryCode3n = (OBJ_X509, Clong(99))

const LN_dnsName = "dnsName"

const NID_dnsName = 1092

const OBJ_dnsName = (OBJ_X509, Clong(100))

const SN_X500algorithms = "X500algorithms"

const LN_X500algorithms = "directory services - algorithms"

const NID_X500algorithms = 378

const OBJ_X500algorithms = (OBJ_X500, Clong(8))

const SN_rsa = "RSA"

const LN_rsa = "rsa"

const NID_rsa = 19

const OBJ_rsa = (OBJ_X500algorithms, Clong(1), Clong(1))

const SN_mdc2WithRSA = "RSA-MDC2"

const LN_mdc2WithRSA = "mdc2WithRSA"

const NID_mdc2WithRSA = 96

const OBJ_mdc2WithRSA = (OBJ_X500algorithms, Clong(3), Clong(100))

const SN_mdc2 = "MDC2"

const LN_mdc2 = "mdc2"

const NID_mdc2 = 95

const OBJ_mdc2 = (OBJ_X500algorithms, Clong(3), Clong(101))

const SN_id_ce = "id-ce"

const NID_id_ce = 81

const OBJ_id_ce = (OBJ_X500, Clong(29))

const SN_subject_directory_attributes = "subjectDirectoryAttributes"

const LN_subject_directory_attributes = "X509v3 Subject Directory Attributes"

const NID_subject_directory_attributes = 769

const OBJ_subject_directory_attributes = (OBJ_id_ce, Clong(9))

const SN_subject_key_identifier = "subjectKeyIdentifier"

const LN_subject_key_identifier = "X509v3 Subject Key Identifier"

const NID_subject_key_identifier = 82

const OBJ_subject_key_identifier = (OBJ_id_ce, Clong(14))

const SN_key_usage = "keyUsage"

const LN_key_usage = "X509v3 Key Usage"

const NID_key_usage = 83

const OBJ_key_usage = (OBJ_id_ce, Clong(15))

const SN_private_key_usage_period = "privateKeyUsagePeriod"

const LN_private_key_usage_period = "X509v3 Private Key Usage Period"

const NID_private_key_usage_period = 84

const OBJ_private_key_usage_period = (OBJ_id_ce, Clong(16))

const SN_subject_alt_name = "subjectAltName"

const LN_subject_alt_name = "X509v3 Subject Alternative Name"

const NID_subject_alt_name = 85

const OBJ_subject_alt_name = (OBJ_id_ce, Clong(17))

const SN_issuer_alt_name = "issuerAltName"

const LN_issuer_alt_name = "X509v3 Issuer Alternative Name"

const NID_issuer_alt_name = 86

const OBJ_issuer_alt_name = (OBJ_id_ce, Clong(18))

const SN_basic_constraints = "basicConstraints"

const LN_basic_constraints = "X509v3 Basic Constraints"

const NID_basic_constraints = 87

const OBJ_basic_constraints = (OBJ_id_ce, Clong(19))

const SN_crl_number = "crlNumber"

const LN_crl_number = "X509v3 CRL Number"

const NID_crl_number = 88

const OBJ_crl_number = (OBJ_id_ce, Clong(20))

const SN_crl_reason = "CRLReason"

const LN_crl_reason = "X509v3 CRL Reason Code"

const NID_crl_reason = 141

const OBJ_crl_reason = (OBJ_id_ce, Clong(21))

const SN_invalidity_date = "invalidityDate"

const LN_invalidity_date = "Invalidity Date"

const NID_invalidity_date = 142

const OBJ_invalidity_date = (OBJ_id_ce, Clong(24))

const SN_delta_crl = "deltaCRL"

const LN_delta_crl = "X509v3 Delta CRL Indicator"

const NID_delta_crl = 140

const OBJ_delta_crl = (OBJ_id_ce, Clong(27))

const SN_issuing_distribution_point = "issuingDistributionPoint"

const LN_issuing_distribution_point = "X509v3 Issuing Distribution Point"

const NID_issuing_distribution_point = 770

const OBJ_issuing_distribution_point = (OBJ_id_ce, Clong(28))

const SN_certificate_issuer = "certificateIssuer"

const LN_certificate_issuer = "X509v3 Certificate Issuer"

const NID_certificate_issuer = 771

const OBJ_certificate_issuer = (OBJ_id_ce, Clong(29))

const SN_name_constraints = "nameConstraints"

const LN_name_constraints = "X509v3 Name Constraints"

const NID_name_constraints = 666

const OBJ_name_constraints = (OBJ_id_ce, Clong(30))

const SN_crl_distribution_points = "crlDistributionPoints"

const LN_crl_distribution_points = "X509v3 CRL Distribution Points"

const NID_crl_distribution_points = 103

const OBJ_crl_distribution_points = (OBJ_id_ce, Clong(31))

const SN_certificate_policies = "certificatePolicies"

const LN_certificate_policies = "X509v3 Certificate Policies"

const NID_certificate_policies = 89

const OBJ_certificate_policies = (OBJ_id_ce, Clong(32))

const SN_any_policy = "anyPolicy"

const LN_any_policy = "X509v3 Any Policy"

const NID_any_policy = 746

const OBJ_any_policy = (OBJ_certificate_policies, Clong(0))

const SN_policy_mappings = "policyMappings"

const LN_policy_mappings = "X509v3 Policy Mappings"

const NID_policy_mappings = 747

const OBJ_policy_mappings = (OBJ_id_ce, Clong(33))

const SN_authority_key_identifier = "authorityKeyIdentifier"

const LN_authority_key_identifier = "X509v3 Authority Key Identifier"

const NID_authority_key_identifier = 90

const OBJ_authority_key_identifier = (OBJ_id_ce, Clong(35))

const SN_policy_constraints = "policyConstraints"

const LN_policy_constraints = "X509v3 Policy Constraints"

const NID_policy_constraints = 401

const OBJ_policy_constraints = (OBJ_id_ce, Clong(36))

const SN_ext_key_usage = "extendedKeyUsage"

const LN_ext_key_usage = "X509v3 Extended Key Usage"

const NID_ext_key_usage = 126

const OBJ_ext_key_usage = (OBJ_id_ce, Clong(37))

const SN_freshest_crl = "freshestCRL"

const LN_freshest_crl = "X509v3 Freshest CRL"

const NID_freshest_crl = 857

const OBJ_freshest_crl = (OBJ_id_ce, Clong(46))

const SN_inhibit_any_policy = "inhibitAnyPolicy"

const LN_inhibit_any_policy = "X509v3 Inhibit Any Policy"

const NID_inhibit_any_policy = 748

const OBJ_inhibit_any_policy = (OBJ_id_ce, Clong(54))

const SN_target_information = "targetInformation"

const LN_target_information = "X509v3 AC Targeting"

const NID_target_information = 402

const OBJ_target_information = (OBJ_id_ce, Clong(55))

const SN_no_rev_avail = "noRevAvail"

const LN_no_rev_avail = "X509v3 No Revocation Available"

const NID_no_rev_avail = 403

const OBJ_no_rev_avail = (OBJ_id_ce, Clong(56))

const SN_anyExtendedKeyUsage = "anyExtendedKeyUsage"

const LN_anyExtendedKeyUsage = "Any Extended Key Usage"

const NID_anyExtendedKeyUsage = 910

const OBJ_anyExtendedKeyUsage = (OBJ_ext_key_usage, Clong(0))

const SN_netscape = "Netscape"

const LN_netscape = "Netscape Communications Corp."

const NID_netscape = 57

const OBJ_netscape = (Clong(2), Clong(16), Clong(840), Clong(1), Clong(113730))

const SN_netscape_cert_extension = "nsCertExt"

const LN_netscape_cert_extension = "Netscape Certificate Extension"

const NID_netscape_cert_extension = 58

const OBJ_netscape_cert_extension = (OBJ_netscape, Clong(1))

const SN_netscape_data_type = "nsDataType"

const LN_netscape_data_type = "Netscape Data Type"

const NID_netscape_data_type = 59

const OBJ_netscape_data_type = (OBJ_netscape, Clong(2))

const SN_netscape_cert_type = "nsCertType"

const LN_netscape_cert_type = "Netscape Cert Type"

const NID_netscape_cert_type = 71

const OBJ_netscape_cert_type = (OBJ_netscape_cert_extension, Clong(1))

const SN_netscape_base_url = "nsBaseUrl"

const LN_netscape_base_url = "Netscape Base Url"

const NID_netscape_base_url = 72

const OBJ_netscape_base_url = (OBJ_netscape_cert_extension, Clong(2))

const SN_netscape_revocation_url = "nsRevocationUrl"

const LN_netscape_revocation_url = "Netscape Revocation Url"

const NID_netscape_revocation_url = 73

const OBJ_netscape_revocation_url = (OBJ_netscape_cert_extension, Clong(3))

const SN_netscape_ca_revocation_url = "nsCaRevocationUrl"

const LN_netscape_ca_revocation_url = "Netscape CA Revocation Url"

const NID_netscape_ca_revocation_url = 74

const OBJ_netscape_ca_revocation_url = (OBJ_netscape_cert_extension, Clong(4))

const SN_netscape_renewal_url = "nsRenewalUrl"

const LN_netscape_renewal_url = "Netscape Renewal Url"

const NID_netscape_renewal_url = 75

const OBJ_netscape_renewal_url = (OBJ_netscape_cert_extension, Clong(7))

const SN_netscape_ca_policy_url = "nsCaPolicyUrl"

const LN_netscape_ca_policy_url = "Netscape CA Policy Url"

const NID_netscape_ca_policy_url = 76

const OBJ_netscape_ca_policy_url = (OBJ_netscape_cert_extension, Clong(8))

const SN_netscape_ssl_server_name = "nsSslServerName"

const LN_netscape_ssl_server_name = "Netscape SSL Server Name"

const NID_netscape_ssl_server_name = 77

const OBJ_netscape_ssl_server_name = (OBJ_netscape_cert_extension, Clong(12))

const SN_netscape_comment = "nsComment"

const LN_netscape_comment = "Netscape Comment"

const NID_netscape_comment = 78

const OBJ_netscape_comment = (OBJ_netscape_cert_extension, Clong(13))

const SN_netscape_cert_sequence = "nsCertSequence"

const LN_netscape_cert_sequence = "Netscape Certificate Sequence"

const NID_netscape_cert_sequence = 79

const OBJ_netscape_cert_sequence = (OBJ_netscape_data_type, Clong(5))

const SN_ns_sgc = "nsSGC"

const LN_ns_sgc = "Netscape Server Gated Crypto"

const NID_ns_sgc = 139

const OBJ_ns_sgc = (OBJ_netscape, Clong(4), Clong(1))

const SN_org = "ORG"

const LN_org = "org"

const NID_org = 379

const OBJ_org = (OBJ_iso, Clong(3))

const SN_dod = "DOD"

const LN_dod = "dod"

const NID_dod = 380

const OBJ_dod = (OBJ_org, Clong(6))

const SN_iana = "IANA"

const LN_iana = "iana"

const NID_iana = 381

const OBJ_iana = (OBJ_dod, Clong(1))

const OBJ_internet = OBJ_iana

const SN_Directory = "directory"

const LN_Directory = "Directory"

const NID_Directory = 382

const OBJ_Directory = (OBJ_internet, Clong(1))

const SN_Management = "mgmt"

const LN_Management = "Management"

const NID_Management = 383

const OBJ_Management = (OBJ_internet, Clong(2))

const SN_Experimental = "experimental"

const LN_Experimental = "Experimental"

const NID_Experimental = 384

const OBJ_Experimental = (OBJ_internet, Clong(3))

const SN_Private = "private"

const LN_Private = "Private"

const NID_Private = 385

const OBJ_Private = (OBJ_internet, Clong(4))

const SN_Security = "security"

const LN_Security = "Security"

const NID_Security = 386

const OBJ_Security = (OBJ_internet, Clong(5))

const SN_SNMPv2 = "snmpv2"

const LN_SNMPv2 = "SNMPv2"

const NID_SNMPv2 = 387

const OBJ_SNMPv2 = (OBJ_internet, Clong(6))

const LN_Mail = "Mail"

const NID_Mail = 388

const OBJ_Mail = (OBJ_internet, Clong(7))

const SN_Enterprises = "enterprises"

const LN_Enterprises = "Enterprises"

const NID_Enterprises = 389

const OBJ_Enterprises = (OBJ_Private, Clong(1))

const SN_dcObject = "dcobject"

const LN_dcObject = "dcObject"

const NID_dcObject = 390

const OBJ_dcObject = (OBJ_Enterprises, Clong(1466), Clong(344))

const SN_mime_mhs = "mime-mhs"

const LN_mime_mhs = "MIME MHS"

const NID_mime_mhs = 504

const OBJ_mime_mhs = (OBJ_Mail, Clong(1))

const SN_mime_mhs_headings = "mime-mhs-headings"

const LN_mime_mhs_headings = "mime-mhs-headings"

const NID_mime_mhs_headings = 505

const OBJ_mime_mhs_headings = (OBJ_mime_mhs, Clong(1))

const SN_mime_mhs_bodies = "mime-mhs-bodies"

const LN_mime_mhs_bodies = "mime-mhs-bodies"

const NID_mime_mhs_bodies = 506

const OBJ_mime_mhs_bodies = (OBJ_mime_mhs, Clong(2))

const SN_id_hex_partial_message = "id-hex-partial-message"

const LN_id_hex_partial_message = "id-hex-partial-message"

const NID_id_hex_partial_message = 507

const OBJ_id_hex_partial_message = (OBJ_mime_mhs_headings, Clong(1))

const SN_id_hex_multipart_message = "id-hex-multipart-message"

const LN_id_hex_multipart_message = "id-hex-multipart-message"

const NID_id_hex_multipart_message = 508

const OBJ_id_hex_multipart_message = (OBJ_mime_mhs_headings, Clong(2))

const SN_zlib_compression = "ZLIB"

const LN_zlib_compression = "zlib compression"

const NID_zlib_compression = 125

const OBJ_zlib_compression = (OBJ_id_smime_alg, Clong(8))

const OBJ_csor = (Clong(2), Clong(16), Clong(840), Clong(1), Clong(101), Clong(3))

const OBJ_nistAlgorithms = (OBJ_csor, Clong(4))

const OBJ_aes = (OBJ_nistAlgorithms, Clong(1))

const SN_aes_128_ecb = "AES-128-ECB"

const LN_aes_128_ecb = "aes-128-ecb"

const NID_aes_128_ecb = 418

const OBJ_aes_128_ecb = (OBJ_aes, Clong(1))

const SN_aes_128_cbc = "AES-128-CBC"

const LN_aes_128_cbc = "aes-128-cbc"

const NID_aes_128_cbc = 419

const OBJ_aes_128_cbc = (OBJ_aes, Clong(2))

const SN_aes_128_ofb128 = "AES-128-OFB"

const LN_aes_128_ofb128 = "aes-128-ofb"

const NID_aes_128_ofb128 = 420

const OBJ_aes_128_ofb128 = (OBJ_aes, Clong(3))

const SN_aes_128_cfb128 = "AES-128-CFB"

const LN_aes_128_cfb128 = "aes-128-cfb"

const NID_aes_128_cfb128 = 421

const OBJ_aes_128_cfb128 = (OBJ_aes, Clong(4))

const SN_id_aes128_wrap = "id-aes128-wrap"

const NID_id_aes128_wrap = 788

const OBJ_id_aes128_wrap = (OBJ_aes, Clong(5))

const SN_aes_128_gcm = "id-aes128-GCM"

const LN_aes_128_gcm = "aes-128-gcm"

const NID_aes_128_gcm = 895

const OBJ_aes_128_gcm = (OBJ_aes, Clong(6))

const SN_aes_128_ccm = "id-aes128-CCM"

const LN_aes_128_ccm = "aes-128-ccm"

const NID_aes_128_ccm = 896

const OBJ_aes_128_ccm = (OBJ_aes, Clong(7))

const SN_id_aes128_wrap_pad = "id-aes128-wrap-pad"

const NID_id_aes128_wrap_pad = 897

const OBJ_id_aes128_wrap_pad = (OBJ_aes, Clong(8))

const SN_aes_192_ecb = "AES-192-ECB"

const LN_aes_192_ecb = "aes-192-ecb"

const NID_aes_192_ecb = 422

const OBJ_aes_192_ecb = (OBJ_aes, Clong(21))

const SN_aes_192_cbc = "AES-192-CBC"

const LN_aes_192_cbc = "aes-192-cbc"

const NID_aes_192_cbc = 423

const OBJ_aes_192_cbc = (OBJ_aes, Clong(22))

const SN_aes_192_ofb128 = "AES-192-OFB"

const LN_aes_192_ofb128 = "aes-192-ofb"

const NID_aes_192_ofb128 = 424

const OBJ_aes_192_ofb128 = (OBJ_aes, Clong(23))

const SN_aes_192_cfb128 = "AES-192-CFB"

const LN_aes_192_cfb128 = "aes-192-cfb"

const NID_aes_192_cfb128 = 425

const OBJ_aes_192_cfb128 = (OBJ_aes, Clong(24))

const SN_id_aes192_wrap = "id-aes192-wrap"

const NID_id_aes192_wrap = 789

const OBJ_id_aes192_wrap = (OBJ_aes, Clong(25))

const SN_aes_192_gcm = "id-aes192-GCM"

const LN_aes_192_gcm = "aes-192-gcm"

const NID_aes_192_gcm = 898

const OBJ_aes_192_gcm = (OBJ_aes, Clong(26))

const SN_aes_192_ccm = "id-aes192-CCM"

const LN_aes_192_ccm = "aes-192-ccm"

const NID_aes_192_ccm = 899

const OBJ_aes_192_ccm = (OBJ_aes, Clong(27))

const SN_id_aes192_wrap_pad = "id-aes192-wrap-pad"

const NID_id_aes192_wrap_pad = 900

const OBJ_id_aes192_wrap_pad = (OBJ_aes, Clong(28))

const SN_aes_256_ecb = "AES-256-ECB"

const LN_aes_256_ecb = "aes-256-ecb"

const NID_aes_256_ecb = 426

const OBJ_aes_256_ecb = (OBJ_aes, Clong(41))

const SN_aes_256_cbc = "AES-256-CBC"

const LN_aes_256_cbc = "aes-256-cbc"

const NID_aes_256_cbc = 427

const OBJ_aes_256_cbc = (OBJ_aes, Clong(42))

const SN_aes_256_ofb128 = "AES-256-OFB"

const LN_aes_256_ofb128 = "aes-256-ofb"

const NID_aes_256_ofb128 = 428

const OBJ_aes_256_ofb128 = (OBJ_aes, Clong(43))

const SN_aes_256_cfb128 = "AES-256-CFB"

const LN_aes_256_cfb128 = "aes-256-cfb"

const NID_aes_256_cfb128 = 429

const OBJ_aes_256_cfb128 = (OBJ_aes, Clong(44))

const SN_id_aes256_wrap = "id-aes256-wrap"

const NID_id_aes256_wrap = 790

const OBJ_id_aes256_wrap = (OBJ_aes, Clong(45))

const SN_aes_256_gcm = "id-aes256-GCM"

const LN_aes_256_gcm = "aes-256-gcm"

const NID_aes_256_gcm = 901

const OBJ_aes_256_gcm = (OBJ_aes, Clong(46))

const SN_aes_256_ccm = "id-aes256-CCM"

const LN_aes_256_ccm = "aes-256-ccm"

const NID_aes_256_ccm = 902

const OBJ_aes_256_ccm = (OBJ_aes, Clong(47))

const SN_id_aes256_wrap_pad = "id-aes256-wrap-pad"

const NID_id_aes256_wrap_pad = 903

const OBJ_id_aes256_wrap_pad = (OBJ_aes, Clong(48))

const SN_aes_128_xts = "AES-128-XTS"

const LN_aes_128_xts = "aes-128-xts"

const NID_aes_128_xts = 913

const OBJ_aes_128_xts = (OBJ_ieee_siswg, Clong(0), Clong(1), Clong(1))

const SN_aes_256_xts = "AES-256-XTS"

const LN_aes_256_xts = "aes-256-xts"

const NID_aes_256_xts = 914

const OBJ_aes_256_xts = (OBJ_ieee_siswg, Clong(0), Clong(1), Clong(2))

const SN_aes_128_cfb1 = "AES-128-CFB1"

const LN_aes_128_cfb1 = "aes-128-cfb1"

const NID_aes_128_cfb1 = 650

const SN_aes_192_cfb1 = "AES-192-CFB1"

const LN_aes_192_cfb1 = "aes-192-cfb1"

const NID_aes_192_cfb1 = 651

const SN_aes_256_cfb1 = "AES-256-CFB1"

const LN_aes_256_cfb1 = "aes-256-cfb1"

const NID_aes_256_cfb1 = 652

const SN_aes_128_cfb8 = "AES-128-CFB8"

const LN_aes_128_cfb8 = "aes-128-cfb8"

const NID_aes_128_cfb8 = 653

const SN_aes_192_cfb8 = "AES-192-CFB8"

const LN_aes_192_cfb8 = "aes-192-cfb8"

const NID_aes_192_cfb8 = 654

const SN_aes_256_cfb8 = "AES-256-CFB8"

const LN_aes_256_cfb8 = "aes-256-cfb8"

const NID_aes_256_cfb8 = 655

const SN_aes_128_ctr = "AES-128-CTR"

const LN_aes_128_ctr = "aes-128-ctr"

const NID_aes_128_ctr = 904

const SN_aes_192_ctr = "AES-192-CTR"

const LN_aes_192_ctr = "aes-192-ctr"

const NID_aes_192_ctr = 905

const SN_aes_256_ctr = "AES-256-CTR"

const LN_aes_256_ctr = "aes-256-ctr"

const NID_aes_256_ctr = 906

const SN_aes_128_ocb = "AES-128-OCB"

const LN_aes_128_ocb = "aes-128-ocb"

const NID_aes_128_ocb = 958

const SN_aes_192_ocb = "AES-192-OCB"

const LN_aes_192_ocb = "aes-192-ocb"

const NID_aes_192_ocb = 959

const SN_aes_256_ocb = "AES-256-OCB"

const LN_aes_256_ocb = "aes-256-ocb"

const NID_aes_256_ocb = 960

const SN_des_cfb1 = "DES-CFB1"

const LN_des_cfb1 = "des-cfb1"

const NID_des_cfb1 = 656

const SN_des_cfb8 = "DES-CFB8"

const LN_des_cfb8 = "des-cfb8"

const NID_des_cfb8 = 657

const SN_des_ede3_cfb1 = "DES-EDE3-CFB1"

const LN_des_ede3_cfb1 = "des-ede3-cfb1"

const NID_des_ede3_cfb1 = 658

const SN_des_ede3_cfb8 = "DES-EDE3-CFB8"

const LN_des_ede3_cfb8 = "des-ede3-cfb8"

const NID_des_ede3_cfb8 = 659

const OBJ_nist_hashalgs = (OBJ_nistAlgorithms, Clong(2))

const SN_sha256 = "SHA256"

const LN_sha256 = "sha256"

const NID_sha256 = 672

const OBJ_sha256 = (OBJ_nist_hashalgs, Clong(1))

const SN_sha384 = "SHA384"

const LN_sha384 = "sha384"

const NID_sha384 = 673

const OBJ_sha384 = (OBJ_nist_hashalgs, Clong(2))

const SN_sha512 = "SHA512"

const LN_sha512 = "sha512"

const NID_sha512 = 674

const OBJ_sha512 = (OBJ_nist_hashalgs, Clong(3))

const SN_sha224 = "SHA224"

const LN_sha224 = "sha224"

const NID_sha224 = 675

const OBJ_sha224 = (OBJ_nist_hashalgs, Clong(4))

const SN_sha512_224 = "SHA512-224"

const LN_sha512_224 = "sha512-224"

const NID_sha512_224 = 1094

const OBJ_sha512_224 = (OBJ_nist_hashalgs, Clong(5))

const SN_sha512_256 = "SHA512-256"

const LN_sha512_256 = "sha512-256"

const NID_sha512_256 = 1095

const OBJ_sha512_256 = (OBJ_nist_hashalgs, Clong(6))

const SN_sha3_224 = "SHA3-224"

const LN_sha3_224 = "sha3-224"

const NID_sha3_224 = 1096

const OBJ_sha3_224 = (OBJ_nist_hashalgs, Clong(7))

const SN_sha3_256 = "SHA3-256"

const LN_sha3_256 = "sha3-256"

const NID_sha3_256 = 1097

const OBJ_sha3_256 = (OBJ_nist_hashalgs, Clong(8))

const SN_sha3_384 = "SHA3-384"

const LN_sha3_384 = "sha3-384"

const NID_sha3_384 = 1098

const OBJ_sha3_384 = (OBJ_nist_hashalgs, Clong(9))

const SN_sha3_512 = "SHA3-512"

const LN_sha3_512 = "sha3-512"

const NID_sha3_512 = 1099

const OBJ_sha3_512 = (OBJ_nist_hashalgs, Clong(10))

const SN_shake128 = "SHAKE128"

const LN_shake128 = "shake128"

const NID_shake128 = 1100

const OBJ_shake128 = (OBJ_nist_hashalgs, Clong(11))

const SN_shake256 = "SHAKE256"

const LN_shake256 = "shake256"

const NID_shake256 = 1101

const OBJ_shake256 = (OBJ_nist_hashalgs, Clong(12))

const SN_hmac_sha3_224 = "id-hmacWithSHA3-224"

const LN_hmac_sha3_224 = "hmac-sha3-224"

const NID_hmac_sha3_224 = 1102

const OBJ_hmac_sha3_224 = (OBJ_nist_hashalgs, Clong(13))

const SN_hmac_sha3_256 = "id-hmacWithSHA3-256"

const LN_hmac_sha3_256 = "hmac-sha3-256"

const NID_hmac_sha3_256 = 1103

const OBJ_hmac_sha3_256 = (OBJ_nist_hashalgs, Clong(14))

const SN_hmac_sha3_384 = "id-hmacWithSHA3-384"

const LN_hmac_sha3_384 = "hmac-sha3-384"

const NID_hmac_sha3_384 = 1104

const OBJ_hmac_sha3_384 = (OBJ_nist_hashalgs, Clong(15))

const SN_hmac_sha3_512 = "id-hmacWithSHA3-512"

const LN_hmac_sha3_512 = "hmac-sha3-512"

const NID_hmac_sha3_512 = 1105

const OBJ_hmac_sha3_512 = (OBJ_nist_hashalgs, Clong(16))

const SN_kmac128 = "KMAC128"

const LN_kmac128 = "kmac128"

const NID_kmac128 = 1196

const OBJ_kmac128 = (OBJ_nist_hashalgs, Clong(19))

const SN_kmac256 = "KMAC256"

const LN_kmac256 = "kmac256"

const NID_kmac256 = 1197

const OBJ_kmac256 = (OBJ_nist_hashalgs, Clong(20))

const OBJ_dsa_with_sha2 = (OBJ_nistAlgorithms, Clong(3))

const SN_dsa_with_SHA224 = "dsa_with_SHA224"

const NID_dsa_with_SHA224 = 802

const OBJ_dsa_with_SHA224 = (OBJ_dsa_with_sha2, Clong(1))

const SN_dsa_with_SHA256 = "dsa_with_SHA256"

const NID_dsa_with_SHA256 = 803

const OBJ_dsa_with_SHA256 = (OBJ_dsa_with_sha2, Clong(2))

const OBJ_sigAlgs = (OBJ_nistAlgorithms, Clong(3))

const SN_dsa_with_SHA384 = "id-dsa-with-sha384"

const LN_dsa_with_SHA384 = "dsa_with_SHA384"

const NID_dsa_with_SHA384 = 1106

const OBJ_dsa_with_SHA384 = (OBJ_sigAlgs, Clong(3))

const SN_dsa_with_SHA512 = "id-dsa-with-sha512"

const LN_dsa_with_SHA512 = "dsa_with_SHA512"

const NID_dsa_with_SHA512 = 1107

const OBJ_dsa_with_SHA512 = (OBJ_sigAlgs, Clong(4))

const SN_dsa_with_SHA3_224 = "id-dsa-with-sha3-224"

const LN_dsa_with_SHA3_224 = "dsa_with_SHA3-224"

const NID_dsa_with_SHA3_224 = 1108

const OBJ_dsa_with_SHA3_224 = (OBJ_sigAlgs, Clong(5))

const SN_dsa_with_SHA3_256 = "id-dsa-with-sha3-256"

const LN_dsa_with_SHA3_256 = "dsa_with_SHA3-256"

const NID_dsa_with_SHA3_256 = 1109

const OBJ_dsa_with_SHA3_256 = (OBJ_sigAlgs, Clong(6))

const SN_dsa_with_SHA3_384 = "id-dsa-with-sha3-384"

const LN_dsa_with_SHA3_384 = "dsa_with_SHA3-384"

const NID_dsa_with_SHA3_384 = 1110

const OBJ_dsa_with_SHA3_384 = (OBJ_sigAlgs, Clong(7))

const SN_dsa_with_SHA3_512 = "id-dsa-with-sha3-512"

const LN_dsa_with_SHA3_512 = "dsa_with_SHA3-512"

const NID_dsa_with_SHA3_512 = 1111

const OBJ_dsa_with_SHA3_512 = (OBJ_sigAlgs, Clong(8))

const SN_ecdsa_with_SHA3_224 = "id-ecdsa-with-sha3-224"

const LN_ecdsa_with_SHA3_224 = "ecdsa_with_SHA3-224"

const NID_ecdsa_with_SHA3_224 = 1112

const OBJ_ecdsa_with_SHA3_224 = (OBJ_sigAlgs, Clong(9))

const SN_ecdsa_with_SHA3_256 = "id-ecdsa-with-sha3-256"

const LN_ecdsa_with_SHA3_256 = "ecdsa_with_SHA3-256"

const NID_ecdsa_with_SHA3_256 = 1113

const OBJ_ecdsa_with_SHA3_256 = (OBJ_sigAlgs, Clong(10))

const SN_ecdsa_with_SHA3_384 = "id-ecdsa-with-sha3-384"

const LN_ecdsa_with_SHA3_384 = "ecdsa_with_SHA3-384"

const NID_ecdsa_with_SHA3_384 = 1114

const OBJ_ecdsa_with_SHA3_384 = (OBJ_sigAlgs, Clong(11))

const SN_ecdsa_with_SHA3_512 = "id-ecdsa-with-sha3-512"

const LN_ecdsa_with_SHA3_512 = "ecdsa_with_SHA3-512"

const NID_ecdsa_with_SHA3_512 = 1115

const OBJ_ecdsa_with_SHA3_512 = (OBJ_sigAlgs, Clong(12))

const SN_RSA_SHA3_224 = "id-rsassa-pkcs1-v1_5-with-sha3-224"

const LN_RSA_SHA3_224 = "RSA-SHA3-224"

const NID_RSA_SHA3_224 = 1116

const OBJ_RSA_SHA3_224 = (OBJ_sigAlgs, Clong(13))

const SN_RSA_SHA3_256 = "id-rsassa-pkcs1-v1_5-with-sha3-256"

const LN_RSA_SHA3_256 = "RSA-SHA3-256"

const NID_RSA_SHA3_256 = 1117

const OBJ_RSA_SHA3_256 = (OBJ_sigAlgs, Clong(14))

const SN_RSA_SHA3_384 = "id-rsassa-pkcs1-v1_5-with-sha3-384"

const LN_RSA_SHA3_384 = "RSA-SHA3-384"

const NID_RSA_SHA3_384 = 1118

const OBJ_RSA_SHA3_384 = (OBJ_sigAlgs, Clong(15))

const SN_RSA_SHA3_512 = "id-rsassa-pkcs1-v1_5-with-sha3-512"

const LN_RSA_SHA3_512 = "RSA-SHA3-512"

const NID_RSA_SHA3_512 = 1119

const OBJ_RSA_SHA3_512 = (OBJ_sigAlgs, Clong(16))

const SN_hold_instruction_code = "holdInstructionCode"

const LN_hold_instruction_code = "Hold Instruction Code"

const NID_hold_instruction_code = 430

const OBJ_hold_instruction_code = (OBJ_id_ce, Clong(23))

const OBJ_holdInstruction = (OBJ_X9_57, Clong(2))

const SN_hold_instruction_none = "holdInstructionNone"

const LN_hold_instruction_none = "Hold Instruction None"

const NID_hold_instruction_none = 431

const OBJ_hold_instruction_none = (OBJ_holdInstruction, Clong(1))

const SN_hold_instruction_call_issuer = "holdInstructionCallIssuer"

const LN_hold_instruction_call_issuer = "Hold Instruction Call Issuer"

const NID_hold_instruction_call_issuer = 432

const OBJ_hold_instruction_call_issuer = (OBJ_holdInstruction, Clong(2))

const SN_hold_instruction_reject = "holdInstructionReject"

const LN_hold_instruction_reject = "Hold Instruction Reject"

const NID_hold_instruction_reject = 433

const OBJ_hold_instruction_reject = (OBJ_holdInstruction, Clong(3))

const SN_data = "data"

const NID_data = 434

const OBJ_data = (OBJ_itu_t, Clong(9))

const SN_pss = "pss"

const NID_pss = 435

const OBJ_pss = (OBJ_data, Clong(2342))

const SN_ucl = "ucl"

const NID_ucl = 436

const OBJ_ucl = (OBJ_pss, Clong(19200300))

const SN_pilot = "pilot"

const NID_pilot = 437

const OBJ_pilot = (OBJ_ucl, Clong(100))

const LN_pilotAttributeType = "pilotAttributeType"

const NID_pilotAttributeType = 438

const OBJ_pilotAttributeType = (OBJ_pilot, Clong(1))

const LN_pilotAttributeSyntax = "pilotAttributeSyntax"

const NID_pilotAttributeSyntax = 439

const OBJ_pilotAttributeSyntax = (OBJ_pilot, Clong(3))

const LN_pilotObjectClass = "pilotObjectClass"

const NID_pilotObjectClass = 440

const OBJ_pilotObjectClass = (OBJ_pilot, Clong(4))

const LN_pilotGroups = "pilotGroups"

const NID_pilotGroups = 441

const OBJ_pilotGroups = (OBJ_pilot, Clong(10))

const LN_iA5StringSyntax = "iA5StringSyntax"

const NID_iA5StringSyntax = 442

const OBJ_iA5StringSyntax = (OBJ_pilotAttributeSyntax, Clong(4))

const LN_caseIgnoreIA5StringSyntax = "caseIgnoreIA5StringSyntax"

const NID_caseIgnoreIA5StringSyntax = 443

const OBJ_caseIgnoreIA5StringSyntax = (OBJ_pilotAttributeSyntax, Clong(5))

const LN_pilotObject = "pilotObject"

const NID_pilotObject = 444

const OBJ_pilotObject = (OBJ_pilotObjectClass, Clong(3))

const LN_pilotPerson = "pilotPerson"

const NID_pilotPerson = 445

const OBJ_pilotPerson = (OBJ_pilotObjectClass, Clong(4))

const SN_account = "account"

const NID_account = 446

const OBJ_account = (OBJ_pilotObjectClass, Clong(5))

const SN_document = "document"

const NID_document = 447

const OBJ_document = (OBJ_pilotObjectClass, Clong(6))

const SN_room = "room"

const NID_room = 448

const OBJ_room = (OBJ_pilotObjectClass, Clong(7))

const LN_documentSeries = "documentSeries"

const NID_documentSeries = 449

const OBJ_documentSeries = (OBJ_pilotObjectClass, Clong(9))

const SN_Domain = "domain"

const LN_Domain = "Domain"

const NID_Domain = 392

const OBJ_Domain = (OBJ_pilotObjectClass, Clong(13))

const LN_rFC822localPart = "rFC822localPart"

const NID_rFC822localPart = 450

const OBJ_rFC822localPart = (OBJ_pilotObjectClass, Clong(14))

const LN_dNSDomain = "dNSDomain"

const NID_dNSDomain = 451

const OBJ_dNSDomain = (OBJ_pilotObjectClass, Clong(15))

const LN_domainRelatedObject = "domainRelatedObject"

const NID_domainRelatedObject = 452

const OBJ_domainRelatedObject = (OBJ_pilotObjectClass, Clong(17))

const LN_friendlyCountry = "friendlyCountry"

const NID_friendlyCountry = 453

const OBJ_friendlyCountry = (OBJ_pilotObjectClass, Clong(18))

const LN_simpleSecurityObject = "simpleSecurityObject"

const NID_simpleSecurityObject = 454

const OBJ_simpleSecurityObject = (OBJ_pilotObjectClass, Clong(19))

const LN_pilotOrganization = "pilotOrganization"

const NID_pilotOrganization = 455

const OBJ_pilotOrganization = (OBJ_pilotObjectClass, Clong(20))

const LN_pilotDSA = "pilotDSA"

const NID_pilotDSA = 456

const OBJ_pilotDSA = (OBJ_pilotObjectClass, Clong(21))

const LN_qualityLabelledData = "qualityLabelledData"

const NID_qualityLabelledData = 457

const OBJ_qualityLabelledData = (OBJ_pilotObjectClass, Clong(22))

const SN_userId = "UID"

const LN_userId = "userId"

const NID_userId = 458

const OBJ_userId = (OBJ_pilotAttributeType, Clong(1))

const LN_textEncodedORAddress = "textEncodedORAddress"

const NID_textEncodedORAddress = 459

const OBJ_textEncodedORAddress = (OBJ_pilotAttributeType, Clong(2))

const SN_rfc822Mailbox = "mail"

const LN_rfc822Mailbox = "rfc822Mailbox"

const NID_rfc822Mailbox = 460

const OBJ_rfc822Mailbox = (OBJ_pilotAttributeType, Clong(3))

const SN_info = "info"

const NID_info = 461

const OBJ_info = (OBJ_pilotAttributeType, Clong(4))

const LN_favouriteDrink = "favouriteDrink"

const NID_favouriteDrink = 462

const OBJ_favouriteDrink = (OBJ_pilotAttributeType, Clong(5))

const LN_roomNumber = "roomNumber"

const NID_roomNumber = 463

const OBJ_roomNumber = (OBJ_pilotAttributeType, Clong(6))

const SN_photo = "photo"

const NID_photo = 464

const OBJ_photo = (OBJ_pilotAttributeType, Clong(7))

const LN_userClass = "userClass"

const NID_userClass = 465

const OBJ_userClass = (OBJ_pilotAttributeType, Clong(8))

const SN_host = "host"

const NID_host = 466

const OBJ_host = (OBJ_pilotAttributeType, Clong(9))

const SN_manager = "manager"

const NID_manager = 467

const OBJ_manager = (OBJ_pilotAttributeType, Clong(10))

const LN_documentIdentifier = "documentIdentifier"

const NID_documentIdentifier = 468

const OBJ_documentIdentifier = (OBJ_pilotAttributeType, Clong(11))

const LN_documentTitle = "documentTitle"

const NID_documentTitle = 469

const OBJ_documentTitle = (OBJ_pilotAttributeType, Clong(12))

const LN_documentVersion = "documentVersion"

const NID_documentVersion = 470

const OBJ_documentVersion = (OBJ_pilotAttributeType, Clong(13))

const LN_documentAuthor = "documentAuthor"

const NID_documentAuthor = 471

const OBJ_documentAuthor = (OBJ_pilotAttributeType, Clong(14))

const LN_documentLocation = "documentLocation"

const NID_documentLocation = 472

const OBJ_documentLocation = (OBJ_pilotAttributeType, Clong(15))

const LN_homeTelephoneNumber = "homeTelephoneNumber"

const NID_homeTelephoneNumber = 473

const OBJ_homeTelephoneNumber = (OBJ_pilotAttributeType, Clong(20))

const SN_secretary = "secretary"

const NID_secretary = 474

const OBJ_secretary = (OBJ_pilotAttributeType, Clong(21))

const LN_otherMailbox = "otherMailbox"

const NID_otherMailbox = 475

const OBJ_otherMailbox = (OBJ_pilotAttributeType, Clong(22))

const LN_lastModifiedTime = "lastModifiedTime"

const NID_lastModifiedTime = 476

const OBJ_lastModifiedTime = (OBJ_pilotAttributeType, Clong(23))

const LN_lastModifiedBy = "lastModifiedBy"

const NID_lastModifiedBy = 477

const OBJ_lastModifiedBy = (OBJ_pilotAttributeType, Clong(24))

const SN_domainComponent = "DC"

const LN_domainComponent = "domainComponent"

const NID_domainComponent = 391

const OBJ_domainComponent = (OBJ_pilotAttributeType, Clong(25))

const LN_aRecord = "aRecord"

const NID_aRecord = 478

const OBJ_aRecord = (OBJ_pilotAttributeType, Clong(26))

const LN_pilotAttributeType27 = "pilotAttributeType27"

const NID_pilotAttributeType27 = 479

const OBJ_pilotAttributeType27 = (OBJ_pilotAttributeType, Clong(27))

const LN_mXRecord = "mXRecord"

const NID_mXRecord = 480

const OBJ_mXRecord = (OBJ_pilotAttributeType, Clong(28))

const LN_nSRecord = "nSRecord"

const NID_nSRecord = 481

const OBJ_nSRecord = (OBJ_pilotAttributeType, Clong(29))

const LN_sOARecord = "sOARecord"

const NID_sOARecord = 482

const OBJ_sOARecord = (OBJ_pilotAttributeType, Clong(30))

const LN_cNAMERecord = "cNAMERecord"

const NID_cNAMERecord = 483

const OBJ_cNAMERecord = (OBJ_pilotAttributeType, Clong(31))

const LN_associatedDomain = "associatedDomain"

const NID_associatedDomain = 484

const OBJ_associatedDomain = (OBJ_pilotAttributeType, Clong(37))

const LN_associatedName = "associatedName"

const NID_associatedName = 485

const OBJ_associatedName = (OBJ_pilotAttributeType, Clong(38))

const LN_homePostalAddress = "homePostalAddress"

const NID_homePostalAddress = 486

const OBJ_homePostalAddress = (OBJ_pilotAttributeType, Clong(39))

const LN_personalTitle = "personalTitle"

const NID_personalTitle = 487

const OBJ_personalTitle = (OBJ_pilotAttributeType, Clong(40))

const LN_mobileTelephoneNumber = "mobileTelephoneNumber"

const NID_mobileTelephoneNumber = 488

const OBJ_mobileTelephoneNumber = (OBJ_pilotAttributeType, Clong(41))

const LN_pagerTelephoneNumber = "pagerTelephoneNumber"

const NID_pagerTelephoneNumber = 489

const OBJ_pagerTelephoneNumber = (OBJ_pilotAttributeType, Clong(42))

const LN_friendlyCountryName = "friendlyCountryName"

const NID_friendlyCountryName = 490

const OBJ_friendlyCountryName = (OBJ_pilotAttributeType, Clong(43))

const SN_uniqueIdentifier = "uid"

const LN_uniqueIdentifier = "uniqueIdentifier"

const NID_uniqueIdentifier = 102

const OBJ_uniqueIdentifier = (OBJ_pilotAttributeType, Clong(44))

const LN_organizationalStatus = "organizationalStatus"

const NID_organizationalStatus = 491

const OBJ_organizationalStatus = (OBJ_pilotAttributeType, Clong(45))

const LN_janetMailbox = "janetMailbox"

const NID_janetMailbox = 492

const OBJ_janetMailbox = (OBJ_pilotAttributeType, Clong(46))

const LN_mailPreferenceOption = "mailPreferenceOption"

const NID_mailPreferenceOption = 493

const OBJ_mailPreferenceOption = (OBJ_pilotAttributeType, Clong(47))

const LN_buildingName = "buildingName"

const NID_buildingName = 494

const OBJ_buildingName = (OBJ_pilotAttributeType, Clong(48))

const LN_dSAQuality = "dSAQuality"

const NID_dSAQuality = 495

const OBJ_dSAQuality = (OBJ_pilotAttributeType, Clong(49))

const LN_singleLevelQuality = "singleLevelQuality"

const NID_singleLevelQuality = 496

const OBJ_singleLevelQuality = (OBJ_pilotAttributeType, Clong(50))

const LN_subtreeMinimumQuality = "subtreeMinimumQuality"

const NID_subtreeMinimumQuality = 497

const OBJ_subtreeMinimumQuality = (OBJ_pilotAttributeType, Clong(51))

const LN_subtreeMaximumQuality = "subtreeMaximumQuality"

const NID_subtreeMaximumQuality = 498

const OBJ_subtreeMaximumQuality = (OBJ_pilotAttributeType, Clong(52))

const LN_personalSignature = "personalSignature"

const NID_personalSignature = 499

const OBJ_personalSignature = (OBJ_pilotAttributeType, Clong(53))

const LN_dITRedirect = "dITRedirect"

const NID_dITRedirect = 500

const OBJ_dITRedirect = (OBJ_pilotAttributeType, Clong(54))

const SN_audio = "audio"

const NID_audio = 501

const OBJ_audio = (OBJ_pilotAttributeType, Clong(55))

const LN_documentPublisher = "documentPublisher"

const NID_documentPublisher = 502

const OBJ_documentPublisher = (OBJ_pilotAttributeType, Clong(56))

const SN_id_set = "id-set"

const LN_id_set = "Secure Electronic Transactions"

const NID_id_set = 512

const OBJ_id_set = (OBJ_international_organizations, Clong(42))

const SN_set_ctype = "set-ctype"

const LN_set_ctype = "content types"

const NID_set_ctype = 513

const OBJ_set_ctype = (OBJ_id_set, Clong(0))

const SN_set_msgExt = "set-msgExt"

const LN_set_msgExt = "message extensions"

const NID_set_msgExt = 514

const OBJ_set_msgExt = (OBJ_id_set, Clong(1))

const SN_set_attr = "set-attr"

const NID_set_attr = 515

const OBJ_set_attr = (OBJ_id_set, Clong(3))

const SN_set_policy = "set-policy"

const NID_set_policy = 516

const OBJ_set_policy = (OBJ_id_set, Clong(5))

const SN_set_certExt = "set-certExt"

const LN_set_certExt = "certificate extensions"

const NID_set_certExt = 517

const OBJ_set_certExt = (OBJ_id_set, Clong(7))

const SN_set_brand = "set-brand"

const NID_set_brand = 518

const OBJ_set_brand = (OBJ_id_set, Clong(8))

const SN_setct_PANData = "setct-PANData"

const NID_setct_PANData = 519

const OBJ_setct_PANData = (OBJ_set_ctype, Clong(0))

const SN_setct_PANToken = "setct-PANToken"

const NID_setct_PANToken = 520

const OBJ_setct_PANToken = (OBJ_set_ctype, Clong(1))

const SN_setct_PANOnly = "setct-PANOnly"

const NID_setct_PANOnly = 521

const OBJ_setct_PANOnly = (OBJ_set_ctype, Clong(2))

const SN_setct_OIData = "setct-OIData"

const NID_setct_OIData = 522

const OBJ_setct_OIData = (OBJ_set_ctype, Clong(3))

const SN_setct_PI = "setct-PI"

const NID_setct_PI = 523

const OBJ_setct_PI = (OBJ_set_ctype, Clong(4))

const SN_setct_PIData = "setct-PIData"

const NID_setct_PIData = 524

const OBJ_setct_PIData = (OBJ_set_ctype, Clong(5))

const SN_setct_PIDataUnsigned = "setct-PIDataUnsigned"

const NID_setct_PIDataUnsigned = 525

const OBJ_setct_PIDataUnsigned = (OBJ_set_ctype, Clong(6))

const SN_setct_HODInput = "setct-HODInput"

const NID_setct_HODInput = 526

const OBJ_setct_HODInput = (OBJ_set_ctype, Clong(7))

const SN_setct_AuthResBaggage = "setct-AuthResBaggage"

const NID_setct_AuthResBaggage = 527

const OBJ_setct_AuthResBaggage = (OBJ_set_ctype, Clong(8))

const SN_setct_AuthRevReqBaggage = "setct-AuthRevReqBaggage"

const NID_setct_AuthRevReqBaggage = 528

const OBJ_setct_AuthRevReqBaggage = (OBJ_set_ctype, Clong(9))

const SN_setct_AuthRevResBaggage = "setct-AuthRevResBaggage"

const NID_setct_AuthRevResBaggage = 529

const OBJ_setct_AuthRevResBaggage = (OBJ_set_ctype, Clong(10))

const SN_setct_CapTokenSeq = "setct-CapTokenSeq"

const NID_setct_CapTokenSeq = 530

const OBJ_setct_CapTokenSeq = (OBJ_set_ctype, Clong(11))

const SN_setct_PInitResData = "setct-PInitResData"

const NID_setct_PInitResData = 531

const OBJ_setct_PInitResData = (OBJ_set_ctype, Clong(12))

const SN_setct_PI_TBS = "setct-PI-TBS"

const NID_setct_PI_TBS = 532

const OBJ_setct_PI_TBS = (OBJ_set_ctype, Clong(13))

const SN_setct_PResData = "setct-PResData"

const NID_setct_PResData = 533

const OBJ_setct_PResData = (OBJ_set_ctype, Clong(14))

const SN_setct_AuthReqTBS = "setct-AuthReqTBS"

const NID_setct_AuthReqTBS = 534

const OBJ_setct_AuthReqTBS = (OBJ_set_ctype, Clong(16))

const SN_setct_AuthResTBS = "setct-AuthResTBS"

const NID_setct_AuthResTBS = 535

const OBJ_setct_AuthResTBS = (OBJ_set_ctype, Clong(17))

const SN_setct_AuthResTBSX = "setct-AuthResTBSX"

const NID_setct_AuthResTBSX = 536

const OBJ_setct_AuthResTBSX = (OBJ_set_ctype, Clong(18))

const SN_setct_AuthTokenTBS = "setct-AuthTokenTBS"

const NID_setct_AuthTokenTBS = 537

const OBJ_setct_AuthTokenTBS = (OBJ_set_ctype, Clong(19))

const SN_setct_CapTokenData = "setct-CapTokenData"

const NID_setct_CapTokenData = 538

const OBJ_setct_CapTokenData = (OBJ_set_ctype, Clong(20))

const SN_setct_CapTokenTBS = "setct-CapTokenTBS"

const NID_setct_CapTokenTBS = 539

const OBJ_setct_CapTokenTBS = (OBJ_set_ctype, Clong(21))

const SN_setct_AcqCardCodeMsg = "setct-AcqCardCodeMsg"

const NID_setct_AcqCardCodeMsg = 540

const OBJ_setct_AcqCardCodeMsg = (OBJ_set_ctype, Clong(22))

const SN_setct_AuthRevReqTBS = "setct-AuthRevReqTBS"

const NID_setct_AuthRevReqTBS = 541

const OBJ_setct_AuthRevReqTBS = (OBJ_set_ctype, Clong(23))

const SN_setct_AuthRevResData = "setct-AuthRevResData"

const NID_setct_AuthRevResData = 542

const OBJ_setct_AuthRevResData = (OBJ_set_ctype, Clong(24))

const SN_setct_AuthRevResTBS = "setct-AuthRevResTBS"

const NID_setct_AuthRevResTBS = 543

const OBJ_setct_AuthRevResTBS = (OBJ_set_ctype, Clong(25))

const SN_setct_CapReqTBS = "setct-CapReqTBS"

const NID_setct_CapReqTBS = 544

const OBJ_setct_CapReqTBS = (OBJ_set_ctype, Clong(26))

const SN_setct_CapReqTBSX = "setct-CapReqTBSX"

const NID_setct_CapReqTBSX = 545

const OBJ_setct_CapReqTBSX = (OBJ_set_ctype, Clong(27))

const SN_setct_CapResData = "setct-CapResData"

const NID_setct_CapResData = 546

const OBJ_setct_CapResData = (OBJ_set_ctype, Clong(28))

const SN_setct_CapRevReqTBS = "setct-CapRevReqTBS"

const NID_setct_CapRevReqTBS = 547

const OBJ_setct_CapRevReqTBS = (OBJ_set_ctype, Clong(29))

const SN_setct_CapRevReqTBSX = "setct-CapRevReqTBSX"

const NID_setct_CapRevReqTBSX = 548

const OBJ_setct_CapRevReqTBSX = (OBJ_set_ctype, Clong(30))

const SN_setct_CapRevResData = "setct-CapRevResData"

const NID_setct_CapRevResData = 549

const OBJ_setct_CapRevResData = (OBJ_set_ctype, Clong(31))

const SN_setct_CredReqTBS = "setct-CredReqTBS"

const NID_setct_CredReqTBS = 550

const OBJ_setct_CredReqTBS = (OBJ_set_ctype, Clong(32))

const SN_setct_CredReqTBSX = "setct-CredReqTBSX"

const NID_setct_CredReqTBSX = 551

const OBJ_setct_CredReqTBSX = (OBJ_set_ctype, Clong(33))

const SN_setct_CredResData = "setct-CredResData"

const NID_setct_CredResData = 552

const OBJ_setct_CredResData = (OBJ_set_ctype, Clong(34))

const SN_setct_CredRevReqTBS = "setct-CredRevReqTBS"

const NID_setct_CredRevReqTBS = 553

const OBJ_setct_CredRevReqTBS = (OBJ_set_ctype, Clong(35))

const SN_setct_CredRevReqTBSX = "setct-CredRevReqTBSX"

const NID_setct_CredRevReqTBSX = 554

const OBJ_setct_CredRevReqTBSX = (OBJ_set_ctype, Clong(36))

const SN_setct_CredRevResData = "setct-CredRevResData"

const NID_setct_CredRevResData = 555

const OBJ_setct_CredRevResData = (OBJ_set_ctype, Clong(37))

const SN_setct_PCertReqData = "setct-PCertReqData"

const NID_setct_PCertReqData = 556

const OBJ_setct_PCertReqData = (OBJ_set_ctype, Clong(38))

const SN_setct_PCertResTBS = "setct-PCertResTBS"

const NID_setct_PCertResTBS = 557

const OBJ_setct_PCertResTBS = (OBJ_set_ctype, Clong(39))

const SN_setct_BatchAdminReqData = "setct-BatchAdminReqData"

const NID_setct_BatchAdminReqData = 558

const OBJ_setct_BatchAdminReqData = (OBJ_set_ctype, Clong(40))

const SN_setct_BatchAdminResData = "setct-BatchAdminResData"

const NID_setct_BatchAdminResData = 559

const OBJ_setct_BatchAdminResData = (OBJ_set_ctype, Clong(41))

const SN_setct_CardCInitResTBS = "setct-CardCInitResTBS"

const NID_setct_CardCInitResTBS = 560

const OBJ_setct_CardCInitResTBS = (OBJ_set_ctype, Clong(42))

const SN_setct_MeAqCInitResTBS = "setct-MeAqCInitResTBS"

const NID_setct_MeAqCInitResTBS = 561

const OBJ_setct_MeAqCInitResTBS = (OBJ_set_ctype, Clong(43))

const SN_setct_RegFormResTBS = "setct-RegFormResTBS"

const NID_setct_RegFormResTBS = 562

const OBJ_setct_RegFormResTBS = (OBJ_set_ctype, Clong(44))

const SN_setct_CertReqData = "setct-CertReqData"

const NID_setct_CertReqData = 563

const OBJ_setct_CertReqData = (OBJ_set_ctype, Clong(45))

const SN_setct_CertReqTBS = "setct-CertReqTBS"

const NID_setct_CertReqTBS = 564

const OBJ_setct_CertReqTBS = (OBJ_set_ctype, Clong(46))

const SN_setct_CertResData = "setct-CertResData"

const NID_setct_CertResData = 565

const OBJ_setct_CertResData = (OBJ_set_ctype, Clong(47))

const SN_setct_CertInqReqTBS = "setct-CertInqReqTBS"

const NID_setct_CertInqReqTBS = 566

const OBJ_setct_CertInqReqTBS = (OBJ_set_ctype, Clong(48))

const SN_setct_ErrorTBS = "setct-ErrorTBS"

const NID_setct_ErrorTBS = 567

const OBJ_setct_ErrorTBS = (OBJ_set_ctype, Clong(49))

const SN_setct_PIDualSignedTBE = "setct-PIDualSignedTBE"

const NID_setct_PIDualSignedTBE = 568

const OBJ_setct_PIDualSignedTBE = (OBJ_set_ctype, Clong(50))

const SN_setct_PIUnsignedTBE = "setct-PIUnsignedTBE"

const NID_setct_PIUnsignedTBE = 569

const OBJ_setct_PIUnsignedTBE = (OBJ_set_ctype, Clong(51))

const SN_setct_AuthReqTBE = "setct-AuthReqTBE"

const NID_setct_AuthReqTBE = 570

const OBJ_setct_AuthReqTBE = (OBJ_set_ctype, Clong(52))

const SN_setct_AuthResTBE = "setct-AuthResTBE"

const NID_setct_AuthResTBE = 571

const OBJ_setct_AuthResTBE = (OBJ_set_ctype, Clong(53))

const SN_setct_AuthResTBEX = "setct-AuthResTBEX"

const NID_setct_AuthResTBEX = 572

const OBJ_setct_AuthResTBEX = (OBJ_set_ctype, Clong(54))

const SN_setct_AuthTokenTBE = "setct-AuthTokenTBE"

const NID_setct_AuthTokenTBE = 573

const OBJ_setct_AuthTokenTBE = (OBJ_set_ctype, Clong(55))

const SN_setct_CapTokenTBE = "setct-CapTokenTBE"

const NID_setct_CapTokenTBE = 574

const OBJ_setct_CapTokenTBE = (OBJ_set_ctype, Clong(56))

const SN_setct_CapTokenTBEX = "setct-CapTokenTBEX"

const NID_setct_CapTokenTBEX = 575

const OBJ_setct_CapTokenTBEX = (OBJ_set_ctype, Clong(57))

const SN_setct_AcqCardCodeMsgTBE = "setct-AcqCardCodeMsgTBE"

const NID_setct_AcqCardCodeMsgTBE = 576

const OBJ_setct_AcqCardCodeMsgTBE = (OBJ_set_ctype, Clong(58))

const SN_setct_AuthRevReqTBE = "setct-AuthRevReqTBE"

const NID_setct_AuthRevReqTBE = 577

const OBJ_setct_AuthRevReqTBE = (OBJ_set_ctype, Clong(59))

const SN_setct_AuthRevResTBE = "setct-AuthRevResTBE"

const NID_setct_AuthRevResTBE = 578

const OBJ_setct_AuthRevResTBE = (OBJ_set_ctype, Clong(60))

const SN_setct_AuthRevResTBEB = "setct-AuthRevResTBEB"

const NID_setct_AuthRevResTBEB = 579

const OBJ_setct_AuthRevResTBEB = (OBJ_set_ctype, Clong(61))

const SN_setct_CapReqTBE = "setct-CapReqTBE"

const NID_setct_CapReqTBE = 580

const OBJ_setct_CapReqTBE = (OBJ_set_ctype, Clong(62))

const SN_setct_CapReqTBEX = "setct-CapReqTBEX"

const NID_setct_CapReqTBEX = 581

const OBJ_setct_CapReqTBEX = (OBJ_set_ctype, Clong(63))

const SN_setct_CapResTBE = "setct-CapResTBE"

const NID_setct_CapResTBE = 582

const OBJ_setct_CapResTBE = (OBJ_set_ctype, Clong(64))

const SN_setct_CapRevReqTBE = "setct-CapRevReqTBE"

const NID_setct_CapRevReqTBE = 583

const OBJ_setct_CapRevReqTBE = (OBJ_set_ctype, Clong(65))

const SN_setct_CapRevReqTBEX = "setct-CapRevReqTBEX"

const NID_setct_CapRevReqTBEX = 584

const OBJ_setct_CapRevReqTBEX = (OBJ_set_ctype, Clong(66))

const SN_setct_CapRevResTBE = "setct-CapRevResTBE"

const NID_setct_CapRevResTBE = 585

const OBJ_setct_CapRevResTBE = (OBJ_set_ctype, Clong(67))

const SN_setct_CredReqTBE = "setct-CredReqTBE"

const NID_setct_CredReqTBE = 586

const OBJ_setct_CredReqTBE = (OBJ_set_ctype, Clong(68))

const SN_setct_CredReqTBEX = "setct-CredReqTBEX"

const NID_setct_CredReqTBEX = 587

const OBJ_setct_CredReqTBEX = (OBJ_set_ctype, Clong(69))

const SN_setct_CredResTBE = "setct-CredResTBE"

const NID_setct_CredResTBE = 588

const OBJ_setct_CredResTBE = (OBJ_set_ctype, Clong(70))

const SN_setct_CredRevReqTBE = "setct-CredRevReqTBE"

const NID_setct_CredRevReqTBE = 589

const OBJ_setct_CredRevReqTBE = (OBJ_set_ctype, Clong(71))

const SN_setct_CredRevReqTBEX = "setct-CredRevReqTBEX"

const NID_setct_CredRevReqTBEX = 590

const OBJ_setct_CredRevReqTBEX = (OBJ_set_ctype, Clong(72))

const SN_setct_CredRevResTBE = "setct-CredRevResTBE"

const NID_setct_CredRevResTBE = 591

const OBJ_setct_CredRevResTBE = (OBJ_set_ctype, Clong(73))

const SN_setct_BatchAdminReqTBE = "setct-BatchAdminReqTBE"

const NID_setct_BatchAdminReqTBE = 592

const OBJ_setct_BatchAdminReqTBE = (OBJ_set_ctype, Clong(74))

const SN_setct_BatchAdminResTBE = "setct-BatchAdminResTBE"

const NID_setct_BatchAdminResTBE = 593

const OBJ_setct_BatchAdminResTBE = (OBJ_set_ctype, Clong(75))

const SN_setct_RegFormReqTBE = "setct-RegFormReqTBE"

const NID_setct_RegFormReqTBE = 594

const OBJ_setct_RegFormReqTBE = (OBJ_set_ctype, Clong(76))

const SN_setct_CertReqTBE = "setct-CertReqTBE"

const NID_setct_CertReqTBE = 595

const OBJ_setct_CertReqTBE = (OBJ_set_ctype, Clong(77))

const SN_setct_CertReqTBEX = "setct-CertReqTBEX"

const NID_setct_CertReqTBEX = 596

const OBJ_setct_CertReqTBEX = (OBJ_set_ctype, Clong(78))

const SN_setct_CertResTBE = "setct-CertResTBE"

const NID_setct_CertResTBE = 597

const OBJ_setct_CertResTBE = (OBJ_set_ctype, Clong(79))

const SN_setct_CRLNotificationTBS = "setct-CRLNotificationTBS"

const NID_setct_CRLNotificationTBS = 598

const OBJ_setct_CRLNotificationTBS = (OBJ_set_ctype, Clong(80))

const SN_setct_CRLNotificationResTBS = "setct-CRLNotificationResTBS"

const NID_setct_CRLNotificationResTBS = 599

const OBJ_setct_CRLNotificationResTBS = (OBJ_set_ctype, Clong(81))

const SN_setct_BCIDistributionTBS = "setct-BCIDistributionTBS"

const NID_setct_BCIDistributionTBS = 600

const OBJ_setct_BCIDistributionTBS = (OBJ_set_ctype, Clong(82))

const SN_setext_genCrypt = "setext-genCrypt"

const LN_setext_genCrypt = "generic cryptogram"

const NID_setext_genCrypt = 601

const OBJ_setext_genCrypt = (OBJ_set_msgExt, Clong(1))

const SN_setext_miAuth = "setext-miAuth"

const LN_setext_miAuth = "merchant initiated auth"

const NID_setext_miAuth = 602

const OBJ_setext_miAuth = (OBJ_set_msgExt, Clong(3))

const SN_setext_pinSecure = "setext-pinSecure"

const NID_setext_pinSecure = 603

const OBJ_setext_pinSecure = (OBJ_set_msgExt, Clong(4))

const SN_setext_pinAny = "setext-pinAny"

const NID_setext_pinAny = 604

const OBJ_setext_pinAny = (OBJ_set_msgExt, Clong(5))

const SN_setext_track2 = "setext-track2"

const NID_setext_track2 = 605

const OBJ_setext_track2 = (OBJ_set_msgExt, Clong(7))

const SN_setext_cv = "setext-cv"

const LN_setext_cv = "additional verification"

const NID_setext_cv = 606

const OBJ_setext_cv = (OBJ_set_msgExt, Clong(8))

const SN_set_policy_root = "set-policy-root"

const NID_set_policy_root = 607

const OBJ_set_policy_root = (OBJ_set_policy, Clong(0))

const SN_setCext_hashedRoot = "setCext-hashedRoot"

const NID_setCext_hashedRoot = 608

const OBJ_setCext_hashedRoot = (OBJ_set_certExt, Clong(0))

const SN_setCext_certType = "setCext-certType"

const NID_setCext_certType = 609

const OBJ_setCext_certType = (OBJ_set_certExt, Clong(1))

const SN_setCext_merchData = "setCext-merchData"

const NID_setCext_merchData = 610

const OBJ_setCext_merchData = (OBJ_set_certExt, Clong(2))

const SN_setCext_cCertRequired = "setCext-cCertRequired"

const NID_setCext_cCertRequired = 611

const OBJ_setCext_cCertRequired = (OBJ_set_certExt, Clong(3))

const SN_setCext_tunneling = "setCext-tunneling"

const NID_setCext_tunneling = 612

const OBJ_setCext_tunneling = (OBJ_set_certExt, Clong(4))

const SN_setCext_setExt = "setCext-setExt"

const NID_setCext_setExt = 613

const OBJ_setCext_setExt = (OBJ_set_certExt, Clong(5))

const SN_setCext_setQualf = "setCext-setQualf"

const NID_setCext_setQualf = 614

const OBJ_setCext_setQualf = (OBJ_set_certExt, Clong(6))

const SN_setCext_PGWYcapabilities = "setCext-PGWYcapabilities"

const NID_setCext_PGWYcapabilities = 615

const OBJ_setCext_PGWYcapabilities = (OBJ_set_certExt, Clong(7))

const SN_setCext_TokenIdentifier = "setCext-TokenIdentifier"

const NID_setCext_TokenIdentifier = 616

const OBJ_setCext_TokenIdentifier = (OBJ_set_certExt, Clong(8))

const SN_setCext_Track2Data = "setCext-Track2Data"

const NID_setCext_Track2Data = 617

const OBJ_setCext_Track2Data = (OBJ_set_certExt, Clong(9))

const SN_setCext_TokenType = "setCext-TokenType"

const NID_setCext_TokenType = 618

const OBJ_setCext_TokenType = (OBJ_set_certExt, Clong(10))

const SN_setCext_IssuerCapabilities = "setCext-IssuerCapabilities"

const NID_setCext_IssuerCapabilities = 619

const OBJ_setCext_IssuerCapabilities = (OBJ_set_certExt, Clong(11))

const SN_setAttr_Cert = "setAttr-Cert"

const NID_setAttr_Cert = 620

const OBJ_setAttr_Cert = (OBJ_set_attr, Clong(0))

const SN_setAttr_PGWYcap = "setAttr-PGWYcap"

const LN_setAttr_PGWYcap = "payment gateway capabilities"

const NID_setAttr_PGWYcap = 621

const OBJ_setAttr_PGWYcap = (OBJ_set_attr, Clong(1))

const SN_setAttr_TokenType = "setAttr-TokenType"

const NID_setAttr_TokenType = 622

const OBJ_setAttr_TokenType = (OBJ_set_attr, Clong(2))

const SN_setAttr_IssCap = "setAttr-IssCap"

const LN_setAttr_IssCap = "issuer capabilities"

const NID_setAttr_IssCap = 623

const OBJ_setAttr_IssCap = (OBJ_set_attr, Clong(3))

const SN_set_rootKeyThumb = "set-rootKeyThumb"

const NID_set_rootKeyThumb = 624

const OBJ_set_rootKeyThumb = (OBJ_setAttr_Cert, Clong(0))

const SN_set_addPolicy = "set-addPolicy"

const NID_set_addPolicy = 625

const OBJ_set_addPolicy = (OBJ_setAttr_Cert, Clong(1))

const SN_setAttr_Token_EMV = "setAttr-Token-EMV"

const NID_setAttr_Token_EMV = 626

const OBJ_setAttr_Token_EMV = (OBJ_setAttr_TokenType, Clong(1))

const SN_setAttr_Token_B0Prime = "setAttr-Token-B0Prime"

const NID_setAttr_Token_B0Prime = 627

const OBJ_setAttr_Token_B0Prime = (OBJ_setAttr_TokenType, Clong(2))

const SN_setAttr_IssCap_CVM = "setAttr-IssCap-CVM"

const NID_setAttr_IssCap_CVM = 628

const OBJ_setAttr_IssCap_CVM = (OBJ_setAttr_IssCap, Clong(3))

const SN_setAttr_IssCap_T2 = "setAttr-IssCap-T2"

const NID_setAttr_IssCap_T2 = 629

const OBJ_setAttr_IssCap_T2 = (OBJ_setAttr_IssCap, Clong(4))

const SN_setAttr_IssCap_Sig = "setAttr-IssCap-Sig"

const NID_setAttr_IssCap_Sig = 630

const OBJ_setAttr_IssCap_Sig = (OBJ_setAttr_IssCap, Clong(5))

const SN_setAttr_GenCryptgrm = "setAttr-GenCryptgrm"

const LN_setAttr_GenCryptgrm = "generate cryptogram"

const NID_setAttr_GenCryptgrm = 631

const OBJ_setAttr_GenCryptgrm = (OBJ_setAttr_IssCap_CVM, Clong(1))

const SN_setAttr_T2Enc = "setAttr-T2Enc"

const LN_setAttr_T2Enc = "encrypted track 2"

const NID_setAttr_T2Enc = 632

const OBJ_setAttr_T2Enc = (OBJ_setAttr_IssCap_T2, Clong(1))

const SN_setAttr_T2cleartxt = "setAttr-T2cleartxt"

const LN_setAttr_T2cleartxt = "cleartext track 2"

const NID_setAttr_T2cleartxt = 633

const OBJ_setAttr_T2cleartxt = (OBJ_setAttr_IssCap_T2, Clong(2))

const SN_setAttr_TokICCsig = "setAttr-TokICCsig"

const LN_setAttr_TokICCsig = "ICC or token signature"

const NID_setAttr_TokICCsig = 634

const OBJ_setAttr_TokICCsig = (OBJ_setAttr_IssCap_Sig, Clong(1))

const SN_setAttr_SecDevSig = "setAttr-SecDevSig"

const LN_setAttr_SecDevSig = "secure device signature"

const NID_setAttr_SecDevSig = 635

const OBJ_setAttr_SecDevSig = (OBJ_setAttr_IssCap_Sig, Clong(2))

const SN_set_brand_IATA_ATA = "set-brand-IATA-ATA"

const NID_set_brand_IATA_ATA = 636

const OBJ_set_brand_IATA_ATA = (OBJ_set_brand, Clong(1))

const SN_set_brand_Diners = "set-brand-Diners"

const NID_set_brand_Diners = 637

const OBJ_set_brand_Diners = (OBJ_set_brand, Clong(30))

const SN_set_brand_AmericanExpress = "set-brand-AmericanExpress"

const NID_set_brand_AmericanExpress = 638

const OBJ_set_brand_AmericanExpress = (OBJ_set_brand, Clong(34))

const SN_set_brand_JCB = "set-brand-JCB"

const NID_set_brand_JCB = 639

const OBJ_set_brand_JCB = (OBJ_set_brand, Clong(35))

const SN_set_brand_Visa = "set-brand-Visa"

const NID_set_brand_Visa = 640

const OBJ_set_brand_Visa = (OBJ_set_brand, Clong(4))

const SN_set_brand_MasterCard = "set-brand-MasterCard"

const NID_set_brand_MasterCard = 641

const OBJ_set_brand_MasterCard = (OBJ_set_brand, Clong(5))

const SN_set_brand_Novus = "set-brand-Novus"

const NID_set_brand_Novus = 642

const OBJ_set_brand_Novus = (OBJ_set_brand, Clong(6011))

const SN_des_cdmf = "DES-CDMF"

const LN_des_cdmf = "des-cdmf"

const NID_des_cdmf = 643

const OBJ_des_cdmf = (OBJ_rsadsi, Clong(3), Clong(10))

const SN_rsaOAEPEncryptionSET = "rsaOAEPEncryptionSET"

const NID_rsaOAEPEncryptionSET = 644

const OBJ_rsaOAEPEncryptionSET = (OBJ_rsadsi, Clong(1), Clong(1), Clong(6))

const SN_ipsec3 = "Oakley-EC2N-3"

const LN_ipsec3 = "ipsec3"

const NID_ipsec3 = 749

const SN_ipsec4 = "Oakley-EC2N-4"

const LN_ipsec4 = "ipsec4"

const NID_ipsec4 = 750

const SN_whirlpool = "whirlpool"

const NID_whirlpool = 804

const OBJ_whirlpool = (OBJ_iso, Clong(0), Clong(10118), Clong(3), Clong(0), Clong(55))

const SN_cryptopro = "cryptopro"

const NID_cryptopro = 805

const OBJ_cryptopro = (OBJ_member_body, Clong(643), Clong(2), Clong(2))

const SN_cryptocom = "cryptocom"

const NID_cryptocom = 806

const OBJ_cryptocom = (OBJ_member_body, Clong(643), Clong(2), Clong(9))

const SN_id_tc26 = "id-tc26"

const NID_id_tc26 = 974

const OBJ_id_tc26 = (OBJ_member_body, Clong(643), Clong(7), Clong(1))

const SN_id_GostR3411_94_with_GostR3410_2001 = "id-GostR3411-94-with-GostR3410-2001"

const LN_id_GostR3411_94_with_GostR3410_2001 = "GOST R 34.11-94 with GOST R 34.10-2001"

const NID_id_GostR3411_94_with_GostR3410_2001 = 807

const OBJ_id_GostR3411_94_with_GostR3410_2001 = (OBJ_cryptopro, Clong(3))

const SN_id_GostR3411_94_with_GostR3410_94 = "id-GostR3411-94-with-GostR3410-94"

const LN_id_GostR3411_94_with_GostR3410_94 = "GOST R 34.11-94 with GOST R 34.10-94"

const NID_id_GostR3411_94_with_GostR3410_94 = 808

const OBJ_id_GostR3411_94_with_GostR3410_94 = (OBJ_cryptopro, Clong(4))

const SN_id_GostR3411_94 = "md_gost94"

const LN_id_GostR3411_94 = "GOST R 34.11-94"

const NID_id_GostR3411_94 = 809

const OBJ_id_GostR3411_94 = (OBJ_cryptopro, Clong(9))

const SN_id_HMACGostR3411_94 = "id-HMACGostR3411-94"

const LN_id_HMACGostR3411_94 = "HMAC GOST 34.11-94"

const NID_id_HMACGostR3411_94 = 810

const OBJ_id_HMACGostR3411_94 = (OBJ_cryptopro, Clong(10))

const SN_id_GostR3410_2001 = "gost2001"

const LN_id_GostR3410_2001 = "GOST R 34.10-2001"

const NID_id_GostR3410_2001 = 811

const OBJ_id_GostR3410_2001 = (OBJ_cryptopro, Clong(19))

const SN_id_GostR3410_94 = "gost94"

const LN_id_GostR3410_94 = "GOST R 34.10-94"

const NID_id_GostR3410_94 = 812

const OBJ_id_GostR3410_94 = (OBJ_cryptopro, Clong(20))

const SN_id_Gost28147_89 = "gost89"

const LN_id_Gost28147_89 = "GOST 28147-89"

const NID_id_Gost28147_89 = 813

const OBJ_id_Gost28147_89 = (OBJ_cryptopro, Clong(21))

const SN_gost89_cnt = "gost89-cnt"

const NID_gost89_cnt = 814

const SN_gost89_cnt_12 = "gost89-cnt-12"

const NID_gost89_cnt_12 = 975

const SN_gost89_cbc = "gost89-cbc"

const NID_gost89_cbc = 1009

const SN_gost89_ecb = "gost89-ecb"

const NID_gost89_ecb = 1010

const SN_gost89_ctr = "gost89-ctr"

const NID_gost89_ctr = 1011

const SN_id_Gost28147_89_MAC = "gost-mac"

const LN_id_Gost28147_89_MAC = "GOST 28147-89 MAC"

const NID_id_Gost28147_89_MAC = 815

const OBJ_id_Gost28147_89_MAC = (OBJ_cryptopro, Clong(22))

const SN_gost_mac_12 = "gost-mac-12"

const NID_gost_mac_12 = 976

const SN_id_GostR3411_94_prf = "prf-gostr3411-94"

const LN_id_GostR3411_94_prf = "GOST R 34.11-94 PRF"

const NID_id_GostR3411_94_prf = 816

const OBJ_id_GostR3411_94_prf = (OBJ_cryptopro, Clong(23))

const SN_id_GostR3410_2001DH = "id-GostR3410-2001DH"

const LN_id_GostR3410_2001DH = "GOST R 34.10-2001 DH"

const NID_id_GostR3410_2001DH = 817

const OBJ_id_GostR3410_2001DH = (OBJ_cryptopro, Clong(98))

const SN_id_GostR3410_94DH = "id-GostR3410-94DH"

const LN_id_GostR3410_94DH = "GOST R 34.10-94 DH"

const NID_id_GostR3410_94DH = 818

const OBJ_id_GostR3410_94DH = (OBJ_cryptopro, Clong(99))

const SN_id_Gost28147_89_CryptoPro_KeyMeshing = "id-Gost28147-89-CryptoPro-KeyMeshing"

const NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819

const OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = (OBJ_cryptopro, Clong(14), Clong(1))

const SN_id_Gost28147_89_None_KeyMeshing = "id-Gost28147-89-None-KeyMeshing"

const NID_id_Gost28147_89_None_KeyMeshing = 820

const OBJ_id_Gost28147_89_None_KeyMeshing = (OBJ_cryptopro, Clong(14), Clong(0))

const SN_id_GostR3411_94_TestParamSet = "id-GostR3411-94-TestParamSet"

const NID_id_GostR3411_94_TestParamSet = 821

const OBJ_id_GostR3411_94_TestParamSet = (OBJ_cryptopro, Clong(30), Clong(0))

const SN_id_GostR3411_94_CryptoProParamSet = "id-GostR3411-94-CryptoProParamSet"

const NID_id_GostR3411_94_CryptoProParamSet = 822

const OBJ_id_GostR3411_94_CryptoProParamSet = (OBJ_cryptopro, Clong(30), Clong(1))

const SN_id_Gost28147_89_TestParamSet = "id-Gost28147-89-TestParamSet"

const NID_id_Gost28147_89_TestParamSet = 823

const OBJ_id_Gost28147_89_TestParamSet = (OBJ_cryptopro, Clong(31), Clong(0))

const SN_id_Gost28147_89_CryptoPro_A_ParamSet = "id-Gost28147-89-CryptoPro-A-ParamSet"

const NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824

const OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = (OBJ_cryptopro, Clong(31), Clong(1))

const SN_id_Gost28147_89_CryptoPro_B_ParamSet = "id-Gost28147-89-CryptoPro-B-ParamSet"

const NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825

const OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = (OBJ_cryptopro, Clong(31), Clong(2))

const SN_id_Gost28147_89_CryptoPro_C_ParamSet = "id-Gost28147-89-CryptoPro-C-ParamSet"

const NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826

const OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = (OBJ_cryptopro, Clong(31), Clong(3))

const SN_id_Gost28147_89_CryptoPro_D_ParamSet = "id-Gost28147-89-CryptoPro-D-ParamSet"

const NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827

const OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = (OBJ_cryptopro, Clong(31), Clong(4))

const SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet"

const NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828

const OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = (OBJ_cryptopro, Clong(31), Clong(5))

const SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet"

const NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829

const OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = (OBJ_cryptopro, Clong(31), Clong(6))

const SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = "id-Gost28147-89-CryptoPro-RIC-1-ParamSet"

const NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830

const OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = (OBJ_cryptopro, Clong(31), Clong(7))

const SN_id_GostR3410_94_TestParamSet = "id-GostR3410-94-TestParamSet"

const NID_id_GostR3410_94_TestParamSet = 831

const OBJ_id_GostR3410_94_TestParamSet = (OBJ_cryptopro, Clong(32), Clong(0))

const SN_id_GostR3410_94_CryptoPro_A_ParamSet = "id-GostR3410-94-CryptoPro-A-ParamSet"

const NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832

const OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = (OBJ_cryptopro, Clong(32), Clong(2))

const SN_id_GostR3410_94_CryptoPro_B_ParamSet = "id-GostR3410-94-CryptoPro-B-ParamSet"

const NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833

const OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = (OBJ_cryptopro, Clong(32), Clong(3))

const SN_id_GostR3410_94_CryptoPro_C_ParamSet = "id-GostR3410-94-CryptoPro-C-ParamSet"

const NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834

const OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = (OBJ_cryptopro, Clong(32), Clong(4))

const SN_id_GostR3410_94_CryptoPro_D_ParamSet = "id-GostR3410-94-CryptoPro-D-ParamSet"

const NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835

const OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = (OBJ_cryptopro, Clong(32), Clong(5))

const SN_id_GostR3410_94_CryptoPro_XchA_ParamSet = "id-GostR3410-94-CryptoPro-XchA-ParamSet"

const NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836

const OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = (OBJ_cryptopro, Clong(33), Clong(1))

const SN_id_GostR3410_94_CryptoPro_XchB_ParamSet = "id-GostR3410-94-CryptoPro-XchB-ParamSet"

const NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837

const OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = (OBJ_cryptopro, Clong(33), Clong(2))

const SN_id_GostR3410_94_CryptoPro_XchC_ParamSet = "id-GostR3410-94-CryptoPro-XchC-ParamSet"

const NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838

const OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = (OBJ_cryptopro, Clong(33), Clong(3))

const SN_id_GostR3410_2001_TestParamSet = "id-GostR3410-2001-TestParamSet"

const NID_id_GostR3410_2001_TestParamSet = 839

const OBJ_id_GostR3410_2001_TestParamSet = (OBJ_cryptopro, Clong(35), Clong(0))

const SN_id_GostR3410_2001_CryptoPro_A_ParamSet = "id-GostR3410-2001-CryptoPro-A-ParamSet"

const NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840

const OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = (OBJ_cryptopro, Clong(35), Clong(1))

const SN_id_GostR3410_2001_CryptoPro_B_ParamSet = "id-GostR3410-2001-CryptoPro-B-ParamSet"

const NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841

const OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = (OBJ_cryptopro, Clong(35), Clong(2))

const SN_id_GostR3410_2001_CryptoPro_C_ParamSet = "id-GostR3410-2001-CryptoPro-C-ParamSet"

const NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842

const OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = (OBJ_cryptopro, Clong(35), Clong(3))

const SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet = "id-GostR3410-2001-CryptoPro-XchA-ParamSet"

const NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843

const OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = (OBJ_cryptopro, Clong(36), Clong(0))

const SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet = "id-GostR3410-2001-CryptoPro-XchB-ParamSet"

const NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844

const OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = (OBJ_cryptopro, Clong(36), Clong(1))

const SN_id_GostR3410_94_a = "id-GostR3410-94-a"

const NID_id_GostR3410_94_a = 845

const OBJ_id_GostR3410_94_a = (OBJ_id_GostR3410_94, Clong(1))

const SN_id_GostR3410_94_aBis = "id-GostR3410-94-aBis"

const NID_id_GostR3410_94_aBis = 846

const OBJ_id_GostR3410_94_aBis = (OBJ_id_GostR3410_94, Clong(2))

const SN_id_GostR3410_94_b = "id-GostR3410-94-b"

const NID_id_GostR3410_94_b = 847

const OBJ_id_GostR3410_94_b = (OBJ_id_GostR3410_94, Clong(3))

const SN_id_GostR3410_94_bBis = "id-GostR3410-94-bBis"

const NID_id_GostR3410_94_bBis = 848

const OBJ_id_GostR3410_94_bBis = (OBJ_id_GostR3410_94, Clong(4))

const SN_id_Gost28147_89_cc = "id-Gost28147-89-cc"

const LN_id_Gost28147_89_cc = "GOST 28147-89 Cryptocom ParamSet"

const NID_id_Gost28147_89_cc = 849

const OBJ_id_Gost28147_89_cc = (OBJ_cryptocom, Clong(1), Clong(6), Clong(1))

const SN_id_GostR3410_94_cc = "gost94cc"

const LN_id_GostR3410_94_cc = "GOST 34.10-94 Cryptocom"

const NID_id_GostR3410_94_cc = 850

const OBJ_id_GostR3410_94_cc = (OBJ_cryptocom, Clong(1), Clong(5), Clong(3))

const SN_id_GostR3410_2001_cc = "gost2001cc"

const LN_id_GostR3410_2001_cc = "GOST 34.10-2001 Cryptocom"

const NID_id_GostR3410_2001_cc = 851

const OBJ_id_GostR3410_2001_cc = (OBJ_cryptocom, Clong(1), Clong(5), Clong(4))

const SN_id_GostR3411_94_with_GostR3410_94_cc = "id-GostR3411-94-with-GostR3410-94-cc"

const LN_id_GostR3411_94_with_GostR3410_94_cc = "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom"

const NID_id_GostR3411_94_with_GostR3410_94_cc = 852

const OBJ_id_GostR3411_94_with_GostR3410_94_cc = (OBJ_cryptocom, Clong(1), Clong(3), Clong(3))

const SN_id_GostR3411_94_with_GostR3410_2001_cc = "id-GostR3411-94-with-GostR3410-2001-cc"

const LN_id_GostR3411_94_with_GostR3410_2001_cc = "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom"

const NID_id_GostR3411_94_with_GostR3410_2001_cc = 853

const OBJ_id_GostR3411_94_with_GostR3410_2001_cc = (OBJ_cryptocom, Clong(1), Clong(3), Clong(4))

const SN_id_GostR3410_2001_ParamSet_cc = "id-GostR3410-2001-ParamSet-cc"

const LN_id_GostR3410_2001_ParamSet_cc = "GOST R 3410-2001 Parameter Set Cryptocom"

const NID_id_GostR3410_2001_ParamSet_cc = 854

const OBJ_id_GostR3410_2001_ParamSet_cc = (OBJ_cryptocom, Clong(1), Clong(8), Clong(1))

const SN_id_tc26_algorithms = "id-tc26-algorithms"

const NID_id_tc26_algorithms = 977

const OBJ_id_tc26_algorithms = (OBJ_id_tc26, Clong(1))

const SN_id_tc26_sign = "id-tc26-sign"

const NID_id_tc26_sign = 978

const OBJ_id_tc26_sign = (OBJ_id_tc26_algorithms, Clong(1))

const SN_id_GostR3410_2012_256 = "gost2012_256"

const LN_id_GostR3410_2012_256 = "GOST R 34.10-2012 with 256 bit modulus"

const NID_id_GostR3410_2012_256 = 979

const OBJ_id_GostR3410_2012_256 = (OBJ_id_tc26_sign, Clong(1))

const SN_id_GostR3410_2012_512 = "gost2012_512"

const LN_id_GostR3410_2012_512 = "GOST R 34.10-2012 with 512 bit modulus"

const NID_id_GostR3410_2012_512 = 980

const OBJ_id_GostR3410_2012_512 = (OBJ_id_tc26_sign, Clong(2))

const SN_id_tc26_digest = "id-tc26-digest"

const NID_id_tc26_digest = 981

const OBJ_id_tc26_digest = (OBJ_id_tc26_algorithms, Clong(2))

const SN_id_GostR3411_2012_256 = "md_gost12_256"

const LN_id_GostR3411_2012_256 = "GOST R 34.11-2012 with 256 bit hash"

const NID_id_GostR3411_2012_256 = 982

const OBJ_id_GostR3411_2012_256 = (OBJ_id_tc26_digest, Clong(2))

const SN_id_GostR3411_2012_512 = "md_gost12_512"

const LN_id_GostR3411_2012_512 = "GOST R 34.11-2012 with 512 bit hash"

const NID_id_GostR3411_2012_512 = 983

const OBJ_id_GostR3411_2012_512 = (OBJ_id_tc26_digest, Clong(3))

const SN_id_tc26_signwithdigest = "id-tc26-signwithdigest"

const NID_id_tc26_signwithdigest = 984

const OBJ_id_tc26_signwithdigest = (OBJ_id_tc26_algorithms, Clong(3))

const SN_id_tc26_signwithdigest_gost3410_2012_256 = "id-tc26-signwithdigest-gost3410-2012-256"

const LN_id_tc26_signwithdigest_gost3410_2012_256 = "GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)"

const NID_id_tc26_signwithdigest_gost3410_2012_256 = 985

const OBJ_id_tc26_signwithdigest_gost3410_2012_256 = (OBJ_id_tc26_signwithdigest, Clong(2))

const SN_id_tc26_signwithdigest_gost3410_2012_512 = "id-tc26-signwithdigest-gost3410-2012-512"

const LN_id_tc26_signwithdigest_gost3410_2012_512 = "GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)"

const NID_id_tc26_signwithdigest_gost3410_2012_512 = 986

const OBJ_id_tc26_signwithdigest_gost3410_2012_512 = (OBJ_id_tc26_signwithdigest, Clong(3))

const SN_id_tc26_mac = "id-tc26-mac"

const NID_id_tc26_mac = 987

const OBJ_id_tc26_mac = (OBJ_id_tc26_algorithms, Clong(4))

const SN_id_tc26_hmac_gost_3411_2012_256 = "id-tc26-hmac-gost-3411-2012-256"

const LN_id_tc26_hmac_gost_3411_2012_256 = "HMAC GOST 34.11-2012 256 bit"

const NID_id_tc26_hmac_gost_3411_2012_256 = 988

const OBJ_id_tc26_hmac_gost_3411_2012_256 = (OBJ_id_tc26_mac, Clong(1))

const SN_id_tc26_hmac_gost_3411_2012_512 = "id-tc26-hmac-gost-3411-2012-512"

const LN_id_tc26_hmac_gost_3411_2012_512 = "HMAC GOST 34.11-2012 512 bit"

const NID_id_tc26_hmac_gost_3411_2012_512 = 989

const OBJ_id_tc26_hmac_gost_3411_2012_512 = (OBJ_id_tc26_mac, Clong(2))

const SN_id_tc26_cipher = "id-tc26-cipher"

const NID_id_tc26_cipher = 990

const OBJ_id_tc26_cipher = (OBJ_id_tc26_algorithms, Clong(5))

const SN_id_tc26_cipher_gostr3412_2015_magma = "id-tc26-cipher-gostr3412-2015-magma"

const NID_id_tc26_cipher_gostr3412_2015_magma = 1173

const OBJ_id_tc26_cipher_gostr3412_2015_magma = (OBJ_id_tc26_cipher, Clong(1))

const SN_magma_ctr_acpkm = "magma-ctr-acpkm"

const NID_magma_ctr_acpkm = 1174

const OBJ_magma_ctr_acpkm = (OBJ_id_tc26_cipher_gostr3412_2015_magma, Clong(1))

const SN_magma_ctr_acpkm_omac = "magma-ctr-acpkm-omac"

const NID_magma_ctr_acpkm_omac = 1175

const OBJ_magma_ctr_acpkm_omac = (OBJ_id_tc26_cipher_gostr3412_2015_magma, Clong(2))

const SN_id_tc26_cipher_gostr3412_2015_kuznyechik = "id-tc26-cipher-gostr3412-2015-kuznyechik"

const NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176

const OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = (OBJ_id_tc26_cipher, Clong(2))

const SN_kuznyechik_ctr_acpkm = "kuznyechik-ctr-acpkm"

const NID_kuznyechik_ctr_acpkm = 1177

const OBJ_kuznyechik_ctr_acpkm = (OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik, Clong(1))

const SN_kuznyechik_ctr_acpkm_omac = "kuznyechik-ctr-acpkm-omac"

const NID_kuznyechik_ctr_acpkm_omac = 1178

const OBJ_kuznyechik_ctr_acpkm_omac = (OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik, Clong(2))

const SN_id_tc26_agreement = "id-tc26-agreement"

const NID_id_tc26_agreement = 991

const OBJ_id_tc26_agreement = (OBJ_id_tc26_algorithms, Clong(6))

const SN_id_tc26_agreement_gost_3410_2012_256 = "id-tc26-agreement-gost-3410-2012-256"

const NID_id_tc26_agreement_gost_3410_2012_256 = 992

const OBJ_id_tc26_agreement_gost_3410_2012_256 = (OBJ_id_tc26_agreement, Clong(1))

const SN_id_tc26_agreement_gost_3410_2012_512 = "id-tc26-agreement-gost-3410-2012-512"

const NID_id_tc26_agreement_gost_3410_2012_512 = 993

const OBJ_id_tc26_agreement_gost_3410_2012_512 = (OBJ_id_tc26_agreement, Clong(2))

const SN_id_tc26_wrap = "id-tc26-wrap"

const NID_id_tc26_wrap = 1179

const OBJ_id_tc26_wrap = (OBJ_id_tc26_algorithms, Clong(7))

const SN_id_tc26_wrap_gostr3412_2015_magma = "id-tc26-wrap-gostr3412-2015-magma"

const NID_id_tc26_wrap_gostr3412_2015_magma = 1180

const OBJ_id_tc26_wrap_gostr3412_2015_magma = (OBJ_id_tc26_wrap, Clong(1))

const SN_magma_kexp15 = "magma-kexp15"

const NID_magma_kexp15 = 1181

const OBJ_magma_kexp15 = (OBJ_id_tc26_wrap_gostr3412_2015_magma, Clong(1))

const SN_id_tc26_wrap_gostr3412_2015_kuznyechik = "id-tc26-wrap-gostr3412-2015-kuznyechik"

const NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182

const OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = (OBJ_id_tc26_wrap, Clong(2))

const SN_kuznyechik_kexp15 = "kuznyechik-kexp15"

const NID_kuznyechik_kexp15 = 1183

const OBJ_kuznyechik_kexp15 = (OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik, Clong(1))

const SN_id_tc26_constants = "id-tc26-constants"

const NID_id_tc26_constants = 994

const OBJ_id_tc26_constants = (OBJ_id_tc26, Clong(2))

const SN_id_tc26_sign_constants = "id-tc26-sign-constants"

const NID_id_tc26_sign_constants = 995

const OBJ_id_tc26_sign_constants = (OBJ_id_tc26_constants, Clong(1))

const SN_id_tc26_gost_3410_2012_256_constants = "id-tc26-gost-3410-2012-256-constants"

const NID_id_tc26_gost_3410_2012_256_constants = 1147

const OBJ_id_tc26_gost_3410_2012_256_constants = (OBJ_id_tc26_sign_constants, Clong(1))

const SN_id_tc26_gost_3410_2012_256_paramSetA = "id-tc26-gost-3410-2012-256-paramSetA"

const LN_id_tc26_gost_3410_2012_256_paramSetA = "GOST R 34.10-2012 (256 bit) ParamSet A"

const NID_id_tc26_gost_3410_2012_256_paramSetA = 1148

const OBJ_id_tc26_gost_3410_2012_256_paramSetA = (OBJ_id_tc26_gost_3410_2012_256_constants, Clong(1))

const SN_id_tc26_gost_3410_2012_256_paramSetB = "id-tc26-gost-3410-2012-256-paramSetB"

const LN_id_tc26_gost_3410_2012_256_paramSetB = "GOST R 34.10-2012 (256 bit) ParamSet B"

const NID_id_tc26_gost_3410_2012_256_paramSetB = 1184

const OBJ_id_tc26_gost_3410_2012_256_paramSetB = (OBJ_id_tc26_gost_3410_2012_256_constants, Clong(2))

const SN_id_tc26_gost_3410_2012_256_paramSetC = "id-tc26-gost-3410-2012-256-paramSetC"

const LN_id_tc26_gost_3410_2012_256_paramSetC = "GOST R 34.10-2012 (256 bit) ParamSet C"

const NID_id_tc26_gost_3410_2012_256_paramSetC = 1185

const OBJ_id_tc26_gost_3410_2012_256_paramSetC = (OBJ_id_tc26_gost_3410_2012_256_constants, Clong(3))

const SN_id_tc26_gost_3410_2012_256_paramSetD = "id-tc26-gost-3410-2012-256-paramSetD"

const LN_id_tc26_gost_3410_2012_256_paramSetD = "GOST R 34.10-2012 (256 bit) ParamSet D"

const NID_id_tc26_gost_3410_2012_256_paramSetD = 1186

const OBJ_id_tc26_gost_3410_2012_256_paramSetD = (OBJ_id_tc26_gost_3410_2012_256_constants, Clong(4))

const SN_id_tc26_gost_3410_2012_512_constants = "id-tc26-gost-3410-2012-512-constants"

const NID_id_tc26_gost_3410_2012_512_constants = 996

const OBJ_id_tc26_gost_3410_2012_512_constants = (OBJ_id_tc26_sign_constants, Clong(2))

const SN_id_tc26_gost_3410_2012_512_paramSetTest = "id-tc26-gost-3410-2012-512-paramSetTest"

const LN_id_tc26_gost_3410_2012_512_paramSetTest = "GOST R 34.10-2012 (512 bit) testing parameter set"

const NID_id_tc26_gost_3410_2012_512_paramSetTest = 997

const OBJ_id_tc26_gost_3410_2012_512_paramSetTest = (OBJ_id_tc26_gost_3410_2012_512_constants, Clong(0))

const SN_id_tc26_gost_3410_2012_512_paramSetA = "id-tc26-gost-3410-2012-512-paramSetA"

const LN_id_tc26_gost_3410_2012_512_paramSetA = "GOST R 34.10-2012 (512 bit) ParamSet A"

const NID_id_tc26_gost_3410_2012_512_paramSetA = 998

const OBJ_id_tc26_gost_3410_2012_512_paramSetA = (OBJ_id_tc26_gost_3410_2012_512_constants, Clong(1))

const SN_id_tc26_gost_3410_2012_512_paramSetB = "id-tc26-gost-3410-2012-512-paramSetB"

const LN_id_tc26_gost_3410_2012_512_paramSetB = "GOST R 34.10-2012 (512 bit) ParamSet B"

const NID_id_tc26_gost_3410_2012_512_paramSetB = 999

const OBJ_id_tc26_gost_3410_2012_512_paramSetB = (OBJ_id_tc26_gost_3410_2012_512_constants, Clong(2))

const SN_id_tc26_gost_3410_2012_512_paramSetC = "id-tc26-gost-3410-2012-512-paramSetC"

const LN_id_tc26_gost_3410_2012_512_paramSetC = "GOST R 34.10-2012 (512 bit) ParamSet C"

const NID_id_tc26_gost_3410_2012_512_paramSetC = 1149

const OBJ_id_tc26_gost_3410_2012_512_paramSetC = (OBJ_id_tc26_gost_3410_2012_512_constants, Clong(3))

const SN_id_tc26_digest_constants = "id-tc26-digest-constants"

const NID_id_tc26_digest_constants = 1000

const OBJ_id_tc26_digest_constants = (OBJ_id_tc26_constants, Clong(2))

const SN_id_tc26_cipher_constants = "id-tc26-cipher-constants"

const NID_id_tc26_cipher_constants = 1001

const OBJ_id_tc26_cipher_constants = (OBJ_id_tc26_constants, Clong(5))

const SN_id_tc26_gost_28147_constants = "id-tc26-gost-28147-constants"

const NID_id_tc26_gost_28147_constants = 1002

const OBJ_id_tc26_gost_28147_constants = (OBJ_id_tc26_cipher_constants, Clong(1))

const SN_id_tc26_gost_28147_param_Z = "id-tc26-gost-28147-param-Z"

const LN_id_tc26_gost_28147_param_Z = "GOST 28147-89 TC26 parameter set"

const NID_id_tc26_gost_28147_param_Z = 1003

const OBJ_id_tc26_gost_28147_param_Z = (OBJ_id_tc26_gost_28147_constants, Clong(1))

const SN_INN = "INN"

const LN_INN = "INN"

const NID_INN = 1004

const OBJ_INN = (OBJ_member_body, Clong(643), Clong(3), Clong(131), Clong(1), Clong(1))

const SN_OGRN = "OGRN"

const LN_OGRN = "OGRN"

const NID_OGRN = 1005

const OBJ_OGRN = (OBJ_member_body, Clong(643), Clong(100), Clong(1))

const SN_SNILS = "SNILS"

const LN_SNILS = "SNILS"

const NID_SNILS = 1006

const OBJ_SNILS = (OBJ_member_body, Clong(643), Clong(100), Clong(3))

const SN_OGRNIP = "OGRNIP"

const LN_OGRNIP = "OGRNIP"

const NID_OGRNIP = 1226

const OBJ_OGRNIP = (OBJ_member_body, Clong(643), Clong(100), Clong(5))

const SN_subjectSignTool = "subjectSignTool"

const LN_subjectSignTool = "Signing Tool of Subject"

const NID_subjectSignTool = 1007

const OBJ_subjectSignTool = (OBJ_member_body, Clong(643), Clong(100), Clong(111))

const SN_issuerSignTool = "issuerSignTool"

const LN_issuerSignTool = "Signing Tool of Issuer"

const NID_issuerSignTool = 1008

const OBJ_issuerSignTool = (OBJ_member_body, Clong(643), Clong(100), Clong(112))

const SN_classSignTool = "classSignTool"

const LN_classSignTool = "Class of Signing Tool"

const NID_classSignTool = 1227

const OBJ_classSignTool = (OBJ_member_body, Clong(643), Clong(100), Clong(113))

const SN_classSignToolKC1 = "classSignToolKC1"

const LN_classSignToolKC1 = "Class of Signing Tool KC1"

const NID_classSignToolKC1 = 1228

const OBJ_classSignToolKC1 = (OBJ_member_body, Clong(643), Clong(100), Clong(113), Clong(1))

const SN_classSignToolKC2 = "classSignToolKC2"

const LN_classSignToolKC2 = "Class of Signing Tool KC2"

const NID_classSignToolKC2 = 1229

const OBJ_classSignToolKC2 = (OBJ_member_body, Clong(643), Clong(100), Clong(113), Clong(2))

const SN_classSignToolKC3 = "classSignToolKC3"

const LN_classSignToolKC3 = "Class of Signing Tool KC3"

const NID_classSignToolKC3 = 1230

const OBJ_classSignToolKC3 = (OBJ_member_body, Clong(643), Clong(100), Clong(113), Clong(3))

const SN_classSignToolKB1 = "classSignToolKB1"

const LN_classSignToolKB1 = "Class of Signing Tool KB1"

const NID_classSignToolKB1 = 1231

const OBJ_classSignToolKB1 = (OBJ_member_body, Clong(643), Clong(100), Clong(113), Clong(4))

const SN_classSignToolKB2 = "classSignToolKB2"

const LN_classSignToolKB2 = "Class of Signing Tool KB2"

const NID_classSignToolKB2 = 1232

const OBJ_classSignToolKB2 = (OBJ_member_body, Clong(643), Clong(100), Clong(113), Clong(5))

const SN_classSignToolKA1 = "classSignToolKA1"

const LN_classSignToolKA1 = "Class of Signing Tool KA1"

const NID_classSignToolKA1 = 1233

const OBJ_classSignToolKA1 = (OBJ_member_body, Clong(643), Clong(100), Clong(113), Clong(6))

const SN_kuznyechik_ecb = "kuznyechik-ecb"

const NID_kuznyechik_ecb = 1012

const SN_kuznyechik_ctr = "kuznyechik-ctr"

const NID_kuznyechik_ctr = 1013

const SN_kuznyechik_ofb = "kuznyechik-ofb"

const NID_kuznyechik_ofb = 1014

const SN_kuznyechik_cbc = "kuznyechik-cbc"

const NID_kuznyechik_cbc = 1015

const SN_kuznyechik_cfb = "kuznyechik-cfb"

const NID_kuznyechik_cfb = 1016

const SN_kuznyechik_mac = "kuznyechik-mac"

const NID_kuznyechik_mac = 1017

const SN_magma_ecb = "magma-ecb"

const NID_magma_ecb = 1187

const SN_magma_ctr = "magma-ctr"

const NID_magma_ctr = 1188

const SN_magma_ofb = "magma-ofb"

const NID_magma_ofb = 1189

const SN_magma_cbc = "magma-cbc"

const NID_magma_cbc = 1190

const SN_magma_cfb = "magma-cfb"

const NID_magma_cfb = 1191

const SN_magma_mac = "magma-mac"

const NID_magma_mac = 1192

const SN_camellia_128_cbc = "CAMELLIA-128-CBC"

const LN_camellia_128_cbc = "camellia-128-cbc"

const NID_camellia_128_cbc = 751

const OBJ_camellia_128_cbc = (Clong(1), Clong(2), Clong(392), Clong(200011), Clong(61), Clong(1), Clong(1), Clong(1), Clong(2))

const SN_camellia_192_cbc = "CAMELLIA-192-CBC"

const LN_camellia_192_cbc = "camellia-192-cbc"

const NID_camellia_192_cbc = 752

const OBJ_camellia_192_cbc = (Clong(1), Clong(2), Clong(392), Clong(200011), Clong(61), Clong(1), Clong(1), Clong(1), Clong(3))

const SN_camellia_256_cbc = "CAMELLIA-256-CBC"

const LN_camellia_256_cbc = "camellia-256-cbc"

const NID_camellia_256_cbc = 753

const OBJ_camellia_256_cbc = (Clong(1), Clong(2), Clong(392), Clong(200011), Clong(61), Clong(1), Clong(1), Clong(1), Clong(4))

const SN_id_camellia128_wrap = "id-camellia128-wrap"

const NID_id_camellia128_wrap = 907

const OBJ_id_camellia128_wrap = (Clong(1), Clong(2), Clong(392), Clong(200011), Clong(61), Clong(1), Clong(1), Clong(3), Clong(2))

const SN_id_camellia192_wrap = "id-camellia192-wrap"

const NID_id_camellia192_wrap = 908

const OBJ_id_camellia192_wrap = (Clong(1), Clong(2), Clong(392), Clong(200011), Clong(61), Clong(1), Clong(1), Clong(3), Clong(3))

const SN_id_camellia256_wrap = "id-camellia256-wrap"

const NID_id_camellia256_wrap = 909

const OBJ_id_camellia256_wrap = (Clong(1), Clong(2), Clong(392), Clong(200011), Clong(61), Clong(1), Clong(1), Clong(3), Clong(4))

const OBJ_ntt_ds = (Clong(0), Clong(3), Clong(4401), Clong(5))

const OBJ_camellia = (OBJ_ntt_ds, Clong(3), Clong(1), Clong(9))

const SN_camellia_128_ecb = "CAMELLIA-128-ECB"

const LN_camellia_128_ecb = "camellia-128-ecb"

const NID_camellia_128_ecb = 754

const OBJ_camellia_128_ecb = (OBJ_camellia, Clong(1))

const SN_camellia_128_ofb128 = "CAMELLIA-128-OFB"

const LN_camellia_128_ofb128 = "camellia-128-ofb"

const NID_camellia_128_ofb128 = 766

const OBJ_camellia_128_ofb128 = (OBJ_camellia, Clong(3))

const SN_camellia_128_cfb128 = "CAMELLIA-128-CFB"

const LN_camellia_128_cfb128 = "camellia-128-cfb"

const NID_camellia_128_cfb128 = 757

const OBJ_camellia_128_cfb128 = (OBJ_camellia, Clong(4))

const SN_camellia_128_gcm = "CAMELLIA-128-GCM"

const LN_camellia_128_gcm = "camellia-128-gcm"

const NID_camellia_128_gcm = 961

const OBJ_camellia_128_gcm = (OBJ_camellia, Clong(6))

const SN_camellia_128_ccm = "CAMELLIA-128-CCM"

const LN_camellia_128_ccm = "camellia-128-ccm"

const NID_camellia_128_ccm = 962

const OBJ_camellia_128_ccm = (OBJ_camellia, Clong(7))

const SN_camellia_128_ctr = "CAMELLIA-128-CTR"

const LN_camellia_128_ctr = "camellia-128-ctr"

const NID_camellia_128_ctr = 963

const OBJ_camellia_128_ctr = (OBJ_camellia, Clong(9))

const SN_camellia_128_cmac = "CAMELLIA-128-CMAC"

const LN_camellia_128_cmac = "camellia-128-cmac"

const NID_camellia_128_cmac = 964

const OBJ_camellia_128_cmac = (OBJ_camellia, Clong(10))

const SN_camellia_192_ecb = "CAMELLIA-192-ECB"

const LN_camellia_192_ecb = "camellia-192-ecb"

const NID_camellia_192_ecb = 755

const OBJ_camellia_192_ecb = (OBJ_camellia, Clong(21))

const SN_camellia_192_ofb128 = "CAMELLIA-192-OFB"

const LN_camellia_192_ofb128 = "camellia-192-ofb"

const NID_camellia_192_ofb128 = 767

const OBJ_camellia_192_ofb128 = (OBJ_camellia, Clong(23))

const SN_camellia_192_cfb128 = "CAMELLIA-192-CFB"

const LN_camellia_192_cfb128 = "camellia-192-cfb"

const NID_camellia_192_cfb128 = 758

const OBJ_camellia_192_cfb128 = (OBJ_camellia, Clong(24))

const SN_camellia_192_gcm = "CAMELLIA-192-GCM"

const LN_camellia_192_gcm = "camellia-192-gcm"

const NID_camellia_192_gcm = 965

const OBJ_camellia_192_gcm = (OBJ_camellia, Clong(26))

const SN_camellia_192_ccm = "CAMELLIA-192-CCM"

const LN_camellia_192_ccm = "camellia-192-ccm"

const NID_camellia_192_ccm = 966

const OBJ_camellia_192_ccm = (OBJ_camellia, Clong(27))

const SN_camellia_192_ctr = "CAMELLIA-192-CTR"

const LN_camellia_192_ctr = "camellia-192-ctr"

const NID_camellia_192_ctr = 967

const OBJ_camellia_192_ctr = (OBJ_camellia, Clong(29))

const SN_camellia_192_cmac = "CAMELLIA-192-CMAC"

const LN_camellia_192_cmac = "camellia-192-cmac"

const NID_camellia_192_cmac = 968

const OBJ_camellia_192_cmac = (OBJ_camellia, Clong(30))

const SN_camellia_256_ecb = "CAMELLIA-256-ECB"

const LN_camellia_256_ecb = "camellia-256-ecb"

const NID_camellia_256_ecb = 756

const OBJ_camellia_256_ecb = (OBJ_camellia, Clong(41))

const SN_camellia_256_ofb128 = "CAMELLIA-256-OFB"

const LN_camellia_256_ofb128 = "camellia-256-ofb"

const NID_camellia_256_ofb128 = 768

const OBJ_camellia_256_ofb128 = (OBJ_camellia, Clong(43))

const SN_camellia_256_cfb128 = "CAMELLIA-256-CFB"

const LN_camellia_256_cfb128 = "camellia-256-cfb"

const NID_camellia_256_cfb128 = 759

const OBJ_camellia_256_cfb128 = (OBJ_camellia, Clong(44))

const SN_camellia_256_gcm = "CAMELLIA-256-GCM"

const LN_camellia_256_gcm = "camellia-256-gcm"

const NID_camellia_256_gcm = 969

const OBJ_camellia_256_gcm = (OBJ_camellia, Clong(46))

const SN_camellia_256_ccm = "CAMELLIA-256-CCM"

const LN_camellia_256_ccm = "camellia-256-ccm"

const NID_camellia_256_ccm = 970

const OBJ_camellia_256_ccm = (OBJ_camellia, Clong(47))

const SN_camellia_256_ctr = "CAMELLIA-256-CTR"

const LN_camellia_256_ctr = "camellia-256-ctr"

const NID_camellia_256_ctr = 971

const OBJ_camellia_256_ctr = (OBJ_camellia, Clong(49))

const SN_camellia_256_cmac = "CAMELLIA-256-CMAC"

const LN_camellia_256_cmac = "camellia-256-cmac"

const NID_camellia_256_cmac = 972

const OBJ_camellia_256_cmac = (OBJ_camellia, Clong(50))

const SN_camellia_128_cfb1 = "CAMELLIA-128-CFB1"

const LN_camellia_128_cfb1 = "camellia-128-cfb1"

const NID_camellia_128_cfb1 = 760

const SN_camellia_192_cfb1 = "CAMELLIA-192-CFB1"

const LN_camellia_192_cfb1 = "camellia-192-cfb1"

const NID_camellia_192_cfb1 = 761

const SN_camellia_256_cfb1 = "CAMELLIA-256-CFB1"

const LN_camellia_256_cfb1 = "camellia-256-cfb1"

const NID_camellia_256_cfb1 = 762

const SN_camellia_128_cfb8 = "CAMELLIA-128-CFB8"

const LN_camellia_128_cfb8 = "camellia-128-cfb8"

const NID_camellia_128_cfb8 = 763

const SN_camellia_192_cfb8 = "CAMELLIA-192-CFB8"

const LN_camellia_192_cfb8 = "camellia-192-cfb8"

const NID_camellia_192_cfb8 = 764

const SN_camellia_256_cfb8 = "CAMELLIA-256-CFB8"

const LN_camellia_256_cfb8 = "camellia-256-cfb8"

const NID_camellia_256_cfb8 = 765

const OBJ_aria = (Clong(1), Clong(2), Clong(410), Clong(200046), Clong(1), Clong(1))

const SN_aria_128_ecb = "ARIA-128-ECB"

const LN_aria_128_ecb = "aria-128-ecb"

const NID_aria_128_ecb = 1065

const OBJ_aria_128_ecb = (OBJ_aria, Clong(1))

const SN_aria_128_cbc = "ARIA-128-CBC"

const LN_aria_128_cbc = "aria-128-cbc"

const NID_aria_128_cbc = 1066

const OBJ_aria_128_cbc = (OBJ_aria, Clong(2))

const SN_aria_128_cfb128 = "ARIA-128-CFB"

const LN_aria_128_cfb128 = "aria-128-cfb"

const NID_aria_128_cfb128 = 1067

const OBJ_aria_128_cfb128 = (OBJ_aria, Clong(3))

const SN_aria_128_ofb128 = "ARIA-128-OFB"

const LN_aria_128_ofb128 = "aria-128-ofb"

const NID_aria_128_ofb128 = 1068

const OBJ_aria_128_ofb128 = (OBJ_aria, Clong(4))

const SN_aria_128_ctr = "ARIA-128-CTR"

const LN_aria_128_ctr = "aria-128-ctr"

const NID_aria_128_ctr = 1069

const OBJ_aria_128_ctr = (OBJ_aria, Clong(5))

const SN_aria_192_ecb = "ARIA-192-ECB"

const LN_aria_192_ecb = "aria-192-ecb"

const NID_aria_192_ecb = 1070

const OBJ_aria_192_ecb = (OBJ_aria, Clong(6))

const SN_aria_192_cbc = "ARIA-192-CBC"

const LN_aria_192_cbc = "aria-192-cbc"

const NID_aria_192_cbc = 1071

const OBJ_aria_192_cbc = (OBJ_aria, Clong(7))

const SN_aria_192_cfb128 = "ARIA-192-CFB"

const LN_aria_192_cfb128 = "aria-192-cfb"

const NID_aria_192_cfb128 = 1072

const OBJ_aria_192_cfb128 = (OBJ_aria, Clong(8))

const SN_aria_192_ofb128 = "ARIA-192-OFB"

const LN_aria_192_ofb128 = "aria-192-ofb"

const NID_aria_192_ofb128 = 1073

const OBJ_aria_192_ofb128 = (OBJ_aria, Clong(9))

const SN_aria_192_ctr = "ARIA-192-CTR"

const LN_aria_192_ctr = "aria-192-ctr"

const NID_aria_192_ctr = 1074

const OBJ_aria_192_ctr = (OBJ_aria, Clong(10))

const SN_aria_256_ecb = "ARIA-256-ECB"

const LN_aria_256_ecb = "aria-256-ecb"

const NID_aria_256_ecb = 1075

const OBJ_aria_256_ecb = (OBJ_aria, Clong(11))

const SN_aria_256_cbc = "ARIA-256-CBC"

const LN_aria_256_cbc = "aria-256-cbc"

const NID_aria_256_cbc = 1076

const OBJ_aria_256_cbc = (OBJ_aria, Clong(12))

const SN_aria_256_cfb128 = "ARIA-256-CFB"

const LN_aria_256_cfb128 = "aria-256-cfb"

const NID_aria_256_cfb128 = 1077

const OBJ_aria_256_cfb128 = (OBJ_aria, Clong(13))

const SN_aria_256_ofb128 = "ARIA-256-OFB"

const LN_aria_256_ofb128 = "aria-256-ofb"

const NID_aria_256_ofb128 = 1078

const OBJ_aria_256_ofb128 = (OBJ_aria, Clong(14))

const SN_aria_256_ctr = "ARIA-256-CTR"

const LN_aria_256_ctr = "aria-256-ctr"

const NID_aria_256_ctr = 1079

const OBJ_aria_256_ctr = (OBJ_aria, Clong(15))

const SN_aria_128_cfb1 = "ARIA-128-CFB1"

const LN_aria_128_cfb1 = "aria-128-cfb1"

const NID_aria_128_cfb1 = 1080

const SN_aria_192_cfb1 = "ARIA-192-CFB1"

const LN_aria_192_cfb1 = "aria-192-cfb1"

const NID_aria_192_cfb1 = 1081

const SN_aria_256_cfb1 = "ARIA-256-CFB1"

const LN_aria_256_cfb1 = "aria-256-cfb1"

const NID_aria_256_cfb1 = 1082

const SN_aria_128_cfb8 = "ARIA-128-CFB8"

const LN_aria_128_cfb8 = "aria-128-cfb8"

const NID_aria_128_cfb8 = 1083

const SN_aria_192_cfb8 = "ARIA-192-CFB8"

const LN_aria_192_cfb8 = "aria-192-cfb8"

const NID_aria_192_cfb8 = 1084

const SN_aria_256_cfb8 = "ARIA-256-CFB8"

const LN_aria_256_cfb8 = "aria-256-cfb8"

const NID_aria_256_cfb8 = 1085

const SN_aria_128_ccm = "ARIA-128-CCM"

const LN_aria_128_ccm = "aria-128-ccm"

const NID_aria_128_ccm = 1120

const OBJ_aria_128_ccm = (OBJ_aria, Clong(37))

const SN_aria_192_ccm = "ARIA-192-CCM"

const LN_aria_192_ccm = "aria-192-ccm"

const NID_aria_192_ccm = 1121

const OBJ_aria_192_ccm = (OBJ_aria, Clong(38))

const SN_aria_256_ccm = "ARIA-256-CCM"

const LN_aria_256_ccm = "aria-256-ccm"

const NID_aria_256_ccm = 1122

const OBJ_aria_256_ccm = (OBJ_aria, Clong(39))

const SN_aria_128_gcm = "ARIA-128-GCM"

const LN_aria_128_gcm = "aria-128-gcm"

const NID_aria_128_gcm = 1123

const OBJ_aria_128_gcm = (OBJ_aria, Clong(34))

const SN_aria_192_gcm = "ARIA-192-GCM"

const LN_aria_192_gcm = "aria-192-gcm"

const NID_aria_192_gcm = 1124

const OBJ_aria_192_gcm = (OBJ_aria, Clong(35))

const SN_aria_256_gcm = "ARIA-256-GCM"

const LN_aria_256_gcm = "aria-256-gcm"

const NID_aria_256_gcm = 1125

const OBJ_aria_256_gcm = (OBJ_aria, Clong(36))

const SN_kisa = "KISA"

const LN_kisa = "kisa"

const NID_kisa = 773

const OBJ_kisa = (OBJ_member_body, Clong(410), Clong(200004))

const SN_seed_ecb = "SEED-ECB"

const LN_seed_ecb = "seed-ecb"

const NID_seed_ecb = 776

const OBJ_seed_ecb = (OBJ_kisa, Clong(1), Clong(3))

const SN_seed_cbc = "SEED-CBC"

const LN_seed_cbc = "seed-cbc"

const NID_seed_cbc = 777

const OBJ_seed_cbc = (OBJ_kisa, Clong(1), Clong(4))

const SN_seed_cfb128 = "SEED-CFB"

const LN_seed_cfb128 = "seed-cfb"

const NID_seed_cfb128 = 779

const OBJ_seed_cfb128 = (OBJ_kisa, Clong(1), Clong(5))

const SN_seed_ofb128 = "SEED-OFB"

const LN_seed_ofb128 = "seed-ofb"

const NID_seed_ofb128 = 778

const OBJ_seed_ofb128 = (OBJ_kisa, Clong(1), Clong(6))

const SN_sm4_ecb = "SM4-ECB"

const LN_sm4_ecb = "sm4-ecb"

const NID_sm4_ecb = 1133

const OBJ_sm4_ecb = (OBJ_sm_scheme, Clong(104), Clong(1))

const SN_sm4_cbc = "SM4-CBC"

const LN_sm4_cbc = "sm4-cbc"

const NID_sm4_cbc = 1134

const OBJ_sm4_cbc = (OBJ_sm_scheme, Clong(104), Clong(2))

const SN_sm4_ofb128 = "SM4-OFB"

const LN_sm4_ofb128 = "sm4-ofb"

const NID_sm4_ofb128 = 1135

const OBJ_sm4_ofb128 = (OBJ_sm_scheme, Clong(104), Clong(3))

const SN_sm4_cfb128 = "SM4-CFB"

const LN_sm4_cfb128 = "sm4-cfb"

const NID_sm4_cfb128 = 1137

const OBJ_sm4_cfb128 = (OBJ_sm_scheme, Clong(104), Clong(4))

const SN_sm4_cfb1 = "SM4-CFB1"

const LN_sm4_cfb1 = "sm4-cfb1"

const NID_sm4_cfb1 = 1136

const OBJ_sm4_cfb1 = (OBJ_sm_scheme, Clong(104), Clong(5))

const SN_sm4_cfb8 = "SM4-CFB8"

const LN_sm4_cfb8 = "sm4-cfb8"

const NID_sm4_cfb8 = 1138

const OBJ_sm4_cfb8 = (OBJ_sm_scheme, Clong(104), Clong(6))

const SN_sm4_ctr = "SM4-CTR"

const LN_sm4_ctr = "sm4-ctr"

const NID_sm4_ctr = 1139

const OBJ_sm4_ctr = (OBJ_sm_scheme, Clong(104), Clong(7))

const SN_hmac = "HMAC"

const LN_hmac = "hmac"

const NID_hmac = 855

const SN_cmac = "CMAC"

const LN_cmac = "cmac"

const NID_cmac = 894

const SN_rc4_hmac_md5 = "RC4-HMAC-MD5"

const LN_rc4_hmac_md5 = "rc4-hmac-md5"

const NID_rc4_hmac_md5 = 915

const SN_aes_128_cbc_hmac_sha1 = "AES-128-CBC-HMAC-SHA1"

const LN_aes_128_cbc_hmac_sha1 = "aes-128-cbc-hmac-sha1"

const NID_aes_128_cbc_hmac_sha1 = 916

const SN_aes_192_cbc_hmac_sha1 = "AES-192-CBC-HMAC-SHA1"

const LN_aes_192_cbc_hmac_sha1 = "aes-192-cbc-hmac-sha1"

const NID_aes_192_cbc_hmac_sha1 = 917

const SN_aes_256_cbc_hmac_sha1 = "AES-256-CBC-HMAC-SHA1"

const LN_aes_256_cbc_hmac_sha1 = "aes-256-cbc-hmac-sha1"

const NID_aes_256_cbc_hmac_sha1 = 918

const SN_aes_128_cbc_hmac_sha256 = "AES-128-CBC-HMAC-SHA256"

const LN_aes_128_cbc_hmac_sha256 = "aes-128-cbc-hmac-sha256"

const NID_aes_128_cbc_hmac_sha256 = 948

const SN_aes_192_cbc_hmac_sha256 = "AES-192-CBC-HMAC-SHA256"

const LN_aes_192_cbc_hmac_sha256 = "aes-192-cbc-hmac-sha256"

const NID_aes_192_cbc_hmac_sha256 = 949

const SN_aes_256_cbc_hmac_sha256 = "AES-256-CBC-HMAC-SHA256"

const LN_aes_256_cbc_hmac_sha256 = "aes-256-cbc-hmac-sha256"

const NID_aes_256_cbc_hmac_sha256 = 950

const SN_chacha20_poly1305 = "ChaCha20-Poly1305"

const LN_chacha20_poly1305 = "chacha20-poly1305"

const NID_chacha20_poly1305 = 1018

const SN_chacha20 = "ChaCha20"

const LN_chacha20 = "chacha20"

const NID_chacha20 = 1019

const SN_dhpublicnumber = "dhpublicnumber"

const LN_dhpublicnumber = "X9.42 DH"

const NID_dhpublicnumber = 920

const OBJ_dhpublicnumber = (OBJ_ISO_US, Clong(10046), Clong(2), Clong(1))

const SN_brainpoolP160r1 = "brainpoolP160r1"

const NID_brainpoolP160r1 = 921

const OBJ_brainpoolP160r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(1))

const SN_brainpoolP160t1 = "brainpoolP160t1"

const NID_brainpoolP160t1 = 922

const OBJ_brainpoolP160t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(2))

const SN_brainpoolP192r1 = "brainpoolP192r1"

const NID_brainpoolP192r1 = 923

const OBJ_brainpoolP192r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(3))

const SN_brainpoolP192t1 = "brainpoolP192t1"

const NID_brainpoolP192t1 = 924

const OBJ_brainpoolP192t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(4))

const SN_brainpoolP224r1 = "brainpoolP224r1"

const NID_brainpoolP224r1 = 925

const OBJ_brainpoolP224r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(5))

const SN_brainpoolP224t1 = "brainpoolP224t1"

const NID_brainpoolP224t1 = 926

const OBJ_brainpoolP224t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(6))

const SN_brainpoolP256r1 = "brainpoolP256r1"

const NID_brainpoolP256r1 = 927

const OBJ_brainpoolP256r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(7))

const SN_brainpoolP256t1 = "brainpoolP256t1"

const NID_brainpoolP256t1 = 928

const OBJ_brainpoolP256t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(8))

const SN_brainpoolP320r1 = "brainpoolP320r1"

const NID_brainpoolP320r1 = 929

const OBJ_brainpoolP320r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(9))

const SN_brainpoolP320t1 = "brainpoolP320t1"

const NID_brainpoolP320t1 = 930

const OBJ_brainpoolP320t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(10))

const SN_brainpoolP384r1 = "brainpoolP384r1"

const NID_brainpoolP384r1 = 931

const OBJ_brainpoolP384r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(11))

const SN_brainpoolP384t1 = "brainpoolP384t1"

const NID_brainpoolP384t1 = 932

const OBJ_brainpoolP384t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(12))

const SN_brainpoolP512r1 = "brainpoolP512r1"

const NID_brainpoolP512r1 = 933

const OBJ_brainpoolP512r1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(13))

const SN_brainpoolP512t1 = "brainpoolP512t1"

const NID_brainpoolP512t1 = 934

const OBJ_brainpoolP512t1 = (Clong(1), Clong(3), Clong(36), Clong(3), Clong(3), Clong(2), Clong(8), Clong(1), Clong(1), Clong(14))

const OBJ_x9_63_scheme = (Clong(1), Clong(3), Clong(133), Clong(16), Clong(840), Clong(63), Clong(0))

const OBJ_secg_scheme = (OBJ_certicom_arc, Clong(1))

const SN_dhSinglePass_stdDH_sha1kdf_scheme = "dhSinglePass-stdDH-sha1kdf-scheme"

const NID_dhSinglePass_stdDH_sha1kdf_scheme = 936

const OBJ_dhSinglePass_stdDH_sha1kdf_scheme = (OBJ_x9_63_scheme, Clong(2))

const SN_dhSinglePass_stdDH_sha224kdf_scheme = "dhSinglePass-stdDH-sha224kdf-scheme"

const NID_dhSinglePass_stdDH_sha224kdf_scheme = 937

const OBJ_dhSinglePass_stdDH_sha224kdf_scheme = (OBJ_secg_scheme, Clong(11), Clong(0))

const SN_dhSinglePass_stdDH_sha256kdf_scheme = "dhSinglePass-stdDH-sha256kdf-scheme"

const NID_dhSinglePass_stdDH_sha256kdf_scheme = 938

const OBJ_dhSinglePass_stdDH_sha256kdf_scheme = (OBJ_secg_scheme, Clong(11), Clong(1))

const SN_dhSinglePass_stdDH_sha384kdf_scheme = "dhSinglePass-stdDH-sha384kdf-scheme"

const NID_dhSinglePass_stdDH_sha384kdf_scheme = 939

const OBJ_dhSinglePass_stdDH_sha384kdf_scheme = (OBJ_secg_scheme, Clong(11), Clong(2))

const SN_dhSinglePass_stdDH_sha512kdf_scheme = "dhSinglePass-stdDH-sha512kdf-scheme"

const NID_dhSinglePass_stdDH_sha512kdf_scheme = 940

const OBJ_dhSinglePass_stdDH_sha512kdf_scheme = (OBJ_secg_scheme, Clong(11), Clong(3))

const SN_dhSinglePass_cofactorDH_sha1kdf_scheme = "dhSinglePass-cofactorDH-sha1kdf-scheme"

const NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941

const OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = (OBJ_x9_63_scheme, Clong(3))

const SN_dhSinglePass_cofactorDH_sha224kdf_scheme = "dhSinglePass-cofactorDH-sha224kdf-scheme"

const NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942

const OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = (OBJ_secg_scheme, Clong(14), Clong(0))

const SN_dhSinglePass_cofactorDH_sha256kdf_scheme = "dhSinglePass-cofactorDH-sha256kdf-scheme"

const NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943

const OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = (OBJ_secg_scheme, Clong(14), Clong(1))

const SN_dhSinglePass_cofactorDH_sha384kdf_scheme = "dhSinglePass-cofactorDH-sha384kdf-scheme"

const NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944

const OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = (OBJ_secg_scheme, Clong(14), Clong(2))

const SN_dhSinglePass_cofactorDH_sha512kdf_scheme = "dhSinglePass-cofactorDH-sha512kdf-scheme"

const NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945

const OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = (OBJ_secg_scheme, Clong(14), Clong(3))

const SN_dh_std_kdf = "dh-std-kdf"

const NID_dh_std_kdf = 946

const SN_dh_cofactor_kdf = "dh-cofactor-kdf"

const NID_dh_cofactor_kdf = 947

const SN_ct_precert_scts = "ct_precert_scts"

const LN_ct_precert_scts = "CT Precertificate SCTs"

const NID_ct_precert_scts = 951

const OBJ_ct_precert_scts = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(11129), Clong(2), Clong(4), Clong(2))

const SN_ct_precert_poison = "ct_precert_poison"

const LN_ct_precert_poison = "CT Precertificate Poison"

const NID_ct_precert_poison = 952

const OBJ_ct_precert_poison = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(11129), Clong(2), Clong(4), Clong(3))

const SN_ct_precert_signer = "ct_precert_signer"

const LN_ct_precert_signer = "CT Precertificate Signer"

const NID_ct_precert_signer = 953

const OBJ_ct_precert_signer = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(11129), Clong(2), Clong(4), Clong(4))

const SN_ct_cert_scts = "ct_cert_scts"

const LN_ct_cert_scts = "CT Certificate SCTs"

const NID_ct_cert_scts = 954

const OBJ_ct_cert_scts = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(11129), Clong(2), Clong(4), Clong(5))

const SN_jurisdictionLocalityName = "jurisdictionL"

const LN_jurisdictionLocalityName = "jurisdictionLocalityName"

const NID_jurisdictionLocalityName = 955

const OBJ_jurisdictionLocalityName = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(60), Clong(2), Clong(1), Clong(1))

const SN_jurisdictionStateOrProvinceName = "jurisdictionST"

const LN_jurisdictionStateOrProvinceName = "jurisdictionStateOrProvinceName"

const NID_jurisdictionStateOrProvinceName = 956

const OBJ_jurisdictionStateOrProvinceName = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(60), Clong(2), Clong(1), Clong(2))

const SN_jurisdictionCountryName = "jurisdictionC"

const LN_jurisdictionCountryName = "jurisdictionCountryName"

const NID_jurisdictionCountryName = 957

const OBJ_jurisdictionCountryName = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(311), Clong(60), Clong(2), Clong(1), Clong(3))

const SN_id_scrypt = "id-scrypt"

const LN_id_scrypt = "scrypt"

const NID_id_scrypt = 973

const OBJ_id_scrypt = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(4), Clong(1), Clong(11591), Clong(4), Clong(11))

const SN_tls1_prf = "TLS1-PRF"

const LN_tls1_prf = "tls1-prf"

const NID_tls1_prf = 1021

const SN_hkdf = "HKDF"

const LN_hkdf = "hkdf"

const NID_hkdf = 1036

const SN_sshkdf = "SSHKDF"

const LN_sshkdf = "sshkdf"

const NID_sshkdf = 1203

const SN_sskdf = "SSKDF"

const LN_sskdf = "sskdf"

const NID_sskdf = 1205

const SN_x942kdf = "X942KDF"

const LN_x942kdf = "x942kdf"

const NID_x942kdf = 1207

const SN_x963kdf = "X963KDF"

const LN_x963kdf = "x963kdf"

const NID_x963kdf = 1206

const SN_id_pkinit = "id-pkinit"

const NID_id_pkinit = 1031

const OBJ_id_pkinit = (Clong(1), Clong(3), Clong(6), Clong(1), Clong(5), Clong(2), Clong(3))

const SN_pkInitClientAuth = "pkInitClientAuth"

const LN_pkInitClientAuth = "PKINIT Client Auth"

const NID_pkInitClientAuth = 1032

const OBJ_pkInitClientAuth = (OBJ_id_pkinit, Clong(4))

const SN_pkInitKDC = "pkInitKDC"

const LN_pkInitKDC = "Signing KDC Response"

const NID_pkInitKDC = 1033

const OBJ_pkInitKDC = (OBJ_id_pkinit, Clong(5))

const SN_X25519 = "X25519"

const NID_X25519 = 1034

const OBJ_X25519 = (Clong(1), Clong(3), Clong(101), Clong(110))

const SN_X448 = "X448"

const NID_X448 = 1035

const OBJ_X448 = (Clong(1), Clong(3), Clong(101), Clong(111))

const SN_ED25519 = "ED25519"

const NID_ED25519 = 1087

const OBJ_ED25519 = (Clong(1), Clong(3), Clong(101), Clong(112))

const SN_ED448 = "ED448"

const NID_ED448 = 1088

const OBJ_ED448 = (Clong(1), Clong(3), Clong(101), Clong(113))

const SN_kx_rsa = "KxRSA"

const LN_kx_rsa = "kx-rsa"

const NID_kx_rsa = 1037

const SN_kx_ecdhe = "KxECDHE"

const LN_kx_ecdhe = "kx-ecdhe"

const NID_kx_ecdhe = 1038

const SN_kx_dhe = "KxDHE"

const LN_kx_dhe = "kx-dhe"

const NID_kx_dhe = 1039

const SN_kx_ecdhe_psk = "KxECDHE-PSK"

const LN_kx_ecdhe_psk = "kx-ecdhe-psk"

const NID_kx_ecdhe_psk = 1040

const SN_kx_dhe_psk = "KxDHE-PSK"

const LN_kx_dhe_psk = "kx-dhe-psk"

const NID_kx_dhe_psk = 1041

const SN_kx_rsa_psk = "KxRSA_PSK"

const LN_kx_rsa_psk = "kx-rsa-psk"

const NID_kx_rsa_psk = 1042

const SN_kx_psk = "KxPSK"

const LN_kx_psk = "kx-psk"

const NID_kx_psk = 1043

const SN_kx_srp = "KxSRP"

const LN_kx_srp = "kx-srp"

const NID_kx_srp = 1044

const SN_kx_gost = "KxGOST"

const LN_kx_gost = "kx-gost"

const NID_kx_gost = 1045

const SN_kx_gost18 = "KxGOST18"

const LN_kx_gost18 = "kx-gost18"

const NID_kx_gost18 = 1218

const SN_kx_any = "KxANY"

const LN_kx_any = "kx-any"

const NID_kx_any = 1063

const SN_auth_rsa = "AuthRSA"

const LN_auth_rsa = "auth-rsa"

const NID_auth_rsa = 1046

const SN_auth_ecdsa = "AuthECDSA"

const LN_auth_ecdsa = "auth-ecdsa"

const NID_auth_ecdsa = 1047

const SN_auth_psk = "AuthPSK"

const LN_auth_psk = "auth-psk"

const NID_auth_psk = 1048

const SN_auth_dss = "AuthDSS"

const LN_auth_dss = "auth-dss"

const NID_auth_dss = 1049

const SN_auth_gost01 = "AuthGOST01"

const LN_auth_gost01 = "auth-gost01"

const NID_auth_gost01 = 1050

const SN_auth_gost12 = "AuthGOST12"

const LN_auth_gost12 = "auth-gost12"

const NID_auth_gost12 = 1051

const SN_auth_srp = "AuthSRP"

const LN_auth_srp = "auth-srp"

const NID_auth_srp = 1052

const SN_auth_null = "AuthNULL"

const LN_auth_null = "auth-null"

const NID_auth_null = 1053

const SN_auth_any = "AuthANY"

const LN_auth_any = "auth-any"

const NID_auth_any = 1064

const SN_poly1305 = "Poly1305"

const LN_poly1305 = "poly1305"

const NID_poly1305 = 1061

const SN_siphash = "SipHash"

const LN_siphash = "siphash"

const NID_siphash = 1062

const SN_ffdhe2048 = "ffdhe2048"

const NID_ffdhe2048 = 1126

const SN_ffdhe3072 = "ffdhe3072"

const NID_ffdhe3072 = 1127

const SN_ffdhe4096 = "ffdhe4096"

const NID_ffdhe4096 = 1128

const SN_ffdhe6144 = "ffdhe6144"

const NID_ffdhe6144 = 1129

const SN_ffdhe8192 = "ffdhe8192"

const NID_ffdhe8192 = 1130

const SN_modp_1536 = "modp_1536"

const NID_modp_1536 = 1212

const SN_modp_2048 = "modp_2048"

const NID_modp_2048 = 1213

const SN_modp_3072 = "modp_3072"

const NID_modp_3072 = 1214

const SN_modp_4096 = "modp_4096"

const NID_modp_4096 = 1215

const SN_modp_6144 = "modp_6144"

const NID_modp_6144 = 1216

const SN_modp_8192 = "modp_8192"

const NID_modp_8192 = 1217

const SN_ISO_UA = "ISO-UA"

const NID_ISO_UA = 1150

const OBJ_ISO_UA = (OBJ_member_body, Clong(804))

const SN_ua_pki = "ua-pki"

const NID_ua_pki = 1151

const OBJ_ua_pki = (OBJ_ISO_UA, Clong(2), Clong(1), Clong(1), Clong(1))

const SN_dstu28147 = "dstu28147"

const LN_dstu28147 = "DSTU Gost 28147-2009"

const NID_dstu28147 = 1152

const OBJ_dstu28147 = (OBJ_ua_pki, Clong(1), Clong(1), Clong(1))

const SN_dstu28147_ofb = "dstu28147-ofb"

const LN_dstu28147_ofb = "DSTU Gost 28147-2009 OFB mode"

const NID_dstu28147_ofb = 1153

const OBJ_dstu28147_ofb = (OBJ_dstu28147, Clong(2))

const SN_dstu28147_cfb = "dstu28147-cfb"

const LN_dstu28147_cfb = "DSTU Gost 28147-2009 CFB mode"

const NID_dstu28147_cfb = 1154

const OBJ_dstu28147_cfb = (OBJ_dstu28147, Clong(3))

const SN_dstu28147_wrap = "dstu28147-wrap"

const LN_dstu28147_wrap = "DSTU Gost 28147-2009 key wrap"

const NID_dstu28147_wrap = 1155

const OBJ_dstu28147_wrap = (OBJ_dstu28147, Clong(5))

const SN_hmacWithDstu34311 = "hmacWithDstu34311"

const LN_hmacWithDstu34311 = "HMAC DSTU Gost 34311-95"

const NID_hmacWithDstu34311 = 1156

const OBJ_hmacWithDstu34311 = (OBJ_ua_pki, Clong(1), Clong(1), Clong(2))

const SN_dstu34311 = "dstu34311"

const LN_dstu34311 = "DSTU Gost 34311-95"

const NID_dstu34311 = 1157

const OBJ_dstu34311 = (OBJ_ua_pki, Clong(1), Clong(2), Clong(1))

const SN_dstu4145le = "dstu4145le"

const LN_dstu4145le = "DSTU 4145-2002 little endian"

const NID_dstu4145le = 1158

const OBJ_dstu4145le = (OBJ_ua_pki, Clong(1), Clong(3), Clong(1), Clong(1))

const SN_dstu4145be = "dstu4145be"

const LN_dstu4145be = "DSTU 4145-2002 big endian"

const NID_dstu4145be = 1159

const OBJ_dstu4145be = (OBJ_dstu4145le, Clong(1), Clong(1))

const SN_uacurve0 = "uacurve0"

const LN_uacurve0 = "DSTU curve 0"

const NID_uacurve0 = 1160

const OBJ_uacurve0 = (OBJ_dstu4145le, Clong(2), Clong(0))

const SN_uacurve1 = "uacurve1"

const LN_uacurve1 = "DSTU curve 1"

const NID_uacurve1 = 1161

const OBJ_uacurve1 = (OBJ_dstu4145le, Clong(2), Clong(1))

const SN_uacurve2 = "uacurve2"

const LN_uacurve2 = "DSTU curve 2"

const NID_uacurve2 = 1162

const OBJ_uacurve2 = (OBJ_dstu4145le, Clong(2), Clong(2))

const SN_uacurve3 = "uacurve3"

const LN_uacurve3 = "DSTU curve 3"

const NID_uacurve3 = 1163

const OBJ_uacurve3 = (OBJ_dstu4145le, Clong(2), Clong(3))

const SN_uacurve4 = "uacurve4"

const LN_uacurve4 = "DSTU curve 4"

const NID_uacurve4 = 1164

const OBJ_uacurve4 = (OBJ_dstu4145le, Clong(2), Clong(4))

const SN_uacurve5 = "uacurve5"

const LN_uacurve5 = "DSTU curve 5"

const NID_uacurve5 = 1165

const OBJ_uacurve5 = (OBJ_dstu4145le, Clong(2), Clong(5))

const SN_uacurve6 = "uacurve6"

const LN_uacurve6 = "DSTU curve 6"

const NID_uacurve6 = 1166

const OBJ_uacurve6 = (OBJ_dstu4145le, Clong(2), Clong(6))

const SN_uacurve7 = "uacurve7"

const LN_uacurve7 = "DSTU curve 7"

const NID_uacurve7 = 1167

const OBJ_uacurve7 = (OBJ_dstu4145le, Clong(2), Clong(7))

const SN_uacurve8 = "uacurve8"

const LN_uacurve8 = "DSTU curve 8"

const NID_uacurve8 = 1168

const OBJ_uacurve8 = (OBJ_dstu4145le, Clong(2), Clong(8))

const SN_uacurve9 = "uacurve9"

const LN_uacurve9 = "DSTU curve 9"

const NID_uacurve9 = 1169

const OBJ_uacurve9 = (OBJ_dstu4145le, Clong(2), Clong(9))

const SN_aes_128_siv = "AES-128-SIV"

const LN_aes_128_siv = "aes-128-siv"

const NID_aes_128_siv = 1198

const SN_aes_192_siv = "AES-192-SIV"

const LN_aes_192_siv = "aes-192-siv"

const NID_aes_192_siv = 1199

const SN_aes_256_siv = "AES-256-SIV"

const LN_aes_256_siv = "aes-256-siv"

const NID_aes_256_siv = 1200

const SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = SN_magma_ctr_acpkm

const NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = NID_magma_ctr_acpkm

const OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = OBJ_magma_ctr_acpkm

const SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = SN_magma_ctr_acpkm_omac

const NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = NID_magma_ctr_acpkm_omac

const OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = OBJ_magma_ctr_acpkm_omac

const SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = SN_kuznyechik_ctr_acpkm

const NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = NID_kuznyechik_ctr_acpkm

const OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = OBJ_kuznyechik_ctr_acpkm

const SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = SN_kuznyechik_ctr_acpkm_omac

const NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = NID_kuznyechik_ctr_acpkm_omac

const OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = OBJ_kuznyechik_ctr_acpkm_omac

const SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 = SN_magma_kexp15

const NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = NID_magma_kexp15

const OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = OBJ_magma_kexp15

const SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = SN_kuznyechik_kexp15

const NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = NID_kuznyechik_kexp15

const OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = OBJ_kuznyechik_kexp15

const SN_grasshopper_ecb = SN_kuznyechik_ecb

const NID_grasshopper_ecb = NID_kuznyechik_ecb

const SN_grasshopper_ctr = SN_kuznyechik_ctr

const NID_grasshopper_ctr = NID_kuznyechik_ctr

const SN_grasshopper_ofb = SN_kuznyechik_ofb

const NID_grasshopper_ofb = NID_kuznyechik_ofb

const SN_grasshopper_cbc = SN_kuznyechik_cbc

const NID_grasshopper_cbc = NID_kuznyechik_cbc

const SN_grasshopper_cfb = SN_kuznyechik_cfb

const NID_grasshopper_cfb = NID_kuznyechik_cfb

const SN_grasshopper_mac = SN_kuznyechik_mac

const NID_grasshopper_mac = NID_kuznyechik_mac

const ASN1_R_ADDING_OBJECT = 171

const ASN1_R_ASN1_PARSE_ERROR = 203

const ASN1_R_ASN1_SIG_PARSE_ERROR = 204

const ASN1_R_AUX_ERROR = 100

const ASN1_R_BAD_OBJECT_HEADER = 102

const ASN1_R_BAD_TEMPLATE = 230

const ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214

const ASN1_R_BN_LIB = 105

const ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106

const ASN1_R_BUFFER_TOO_SMALL = 107

const ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108

const ASN1_R_CONTEXT_NOT_INITIALISED = 217

const ASN1_R_DATA_IS_WRONG = 109

const ASN1_R_DECODE_ERROR = 110

const ASN1_R_DEPTH_EXCEEDED = 174

const ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198

const ASN1_R_ENCODE_ERROR = 112

const ASN1_R_ERROR_GETTING_TIME = 173

const ASN1_R_ERROR_LOADING_SECTION = 172

const ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114

const ASN1_R_EXPECTING_AN_INTEGER = 115

const ASN1_R_EXPECTING_AN_OBJECT = 116

const ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119

const ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120

const ASN1_R_FIELD_MISSING = 121

const ASN1_R_FIRST_NUM_TOO_LARGE = 122

const ASN1_R_HEADER_TOO_LONG = 123

const ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175

const ASN1_R_ILLEGAL_BOOLEAN = 176

const ASN1_R_ILLEGAL_CHARACTERS = 124

const ASN1_R_ILLEGAL_FORMAT = 177

const ASN1_R_ILLEGAL_HEX = 178

const ASN1_R_ILLEGAL_IMPLICIT_TAG = 179

const ASN1_R_ILLEGAL_INTEGER = 180

const ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226

const ASN1_R_ILLEGAL_NESTED_TAGGING = 181

const ASN1_R_ILLEGAL_NULL = 125

const ASN1_R_ILLEGAL_NULL_VALUE = 182

const ASN1_R_ILLEGAL_OBJECT = 183

const ASN1_R_ILLEGAL_OPTIONAL_ANY = 126

const ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170

const ASN1_R_ILLEGAL_PADDING = 221

const ASN1_R_ILLEGAL_TAGGED_ANY = 127

const ASN1_R_ILLEGAL_TIME_VALUE = 184

const ASN1_R_ILLEGAL_ZERO_CONTENT = 222

const ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185

const ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128

const ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220

const ASN1_R_INVALID_BMPSTRING_LENGTH = 129

const ASN1_R_INVALID_DIGIT = 130

const ASN1_R_INVALID_MIME_TYPE = 205

const ASN1_R_INVALID_MODIFIER = 186

const ASN1_R_INVALID_NUMBER = 187

const ASN1_R_INVALID_OBJECT_ENCODING = 216

const ASN1_R_INVALID_SCRYPT_PARAMETERS = 227

const ASN1_R_INVALID_SEPARATOR = 131

const ASN1_R_INVALID_STRING_TABLE_VALUE = 218

const ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133

const ASN1_R_INVALID_UTF8STRING = 134

const ASN1_R_INVALID_VALUE = 219

const ASN1_R_LENGTH_TOO_LONG = 231

const ASN1_R_LIST_ERROR = 188

const ASN1_R_MIME_NO_CONTENT_TYPE = 206

const ASN1_R_MIME_PARSE_ERROR = 207

const ASN1_R_MIME_SIG_PARSE_ERROR = 208

const ASN1_R_MISSING_EOC = 137

const ASN1_R_MISSING_SECOND_NUMBER = 138

const ASN1_R_MISSING_VALUE = 189

const ASN1_R_MSTRING_NOT_UNIVERSAL = 139

const ASN1_R_MSTRING_WRONG_TAG = 140

const ASN1_R_NESTED_ASN1_STRING = 197

const ASN1_R_NESTED_TOO_DEEP = 201

const ASN1_R_NON_HEX_CHARACTERS = 141

const ASN1_R_NOT_ASCII_FORMAT = 190

const ASN1_R_NOT_ENOUGH_DATA = 142

const ASN1_R_NO_CONTENT_TYPE = 209

const ASN1_R_NO_MATCHING_CHOICE_TYPE = 143

const ASN1_R_NO_MULTIPART_BODY_FAILURE = 210

const ASN1_R_NO_MULTIPART_BOUNDARY = 211

const ASN1_R_NO_SIG_CONTENT_TYPE = 212

const ASN1_R_NULL_IS_WRONG_LENGTH = 144

const ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191

const ASN1_R_ODD_NUMBER_OF_CHARS = 145

const ASN1_R_SECOND_NUMBER_TOO_LARGE = 147

const ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148

const ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149

const ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192

const ASN1_R_SHORT_LINE = 150

const ASN1_R_SIG_INVALID_MIME_TYPE = 213

const ASN1_R_STREAMING_NOT_SUPPORTED = 202

const ASN1_R_STRING_TOO_LONG = 151

const ASN1_R_STRING_TOO_SHORT = 152

const ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154

const ASN1_R_TIME_NOT_ASCII_FORMAT = 193

const ASN1_R_TOO_LARGE = 223

const ASN1_R_TOO_LONG = 155

const ASN1_R_TOO_SMALL = 224

const ASN1_R_TYPE_NOT_CONSTRUCTED = 156

const ASN1_R_TYPE_NOT_PRIMITIVE = 195

const ASN1_R_UNEXPECTED_EOC = 159

const ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215

const ASN1_R_UNKNOWN_DIGEST = 229

const ASN1_R_UNKNOWN_FORMAT = 160

const ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161

const ASN1_R_UNKNOWN_OBJECT_TYPE = 162

const ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163

const ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199

const ASN1_R_UNKNOWN_TAG = 194

const ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164

const ASN1_R_UNSUPPORTED_CIPHER = 228

const ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167

const ASN1_R_UNSUPPORTED_TYPE = 196

const ASN1_R_WRONG_INTEGER_TYPE = 225

const ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200

const ASN1_R_WRONG_TAG = 168

const V_ASN1_UNIVERSAL = 0x00

const V_ASN1_APPLICATION = 0x40

const V_ASN1_CONTEXT_SPECIFIC = 0x80

const V_ASN1_PRIVATE = 0xc0

const V_ASN1_CONSTRUCTED = 0x20

const V_ASN1_PRIMITIVE_TAG = 0x1f

# Skipping MacroDefinition: V_ASN1_PRIMATIVE_TAG /*compat*/ V_ASN1_PRIMITIVE_TAG

const V_ASN1_APP_CHOOSE = -2

const V_ASN1_OTHER = -3

const V_ASN1_ANY = -4

const V_ASN1_UNDEF = -1

const V_ASN1_EOC = 0

const V_ASN1_BOOLEAN = 1

const V_ASN1_INTEGER = 2

const V_ASN1_BIT_STRING = 3

const V_ASN1_OCTET_STRING = 4

const V_ASN1_NULL = 5

const V_ASN1_OBJECT = 6

const V_ASN1_OBJECT_DESCRIPTOR = 7

const V_ASN1_EXTERNAL = 8

const V_ASN1_REAL = 9

const V_ASN1_ENUMERATED = 10

const V_ASN1_UTF8STRING = 12

const V_ASN1_SEQUENCE = 16

const V_ASN1_SET = 17

const V_ASN1_NUMERICSTRING = 18

const V_ASN1_PRINTABLESTRING = 19

const V_ASN1_T61STRING = 20

const V_ASN1_TELETEXSTRING = 20

const V_ASN1_VIDEOTEXSTRING = 21

const V_ASN1_IA5STRING = 22

const V_ASN1_UTCTIME = 23

const V_ASN1_GENERALIZEDTIME = 24

const V_ASN1_GRAPHICSTRING = 25

const V_ASN1_ISO64STRING = 26

const V_ASN1_VISIBLESTRING = 26

const V_ASN1_GENERALSTRING = 27

const V_ASN1_UNIVERSALSTRING = 28

const V_ASN1_BMPSTRING = 30

const V_ASN1_NEG = 0x0100

const V_ASN1_NEG_INTEGER = 2 | V_ASN1_NEG

const V_ASN1_NEG_ENUMERATED = 10 | V_ASN1_NEG

const B_ASN1_NUMERICSTRING = 0x0001

const B_ASN1_PRINTABLESTRING = 0x0002

const B_ASN1_T61STRING = 0x0004

const B_ASN1_TELETEXSTRING = 0x0004

const B_ASN1_VIDEOTEXSTRING = 0x0008

const B_ASN1_IA5STRING = 0x0010

const B_ASN1_GRAPHICSTRING = 0x0020

const B_ASN1_ISO64STRING = 0x0040

const B_ASN1_VISIBLESTRING = 0x0040

const B_ASN1_GENERALSTRING = 0x0080

const B_ASN1_UNIVERSALSTRING = 0x0100

const B_ASN1_OCTET_STRING = 0x0200

const B_ASN1_BIT_STRING = 0x0400

const B_ASN1_BMPSTRING = 0x0800

const B_ASN1_UNKNOWN = 0x1000

const B_ASN1_UTF8STRING = 0x2000

const B_ASN1_UTCTIME = 0x4000

const B_ASN1_GENERALIZEDTIME = 0x8000

const B_ASN1_SEQUENCE = 0x00010000

const MBSTRING_FLAG = 0x1000

const MBSTRING_UTF8 = MBSTRING_FLAG

const MBSTRING_ASC = MBSTRING_FLAG | 1

const MBSTRING_BMP = MBSTRING_FLAG | 2

const MBSTRING_UNIV = MBSTRING_FLAG | 4

const SMIME_OLDMIME = 0x0400

const SMIME_CRLFEOL = 0x0800

const SMIME_STREAM = 0x1000

const ASN1_STRING_FLAG_BITS_LEFT = 0x08

const ASN1_STRING_FLAG_NDEF = 0x0010

const ASN1_STRING_FLAG_CONT = 0x0020

const ASN1_STRING_FLAG_MSTRING = 0x0040

const ASN1_STRING_FLAG_EMBED = 0x0080

const ASN1_STRING_FLAG_X509_TIME = 0x0100

const ASN1_LONG_UNDEF = Clong(0x7fffffff)

const STABLE_FLAGS_MALLOC = 0x01

const STABLE_FLAGS_CLEAR = STABLE_FLAGS_MALLOC

const STABLE_NO_MASK = 0x02

const DIRSTRING_TYPE = ((B_ASN1_PRINTABLESTRING | B_ASN1_T61STRING) | B_ASN1_BMPSTRING) | B_ASN1_UTF8STRING

const PKCS9STRING_TYPE = DIRSTRING_TYPE | B_ASN1_IA5STRING

const ub_name = 32768

const ub_common_name = 64

const ub_locality_name = 128

const ub_state_name = 128

const ub_organization_name = 64

const ub_organization_unit_name = 64

const ub_title = 64

const ub_email_address = 128

const ASN1_STRFLGS_ESC_2253 = 1

const ASN1_STRFLGS_ESC_CTRL = 2

const ASN1_STRFLGS_ESC_MSB = 4

const ASN1_DTFLGS_TYPE_MASK = Culong(0x0f)

const ASN1_DTFLGS_RFC822 = Culong(0x00)

const ASN1_DTFLGS_ISO8601 = Culong(0x01)

const ASN1_STRFLGS_ESC_QUOTE = 8

const CHARTYPE_PRINTABLESTRING = 0x10

const CHARTYPE_FIRST_ESC_2253 = 0x20

const CHARTYPE_LAST_ESC_2253 = 0x40

const ASN1_STRFLGS_UTF8_CONVERT = 0x10

const ASN1_STRFLGS_IGNORE_TYPE = 0x20

const ASN1_STRFLGS_SHOW_TYPE = 0x40

const ASN1_STRFLGS_DUMP_ALL = 0x80

const ASN1_STRFLGS_DUMP_UNKNOWN = 0x0100

const ASN1_STRFLGS_DUMP_DER = 0x0200

const ASN1_STRFLGS_ESC_2254 = 0x0400

const ASN1_STRFLGS_RFC2253 = ((((ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL) | ASN1_STRFLGS_ESC_MSB) | ASN1_STRFLGS_UTF8_CONVERT) | ASN1_STRFLGS_DUMP_UNKNOWN) | ASN1_STRFLGS_DUMP_DER

const B_ASN1_TIME = B_ASN1_UTCTIME | B_ASN1_GENERALIZEDTIME

const B_ASN1_PRINTABLE = ((((((((B_ASN1_NUMERICSTRING | B_ASN1_PRINTABLESTRING) | B_ASN1_T61STRING) | B_ASN1_IA5STRING) | B_ASN1_BIT_STRING) | B_ASN1_UNIVERSALSTRING) | B_ASN1_BMPSTRING) | B_ASN1_UTF8STRING) | B_ASN1_SEQUENCE) | B_ASN1_UNKNOWN

const B_ASN1_DIRECTORYSTRING = (((B_ASN1_PRINTABLESTRING | B_ASN1_TELETEXSTRING) | B_ASN1_BMPSTRING) | B_ASN1_UNIVERSALSTRING) | B_ASN1_UTF8STRING

const B_ASN1_DISPLAYTEXT = ((B_ASN1_IA5STRING | B_ASN1_VISIBLESTRING) | B_ASN1_BMPSTRING) | B_ASN1_UTF8STRING

const ASN1_PCTX_FLAGS_SHOW_ABSENT = 0x0001

const ASN1_PCTX_FLAGS_SHOW_SEQUENCE = 0x0002

const ASN1_PCTX_FLAGS_SHOW_SSOF = 0x0004

const ASN1_PCTX_FLAGS_SHOW_TYPE = 0x0008

const ASN1_PCTX_FLAGS_NO_ANY_TYPE = 0x0010

const ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = 0x0020

const ASN1_PCTX_FLAGS_NO_FIELD_NAME = 0x0040

const ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = 0x0080

const ASN1_PCTX_FLAGS_NO_STRUCT_NAME = 0x0100

const OBJ_R_OID_EXISTS = 102

const OBJ_R_UNKNOWN_NID = 101

const OBJ_R_UNKNOWN_OBJECT_NAME = 103

const OBJ_NAME_TYPE_UNDEF = 0x00

const OBJ_NAME_TYPE_MD_METH = 0x01

const OBJ_NAME_TYPE_CIPHER_METH = 0x02

const OBJ_NAME_TYPE_PKEY_METH = 0x03

const OBJ_NAME_TYPE_COMP_METH = 0x04

const OBJ_NAME_TYPE_MAC_METH = 0x05

const OBJ_NAME_TYPE_KDF_METH = 0x06

const OBJ_NAME_TYPE_NUM = 0x07

const OBJ_NAME_ALIAS = 0x8000

const OBJ_BSEARCH_VALUE_ON_NOMATCH = 0x01

const OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 0x02

const EVP_PK_RSA = 0x0001

const EVP_PK_DSA = 0x0002

const EVP_PK_DH = 0x0004

const EVP_PK_EC = 0x0008

const EVP_PKT_SIGN = 0x0010

const EVP_PKT_ENC = 0x0020

const EVP_PKT_EXCH = 0x0040

const EVP_PKS_RSA = 0x0100

const EVP_PKS_DSA = 0x0200

const EVP_PKS_EC = 0x0400

const EVP_PKEY_NONE = NID_undef

const EVP_PKEY_RSA = NID_rsaEncryption

const EVP_PKEY_RSA2 = NID_rsa

const EVP_PKEY_RSA_PSS = NID_rsassaPss

const EVP_PKEY_DSA = NID_dsa

const EVP_PKEY_DSA1 = NID_dsa_2

const EVP_PKEY_DSA2 = NID_dsaWithSHA

const EVP_PKEY_DSA3 = NID_dsaWithSHA1

const EVP_PKEY_DSA4 = NID_dsaWithSHA1_2

const EVP_PKEY_DH = NID_dhKeyAgreement

const EVP_PKEY_DHX = NID_dhpublicnumber

const EVP_PKEY_EC = NID_X9_62_id_ecPublicKey

const EVP_PKEY_SM2 = NID_sm2

const EVP_PKEY_HMAC = NID_hmac

const EVP_PKEY_CMAC = NID_cmac

const EVP_PKEY_SCRYPT = NID_id_scrypt

const EVP_PKEY_TLS1_PRF = NID_tls1_prf

const EVP_PKEY_HKDF = NID_hkdf

const EVP_PKEY_POLY1305 = NID_poly1305

const EVP_PKEY_SIPHASH = NID_siphash

const EVP_PKEY_X25519 = NID_X25519

const EVP_PKEY_ED25519 = NID_ED25519

const EVP_PKEY_X448 = NID_X448

const EVP_PKEY_ED448 = NID_ED448

const EVP_PKEY_KEYMGMT = -1

const EVP_PKEY_KEY_PARAMETERS = OSSL_KEYMGMT_SELECT_ALL_PARAMETERS

const EVP_PKEY_PRIVATE_KEY = EVP_PKEY_KEY_PARAMETERS | OSSL_KEYMGMT_SELECT_PRIVATE_KEY

const EVP_PKEY_PUBLIC_KEY = EVP_PKEY_KEY_PARAMETERS | OSSL_KEYMGMT_SELECT_PUBLIC_KEY

const EVP_PKEY_KEYPAIR = EVP_PKEY_PUBLIC_KEY | OSSL_KEYMGMT_SELECT_PRIVATE_KEY

const EVP_PKEY_MO_SIGN = 0x0001

const EVP_PKEY_MO_VERIFY = 0x0002

const EVP_PKEY_MO_ENCRYPT = 0x0004

const EVP_PKEY_MO_DECRYPT = 0x0008

const EVP_MD_FLAG_ONESHOT = 0x0001

const EVP_MD_FLAG_XOF = 0x0002

const EVP_MD_FLAG_DIGALGID_MASK = 0x0018

const EVP_MD_FLAG_DIGALGID_NULL = 0x0000

const EVP_MD_FLAG_DIGALGID_ABSENT = 0x0008

const EVP_MD_FLAG_DIGALGID_CUSTOM = 0x0018

const EVP_MD_FLAG_FIPS = 0x0400

const EVP_MD_CTRL_DIGALGID = 0x01

const EVP_MD_CTRL_MICALG = 0x02

const EVP_MD_CTRL_XOF_LEN = 0x03

const EVP_MD_CTRL_TLSTREE = 0x04

const EVP_MD_CTRL_ALG_CTRL = 0x1000

const EVP_MD_CTX_FLAG_ONESHOT = 0x0001

const EVP_MD_CTX_FLAG_CLEANED = 0x0002

const EVP_MD_CTX_FLAG_REUSE = 0x0004

const EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 0x0008

const EVP_MD_CTX_FLAG_PAD_MASK = 0xf0

const EVP_MD_CTX_FLAG_PAD_PKCS1 = 0x00

const EVP_MD_CTX_FLAG_PAD_X931 = 0x10

const EVP_MD_CTX_FLAG_PAD_PSS = 0x20

const EVP_MD_CTX_FLAG_NO_INIT = 0x0100

const EVP_MD_CTX_FLAG_FINALISE = 0x0200

const EVP_CIPH_STREAM_CIPHER = 0x00

const EVP_CIPH_ECB_MODE = 0x01

const EVP_CIPH_CBC_MODE = 0x02

const EVP_CIPH_CFB_MODE = 0x03

const EVP_CIPH_OFB_MODE = 0x04

const EVP_CIPH_CTR_MODE = 0x05

const EVP_CIPH_GCM_MODE = 0x06

const EVP_CIPH_CCM_MODE = 0x07

const EVP_CIPH_XTS_MODE = 0x00010001

const EVP_CIPH_WRAP_MODE = 0x00010002

const EVP_CIPH_OCB_MODE = 0x00010003

const EVP_CIPH_SIV_MODE = 0x00010004

const EVP_CIPH_MODE = 0x000f0007

const EVP_CIPH_VARIABLE_LENGTH = 0x08

const EVP_CIPH_CUSTOM_IV = 0x10

const EVP_CIPH_ALWAYS_CALL_INIT = 0x20

const EVP_CIPH_CTRL_INIT = 0x40

const EVP_CIPH_CUSTOM_KEY_LENGTH = 0x80

const EVP_CIPH_NO_PADDING = 0x0100

const EVP_CIPH_RAND_KEY = 0x0200

const EVP_CIPH_CUSTOM_COPY = 0x0400

const EVP_CIPH_CUSTOM_IV_LENGTH = 0x0800

const EVP_CIPH_FLAG_DEFAULT_ASN1 = 0

const EVP_CIPH_FLAG_LENGTH_BITS = 0x2000

const EVP_CIPH_FLAG_FIPS = 0

const EVP_CIPH_FLAG_NON_FIPS_ALLOW = 0

const EVP_CIPH_FLAG_CTS = 0x4000

const EVP_CIPH_FLAG_CUSTOM_CIPHER = 0x00100000

const EVP_CIPH_FLAG_AEAD_CIPHER = 0x00200000

const EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = 0x00400000

const EVP_CIPH_FLAG_PIPELINE = 0X800000

const EVP_CIPH_FLAG_CUSTOM_ASN1 = 0x01000000

const EVP_CIPH_FLAG_CIPHER_WITH_MAC = 0x02000000

const EVP_CIPH_FLAG_GET_WRAP_CIPHER = 0x04000000

const EVP_CIPH_FLAG_INVERSE_CIPHER = 0x08000000

const EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 0x01

const EVP_CTRL_INIT = 0x00

const EVP_CTRL_SET_KEY_LENGTH = 0x01

const EVP_CTRL_GET_RC2_KEY_BITS = 0x02

const EVP_CTRL_SET_RC2_KEY_BITS = 0x03

const EVP_CTRL_GET_RC5_ROUNDS = 0x04

const EVP_CTRL_SET_RC5_ROUNDS = 0x05

const EVP_CTRL_RAND_KEY = 0x06

const EVP_CTRL_PBE_PRF_NID = 0x07

const EVP_CTRL_COPY = 0x08

const EVP_CTRL_AEAD_SET_IVLEN = 0x09

const EVP_CTRL_AEAD_GET_TAG = 0x10

const EVP_CTRL_AEAD_SET_TAG = 0x11

const EVP_CTRL_AEAD_SET_IV_FIXED = 0x12

const EVP_CTRL_GCM_SET_IVLEN = EVP_CTRL_AEAD_SET_IVLEN

const EVP_CTRL_GCM_GET_TAG = EVP_CTRL_AEAD_GET_TAG

const EVP_CTRL_GCM_SET_TAG = EVP_CTRL_AEAD_SET_TAG

const EVP_CTRL_GCM_SET_IV_FIXED = EVP_CTRL_AEAD_SET_IV_FIXED

const EVP_CTRL_GCM_IV_GEN = 0x13

const EVP_CTRL_CCM_SET_IVLEN = EVP_CTRL_AEAD_SET_IVLEN

const EVP_CTRL_CCM_GET_TAG = EVP_CTRL_AEAD_GET_TAG

const EVP_CTRL_CCM_SET_TAG = EVP_CTRL_AEAD_SET_TAG

const EVP_CTRL_CCM_SET_IV_FIXED = EVP_CTRL_AEAD_SET_IV_FIXED

const EVP_CTRL_CCM_SET_L = 0x14

const EVP_CTRL_CCM_SET_MSGLEN = 0x15

const EVP_CTRL_AEAD_TLS1_AAD = 0x16

const EVP_CTRL_AEAD_SET_MAC_KEY = 0x17

const EVP_CTRL_GCM_SET_IV_INV = 0x18

const EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = 0x19

const EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = 0x1a

const EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = 0x1b

const EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = 0x1c

const EVP_CTRL_SSL3_MASTER_SECRET = 0x1d

const EVP_CTRL_SET_SBOX = 0x1e

const EVP_CTRL_SBOX_USED = 0x1f

const EVP_CTRL_KEY_MESH = 0x20

const EVP_CTRL_BLOCK_PADDING_MODE = 0x21

const EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = 0x22

const EVP_CTRL_SET_PIPELINE_INPUT_BUFS = 0x23

const EVP_CTRL_SET_PIPELINE_INPUT_LENS = 0x24

const EVP_CTRL_GET_IVLEN = 0x25

const EVP_CTRL_SET_SPEED = 0x27

const EVP_CTRL_PROCESS_UNPROTECTED = 0x28

const EVP_CTRL_GET_WRAP_CIPHER = 0x29

const EVP_CTRL_TLSTREE = 0x2a

const EVP_PADDING_PKCS7 = 1

const EVP_PADDING_ISO7816_4 = 2

const EVP_PADDING_ANSI923 = 3

const EVP_PADDING_ISO10126 = 4

const EVP_PADDING_ZERO = 5

const EVP_AEAD_TLS1_AAD_LEN = 13

const EVP_GCM_TLS_FIXED_IV_LEN = 4

const EVP_GCM_TLS_EXPLICIT_IV_LEN = 8

const EVP_GCM_TLS_TAG_LEN = 16

const EVP_CCM_TLS_FIXED_IV_LEN = 4

const EVP_CCM_TLS_EXPLICIT_IV_LEN = 8

const EVP_CCM_TLS_IV_LEN = 12

const EVP_CCM_TLS_TAG_LEN = 16

const EVP_CCM8_TLS_TAG_LEN = 8

const EVP_CHACHAPOLY_TLS_TAG_LEN = 16

const EVP_MD_type = EVP_MD_get_type

const EVP_MD_nid = EVP_MD_get_type

const EVP_MD_name = EVP_MD_get0_name

const EVP_MD_pkey_type = EVP_MD_get_pkey_type

const EVP_MD_size = EVP_MD_get_size

const EVP_MD_block_size = EVP_MD_get_block_size

const EVP_MD_flags = EVP_MD_get_flags

const EVP_MD_CTX_size = EVP_MD_CTX_get_size

const EVP_MD_CTX_block_size = EVP_MD_CTX_get_block_size

const EVP_MD_CTX_type = EVP_MD_CTX_get_type

const EVP_MD_CTX_pkey_ctx = EVP_MD_CTX_get_pkey_ctx

const EVP_MD_CTX_md_data = EVP_MD_CTX_get0_md_data

const EVP_CIPHER_nid = EVP_CIPHER_get_nid

const EVP_CIPHER_name = EVP_CIPHER_get0_name

const EVP_CIPHER_block_size = EVP_CIPHER_get_block_size

const EVP_CIPHER_key_length = EVP_CIPHER_get_key_length

const EVP_CIPHER_iv_length = EVP_CIPHER_get_iv_length

const EVP_CIPHER_flags = EVP_CIPHER_get_flags

const EVP_CIPHER_mode = EVP_CIPHER_get_mode

const EVP_CIPHER_type = EVP_CIPHER_get_type

const EVP_CIPHER_CTX_encrypting = EVP_CIPHER_CTX_is_encrypting

const EVP_CIPHER_CTX_nid = EVP_CIPHER_CTX_get_nid

const EVP_CIPHER_CTX_block_size = EVP_CIPHER_CTX_get_block_size

const EVP_CIPHER_CTX_key_length = EVP_CIPHER_CTX_get_key_length

const EVP_CIPHER_CTX_iv_length = EVP_CIPHER_CTX_get_iv_length

const EVP_CIPHER_CTX_tag_length = EVP_CIPHER_CTX_get_tag_length

const EVP_CIPHER_CTX_num = EVP_CIPHER_CTX_get_num

const EVP_CIPHER_CTX_type = EVP_CIPHER_CTX_get_type

const EVP_CIPHER_CTX_mode = EVP_CIPHER_CTX_get_mode

const EVP_des_cfb = EVP_des_cfb64

const EVP_des_ede_cfb = EVP_des_ede_cfb64

const EVP_des_ede3_cfb = EVP_des_ede3_cfb64

const EVP_idea_cfb = EVP_idea_cfb64

const EVP_rc2_cfb = EVP_rc2_cfb64

const EVP_bf_cfb = EVP_bf_cfb64

const EVP_cast5_cfb = EVP_cast5_cfb64

const EVP_aes_128_cfb = EVP_aes_128_cfb128

const EVP_aes_192_cfb = EVP_aes_192_cfb128

const EVP_aes_256_cfb = EVP_aes_256_cfb128

const EVP_aria_128_cfb = EVP_aria_128_cfb128

const EVP_aria_192_cfb = EVP_aria_192_cfb128

const EVP_aria_256_cfb = EVP_aria_256_cfb128

const EVP_camellia_128_cfb = EVP_camellia_128_cfb128

const EVP_camellia_192_cfb = EVP_camellia_192_cfb128

const EVP_camellia_256_cfb = EVP_camellia_256_cfb128

const EVP_seed_cfb = EVP_seed_cfb128

const EVP_sm4_cfb = EVP_sm4_cfb128

const EVP_RAND_STATE_UNINITIALISED = 0

const EVP_RAND_STATE_READY = 1

const EVP_RAND_STATE_ERROR = 2

const EVP_PKEY_id = EVP_PKEY_get_id

const EVP_PKEY_base_id = EVP_PKEY_get_base_id

const EVP_PKEY_bits = EVP_PKEY_get_bits

const EVP_PKEY_security_bits = EVP_PKEY_get_security_bits

const EVP_PKEY_size = EVP_PKEY_get_size

const EVP_PBE_TYPE_OUTER = 0x00

const EVP_PBE_TYPE_PRF = 0x01

const EVP_PBE_TYPE_KDF = 0x02

const ASN1_PKEY_ALIAS = 0x01

const ASN1_PKEY_DYNAMIC = 0x02

const ASN1_PKEY_SIGPARAM_NULL = 0x04

const ASN1_PKEY_CTRL_PKCS7_SIGN = 0x01

const ASN1_PKEY_CTRL_PKCS7_ENCRYPT = 0x02

const ASN1_PKEY_CTRL_DEFAULT_MD_NID = 0x03

const ASN1_PKEY_CTRL_CMS_SIGN = 0x05

const ASN1_PKEY_CTRL_CMS_ENVELOPE = 0x07

const ASN1_PKEY_CTRL_CMS_RI_TYPE = 0x08

const ASN1_PKEY_CTRL_SET1_TLS_ENCPT = 0x09

const ASN1_PKEY_CTRL_GET1_TLS_ENCPT = 0x0a

const ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED = 0x0b

const EVP_PKEY_OP_UNDEFINED = 0

const EVP_PKEY_OP_PARAMGEN = 1 << 1

const EVP_PKEY_OP_KEYGEN = 1 << 2

const EVP_PKEY_OP_FROMDATA = 1 << 3

const EVP_PKEY_OP_SIGN = 1 << 4

const EVP_PKEY_OP_VERIFY = 1 << 5

const EVP_PKEY_OP_VERIFYRECOVER = 1 << 6

const EVP_PKEY_OP_SIGNCTX = 1 << 7

const EVP_PKEY_OP_VERIFYCTX = 1 << 8

const EVP_PKEY_OP_ENCRYPT = 1 << 9

const EVP_PKEY_OP_DECRYPT = 1 << 10

const EVP_PKEY_OP_DERIVE = 1 << 11

const EVP_PKEY_OP_ENCAPSULATE = 1 << 12

const EVP_PKEY_OP_DECAPSULATE = 1 << 13

const EVP_PKEY_OP_TYPE_SIG = (((EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY) | EVP_PKEY_OP_VERIFYRECOVER) | EVP_PKEY_OP_SIGNCTX) | EVP_PKEY_OP_VERIFYCTX

const EVP_PKEY_OP_TYPE_CRYPT = EVP_PKEY_OP_ENCRYPT | EVP_PKEY_OP_DECRYPT

const EVP_PKEY_OP_TYPE_NOGEN = (EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT) | EVP_PKEY_OP_DERIVE

const EVP_PKEY_OP_TYPE_GEN = EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN

const EVP_PKEY_CTRL_MD = 1

const EVP_PKEY_CTRL_PEER_KEY = 2

const EVP_PKEY_CTRL_SET_MAC_KEY = 6

const EVP_PKEY_CTRL_DIGESTINIT = 7

const EVP_PKEY_CTRL_SET_IV = 8

const EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3

const EVP_PKEY_CTRL_PKCS7_DECRYPT = 4

const EVP_PKEY_CTRL_PKCS7_SIGN = 5

const EVP_PKEY_CTRL_CMS_ENCRYPT = 9

const EVP_PKEY_CTRL_CMS_DECRYPT = 10

const EVP_PKEY_CTRL_CMS_SIGN = 11

const EVP_PKEY_CTRL_CIPHER = 12

const EVP_PKEY_CTRL_GET_MD = 13

const EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14

const EVP_PKEY_CTRL_SET1_ID = 15

const EVP_PKEY_CTRL_GET1_ID = 16

const EVP_PKEY_CTRL_GET1_ID_LEN = 17

const EVP_PKEY_ALG_CTRL = 0x1000

const EVP_PKEY_FLAG_AUTOARGLEN = 2

const EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4

const OPENSSL_EC_EXPLICIT_CURVE = 0x0000

const OPENSSL_EC_NAMED_CURVE = 0x0001

const EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = EVP_PKEY_ALG_CTRL + 1

const EVP_PKEY_CTRL_EC_PARAM_ENC = EVP_PKEY_ALG_CTRL + 2

const EVP_PKEY_CTRL_EC_ECDH_COFACTOR = EVP_PKEY_ALG_CTRL + 3

const EVP_PKEY_CTRL_EC_KDF_TYPE = EVP_PKEY_ALG_CTRL + 4

const EVP_PKEY_CTRL_EC_KDF_MD = EVP_PKEY_ALG_CTRL + 5

const EVP_PKEY_CTRL_GET_EC_KDF_MD = EVP_PKEY_ALG_CTRL + 6

const EVP_PKEY_CTRL_EC_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 7

const EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 8

const EVP_PKEY_CTRL_EC_KDF_UKM = EVP_PKEY_ALG_CTRL + 9

const EVP_PKEY_CTRL_GET_EC_KDF_UKM = EVP_PKEY_ALG_CTRL + 10

const EVP_PKEY_ECDH_KDF_NONE = 1

const EVP_PKEY_ECDH_KDF_X9_63 = 2

const EVP_PKEY_ECDH_KDF_X9_62 = EVP_PKEY_ECDH_KDF_X9_63

const EC_R_ASN1_ERROR = 115

const EC_R_BAD_SIGNATURE = 156

const EC_R_BIGNUM_OUT_OF_RANGE = 144

const EC_R_BUFFER_TOO_SMALL = 100

const EC_R_CANNOT_INVERT = 165

const EC_R_COORDINATES_OUT_OF_RANGE = 146

const EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = 160

const EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA = 170

const EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = 159

const EC_R_DECODE_ERROR = 142

const EC_R_DISCRIMINANT_IS_ZERO = 118

const EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 119

const EC_R_EXPLICIT_PARAMS_NOT_SUPPORTED = 127

const EC_R_FAILED_MAKING_PUBLIC_KEY = 166

const EC_R_FIELD_TOO_LARGE = 143

const EC_R_GF2M_NOT_SUPPORTED = 147

const EC_R_GROUP2PKPARAMETERS_FAILURE = 120

const EC_R_I2D_ECPKPARAMETERS_FAILURE = 121

const EC_R_INCOMPATIBLE_OBJECTS = 101

const EC_R_INVALID_A = 168

const EC_R_INVALID_ARGUMENT = 112

const EC_R_INVALID_B = 169

const EC_R_INVALID_COFACTOR = 171

const EC_R_INVALID_COMPRESSED_POINT = 110

const EC_R_INVALID_COMPRESSION_BIT = 109

const EC_R_INVALID_CURVE = 141

const EC_R_INVALID_DIGEST = 151

const EC_R_INVALID_DIGEST_TYPE = 138

const EC_R_INVALID_ENCODING = 102

const EC_R_INVALID_FIELD = 103

const EC_R_INVALID_FORM = 104

const EC_R_INVALID_GENERATOR = 173

const EC_R_INVALID_GROUP_ORDER = 122

const EC_R_INVALID_KEY = 116

const EC_R_INVALID_LENGTH = 117

const EC_R_INVALID_NAMED_GROUP_CONVERSION = 174

const EC_R_INVALID_OUTPUT_LENGTH = 161

const EC_R_INVALID_P = 172

const EC_R_INVALID_PEER_KEY = 133

const EC_R_INVALID_PENTANOMIAL_BASIS = 132

const EC_R_INVALID_PRIVATE_KEY = 123

const EC_R_INVALID_SEED = 175

const EC_R_INVALID_TRINOMIAL_BASIS = 137

const EC_R_KDF_PARAMETER_ERROR = 148

const EC_R_KEYS_NOT_SET = 140

const EC_R_LADDER_POST_FAILURE = 136

const EC_R_LADDER_PRE_FAILURE = 153

const EC_R_LADDER_STEP_FAILURE = 162

const EC_R_MISSING_OID = 167

const EC_R_MISSING_PARAMETERS = 124

const EC_R_MISSING_PRIVATE_KEY = 125

const EC_R_NEED_NEW_SETUP_VALUES = 157

const EC_R_NOT_A_NIST_PRIME = 135

const EC_R_NOT_IMPLEMENTED = 126

const EC_R_NOT_INITIALIZED = 111

const EC_R_NO_PARAMETERS_SET = 139

const EC_R_NO_PRIVATE_VALUE = 154

const EC_R_OPERATION_NOT_SUPPORTED = 152

const EC_R_PASSED_NULL_PARAMETER = 134

const EC_R_PEER_KEY_ERROR = 149

const EC_R_POINT_ARITHMETIC_FAILURE = 155

const EC_R_POINT_AT_INFINITY = 106

const EC_R_POINT_COORDINATES_BLIND_FAILURE = 163

const EC_R_POINT_IS_NOT_ON_CURVE = 107

const EC_R_RANDOM_NUMBER_GENERATION_FAILED = 158

const EC_R_SHARED_INFO_ERROR = 150

const EC_R_SLOT_FULL = 108

const EC_R_TOO_MANY_RETRIES = 176

const EC_R_UNDEFINED_GENERATOR = 113

const EC_R_UNDEFINED_ORDER = 128

const EC_R_UNKNOWN_COFACTOR = 164

const EC_R_UNKNOWN_GROUP = 129

const EC_R_UNKNOWN_ORDER = 114

const EC_R_UNSUPPORTED_FIELD = 131

const EC_R_WRONG_CURVE_PARAMETERS = 145

const EC_R_WRONG_ORDER = 130

const OPENSSL_ECC_MAX_FIELD_BITS = 661

const EC_PKEY_NO_PARAMETERS = 0x0001

const EC_PKEY_NO_PUBKEY = 0x0002

const EC_FLAG_SM2_RANGE = 0x0004

const EC_FLAG_COFACTOR_ECDH = 0x1000

const EC_FLAG_CHECK_NAMED_GROUP = 0x2000

const EC_FLAG_CHECK_NAMED_GROUP_NIST = 0x4000

const EC_FLAG_CHECK_NAMED_GROUP_MASK = EC_FLAG_CHECK_NAMED_GROUP | EC_FLAG_CHECK_NAMED_GROUP_NIST

const EC_FLAG_NON_FIPS_ALLOW = 0x0000

const EC_FLAG_FIPS_CHECKED = 0x0000

const RSA_R_ALGORITHM_MISMATCH = 100

const RSA_R_BAD_E_VALUE = 101

const RSA_R_BAD_FIXED_HEADER_DECRYPT = 102

const RSA_R_BAD_PAD_BYTE_COUNT = 103

const RSA_R_BAD_SIGNATURE = 104

const RSA_R_BLOCK_TYPE_IS_NOT_01 = 106

const RSA_R_BLOCK_TYPE_IS_NOT_02 = 107

const RSA_R_DATA_GREATER_THAN_MOD_LEN = 108

const RSA_R_DATA_TOO_LARGE = 109

const RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 110

const RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 132

const RSA_R_DATA_TOO_SMALL = 111

const RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 122

const RSA_R_DIGEST_DOES_NOT_MATCH = 158

const RSA_R_DIGEST_NOT_ALLOWED = 145

const RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 112

const RSA_R_DMP1_NOT_CONGRUENT_TO_D = 124

const RSA_R_DMQ1_NOT_CONGRUENT_TO_D = 125

const RSA_R_D_E_NOT_CONGRUENT_TO_1 = 123

const RSA_R_FIRST_OCTET_INVALID = 133

const RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = 144

const RSA_R_INVALID_DIGEST = 157

const RSA_R_INVALID_DIGEST_LENGTH = 143

const RSA_R_INVALID_HEADER = 137

const RSA_R_INVALID_KEYPAIR = 171

const RSA_R_INVALID_KEY_LENGTH = 173

const RSA_R_INVALID_LABEL = 160

const RSA_R_INVALID_LENGTH = 181

const RSA_R_INVALID_MESSAGE_LENGTH = 131

const RSA_R_INVALID_MGF1_MD = 156

const RSA_R_INVALID_MODULUS = 174

const RSA_R_INVALID_MULTI_PRIME_KEY = 167

const RSA_R_INVALID_OAEP_PARAMETERS = 161

const RSA_R_INVALID_PADDING = 138

const RSA_R_INVALID_PADDING_MODE = 141

const RSA_R_INVALID_PSS_PARAMETERS = 149

const RSA_R_INVALID_PSS_SALTLEN = 146

const RSA_R_INVALID_REQUEST = 175

const RSA_R_INVALID_SALT_LENGTH = 150

const RSA_R_INVALID_STRENGTH = 176

const RSA_R_INVALID_TRAILER = 139

const RSA_R_INVALID_X931_DIGEST = 142

const RSA_R_IQMP_NOT_INVERSE_OF_Q = 126

const RSA_R_KEY_PRIME_NUM_INVALID = 165

const RSA_R_KEY_SIZE_TOO_SMALL = 120

const RSA_R_LAST_OCTET_INVALID = 134

const RSA_R_MGF1_DIGEST_NOT_ALLOWED = 152

const RSA_R_MISSING_PRIVATE_KEY = 179

const RSA_R_MODULUS_TOO_LARGE = 105

const RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R = 168

const RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D = 169

const RSA_R_MP_R_NOT_PRIME = 170

const RSA_R_NO_PUBLIC_EXPONENT = 140

const RSA_R_NULL_BEFORE_BLOCK_MISSING = 113

const RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES = 172

const RSA_R_N_DOES_NOT_EQUAL_P_Q = 127

const RSA_R_OAEP_DECODING_ERROR = 121

const RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 148

const RSA_R_PADDING_CHECK_FAILED = 114

const RSA_R_PAIRWISE_TEST_FAILURE = 177

const RSA_R_PKCS_DECODING_ERROR = 159

const RSA_R_PSS_SALTLEN_TOO_SMALL = 164

const RSA_R_PUB_EXPONENT_OUT_OF_RANGE = 178

const RSA_R_P_NOT_PRIME = 128

const RSA_R_Q_NOT_PRIME = 129

const RSA_R_RANDOMNESS_SOURCE_STRENGTH_INSUFFICIENT = 180

const RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = 130

const RSA_R_SLEN_CHECK_FAILED = 136

const RSA_R_SLEN_RECOVERY_FAILED = 135

const RSA_R_SSLV3_ROLLBACK_ATTACK = 115

const RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 116

const RSA_R_UNKNOWN_ALGORITHM_TYPE = 117

const RSA_R_UNKNOWN_DIGEST = 166

const RSA_R_UNKNOWN_MASK_DIGEST = 151

const RSA_R_UNKNOWN_PADDING_TYPE = 118

const RSA_R_UNSUPPORTED_ENCRYPTION_TYPE = 162

const RSA_R_UNSUPPORTED_LABEL_SOURCE = 163

const RSA_R_UNSUPPORTED_MASK_ALGORITHM = 153

const RSA_R_UNSUPPORTED_MASK_PARAMETER = 154

const RSA_R_UNSUPPORTED_SIGNATURE_TYPE = 155

const RSA_R_VALUE_MISSING = 147

const RSA_R_WRONG_SIGNATURE_LENGTH = 119

const OPENSSL_RSA_MAX_MODULUS_BITS = 16384

const RSA_3 = Clong(0x03)

const RSA_F4 = Clong(0x00010001)

const OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = 2048

const OPENSSL_RSA_SMALL_MODULUS_BITS = 3072

const OPENSSL_RSA_MAX_PUBEXP_BITS = 64

const RSA_ASN1_VERSION_DEFAULT = 0

const RSA_ASN1_VERSION_MULTI = 1

const RSA_DEFAULT_PRIME_NUM = 2

const RSA_METHOD_FLAG_NO_CHECK = 0x0001

const RSA_FLAG_CACHE_PUBLIC = 0x0002

const RSA_FLAG_CACHE_PRIVATE = 0x0004

const RSA_FLAG_BLINDING = 0x0008

const RSA_FLAG_THREAD_SAFE = 0x0010

const RSA_FLAG_EXT_PKEY = 0x0020

const RSA_FLAG_NO_BLINDING = 0x0080

const RSA_FLAG_NO_CONSTTIME = 0x0000

const RSA_FLAG_NO_EXP_CONSTTIME = RSA_FLAG_NO_CONSTTIME

const RSA_FLAG_TYPE_MASK = 0xf000

const RSA_FLAG_TYPE_RSA = 0x0000

const RSA_FLAG_TYPE_RSASSAPSS = 0x1000

const RSA_FLAG_TYPE_RSAESOAEP = 0x2000

const RSA_PSS_SALTLEN_DIGEST = -1

const RSA_PSS_SALTLEN_AUTO = -2

const RSA_PSS_SALTLEN_MAX = -3

const RSA_PSS_SALTLEN_MAX_SIGN = -2

const EVP_PKEY_CTRL_RSA_PADDING = EVP_PKEY_ALG_CTRL + 1

const EVP_PKEY_CTRL_RSA_PSS_SALTLEN = EVP_PKEY_ALG_CTRL + 2

const EVP_PKEY_CTRL_RSA_KEYGEN_BITS = EVP_PKEY_ALG_CTRL + 3

const EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP = EVP_PKEY_ALG_CTRL + 4

const EVP_PKEY_CTRL_RSA_MGF1_MD = EVP_PKEY_ALG_CTRL + 5

const EVP_PKEY_CTRL_GET_RSA_PADDING = EVP_PKEY_ALG_CTRL + 6

const EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN = EVP_PKEY_ALG_CTRL + 7

const EVP_PKEY_CTRL_GET_RSA_MGF1_MD = EVP_PKEY_ALG_CTRL + 8

const EVP_PKEY_CTRL_RSA_OAEP_MD = EVP_PKEY_ALG_CTRL + 9

const EVP_PKEY_CTRL_RSA_OAEP_LABEL = EVP_PKEY_ALG_CTRL + 10

const EVP_PKEY_CTRL_GET_RSA_OAEP_MD = EVP_PKEY_ALG_CTRL + 11

const EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL = EVP_PKEY_ALG_CTRL + 12

const EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES = EVP_PKEY_ALG_CTRL + 13

const RSA_PKCS1_PADDING = 1

const RSA_NO_PADDING = 3

const RSA_PKCS1_OAEP_PADDING = 4

const RSA_X931_PADDING = 5

const RSA_PKCS1_PSS_PADDING = 6

const RSA_PKCS1_WITH_TLS_PADDING = 7

const RSA_PKCS1_PADDING_SIZE = 11

const RSA_FLAG_FIPS_METHOD = 0x0400

const RSA_FLAG_NON_FIPS_ALLOW = 0x0400

const RSA_FLAG_CHECKED = 0x0800

const EVP_PKEY_CTRL_DSA_PARAMGEN_BITS = EVP_PKEY_ALG_CTRL + 1

const EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS = EVP_PKEY_ALG_CTRL + 2

const EVP_PKEY_CTRL_DSA_PARAMGEN_MD = EVP_PKEY_ALG_CTRL + 3

const DH_PARAMGEN_TYPE_GENERATOR = 0

const DH_PARAMGEN_TYPE_FIPS_186_2 = 1

const DH_PARAMGEN_TYPE_FIPS_186_4 = 2

const DH_PARAMGEN_TYPE_GROUP = 3

const EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN = EVP_PKEY_ALG_CTRL + 1

const EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR = EVP_PKEY_ALG_CTRL + 2

const EVP_PKEY_CTRL_DH_RFC5114 = EVP_PKEY_ALG_CTRL + 3

const EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN = EVP_PKEY_ALG_CTRL + 4

const EVP_PKEY_CTRL_DH_PARAMGEN_TYPE = EVP_PKEY_ALG_CTRL + 5

const EVP_PKEY_CTRL_DH_KDF_TYPE = EVP_PKEY_ALG_CTRL + 6

const EVP_PKEY_CTRL_DH_KDF_MD = EVP_PKEY_ALG_CTRL + 7

const EVP_PKEY_CTRL_GET_DH_KDF_MD = EVP_PKEY_ALG_CTRL + 8

const EVP_PKEY_CTRL_DH_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 9

const EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 10

const EVP_PKEY_CTRL_DH_KDF_UKM = EVP_PKEY_ALG_CTRL + 11

const EVP_PKEY_CTRL_GET_DH_KDF_UKM = EVP_PKEY_ALG_CTRL + 12

const EVP_PKEY_CTRL_DH_KDF_OID = EVP_PKEY_ALG_CTRL + 13

const EVP_PKEY_CTRL_GET_DH_KDF_OID = EVP_PKEY_ALG_CTRL + 14

const EVP_PKEY_CTRL_DH_NID = EVP_PKEY_ALG_CTRL + 15

const EVP_PKEY_CTRL_DH_PAD = EVP_PKEY_ALG_CTRL + 16

const EVP_PKEY_DH_KDF_NONE = 1

const EVP_PKEY_DH_KDF_X9_42 = 2

const DH_R_BAD_FFC_PARAMETERS = 127

const DH_R_BAD_GENERATOR = 101

const DH_R_BN_DECODE_ERROR = 109

const DH_R_BN_ERROR = 106

const DH_R_CHECK_INVALID_J_VALUE = 115

const DH_R_CHECK_INVALID_Q_VALUE = 116

const DH_R_CHECK_PUBKEY_INVALID = 122

const DH_R_CHECK_PUBKEY_TOO_LARGE = 123

const DH_R_CHECK_PUBKEY_TOO_SMALL = 124

const DH_R_CHECK_P_NOT_PRIME = 117

const DH_R_CHECK_P_NOT_SAFE_PRIME = 118

const DH_R_CHECK_Q_NOT_PRIME = 119

const DH_R_DECODE_ERROR = 104

const DH_R_INVALID_PARAMETER_NAME = 110

const DH_R_INVALID_PARAMETER_NID = 114

const DH_R_INVALID_PUBKEY = 102

const DH_R_INVALID_SECRET = 128

const DH_R_KDF_PARAMETER_ERROR = 112

const DH_R_KEYS_NOT_SET = 108

const DH_R_MISSING_PUBKEY = 125

const DH_R_MODULUS_TOO_LARGE = 103

const DH_R_MODULUS_TOO_SMALL = 126

const DH_R_NOT_SUITABLE_GENERATOR = 120

const DH_R_NO_PARAMETERS_SET = 107

const DH_R_NO_PRIVATE_VALUE = 100

const DH_R_PARAMETER_ENCODING_ERROR = 105

const DH_R_PEER_KEY_ERROR = 111

const DH_R_Q_TOO_LARGE = 130

const DH_R_SHARED_INFO_ERROR = 113

const DH_R_UNABLE_TO_CHECK_GENERATOR = 121

const OPENSSL_DH_MAX_MODULUS_BITS = 10000

const OPENSSL_DH_CHECK_MAX_MODULUS_BITS = 32768

const OPENSSL_DH_FIPS_MIN_MODULUS_BITS = 1024

const DH_FLAG_CACHE_MONT_P = 0x01

const DH_FLAG_TYPE_MASK = 0xf000

const DH_FLAG_TYPE_DH = 0x0000

const DH_FLAG_TYPE_DHX = 0x1000

const DH_FLAG_NO_EXP_CONSTTIME = 0x00

const DH_FLAG_FIPS_METHOD = 0x0400

const DH_FLAG_NON_FIPS_ALLOW = 0x0400

const DH_GENERATOR_2 = 2

const DH_GENERATOR_3 = 3

const DH_GENERATOR_5 = 5

const DH_CHECK_P_NOT_PRIME = 0x01

const DH_CHECK_P_NOT_SAFE_PRIME = 0x02

const DH_UNABLE_TO_CHECK_GENERATOR = 0x04

const DH_NOT_SUITABLE_GENERATOR = 0x08

const DH_CHECK_Q_NOT_PRIME = 0x10

const DH_CHECK_INVALID_Q_VALUE = 0x20

const DH_CHECK_INVALID_J_VALUE = 0x40

const DH_MODULUS_TOO_SMALL = 0x80

const DH_MODULUS_TOO_LARGE = 0x0100

const DH_CHECK_PUBKEY_TOO_SMALL = 0x01

const DH_CHECK_PUBKEY_TOO_LARGE = 0x02

const DH_CHECK_PUBKEY_INVALID = 0x04

const DH_CHECK_P_NOT_STRONG_PRIME = DH_CHECK_P_NOT_SAFE_PRIME

const DSA_R_BAD_FFC_PARAMETERS = 114

const DSA_R_BAD_Q_VALUE = 102

const DSA_R_BN_DECODE_ERROR = 108

const DSA_R_BN_ERROR = 109

const DSA_R_DECODE_ERROR = 104

const DSA_R_INVALID_DIGEST_TYPE = 106

const DSA_R_INVALID_PARAMETERS = 112

const DSA_R_MISSING_PARAMETERS = 101

const DSA_R_MISSING_PRIVATE_KEY = 111

const DSA_R_MODULUS_TOO_LARGE = 103

const DSA_R_NO_PARAMETERS_SET = 107

const DSA_R_PARAMETER_ENCODING_ERROR = 105

const DSA_R_P_NOT_PRIME = 115

const DSA_R_Q_NOT_PRIME = 113

const DSA_R_SEED_LEN_SMALL = 110

const DSA_R_TOO_MANY_RETRIES = 116

const OPENSSL_DSA_MAX_MODULUS_BITS = 10000

const OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = 1024

const DSA_FLAG_NO_EXP_CONSTTIME = 0x00

const DSA_FLAG_CACHE_MONT_P = 0x01

const DSA_FLAG_FIPS_METHOD = 0x0400

const DSA_FLAG_NON_FIPS_ALLOW = 0x0400

const DSA_FLAG_FIPS_CHECKED = 0x0800

const DSS_prime_checks = 64

const SHA_DIGEST_LENGTH = 20

const SHA_LONG = Cuint

const SHA_LBLOCK = 16

const SHA_CBLOCK = SHA_LBLOCK * 4

const SHA_LAST_BLOCK = SHA_CBLOCK - 8

const SHA256_CBLOCK = SHA_LBLOCK * 4

const SHA224_DIGEST_LENGTH = 28

const SHA256_DIGEST_LENGTH = 32

const SHA384_DIGEST_LENGTH = 48

const SHA512_DIGEST_LENGTH = 64

const SHA512_CBLOCK = SHA_LBLOCK * 8

const SHA_LONG64 = Culonglong

const X509_R_AKID_MISMATCH = 110

const X509_R_BAD_SELECTOR = 133

const X509_R_BAD_X509_FILETYPE = 100

const X509_R_BASE64_DECODE_ERROR = 118

const X509_R_CANT_CHECK_DH_KEY = 114

const X509_R_CERTIFICATE_VERIFICATION_FAILED = 139

const X509_R_CERT_ALREADY_IN_HASH_TABLE = 101

const X509_R_CRL_ALREADY_DELTA = 127

const X509_R_CRL_VERIFY_FAILURE = 131

const X509_R_DUPLICATE_ATTRIBUTE = 140

const X509_R_ERROR_GETTING_MD_BY_NID = 141

const X509_R_ERROR_USING_SIGINF_SET = 142

const X509_R_IDP_MISMATCH = 128

const X509_R_INVALID_ATTRIBUTES = 138

const X509_R_INVALID_DIRECTORY = 113

const X509_R_INVALID_DISTPOINT = 143

const X509_R_INVALID_FIELD_NAME = 119

const X509_R_INVALID_TRUST = 123

const X509_R_ISSUER_MISMATCH = 129

const X509_R_KEY_TYPE_MISMATCH = 115

const X509_R_KEY_VALUES_MISMATCH = 116

const X509_R_LOADING_CERT_DIR = 103

const X509_R_LOADING_DEFAULTS = 104

const X509_R_METHOD_NOT_SUPPORTED = 124

const X509_R_NAME_TOO_LONG = 134

const X509_R_NEWER_CRL_NOT_NEWER = 132

const X509_R_NO_CERTIFICATE_FOUND = 135

const X509_R_NO_CERTIFICATE_OR_CRL_FOUND = 136

const X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 105

const X509_R_NO_CRL_FOUND = 137

const X509_R_NO_CRL_NUMBER = 130

const X509_R_PUBLIC_KEY_DECODE_ERROR = 125

const X509_R_PUBLIC_KEY_ENCODE_ERROR = 126

const X509_R_SHOULD_RETRY = 106

const X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = 107

const X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = 108

const X509_R_UNKNOWN_KEY_TYPE = 117

const X509_R_UNKNOWN_NID = 109

const X509_R_UNKNOWN_PURPOSE_ID = 121

const X509_R_UNKNOWN_SIGID_ALGS = 144

const X509_R_UNKNOWN_TRUST_ID = 120

const X509_R_UNSUPPORTED_ALGORITHM = 111

const X509_R_WRONG_LOOKUP_TYPE = 112

const X509_R_WRONG_TYPE = 122

const X509_SIG_INFO_VALID = 0x01

const X509_SIG_INFO_TLS = 0x02

const X509_FILETYPE_PEM = 1

const X509_FILETYPE_ASN1 = 2

const X509_FILETYPE_DEFAULT = 3

const X509v3_KU_DIGITAL_SIGNATURE = 0x0080

const X509v3_KU_NON_REPUDIATION = 0x0040

const X509v3_KU_KEY_ENCIPHERMENT = 0x0020

const X509v3_KU_DATA_ENCIPHERMENT = 0x0010

const X509v3_KU_KEY_AGREEMENT = 0x0008

const X509v3_KU_KEY_CERT_SIGN = 0x0004

const X509v3_KU_CRL_SIGN = 0x0002

const X509v3_KU_ENCIPHER_ONLY = 0x0001

const X509v3_KU_DECIPHER_ONLY = 0x8000

const X509v3_KU_UNDEF = 0xffff

const X509_EX_V_NETSCAPE_HACK = 0x8000

const X509_EX_V_INIT = 0x0001

const X509_FLAG_COMPAT = 0

const X509_FLAG_NO_HEADER = Clong(1)

const X509_FLAG_NO_VERSION = Clong(1) << 1

const X509_FLAG_NO_SERIAL = Clong(1) << 2

const X509_FLAG_NO_SIGNAME = Clong(1) << 3

const X509_FLAG_NO_ISSUER = Clong(1) << 4

const X509_FLAG_NO_VALIDITY = Clong(1) << 5

const X509_FLAG_NO_SUBJECT = Clong(1) << 6

const X509_FLAG_NO_PUBKEY = Clong(1) << 7

const X509_FLAG_NO_EXTENSIONS = Clong(1) << 8

const X509_FLAG_NO_SIGDUMP = Clong(1) << 9

const X509_FLAG_NO_AUX = Clong(1) << 10

const X509_FLAG_NO_ATTRIBUTES = Clong(1) << 11

const X509_FLAG_NO_IDS = Clong(1) << 12

const X509_FLAG_EXTENSIONS_ONLY_KID = Clong(1) << 13

const XN_FLAG_SEP_MASK = 0x0f << 16

const XN_FLAG_COMPAT = 0

const XN_FLAG_SEP_COMMA_PLUS = 1 << 16

const XN_FLAG_SEP_CPLUS_SPC = 2 << 16

const XN_FLAG_SEP_SPLUS_SPC = 3 << 16

const XN_FLAG_SEP_MULTILINE = 4 << 16

const XN_FLAG_DN_REV = 1 << 20

const XN_FLAG_FN_MASK = 0x03 << 21

const XN_FLAG_FN_SN = 0

const XN_FLAG_FN_LN = 1 << 21

const XN_FLAG_FN_OID = 2 << 21

const XN_FLAG_FN_NONE = 3 << 21

const XN_FLAG_SPC_EQ = 1 << 23

const XN_FLAG_DUMP_UNKNOWN_FIELDS = 1 << 24

const XN_FLAG_FN_ALIGN = 1 << 25

const XN_FLAG_RFC2253 = (((ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS) | XN_FLAG_DN_REV) | XN_FLAG_FN_SN) | XN_FLAG_DUMP_UNKNOWN_FIELDS

const XN_FLAG_ONELINE = (((ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE) | XN_FLAG_SEP_CPLUS_SPC) | XN_FLAG_SPC_EQ) | XN_FLAG_FN_SN

const XN_FLAG_MULTILINE = ((((ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB) | XN_FLAG_SEP_MULTILINE) | XN_FLAG_SPC_EQ) | XN_FLAG_FN_LN) | XN_FLAG_FN_ALIGN

const LH_LOAD_MULT = 256

const _LHASH = OPENSSL_LHASH

const LHASH_NODE = OPENSSL_LH_NODE

const lh_error = OPENSSL_LH_error

const lh_new = OPENSSL_LH_new

const lh_free = OPENSSL_LH_free

const lh_insert = OPENSSL_LH_insert

const lh_delete = OPENSSL_LH_delete

const lh_retrieve = OPENSSL_LH_retrieve

const lh_doall = OPENSSL_LH_doall

const lh_doall_arg = OPENSSL_LH_doall_arg

const lh_strhash = OPENSSL_LH_strhash

const lh_num_items = OPENSSL_LH_num_items

const lh_stats = OPENSSL_LH_stats

const lh_node_stats = OPENSSL_LH_node_stats

const lh_node_usage_stats = OPENSSL_LH_node_usage_stats

const lh_stats_bio = OPENSSL_LH_stats_bio

const lh_node_stats_bio = OPENSSL_LH_node_stats_bio

const lh_node_usage_stats_bio = OPENSSL_LH_node_usage_stats_bio

const X509_LU_RETRY = -1

const X509_LU_FAIL = 0

const X509_TRUST_DEFAULT = 0

const X509_TRUST_COMPAT = 1

const X509_TRUST_SSL_CLIENT = 2

const X509_TRUST_SSL_SERVER = 3

const X509_TRUST_EMAIL = 4

const X509_TRUST_OBJECT_SIGN = 5

const X509_TRUST_OCSP_SIGN = 6

const X509_TRUST_OCSP_REQUEST = 7

const X509_TRUST_TSA = 8

const X509_TRUST_MIN = 1

const X509_TRUST_MAX = 8

const X509_TRUST_DYNAMIC = Cuint(1) << 0

const X509_TRUST_DYNAMIC_NAME = Cuint(1) << 1

const X509_TRUST_NO_SS_COMPAT = Cuint(1) << 2

const X509_TRUST_DO_SS_COMPAT = Cuint(1) << 3

const X509_TRUST_OK_ANY_EKU = Cuint(1) << 4

const X509_TRUST_TRUSTED = 1

const X509_TRUST_REJECTED = 2

const X509_TRUST_UNTRUSTED = 3

const X509_L_FILE_LOAD = 1

const X509_L_ADD_DIR = 2

const X509_L_ADD_STORE = 3

const X509_L_LOAD_STORE = 4

const X509_V_OK = 0

const X509_V_ERR_UNSPECIFIED = 1

const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2

const X509_V_ERR_UNABLE_TO_GET_CRL = 3

const X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4

const X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5

const X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6

const X509_V_ERR_CERT_SIGNATURE_FAILURE = 7

const X509_V_ERR_CRL_SIGNATURE_FAILURE = 8

const X509_V_ERR_CERT_NOT_YET_VALID = 9

const X509_V_ERR_CERT_HAS_EXPIRED = 10

const X509_V_ERR_CRL_NOT_YET_VALID = 11

const X509_V_ERR_CRL_HAS_EXPIRED = 12

const X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13

const X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14

const X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15

const X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16

const X509_V_ERR_OUT_OF_MEM = 17

const X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18

const X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19

const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20

const X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21

const X509_V_ERR_CERT_CHAIN_TOO_LONG = 22

const X509_V_ERR_CERT_REVOKED = 23

const X509_V_ERR_NO_ISSUER_PUBLIC_KEY = 24

const X509_V_ERR_PATH_LENGTH_EXCEEDED = 25

const X509_V_ERR_INVALID_PURPOSE = 26

const X509_V_ERR_CERT_UNTRUSTED = 27

const X509_V_ERR_CERT_REJECTED = 28

const X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29

const X509_V_ERR_AKID_SKID_MISMATCH = 30

const X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31

const X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32

const X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33

const X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34

const X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35

const X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36

const X509_V_ERR_INVALID_NON_CA = 37

const X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38

const X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39

const X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40

const X509_V_ERR_INVALID_EXTENSION = 41

const X509_V_ERR_INVALID_POLICY_EXTENSION = 42

const X509_V_ERR_NO_EXPLICIT_POLICY = 43

const X509_V_ERR_DIFFERENT_CRL_SCOPE = 44

const X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 45

const X509_V_ERR_UNNESTED_RESOURCE = 46

const X509_V_ERR_PERMITTED_VIOLATION = 47

const X509_V_ERR_EXCLUDED_VIOLATION = 48

const X509_V_ERR_SUBTREE_MINMAX = 49

const X509_V_ERR_APPLICATION_VERIFICATION = 50

const X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 51

const X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 52

const X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 53

const X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 54

const X509_V_ERR_PATH_LOOP = 55

const X509_V_ERR_SUITE_B_INVALID_VERSION = 56

const X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 57

const X509_V_ERR_SUITE_B_INVALID_CURVE = 58

const X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 59

const X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 60

const X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 61

const X509_V_ERR_HOSTNAME_MISMATCH = 62

const X509_V_ERR_EMAIL_MISMATCH = 63

const X509_V_ERR_IP_ADDRESS_MISMATCH = 64

const X509_V_ERR_DANE_NO_MATCH = 65

const X509_V_ERR_EE_KEY_TOO_SMALL = 66

const X509_V_ERR_CA_KEY_TOO_SMALL = 67

const X509_V_ERR_CA_MD_TOO_WEAK = 68

const X509_V_ERR_INVALID_CALL = 69

const X509_V_ERR_STORE_LOOKUP = 70

const X509_V_ERR_NO_VALID_SCTS = 71

const X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION = 72

const X509_V_ERR_OCSP_VERIFY_NEEDED = 73

const X509_V_ERR_OCSP_VERIFY_FAILED = 74

const X509_V_ERR_OCSP_CERT_UNKNOWN = 75

const X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM = 76

const X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH = 77

const X509_V_ERR_SIGNATURE_ALGORITHM_INCONSISTENCY = 78

const X509_V_ERR_INVALID_CA = 79

const X509_V_ERR_PATHLEN_INVALID_FOR_NON_CA = 80

const X509_V_ERR_PATHLEN_WITHOUT_KU_KEY_CERT_SIGN = 81

const X509_V_ERR_KU_KEY_CERT_SIGN_INVALID_FOR_NON_CA = 82

const X509_V_ERR_ISSUER_NAME_EMPTY = 83

const X509_V_ERR_SUBJECT_NAME_EMPTY = 84

const X509_V_ERR_MISSING_AUTHORITY_KEY_IDENTIFIER = 85

const X509_V_ERR_MISSING_SUBJECT_KEY_IDENTIFIER = 86

const X509_V_ERR_EMPTY_SUBJECT_ALT_NAME = 87

const X509_V_ERR_EMPTY_SUBJECT_SAN_NOT_CRITICAL = 88

const X509_V_ERR_CA_BCONS_NOT_CRITICAL = 89

const X509_V_ERR_AUTHORITY_KEY_IDENTIFIER_CRITICAL = 90

const X509_V_ERR_SUBJECT_KEY_IDENTIFIER_CRITICAL = 91

const X509_V_ERR_CA_CERT_MISSING_KEY_USAGE = 92

const X509_V_ERR_EXTENSIONS_REQUIRE_VERSION_3 = 93

const X509_V_ERR_EC_KEY_EXPLICIT_PARAMS = 94

const X509_V_FLAG_CB_ISSUER_CHECK = 0x00

const X509_V_FLAG_USE_CHECK_TIME = 0x02

const X509_V_FLAG_CRL_CHECK = 0x04

const X509_V_FLAG_CRL_CHECK_ALL = 0x08

const X509_V_FLAG_IGNORE_CRITICAL = 0x10

const X509_V_FLAG_X509_STRICT = 0x20

const X509_V_FLAG_ALLOW_PROXY_CERTS = 0x40

const X509_V_FLAG_POLICY_CHECK = 0x80

const X509_V_FLAG_EXPLICIT_POLICY = 0x0100

const X509_V_FLAG_INHIBIT_ANY = 0x0200

const X509_V_FLAG_INHIBIT_MAP = 0x0400

const X509_V_FLAG_NOTIFY_POLICY = 0x0800

const X509_V_FLAG_EXTENDED_CRL_SUPPORT = 0x1000

const X509_V_FLAG_USE_DELTAS = 0x2000

const X509_V_FLAG_CHECK_SS_SIGNATURE = 0x4000

const X509_V_FLAG_TRUSTED_FIRST = 0x8000

const X509_V_FLAG_SUITEB_128_LOS_ONLY = 0x00010000

const X509_V_FLAG_SUITEB_192_LOS = 0x00020000

const X509_V_FLAG_SUITEB_128_LOS = 0x00030000

const X509_V_FLAG_PARTIAL_CHAIN = 0x00080000

const X509_V_FLAG_NO_ALT_CHAINS = 0x00100000

const X509_V_FLAG_NO_CHECK_TIME = 0x00200000

const X509_VP_FLAG_DEFAULT = 0x01

const X509_VP_FLAG_OVERWRITE = 0x02

const X509_VP_FLAG_RESET_FLAGS = 0x04

const X509_VP_FLAG_LOCKED = 0x08

const X509_VP_FLAG_ONCE = 0x10

const X509_V_FLAG_POLICY_MASK = ((X509_V_FLAG_POLICY_CHECK | X509_V_FLAG_EXPLICIT_POLICY) | X509_V_FLAG_INHIBIT_ANY) | X509_V_FLAG_INHIBIT_MAP

const X509_STORE_CTX_get_chain = X509_STORE_CTX_get0_chain

const X509_STORE_CTX_set_chain = X509_STORE_CTX_set0_untrusted

const X509_STORE_CTX_trusted_stack = X509_STORE_CTX_set0_trusted_stack

const X509_STORE_get_by_subject = X509_STORE_CTX_get_by_subject

const X509_STORE_get1_certs = X509_STORE_CTX_get1_certs

const X509_STORE_get1_crls = X509_STORE_CTX_get1_crls

const X509_STORE_get1_cert = X509_STORE_CTX_get1_certs

const X509_STORE_get1_crl = X509_STORE_CTX_get1_crls

const DANE_FLAG_NO_DANE_EE_NAMECHECKS = Clong(1) << 0

const X509_PCY_TREE_FAILURE = -2

const X509_PCY_TREE_INVALID = -1

const X509_PCY_TREE_INTERNAL = 0

const X509_PCY_TREE_VALID = 1

const X509_PCY_TREE_EMPTY = 2

const X509_PCY_TREE_EXPLICIT = 4

const PKCS7_R_CERTIFICATE_VERIFY_ERROR = 117

const PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 144

const PKCS7_R_CIPHER_NOT_INITIALIZED = 116

const PKCS7_R_CONTENT_AND_DATA_PRESENT = 118

const PKCS7_R_CTRL_ERROR = 152

const PKCS7_R_DECRYPT_ERROR = 119

const PKCS7_R_DIGEST_FAILURE = 101

const PKCS7_R_ENCRYPTION_CTRL_FAILURE = 149

const PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 150

const PKCS7_R_ERROR_ADDING_RECIPIENT = 120

const PKCS7_R_ERROR_SETTING_CIPHER = 121

const PKCS7_R_INVALID_NULL_POINTER = 143

const PKCS7_R_INVALID_SIGNED_DATA_TYPE = 155

const PKCS7_R_NO_CONTENT = 122

const PKCS7_R_NO_DEFAULT_DIGEST = 151

const PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND = 154

const PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = 115

const PKCS7_R_NO_SIGNATURES_ON_DATA = 123

const PKCS7_R_NO_SIGNERS = 142

const PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = 104

const PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = 124

const PKCS7_R_PKCS7_ADD_SIGNER_ERROR = 153

const PKCS7_R_PKCS7_DATASIGN = 145

const PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 127

const PKCS7_R_SIGNATURE_FAILURE = 105

const PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = 128

const PKCS7_R_SIGNING_CTRL_FAILURE = 147

const PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 148

const PKCS7_R_SMIME_TEXT_ERROR = 129

const PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = 106

const PKCS7_R_UNABLE_TO_FIND_MEM_BIO = 107

const PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = 108

const PKCS7_R_UNKNOWN_DIGEST_TYPE = 109

const PKCS7_R_UNKNOWN_OPERATION = 110

const PKCS7_R_UNSUPPORTED_CIPHER_TYPE = 111

const PKCS7_R_UNSUPPORTED_CONTENT_TYPE = 112

const PKCS7_R_WRONG_CONTENT_TYPE = 113

const PKCS7_R_WRONG_PKCS7_TYPE = 114

const PKCS7_S_HEADER = 0

const PKCS7_S_BODY = 1

const PKCS7_S_TAIL = 2

const PKCS7_OP_SET_DETACHED_SIGNATURE = 1

const PKCS7_OP_GET_DETACHED_SIGNATURE = 2

const PKCS7_TEXT = 0x01

const PKCS7_NOCERTS = 0x02

const PKCS7_NOSIGS = 0x04

const PKCS7_NOCHAIN = 0x08

const PKCS7_NOINTERN = 0x10

const PKCS7_NOVERIFY = 0x20

const PKCS7_DETACHED = 0x40

const PKCS7_BINARY = 0x80

const PKCS7_NOATTR = 0x0100

const PKCS7_NOSMIMECAP = 0x0200

const PKCS7_NOOLDMIMETYPE = 0x0400

const PKCS7_CRLFEOL = 0x0800

const PKCS7_STREAM = 0x1000

const PKCS7_NOCRL = 0x2000

const PKCS7_PARTIAL = 0x4000

const PKCS7_REUSE_DIGEST = 0x8000

const PKCS7_NO_DUAL_CONTENT = 0x00010000

const SMIME_TEXT = PKCS7_TEXT

const SMIME_NOCERTS = PKCS7_NOCERTS

const SMIME_NOSIGS = PKCS7_NOSIGS

const SMIME_NOCHAIN = PKCS7_NOCHAIN

const SMIME_NOINTERN = PKCS7_NOINTERN

const SMIME_NOVERIFY = PKCS7_NOVERIFY

const SMIME_DETACHED = PKCS7_DETACHED

const SMIME_BINARY = PKCS7_BINARY

const SMIME_NOATTR = PKCS7_NOATTR

const SMIME_ASCIICRLF = 0x00080000

const X509_EXT_PACK_UNKNOWN = 1

const X509_EXT_PACK_STRING = 2

const CONF_R_ERROR_LOADING_DSO = 110

const CONF_R_INVALID_PRAGMA = 122

const CONF_R_LIST_CANNOT_BE_NULL = 115

const CONF_R_MANDATORY_BRACES_IN_VARIABLE_EXPANSION = 123

const CONF_R_MISSING_CLOSE_SQUARE_BRACKET = 100

const CONF_R_MISSING_EQUAL_SIGN = 101

const CONF_R_MISSING_INIT_FUNCTION = 112

const CONF_R_MODULE_INITIALIZATION_ERROR = 109

const CONF_R_NO_CLOSE_BRACE = 102

const CONF_R_NO_CONF = 105

const CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE = 106

const CONF_R_NO_SECTION = 107

const CONF_R_NO_SUCH_FILE = 114

const CONF_R_NO_VALUE = 108

const CONF_R_NUMBER_TOO_LARGE = 121

const CONF_R_OPENSSL_CONF_REFERENCES_MISSING_SECTION = 124

const CONF_R_RECURSIVE_DIRECTORY_INCLUDE = 111

const CONF_R_RECURSIVE_SECTION_REFERENCE = 126

const CONF_R_RELATIVE_PATH = 125

const CONF_R_SSL_COMMAND_SECTION_EMPTY = 117

const CONF_R_SSL_COMMAND_SECTION_NOT_FOUND = 118

const CONF_R_SSL_SECTION_EMPTY = 119

const CONF_R_SSL_SECTION_NOT_FOUND = 120

const CONF_R_UNABLE_TO_CREATE_NEW_SECTION = 103

const CONF_R_UNKNOWN_MODULE_NAME = 113

const CONF_R_VARIABLE_EXPANSION_TOO_LONG = 116

const CONF_R_VARIABLE_HAS_NO_VALUE = 104

const CONF_MFLAGS_IGNORE_ERRORS = 0x01

const CONF_MFLAGS_IGNORE_RETURN_CODES = 0x02

const CONF_MFLAGS_SILENT = 0x04

const CONF_MFLAGS_NO_DSO = 0x08

const CONF_MFLAGS_IGNORE_MISSING_FILE = 0x10

const CONF_MFLAGS_DEFAULT_SECTION = 0x20

const OSSL_HTTP_NAME = "http"

const OSSL_HTTPS_NAME = "https"

const OSSL_HTTP_PREFIX = OSSL_HTTP_NAME("://")

const OSSL_HTTPS_PREFIX = OSSL_HTTPS_NAME("://")

const OSSL_HTTP_PORT = "80"

const OSSL_HTTPS_PORT = "443"

const OPENSSL_NO_PROXY = "NO_PROXY"

const OPENSSL_HTTP_PROXY = "HTTP_PROXY"

const OPENSSL_HTTPS_PROXY = "HTTPS_PROXY"

const OSSL_HTTP_DEFAULT_MAX_LINE_LEN = 4 * 1024

const OSSL_HTTP_DEFAULT_MAX_RESP_LEN = 100 * 1024

const X509_VERSION_1 = 0

const X509_VERSION_2 = 1

const X509_VERSION_3 = 2

const X509_get_notBefore = X509_getm_notBefore

const X509_get_notAfter = X509_getm_notAfter

const X509_set_notBefore = X509_set1_notBefore

const X509_set_notAfter = X509_set1_notAfter

const X509_REQ_VERSION_1 = 0

const X509_CRL_VERSION_1 = 0

const X509_CRL_VERSION_2 = 1

const X509_CRL_set_lastUpdate = X509_CRL_set1_lastUpdate

const X509_CRL_set_nextUpdate = X509_CRL_set1_nextUpdate

const X509_ADD_FLAG_DEFAULT = 0

const X509_ADD_FLAG_UP_REF = 0x01

const X509_ADD_FLAG_PREPEND = 0x02

const X509_ADD_FLAG_NO_DUP = 0x04

const X509_ADD_FLAG_NO_SS = 0x08

const PEM_R_BAD_BASE64_DECODE = 100

const PEM_R_BAD_DECRYPT = 101

const PEM_R_BAD_END_LINE = 102

const PEM_R_BAD_IV_CHARS = 103

const PEM_R_BAD_MAGIC_NUMBER = 116

const PEM_R_BAD_PASSWORD_READ = 104

const PEM_R_BAD_VERSION_NUMBER = 117

const PEM_R_BIO_WRITE_FAILURE = 118

const PEM_R_CIPHER_IS_NULL = 127

const PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 115

const PEM_R_EXPECTING_DSS_KEY_BLOB = 131

const PEM_R_EXPECTING_PRIVATE_KEY_BLOB = 119

const PEM_R_EXPECTING_PUBLIC_KEY_BLOB = 120

const PEM_R_EXPECTING_RSA_KEY_BLOB = 132

const PEM_R_HEADER_TOO_LONG = 128

const PEM_R_INCONSISTENT_HEADER = 121

const PEM_R_KEYBLOB_HEADER_PARSE_ERROR = 122

const PEM_R_KEYBLOB_TOO_SHORT = 123

const PEM_R_MISSING_DEK_IV = 129

const PEM_R_NOT_DEK_INFO = 105

const PEM_R_NOT_ENCRYPTED = 106

const PEM_R_NOT_PROC_TYPE = 107

const PEM_R_NO_START_LINE = 108

const PEM_R_PROBLEMS_GETTING_PASSWORD = 109

const PEM_R_PVK_DATA_TOO_SHORT = 124

const PEM_R_PVK_TOO_SHORT = 125

const PEM_R_READ_KEY = 111

const PEM_R_SHORT_HEADER = 112

const PEM_R_UNEXPECTED_DEK_IV = 130

const PEM_R_UNSUPPORTED_CIPHER = 113

const PEM_R_UNSUPPORTED_ENCRYPTION = 114

const PEM_R_UNSUPPORTED_KEY_COMPONENTS = 126

const PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 110

const PEM_BUFSIZE = 1024

const PEM_STRING_X509_OLD = "X509 CERTIFICATE"

const PEM_STRING_X509 = "CERTIFICATE"

const PEM_STRING_X509_TRUSTED = "TRUSTED CERTIFICATE"

const PEM_STRING_X509_REQ_OLD = "NEW CERTIFICATE REQUEST"

const PEM_STRING_X509_REQ = "CERTIFICATE REQUEST"

const PEM_STRING_X509_CRL = "X509 CRL"

const PEM_STRING_EVP_PKEY = "ANY PRIVATE KEY"

const PEM_STRING_PUBLIC = "PUBLIC KEY"

const PEM_STRING_RSA = "RSA PRIVATE KEY"

const PEM_STRING_RSA_PUBLIC = "RSA PUBLIC KEY"

const PEM_STRING_DSA = "DSA PRIVATE KEY"

const PEM_STRING_DSA_PUBLIC = "DSA PUBLIC KEY"

const PEM_STRING_PKCS7 = "PKCS7"

const PEM_STRING_PKCS7_SIGNED = "PKCS #7 SIGNED DATA"

const PEM_STRING_PKCS8 = "ENCRYPTED PRIVATE KEY"

const PEM_STRING_PKCS8INF = "PRIVATE KEY"

const PEM_STRING_DHPARAMS = "DH PARAMETERS"

const PEM_STRING_DHXPARAMS = "X9.42 DH PARAMETERS"

const PEM_STRING_SSL_SESSION = "SSL SESSION PARAMETERS"

const PEM_STRING_DSAPARAMS = "DSA PARAMETERS"

const PEM_STRING_ECDSA_PUBLIC = "ECDSA PUBLIC KEY"

const PEM_STRING_ECPARAMETERS = "EC PARAMETERS"

const PEM_STRING_ECPRIVATEKEY = "EC PRIVATE KEY"

const PEM_STRING_PARAMETERS = "PARAMETERS"

const PEM_STRING_CMS = "CMS"

const PEM_TYPE_ENCRYPTED = 10

const PEM_TYPE_MIC_ONLY = 20

const PEM_TYPE_MIC_CLEAR = 30

const PEM_TYPE_CLEAR = 40

const PEM_FLAG_SECURE = 0x01

const PEM_FLAG_EAY_COMPATIBLE = 0x02

const PEM_FLAG_ONLY_B64 = 0x04

const HMAC_MAX_MD_CBLOCK = 200

const OSSL_ASYNC_FD = Cint

const OSSL_BAD_ASYNC_FD = -1

const ASYNC_R_FAILED_TO_SET_POOL = 101

const ASYNC_R_FAILED_TO_SWAP_CONTEXT = 102

const ASYNC_R_INIT_FAILED = 105

const ASYNC_R_INVALID_POOL_SIZE = 103

const ASYNC_ERR = 0

const ASYNC_NO_JOBS = 1

const ASYNC_PAUSE = 2

const ASYNC_FINISH = 3

const ASYNC_STATUS_UNSUPPORTED = 0

const ASYNC_STATUS_ERR = 1

const ASYNC_STATUS_OK = 2

const ASYNC_STATUS_EAGAIN = 3

const CT_R_BASE64_DECODE_ERROR = 108

const CT_R_INVALID_LOG_ID_LENGTH = 100

const CT_R_LOG_CONF_INVALID = 109

const CT_R_LOG_CONF_INVALID_KEY = 110

const CT_R_LOG_CONF_MISSING_DESCRIPTION = 111

const CT_R_LOG_CONF_MISSING_KEY = 112

const CT_R_LOG_KEY_INVALID = 113

const CT_R_SCT_FUTURE_TIMESTAMP = 116

const CT_R_SCT_INVALID = 104

const CT_R_SCT_INVALID_SIGNATURE = 107

const CT_R_SCT_LIST_INVALID = 105

const CT_R_SCT_LOG_ID_MISMATCH = 114

const CT_R_SCT_NOT_SET = 106

const CT_R_SCT_UNSUPPORTED_VERSION = 115

const CT_R_UNRECOGNIZED_SIGNATURE_NID = 101

const CT_R_UNSUPPORTED_ENTRY_TYPE = 102

const CT_R_UNSUPPORTED_VERSION = 103

const SCT_MIN_RSA_BITS = 2048

const CT_V1_HASHLEN = SHA256_DIGEST_LENGTH

const SSL_F_ADD_CLIENT_KEY_SHARE_EXT = 0

const SSL_F_ADD_KEY_SHARE = 0

const SSL_F_BYTES_TO_CIPHER_LIST = 0

const SSL_F_CHECK_SUITEB_CIPHER_LIST = 0

const SSL_F_CIPHERSUITE_CB = 0

const SSL_F_CONSTRUCT_CA_NAMES = 0

const SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS = 0

const SSL_F_CONSTRUCT_STATEFUL_TICKET = 0

const SSL_F_CONSTRUCT_STATELESS_TICKET = 0

const SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH = 0

const SSL_F_CREATE_TICKET_PREQUEL = 0

const SSL_F_CT_MOVE_SCTS = 0

const SSL_F_CT_STRICT = 0

const SSL_F_CUSTOM_EXT_ADD = 0

const SSL_F_CUSTOM_EXT_PARSE = 0

const SSL_F_D2I_SSL_SESSION = 0

const SSL_F_DANE_CTX_ENABLE = 0

const SSL_F_DANE_MTYPE_SET = 0

const SSL_F_DANE_TLSA_ADD = 0

const SSL_F_DERIVE_SECRET_KEY_AND_IV = 0

const SSL_F_DO_DTLS1_WRITE = 0

const SSL_F_DO_SSL3_WRITE = 0

const SSL_F_DTLS1_BUFFER_RECORD = 0

const SSL_F_DTLS1_CHECK_TIMEOUT_NUM = 0

const SSL_F_DTLS1_HEARTBEAT = 0

const SSL_F_DTLS1_HM_FRAGMENT_NEW = 0

const SSL_F_DTLS1_PREPROCESS_FRAGMENT = 0

const SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS = 0

const SSL_F_DTLS1_PROCESS_RECORD = 0

const SSL_F_DTLS1_READ_BYTES = 0

const SSL_F_DTLS1_READ_FAILED = 0

const SSL_F_DTLS1_RETRANSMIT_MESSAGE = 0

const SSL_F_DTLS1_WRITE_APP_DATA_BYTES = 0

const SSL_F_DTLS1_WRITE_BYTES = 0

const SSL_F_DTLSV1_LISTEN = 0

const SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 0

const SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST = 0

const SSL_F_DTLS_GET_REASSEMBLED_MESSAGE = 0

const SSL_F_DTLS_PROCESS_HELLO_VERIFY = 0

const SSL_F_DTLS_RECORD_LAYER_NEW = 0

const SSL_F_DTLS_WAIT_FOR_DRY = 0

const SSL_F_EARLY_DATA_COUNT_OK = 0

const SSL_F_FINAL_EARLY_DATA = 0

const SSL_F_FINAL_EC_PT_FORMATS = 0

const SSL_F_FINAL_EMS = 0

const SSL_F_FINAL_KEY_SHARE = 0

const SSL_F_FINAL_MAXFRAGMENTLEN = 0

const SSL_F_FINAL_RENEGOTIATE = 0

const SSL_F_FINAL_SERVER_NAME = 0

const SSL_F_FINAL_SIG_ALGS = 0

const SSL_F_GET_CERT_VERIFY_TBS_DATA = 0

const SSL_F_NSS_KEYLOG_INT = 0

const SSL_F_OPENSSL_INIT_SSL = 0

const SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION = 0

const SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION = 0

const SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE = 0

const SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE = 0

const SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE = 0

const SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION = 0

const SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION = 0

const SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION = 0

const SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION = 0

const SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE = 0

const SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE = 0

const SSL_F_OSSL_STATEM_SERVER_POST_WORK = 0

const SSL_F_OSSL_STATEM_SERVER_PRE_WORK = 0

const SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE = 0

const SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION = 0

const SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION = 0

const SSL_F_PARSE_CA_NAMES = 0

const SSL_F_PITEM_NEW = 0

const SSL_F_PQUEUE_NEW = 0

const SSL_F_PROCESS_KEY_SHARE_EXT = 0

const SSL_F_READ_STATE_MACHINE = 0

const SSL_F_SET_CLIENT_CIPHERSUITE = 0

const SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET = 0

const SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET = 0

const SSL_F_SRP_VERIFY_SERVER_PARAM = 0

const SSL_F_SSL3_CHANGE_CIPHER_STATE = 0

const SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM = 0

const SSL_F_SSL3_CTRL = 0

const SSL_F_SSL3_CTX_CTRL = 0

const SSL_F_SSL3_DIGEST_CACHED_RECORDS = 0

const SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC = 0

const SSL_F_SSL3_ENC = 0

const SSL_F_SSL3_FINAL_FINISH_MAC = 0

const SSL_F_SSL3_FINISH_MAC = 0

const SSL_F_SSL3_GENERATE_KEY_BLOCK = 0

const SSL_F_SSL3_GENERATE_MASTER_SECRET = 0

const SSL_F_SSL3_GET_RECORD = 0

const SSL_F_SSL3_INIT_FINISHED_MAC = 0

const SSL_F_SSL3_OUTPUT_CERT_CHAIN = 0

const SSL_F_SSL3_READ_BYTES = 0

const SSL_F_SSL3_READ_N = 0

const SSL_F_SSL3_SETUP_KEY_BLOCK = 0

const SSL_F_SSL3_SETUP_READ_BUFFER = 0

const SSL_F_SSL3_SETUP_WRITE_BUFFER = 0

const SSL_F_SSL3_WRITE_BYTES = 0

const SSL_F_SSL3_WRITE_PENDING = 0

const SSL_F_SSL_ADD_CERT_CHAIN = 0

const SSL_F_SSL_ADD_CERT_TO_BUF = 0

const SSL_F_SSL_ADD_CERT_TO_WPACKET = 0

const SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT = 0

const SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT = 0

const SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT = 0

const SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK = 0

const SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK = 0

const SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT = 0

const SSL_F_SSL_ADD_SERVERHELLO_TLSEXT = 0

const SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT = 0

const SSL_F_SSL_BAD_METHOD = 0

const SSL_F_SSL_BUILD_CERT_CHAIN = 0

const SSL_F_SSL_BYTES_TO_CIPHER_LIST = 0

const SSL_F_SSL_CACHE_CIPHERLIST = 0

const SSL_F_SSL_CERT_ADD0_CHAIN_CERT = 0

const SSL_F_SSL_CERT_DUP = 0

const SSL_F_SSL_CERT_NEW = 0

const SSL_F_SSL_CERT_SET0_CHAIN = 0

const SSL_F_SSL_CHECK_PRIVATE_KEY = 0

const SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT = 0

const SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO = 0

const SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG = 0

const SSL_F_SSL_CHOOSE_CLIENT_VERSION = 0

const SSL_F_SSL_CIPHER_DESCRIPTION = 0

const SSL_F_SSL_CIPHER_LIST_TO_BYTES = 0

const SSL_F_SSL_CIPHER_PROCESS_RULESTR = 0

const SSL_F_SSL_CIPHER_STRENGTH_SORT = 0

const SSL_F_SSL_CLEAR = 0

const SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT = 0

const SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD = 0

const SSL_F_SSL_CONF_CMD = 0

const SSL_F_SSL_CREATE_CIPHER_LIST = 0

const SSL_F_SSL_CTRL = 0

const SSL_F_SSL_CTX_CHECK_PRIVATE_KEY = 0

const SSL_F_SSL_CTX_ENABLE_CT = 0

const SSL_F_SSL_CTX_MAKE_PROFILES = 0

const SSL_F_SSL_CTX_NEW = 0

const SSL_F_SSL_CTX_SET_ALPN_PROTOS = 0

const SSL_F_SSL_CTX_SET_CIPHER_LIST = 0

const SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE = 0

const SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK = 0

const SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT = 0

const SSL_F_SSL_CTX_SET_SSL_VERSION = 0

const SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 0

const SSL_F_SSL_CTX_USE_CERTIFICATE = 0

const SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1 = 0

const SSL_F_SSL_CTX_USE_CERTIFICATE_FILE = 0

const SSL_F_SSL_CTX_USE_PRIVATEKEY = 0

const SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1 = 0

const SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE = 0

const SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT = 0

const SSL_F_SSL_CTX_USE_RSAPRIVATEKEY = 0

const SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1 = 0

const SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE = 0

const SSL_F_SSL_CTX_USE_SERVERINFO = 0

const SSL_F_SSL_CTX_USE_SERVERINFO_EX = 0

const SSL_F_SSL_CTX_USE_SERVERINFO_FILE = 0

const SSL_F_SSL_DANE_DUP = 0

const SSL_F_SSL_DANE_ENABLE = 0

const SSL_F_SSL_DERIVE = 0

const SSL_F_SSL_DO_CONFIG = 0

const SSL_F_SSL_DO_HANDSHAKE = 0

const SSL_F_SSL_DUP_CA_LIST = 0

const SSL_F_SSL_ENABLE_CT = 0

const SSL_F_SSL_GENERATE_PKEY_GROUP = 0

const SSL_F_SSL_GENERATE_SESSION_ID = 0

const SSL_F_SSL_GET_NEW_SESSION = 0

const SSL_F_SSL_GET_PREV_SESSION = 0

const SSL_F_SSL_GET_SERVER_CERT_INDEX = 0

const SSL_F_SSL_GET_SIGN_PKEY = 0

const SSL_F_SSL_HANDSHAKE_HASH = 0

const SSL_F_SSL_INIT_WBIO_BUFFER = 0

const SSL_F_SSL_KEY_UPDATE = 0

const SSL_F_SSL_LOAD_CLIENT_CA_FILE = 0

const SSL_F_SSL_LOG_MASTER_SECRET = 0

const SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE = 0

const SSL_F_SSL_MODULE_INIT = 0

const SSL_F_SSL_NEW = 0

const SSL_F_SSL_NEXT_PROTO_VALIDATE = 0

const SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT = 0

const SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT = 0

const SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT = 0

const SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT = 0

const SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT = 0

const SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT = 0

const SSL_F_SSL_PEEK = 0

const SSL_F_SSL_PEEK_EX = 0

const SSL_F_SSL_PEEK_INTERNAL = 0

const SSL_F_SSL_READ = 0

const SSL_F_SSL_READ_EARLY_DATA = 0

const SSL_F_SSL_READ_EX = 0

const SSL_F_SSL_READ_INTERNAL = 0

const SSL_F_SSL_RENEGOTIATE = 0

const SSL_F_SSL_RENEGOTIATE_ABBREVIATED = 0

const SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT = 0

const SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT = 0

const SSL_F_SSL_SESSION_DUP = 0

const SSL_F_SSL_SESSION_NEW = 0

const SSL_F_SSL_SESSION_PRINT_FP = 0

const SSL_F_SSL_SESSION_SET1_ID = 0

const SSL_F_SSL_SESSION_SET1_ID_CONTEXT = 0

const SSL_F_SSL_SET_ALPN_PROTOS = 0

const SSL_F_SSL_SET_CERT = 0

const SSL_F_SSL_SET_CERT_AND_KEY = 0

const SSL_F_SSL_SET_CIPHER_LIST = 0

const SSL_F_SSL_SET_CT_VALIDATION_CALLBACK = 0

const SSL_F_SSL_SET_FD = 0

const SSL_F_SSL_SET_PKEY = 0

const SSL_F_SSL_SET_RFD = 0

const SSL_F_SSL_SET_SESSION = 0

const SSL_F_SSL_SET_SESSION_ID_CONTEXT = 0

const SSL_F_SSL_SET_SESSION_TICKET_EXT = 0

const SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 0

const SSL_F_SSL_SET_WFD = 0

const SSL_F_SSL_SHUTDOWN = 0

const SSL_F_SSL_SRP_CTX_INIT = 0

const SSL_F_SSL_START_ASYNC_JOB = 0

const SSL_F_SSL_UNDEFINED_FUNCTION = 0

const SSL_F_SSL_UNDEFINED_VOID_FUNCTION = 0

const SSL_F_SSL_USE_CERTIFICATE = 0

const SSL_F_SSL_USE_CERTIFICATE_ASN1 = 0

const SSL_F_SSL_USE_CERTIFICATE_FILE = 0

const SSL_F_SSL_USE_PRIVATEKEY = 0

const SSL_F_SSL_USE_PRIVATEKEY_ASN1 = 0

const SSL_F_SSL_USE_PRIVATEKEY_FILE = 0

const SSL_F_SSL_USE_PSK_IDENTITY_HINT = 0

const SSL_F_SSL_USE_RSAPRIVATEKEY = 0

const SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1 = 0

const SSL_F_SSL_USE_RSAPRIVATEKEY_FILE = 0

const SSL_F_SSL_VALIDATE_CT = 0

const SSL_F_SSL_VERIFY_CERT_CHAIN = 0

const SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE = 0

const SSL_F_SSL_WRITE = 0

const SSL_F_SSL_WRITE_EARLY_DATA = 0

const SSL_F_SSL_WRITE_EARLY_FINISH = 0

const SSL_F_SSL_WRITE_EX = 0

const SSL_F_SSL_WRITE_INTERNAL = 0

const SSL_F_STATE_MACHINE = 0

const SSL_F_TLS12_CHECK_PEER_SIGALG = 0

const SSL_F_TLS12_COPY_SIGALGS = 0

const SSL_F_TLS13_CHANGE_CIPHER_STATE = 0

const SSL_F_TLS13_ENC = 0

const SSL_F_TLS13_FINAL_FINISH_MAC = 0

const SSL_F_TLS13_GENERATE_SECRET = 0

const SSL_F_TLS13_HKDF_EXPAND = 0

const SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA = 0

const SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA = 0

const SSL_F_TLS13_SETUP_KEY_BLOCK = 0

const SSL_F_TLS1_CHANGE_CIPHER_STATE = 0

const SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS = 0

const SSL_F_TLS1_ENC = 0

const SSL_F_TLS1_EXPORT_KEYING_MATERIAL = 0

const SSL_F_TLS1_GET_CURVELIST = 0

const SSL_F_TLS1_PRF = 0

const SSL_F_TLS1_SAVE_U16 = 0

const SSL_F_TLS1_SETUP_KEY_BLOCK = 0

const SSL_F_TLS1_SET_GROUPS = 0

const SSL_F_TLS1_SET_RAW_SIGALGS = 0

const SSL_F_TLS1_SET_SERVER_SIGALGS = 0

const SSL_F_TLS1_SET_SHARED_SIGALGS = 0

const SSL_F_TLS1_SET_SIGALGS = 0

const SSL_F_TLS_CHOOSE_SIGALG = 0

const SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK = 0

const SSL_F_TLS_COLLECT_EXTENSIONS = 0

const SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES = 0

const SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST = 0

const SSL_F_TLS_CONSTRUCT_CERT_STATUS = 0

const SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY = 0

const SSL_F_TLS_CONSTRUCT_CERT_VERIFY = 0

const SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 0

const SSL_F_TLS_CONSTRUCT_CKE_DHE = 0

const SSL_F_TLS_CONSTRUCT_CKE_ECDHE = 0

const SSL_F_TLS_CONSTRUCT_CKE_GOST = 0

const SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE = 0

const SSL_F_TLS_CONSTRUCT_CKE_RSA = 0

const SSL_F_TLS_CONSTRUCT_CKE_SRP = 0

const SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE = 0

const SSL_F_TLS_CONSTRUCT_CLIENT_HELLO = 0

const SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE = 0

const SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY = 0

const SSL_F_TLS_CONSTRUCT_CTOS_ALPN = 0

const SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE = 0

const SSL_F_TLS_CONSTRUCT_CTOS_COOKIE = 0

const SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA = 0

const SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS = 0

const SSL_F_TLS_CONSTRUCT_CTOS_EMS = 0

const SSL_F_TLS_CONSTRUCT_CTOS_ETM = 0

const SSL_F_TLS_CONSTRUCT_CTOS_HELLO = 0

const SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE = 0

const SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE = 0

const SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN = 0

const SSL_F_TLS_CONSTRUCT_CTOS_NPN = 0

const SSL_F_TLS_CONSTRUCT_CTOS_PADDING = 0

const SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH = 0

const SSL_F_TLS_CONSTRUCT_CTOS_PSK = 0

const SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES = 0

const SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SCT = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SRP = 0

const SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS = 0

const SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS = 0

const SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP = 0

const SSL_F_TLS_CONSTRUCT_CTOS_VERIFY = 0

const SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS = 0

const SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA = 0

const SSL_F_TLS_CONSTRUCT_EXTENSIONS = 0

const SSL_F_TLS_CONSTRUCT_FINISHED = 0

const SSL_F_TLS_CONSTRUCT_HELLO_REQUEST = 0

const SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST = 0

const SSL_F_TLS_CONSTRUCT_KEY_UPDATE = 0

const SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET = 0

const SSL_F_TLS_CONSTRUCT_NEXT_PROTO = 0

const SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE = 0

const SSL_F_TLS_CONSTRUCT_SERVER_HELLO = 0

const SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE = 0

const SSL_F_TLS_CONSTRUCT_STOC_ALPN = 0

const SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE = 0

const SSL_F_TLS_CONSTRUCT_STOC_COOKIE = 0

const SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG = 0

const SSL_F_TLS_CONSTRUCT_STOC_DONE = 0

const SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA = 0

const SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO = 0

const SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS = 0

const SSL_F_TLS_CONSTRUCT_STOC_EMS = 0

const SSL_F_TLS_CONSTRUCT_STOC_ETM = 0

const SSL_F_TLS_CONSTRUCT_STOC_HELLO = 0

const SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE = 0

const SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE = 0

const SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN = 0

const SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG = 0

const SSL_F_TLS_CONSTRUCT_STOC_PSK = 0

const SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE = 0

const SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME = 0

const SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET = 0

const SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST = 0

const SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS = 0

const SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS = 0

const SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP = 0

const SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO = 0

const SSL_F_TLS_FINISH_HANDSHAKE = 0

const SSL_F_TLS_GET_MESSAGE_BODY = 0

const SSL_F_TLS_GET_MESSAGE_HEADER = 0

const SSL_F_TLS_HANDLE_ALPN = 0

const SSL_F_TLS_HANDLE_STATUS_REQUEST = 0

const SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES = 0

const SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT = 0

const SSL_F_TLS_PARSE_CTOS_ALPN = 0

const SSL_F_TLS_PARSE_CTOS_COOKIE = 0

const SSL_F_TLS_PARSE_CTOS_EARLY_DATA = 0

const SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS = 0

const SSL_F_TLS_PARSE_CTOS_EMS = 0

const SSL_F_TLS_PARSE_CTOS_KEY_SHARE = 0

const SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN = 0

const SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH = 0

const SSL_F_TLS_PARSE_CTOS_PSK = 0

const SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES = 0

const SSL_F_TLS_PARSE_CTOS_RENEGOTIATE = 0

const SSL_F_TLS_PARSE_CTOS_SERVER_NAME = 0

const SSL_F_TLS_PARSE_CTOS_SESSION_TICKET = 0

const SSL_F_TLS_PARSE_CTOS_SIG_ALGS = 0

const SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT = 0

const SSL_F_TLS_PARSE_CTOS_SRP = 0

const SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST = 0

const SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS = 0

const SSL_F_TLS_PARSE_CTOS_USE_SRTP = 0

const SSL_F_TLS_PARSE_STOC_ALPN = 0

const SSL_F_TLS_PARSE_STOC_COOKIE = 0

const SSL_F_TLS_PARSE_STOC_EARLY_DATA = 0

const SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO = 0

const SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS = 0

const SSL_F_TLS_PARSE_STOC_KEY_SHARE = 0

const SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN = 0

const SSL_F_TLS_PARSE_STOC_NPN = 0

const SSL_F_TLS_PARSE_STOC_PSK = 0

const SSL_F_TLS_PARSE_STOC_RENEGOTIATE = 0

const SSL_F_TLS_PARSE_STOC_SCT = 0

const SSL_F_TLS_PARSE_STOC_SERVER_NAME = 0

const SSL_F_TLS_PARSE_STOC_SESSION_TICKET = 0

const SSL_F_TLS_PARSE_STOC_STATUS_REQUEST = 0

const SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS = 0

const SSL_F_TLS_PARSE_STOC_USE_SRTP = 0

const SSL_F_TLS_POST_PROCESS_CLIENT_HELLO = 0

const SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE = 0

const SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE = 0

const SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST = 0

const SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST = 0

const SSL_F_TLS_PROCESS_CERT_STATUS = 0

const SSL_F_TLS_PROCESS_CERT_STATUS_BODY = 0

const SSL_F_TLS_PROCESS_CERT_VERIFY = 0

const SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC = 0

const SSL_F_TLS_PROCESS_CKE_DHE = 0

const SSL_F_TLS_PROCESS_CKE_ECDHE = 0

const SSL_F_TLS_PROCESS_CKE_GOST = 0

const SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE = 0

const SSL_F_TLS_PROCESS_CKE_RSA = 0

const SSL_F_TLS_PROCESS_CKE_SRP = 0

const SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE = 0

const SSL_F_TLS_PROCESS_CLIENT_HELLO = 0

const SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE = 0

const SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS = 0

const SSL_F_TLS_PROCESS_END_OF_EARLY_DATA = 0

const SSL_F_TLS_PROCESS_FINISHED = 0

const SSL_F_TLS_PROCESS_HELLO_REQ = 0

const SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST = 0

const SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT = 0

const SSL_F_TLS_PROCESS_KEY_EXCHANGE = 0

const SSL_F_TLS_PROCESS_KEY_UPDATE = 0

const SSL_F_TLS_PROCESS_NEW_SESSION_TICKET = 0

const SSL_F_TLS_PROCESS_NEXT_PROTO = 0

const SSL_F_TLS_PROCESS_SERVER_CERTIFICATE = 0

const SSL_F_TLS_PROCESS_SERVER_DONE = 0

const SSL_F_TLS_PROCESS_SERVER_HELLO = 0

const SSL_F_TLS_PROCESS_SKE_DHE = 0

const SSL_F_TLS_PROCESS_SKE_ECDHE = 0

const SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE = 0

const SSL_F_TLS_PROCESS_SKE_SRP = 0

const SSL_F_TLS_PSK_DO_BINDER = 0

const SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT = 0

const SSL_F_TLS_SETUP_HANDSHAKE = 0

const SSL_F_USE_CERTIFICATE_CHAIN_FILE = 0

const SSL_F_WPACKET_INTERN_INIT_LEN = 0

const SSL_F_WPACKET_START_SUB_PACKET_LEN__ = 0

const SSL_F_WRITE_STATE_MACHINE = 0

const SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY = 291

const SSL_R_APP_DATA_IN_HANDSHAKE = 100

const SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT = 272

const SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE = 158

const SSL_R_BAD_CHANGE_CIPHER_SPEC = 103

const SSL_R_BAD_CIPHER = 186

const SSL_R_BAD_DATA = 390

const SSL_R_BAD_DATA_RETURNED_BY_CALLBACK = 106

const SSL_R_BAD_DECOMPRESSION = 107

const SSL_R_BAD_DH_VALUE = 102

const SSL_R_BAD_DIGEST_LENGTH = 111

const SSL_R_BAD_EARLY_DATA = 233

const SSL_R_BAD_ECC_CERT = 304

const SSL_R_BAD_ECPOINT = 306

const SSL_R_BAD_EXTENSION = 110

const SSL_R_BAD_HANDSHAKE_LENGTH = 332

const SSL_R_BAD_HANDSHAKE_STATE = 236

const SSL_R_BAD_HELLO_REQUEST = 105

const SSL_R_BAD_HRR_VERSION = 263

const SSL_R_BAD_KEY_SHARE = 108

const SSL_R_BAD_KEY_UPDATE = 122

const SSL_R_BAD_LEGACY_VERSION = 292

const SSL_R_BAD_LENGTH = 271

const SSL_R_BAD_PACKET = 240

const SSL_R_BAD_PACKET_LENGTH = 115

const SSL_R_BAD_PROTOCOL_VERSION_NUMBER = 116

const SSL_R_BAD_PSK = 219

const SSL_R_BAD_PSK_IDENTITY = 114

const SSL_R_BAD_RECORD_TYPE = 443

const SSL_R_BAD_RSA_ENCRYPT = 119

const SSL_R_BAD_SIGNATURE = 123

const SSL_R_BAD_SRP_A_LENGTH = 347

const SSL_R_BAD_SRP_PARAMETERS = 371

const SSL_R_BAD_SRTP_MKI_VALUE = 352

const SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST = 353

const SSL_R_BAD_SSL_FILETYPE = 124

const SSL_R_BAD_VALUE = 384

const SSL_R_BAD_WRITE_RETRY = 127

const SSL_R_BINDER_DOES_NOT_VERIFY = 253

const SSL_R_BIO_NOT_SET = 128

const SSL_R_BLOCK_CIPHER_PAD_IS_WRONG = 129

const SSL_R_BN_LIB = 130

const SSL_R_CALLBACK_FAILED = 234

const SSL_R_CANNOT_CHANGE_CIPHER = 109

const SSL_R_CANNOT_GET_GROUP_NAME = 299

const SSL_R_CA_DN_LENGTH_MISMATCH = 131

const SSL_R_CA_KEY_TOO_SMALL = 397

const SSL_R_CA_MD_TOO_WEAK = 398

const SSL_R_CCS_RECEIVED_EARLY = 133

const SSL_R_CERTIFICATE_VERIFY_FAILED = 134

const SSL_R_CERT_CB_ERROR = 377

const SSL_R_CERT_LENGTH_MISMATCH = 135

const SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED = 218

const SSL_R_CIPHER_CODE_WRONG_LENGTH = 137

const SSL_R_CLIENTHELLO_TLSEXT = 226

const SSL_R_COMPRESSED_LENGTH_TOO_LONG = 140

const SSL_R_COMPRESSION_DISABLED = 343

const SSL_R_COMPRESSION_FAILURE = 141

const SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE = 307

const SSL_R_COMPRESSION_LIBRARY_ERROR = 142

const SSL_R_CONNECTION_TYPE_NOT_SET = 144

const SSL_R_CONTEXT_NOT_DANE_ENABLED = 167

const SSL_R_COOKIE_GEN_CALLBACK_FAILURE = 400

const SSL_R_COOKIE_MISMATCH = 308

const SSL_R_COPY_PARAMETERS_FAILED = 296

const SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED = 206

const SSL_R_DANE_ALREADY_ENABLED = 172

const SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL = 173

const SSL_R_DANE_NOT_ENABLED = 175

const SSL_R_DANE_TLSA_BAD_CERTIFICATE = 180

const SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE = 184

const SSL_R_DANE_TLSA_BAD_DATA_LENGTH = 189

const SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH = 192

const SSL_R_DANE_TLSA_BAD_MATCHING_TYPE = 200

const SSL_R_DANE_TLSA_BAD_PUBLIC_KEY = 201

const SSL_R_DANE_TLSA_BAD_SELECTOR = 202

const SSL_R_DANE_TLSA_NULL_DATA = 203

const SSL_R_DATA_BETWEEN_CCS_AND_FINISHED = 145

const SSL_R_DATA_LENGTH_TOO_LONG = 146

const SSL_R_DECRYPTION_FAILED = 147

const SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC = 281

const SSL_R_DH_KEY_TOO_SMALL = 394

const SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG = 148

const SSL_R_DIGEST_CHECK_FAILED = 149

const SSL_R_DTLS_MESSAGE_TOO_BIG = 334

const SSL_R_DUPLICATE_COMPRESSION_ID = 309

const SSL_R_ECC_CERT_NOT_FOR_SIGNING = 318

const SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE = 374

const SSL_R_EE_KEY_TOO_SMALL = 399

const SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST = 354

const SSL_R_ENCRYPTED_LENGTH_TOO_LONG = 150

const SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST = 151

const SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN = 204

const SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE = 194

const SSL_R_EXCESSIVE_MESSAGE_SIZE = 152

const SSL_R_EXTENSION_NOT_RECEIVED = 279

const SSL_R_EXTRA_DATA_IN_MESSAGE = 153

const SSL_R_EXT_LENGTH_MISMATCH = 163

const SSL_R_FAILED_TO_INIT_ASYNC = 405

const SSL_R_FRAGMENTED_CLIENT_HELLO = 401

const SSL_R_GOT_A_FIN_BEFORE_A_CCS = 154

const SSL_R_HTTPS_PROXY_REQUEST = 155

const SSL_R_HTTP_REQUEST = 156

const SSL_R_ILLEGAL_POINT_COMPRESSION = 162

const SSL_R_ILLEGAL_SUITEB_DIGEST = 380

const SSL_R_INAPPROPRIATE_FALLBACK = 373

const SSL_R_INCONSISTENT_COMPRESSION = 340

const SSL_R_INCONSISTENT_EARLY_DATA_ALPN = 222

const SSL_R_INCONSISTENT_EARLY_DATA_SNI = 231

const SSL_R_INCONSISTENT_EXTMS = 104

const SSL_R_INSUFFICIENT_SECURITY = 241

const SSL_R_INVALID_ALERT = 205

const SSL_R_INVALID_CCS_MESSAGE = 260

const SSL_R_INVALID_CERTIFICATE_OR_ALG = 238

const SSL_R_INVALID_COMMAND = 280

const SSL_R_INVALID_COMPRESSION_ALGORITHM = 341

const SSL_R_INVALID_CONFIG = 283

const SSL_R_INVALID_CONFIGURATION_NAME = 113

const SSL_R_INVALID_CONTEXT = 282

const SSL_R_INVALID_CT_VALIDATION_TYPE = 212

const SSL_R_INVALID_KEY_UPDATE_TYPE = 120

const SSL_R_INVALID_MAX_EARLY_DATA = 174

const SSL_R_INVALID_NULL_CMD_NAME = 385

const SSL_R_INVALID_SEQUENCE_NUMBER = 402

const SSL_R_INVALID_SERVERINFO_DATA = 388

const SSL_R_INVALID_SESSION_ID = 999

const SSL_R_INVALID_SRP_USERNAME = 357

const SSL_R_INVALID_STATUS_RESPONSE = 328

const SSL_R_INVALID_TICKET_KEYS_LENGTH = 325

const SSL_R_LEGACY_SIGALG_DISALLOWED_OR_UNSUPPORTED = 333

const SSL_R_LENGTH_MISMATCH = 159

const SSL_R_LENGTH_TOO_LONG = 404

const SSL_R_LENGTH_TOO_SHORT = 160

const SSL_R_LIBRARY_BUG = 274

const SSL_R_LIBRARY_HAS_NO_CIPHERS = 161

const SSL_R_MISSING_DSA_SIGNING_CERT = 165

const SSL_R_MISSING_ECDSA_SIGNING_CERT = 381

const SSL_R_MISSING_FATAL = 256

const SSL_R_MISSING_PARAMETERS = 290

const SSL_R_MISSING_PSK_KEX_MODES_EXTENSION = 310

const SSL_R_MISSING_RSA_CERTIFICATE = 168

const SSL_R_MISSING_RSA_ENCRYPTING_CERT = 169

const SSL_R_MISSING_RSA_SIGNING_CERT = 170

const SSL_R_MISSING_SIGALGS_EXTENSION = 112

const SSL_R_MISSING_SIGNING_CERT = 221

const SSL_R_MISSING_SRP_PARAM = 358

const SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION = 209

const SSL_R_MISSING_TMP_DH_KEY = 171

const SSL_R_MISSING_TMP_ECDH_KEY = 311

const SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA = 293

const SSL_R_NOT_ON_RECORD_BOUNDARY = 182

const SSL_R_NOT_REPLACING_CERTIFICATE = 289

const SSL_R_NOT_SERVER = 284

const SSL_R_NO_APPLICATION_PROTOCOL = 235

const SSL_R_NO_CERTIFICATES_RETURNED = 176

const SSL_R_NO_CERTIFICATE_ASSIGNED = 177

const SSL_R_NO_CERTIFICATE_SET = 179

const SSL_R_NO_CHANGE_FOLLOWING_HRR = 214

const SSL_R_NO_CIPHERS_AVAILABLE = 181

const SSL_R_NO_CIPHERS_SPECIFIED = 183

const SSL_R_NO_CIPHER_MATCH = 185

const SSL_R_NO_CLIENT_CERT_METHOD = 331

const SSL_R_NO_COMPRESSION_SPECIFIED = 187

const SSL_R_NO_COOKIE_CALLBACK_SET = 287

const SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER = 330

const SSL_R_NO_METHOD_SPECIFIED = 188

const SSL_R_NO_PEM_EXTENSIONS = 389

const SSL_R_NO_PRIVATE_KEY_ASSIGNED = 190

const SSL_R_NO_PROTOCOLS_AVAILABLE = 191

const SSL_R_NO_RENEGOTIATION = 339

const SSL_R_NO_REQUIRED_DIGEST = 324

const SSL_R_NO_SHARED_CIPHER = 193

const SSL_R_NO_SHARED_GROUPS = 410

const SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS = 376

const SSL_R_NO_SRTP_PROFILES = 359

const SSL_R_NO_SUITABLE_DIGEST_ALGORITHM = 297

const SSL_R_NO_SUITABLE_GROUPS = 295

const SSL_R_NO_SUITABLE_KEY_SHARE = 101

const SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM = 118

const SSL_R_NO_VALID_SCTS = 216

const SSL_R_NO_VERIFY_COOKIE_CALLBACK = 403

const SSL_R_NULL_SSL_CTX = 195

const SSL_R_NULL_SSL_METHOD_PASSED = 196

const SSL_R_OCSP_CALLBACK_FAILURE = 305

const SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED = 197

const SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED = 344

const SSL_R_OVERFLOW_ERROR = 237

const SSL_R_PACKET_LENGTH_TOO_LONG = 198

const SSL_R_PARSE_TLSEXT = 227

const SSL_R_PATH_TOO_LONG = 270

const SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE = 199

const SSL_R_PEM_NAME_BAD_PREFIX = 391

const SSL_R_PEM_NAME_TOO_SHORT = 392

const SSL_R_PIPELINE_FAILURE = 406

const SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR = 278

const SSL_R_PRIVATE_KEY_MISMATCH = 288

const SSL_R_PROTOCOL_IS_SHUTDOWN = 207

const SSL_R_PSK_IDENTITY_NOT_FOUND = 223

const SSL_R_PSK_NO_CLIENT_CB = 224

const SSL_R_PSK_NO_SERVER_CB = 225

const SSL_R_READ_BIO_NOT_SET = 211

const SSL_R_READ_TIMEOUT_EXPIRED = 312

const SSL_R_RECORD_LENGTH_MISMATCH = 213

const SSL_R_RECORD_TOO_SMALL = 298

const SSL_R_RENEGOTIATE_EXT_TOO_LONG = 335

const SSL_R_RENEGOTIATION_ENCODING_ERR = 336

const SSL_R_RENEGOTIATION_MISMATCH = 337

const SSL_R_REQUEST_PENDING = 285

const SSL_R_REQUEST_SENT = 286

const SSL_R_REQUIRED_CIPHER_MISSING = 215

const SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING = 342

const SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING = 345

const SSL_R_SCT_VERIFICATION_FAILED = 208

const SSL_R_SERVERHELLO_TLSEXT = 275

const SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED = 277

const SSL_R_SHUTDOWN_WHILE_IN_INIT = 407

const SSL_R_SIGNATURE_ALGORITHMS_ERROR = 360

const SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE = 220

const SSL_R_SRP_A_CALC = 361

const SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES = 362

const SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG = 363

const SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE = 364

const SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH = 232

const SSL_R_SSL3_EXT_INVALID_SERVERNAME = 319

const SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE = 320

const SSL_R_SSL3_SESSION_ID_TOO_LONG = 300

const SSL_R_SSLV3_ALERT_BAD_CERTIFICATE = 1042

const SSL_R_SSLV3_ALERT_BAD_RECORD_MAC = 1020

const SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED = 1045

const SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED = 1044

const SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN = 1046

const SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE = 1030

const SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE = 1040

const SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER = 1047

const SSL_R_SSLV3_ALERT_NO_CERTIFICATE = 1041

const SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE = 1010

const SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE = 1043

const SSL_R_SSL_COMMAND_SECTION_EMPTY = 117

const SSL_R_SSL_COMMAND_SECTION_NOT_FOUND = 125

const SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION = 228

const SSL_R_SSL_HANDSHAKE_FAILURE = 229

const SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS = 230

const SSL_R_SSL_NEGATIVE_LENGTH = 372

const SSL_R_SSL_SECTION_EMPTY = 126

const SSL_R_SSL_SECTION_NOT_FOUND = 136

const SSL_R_SSL_SESSION_ID_CALLBACK_FAILED = 301

const SSL_R_SSL_SESSION_ID_CONFLICT = 302

const SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG = 273

const SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH = 303

const SSL_R_SSL_SESSION_ID_TOO_LONG = 408

const SSL_R_SSL_SESSION_VERSION_MISMATCH = 210

const SSL_R_STILL_IN_INIT = 121

const SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED = 1116

const SSL_R_TLSV13_ALERT_MISSING_EXTENSION = 1109

const SSL_R_TLSV1_ALERT_ACCESS_DENIED = 1049

const SSL_R_TLSV1_ALERT_DECODE_ERROR = 1050

const SSL_R_TLSV1_ALERT_DECRYPTION_FAILED = 1021

const SSL_R_TLSV1_ALERT_DECRYPT_ERROR = 1051

const SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION = 1060

const SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK = 1086

const SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY = 1071

const SSL_R_TLSV1_ALERT_INTERNAL_ERROR = 1080

const SSL_R_TLSV1_ALERT_NO_APPLICATION_PROTOCOL = 1120

const SSL_R_TLSV1_ALERT_NO_RENEGOTIATION = 1100

const SSL_R_TLSV1_ALERT_PROTOCOL_VERSION = 1070

const SSL_R_TLSV1_ALERT_RECORD_OVERFLOW = 1022

const SSL_R_TLSV1_ALERT_UNKNOWN_CA = 1048

const SSL_R_TLSV1_ALERT_UNKNOWN_PSK_IDENTITY = 1115

const SSL_R_TLSV1_ALERT_USER_CANCELLED = 1090

const SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE = 1114

const SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE = 1113

const SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE = 1111

const SSL_R_TLSV1_UNRECOGNIZED_NAME = 1112

const SSL_R_TLSV1_UNSUPPORTED_EXTENSION = 1110

const SSL_R_TLS_ILLEGAL_EXPORTER_LABEL = 367

const SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST = 157

const SSL_R_TOO_MANY_KEY_UPDATES = 132

const SSL_R_TOO_MANY_WARN_ALERTS = 409

const SSL_R_TOO_MUCH_EARLY_DATA = 164

const SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS = 314

const SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS = 239

const SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES = 242

const SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES = 243

const SSL_R_UNEXPECTED_CCS_MESSAGE = 262

const SSL_R_UNEXPECTED_END_OF_EARLY_DATA = 178

const SSL_R_UNEXPECTED_EOF_WHILE_READING = 294

const SSL_R_UNEXPECTED_MESSAGE = 244

const SSL_R_UNEXPECTED_RECORD = 245

const SSL_R_UNINITIALIZED = 276

const SSL_R_UNKNOWN_ALERT_TYPE = 246

const SSL_R_UNKNOWN_CERTIFICATE_TYPE = 247

const SSL_R_UNKNOWN_CIPHER_RETURNED = 248

const SSL_R_UNKNOWN_CIPHER_TYPE = 249

const SSL_R_UNKNOWN_CMD_NAME = 386

const SSL_R_UNKNOWN_COMMAND = 139

const SSL_R_UNKNOWN_DIGEST = 368

const SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE = 250

const SSL_R_UNKNOWN_PKEY_TYPE = 251

const SSL_R_UNKNOWN_PROTOCOL = 252

const SSL_R_UNKNOWN_SSL_VERSION = 254

const SSL_R_UNKNOWN_STATE = 255

const SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED = 338

const SSL_R_UNSOLICITED_EXTENSION = 217

const SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 257

const SSL_R_UNSUPPORTED_ELLIPTIC_CURVE = 315

const SSL_R_UNSUPPORTED_PROTOCOL = 258

const SSL_R_UNSUPPORTED_SSL_VERSION = 259

const SSL_R_UNSUPPORTED_STATUS_TYPE = 329

const SSL_R_USE_SRTP_NOT_NEGOTIATED = 369

const SSL_R_VERSION_TOO_HIGH = 166

const SSL_R_VERSION_TOO_LOW = 396

const SSL_R_WRONG_CERTIFICATE_TYPE = 383

const SSL_R_WRONG_CIPHER_RETURNED = 261

const SSL_R_WRONG_CURVE = 378

const SSL_R_WRONG_SIGNATURE_LENGTH = 264

const SSL_R_WRONG_SIGNATURE_SIZE = 265

const SSL_R_WRONG_SIGNATURE_TYPE = 370

const SSL_R_WRONG_SSL_VERSION = 266

const SSL_R_WRONG_VERSION_NUMBER = 267

const SSL_R_X509_LIB = 268

const SSL_R_X509_VERIFICATION_SETUP_PROBLEMS = 269

const SSL_MAX_MASTER_KEY_LENGTH = 48

const SSL3_VERSION = 0x0300

const TLS1_VERSION = 0x0301

const TLS1_1_VERSION = 0x0302

const TLS1_2_VERSION = 0x0303

const TLS1_3_VERSION = 0x0304

const DTLS1_VERSION = 0xfeff

const DTLS1_2_VERSION = 0xfefd

const DTLS1_BAD_VER = 0x0100

const SSL_SESSION_ASN1_VERSION = 0x0001

const SSL_MAX_SSL_SESSION_ID_LENGTH = 32

const SSL_MAX_SID_CTX_LENGTH = 32

const SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES = 512 ÷ 8

const SSL_MAX_KEY_ARG_LENGTH = 8

const SSL_MAX_PIPELINES = 32

const SSL_TXT_LOW = "LOW"

const SSL_TXT_MEDIUM = "MEDIUM"

const SSL_TXT_HIGH = "HIGH"

const SSL_TXT_FIPS = "FIPS"

const SSL_TXT_aNULL = "aNULL"

const SSL_TXT_eNULL = "eNULL"

const SSL_TXT_NULL = "NULL"

const SSL_TXT_kRSA = "kRSA"

const SSL_TXT_kDHr = "kDHr"

const SSL_TXT_kDHd = "kDHd"

const SSL_TXT_kDH = "kDH"

const SSL_TXT_kEDH = "kEDH"

const SSL_TXT_kDHE = "kDHE"

const SSL_TXT_kECDHr = "kECDHr"

const SSL_TXT_kECDHe = "kECDHe"

const SSL_TXT_kECDH = "kECDH"

const SSL_TXT_kEECDH = "kEECDH"

const SSL_TXT_kECDHE = "kECDHE"

const SSL_TXT_kPSK = "kPSK"

const SSL_TXT_kRSAPSK = "kRSAPSK"

const SSL_TXT_kECDHEPSK = "kECDHEPSK"

const SSL_TXT_kDHEPSK = "kDHEPSK"

const SSL_TXT_kGOST = "kGOST"

const SSL_TXT_kGOST18 = "kGOST18"

const SSL_TXT_kSRP = "kSRP"

const SSL_TXT_aRSA = "aRSA"

const SSL_TXT_aDSS = "aDSS"

const SSL_TXT_aDH = "aDH"

const SSL_TXT_aECDH = "aECDH"

const SSL_TXT_aECDSA = "aECDSA"

const SSL_TXT_aPSK = "aPSK"

const SSL_TXT_aGOST94 = "aGOST94"

const SSL_TXT_aGOST01 = "aGOST01"

const SSL_TXT_aGOST12 = "aGOST12"

const SSL_TXT_aGOST = "aGOST"

const SSL_TXT_aSRP = "aSRP"

const SSL_TXT_DSS = "DSS"

const SSL_TXT_DH = "DH"

const SSL_TXT_DHE = "DHE"

const SSL_TXT_EDH = "EDH"

const SSL_TXT_ADH = "ADH"

const SSL_TXT_RSA = "RSA"

const SSL_TXT_ECDH = "ECDH"

const SSL_TXT_EECDH = "EECDH"

const SSL_TXT_ECDHE = "ECDHE"

const SSL_TXT_AECDH = "AECDH"

const SSL_TXT_ECDSA = "ECDSA"

const SSL_TXT_PSK = "PSK"

const SSL_TXT_SRP = "SRP"

const SSL_TXT_DES = "DES"

const SSL_TXT_3DES = "3DES"

const SSL_TXT_RC4 = "RC4"

const SSL_TXT_RC2 = "RC2"

const SSL_TXT_IDEA = "IDEA"

const SSL_TXT_SEED = "SEED"

const SSL_TXT_AES128 = "AES128"

const SSL_TXT_AES256 = "AES256"

const SSL_TXT_AES = "AES"

const SSL_TXT_AES_GCM = "AESGCM"

const SSL_TXT_AES_CCM = "AESCCM"

const SSL_TXT_AES_CCM_8 = "AESCCM8"

const SSL_TXT_CAMELLIA128 = "CAMELLIA128"

const SSL_TXT_CAMELLIA256 = "CAMELLIA256"

const SSL_TXT_CAMELLIA = "CAMELLIA"

const SSL_TXT_CHACHA20 = "CHACHA20"

const SSL_TXT_GOST = "GOST89"

const SSL_TXT_ARIA = "ARIA"

const SSL_TXT_ARIA_GCM = "ARIAGCM"

const SSL_TXT_ARIA128 = "ARIA128"

const SSL_TXT_ARIA256 = "ARIA256"

const SSL_TXT_GOST2012_GOST8912_GOST8912 = "GOST2012-GOST8912-GOST8912"

const SSL_TXT_CBC = "CBC"

const SSL_TXT_MD5 = "MD5"

const SSL_TXT_SHA1 = "SHA1"

const SSL_TXT_SHA = "SHA"

const SSL_TXT_GOST94 = "GOST94"

const SSL_TXT_GOST89MAC = "GOST89MAC"

const SSL_TXT_GOST12 = "GOST12"

const SSL_TXT_GOST89MAC12 = "GOST89MAC12"

const SSL_TXT_SHA256 = "SHA256"

const SSL_TXT_SHA384 = "SHA384"

const SSL_TXT_SSLV3 = "SSLv3"

const SSL_TXT_TLSV1 = "TLSv1"

const SSL_TXT_TLSV1_1 = "TLSv1.1"

const SSL_TXT_TLSV1_2 = "TLSv1.2"

const SSL_TXT_ALL = "ALL"

const SSL_TXT_CMPALL = "COMPLEMENTOFALL"

const SSL_TXT_CMPDEF = "COMPLEMENTOFDEFAULT"

const SSL_DEFAULT_CIPHER_LIST = "ALL:!COMPLEMENTOFDEFAULT:!eNULL"

const TLS_DEFAULT_CIPHERSUITES = ("TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:")("TLS_AES_128_GCM_SHA256")

const SSL_SENT_SHUTDOWN = 1

const SSL_RECEIVED_SHUTDOWN = 2

const SSL_FILETYPE_ASN1 = X509_FILETYPE_ASN1

const SSL_FILETYPE_PEM = X509_FILETYPE_PEM

const SSL_EXT_TLS_ONLY = 0x0001

const SSL_EXT_DTLS_ONLY = 0x0002

const SSL_EXT_TLS_IMPLEMENTATION_ONLY = 0x0004

const SSL_EXT_SSL3_ALLOWED = 0x0008

const SSL_EXT_TLS1_2_AND_BELOW_ONLY = 0x0010

const SSL_EXT_TLS1_3_ONLY = 0x0020

const SSL_EXT_IGNORE_ON_RESUMPTION = 0x0040

const SSL_EXT_CLIENT_HELLO = 0x0080

const SSL_EXT_TLS1_2_SERVER_HELLO = 0x0100

const SSL_EXT_TLS1_3_SERVER_HELLO = 0x0200

const SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS = 0x0400

const SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST = 0x0800

const SSL_EXT_TLS1_3_CERTIFICATE = 0x1000

const SSL_EXT_TLS1_3_NEW_SESSION_TICKET = 0x2000

const SSL_EXT_TLS1_3_CERTIFICATE_REQUEST = 0x4000

const SSL_OP_NO_EXTENDED_MASTER_SECRET = SSL_OP_BIT(0)

const SSL_OP_CLEANSE_PLAINTEXT = SSL_OP_BIT(1)

const SSL_OP_LEGACY_SERVER_CONNECT = SSL_OP_BIT(2)

const SSL_OP_ENABLE_KTLS = SSL_OP_BIT(3)

const SSL_OP_TLSEXT_PADDING = SSL_OP_BIT(4)

const SSL_OP_SAFARI_ECDHE_ECDSA_BUG = SSL_OP_BIT(6)

const SSL_OP_IGNORE_UNEXPECTED_EOF = SSL_OP_BIT(7)

const SSL_OP_ALLOW_CLIENT_RENEGOTIATION = SSL_OP_BIT(8)

const SSL_OP_DISABLE_TLSEXT_CA_NAMES = SSL_OP_BIT(9)

const SSL_OP_ALLOW_NO_DHE_KEX = SSL_OP_BIT(10)

const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = SSL_OP_BIT(11)

const SSL_OP_NO_QUERY_MTU = SSL_OP_BIT(12)

const SSL_OP_COOKIE_EXCHANGE = SSL_OP_BIT(13)

const SSL_OP_NO_TICKET = SSL_OP_BIT(14)

const SSL_OP_CISCO_ANYCONNECT = SSL_OP_BIT(15)

const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = SSL_OP_BIT(16)

const SSL_OP_NO_COMPRESSION = SSL_OP_BIT(17)

const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = SSL_OP_BIT(18)

const SSL_OP_NO_ENCRYPT_THEN_MAC = SSL_OP_BIT(19)

const SSL_OP_ENABLE_MIDDLEBOX_COMPAT = SSL_OP_BIT(20)

const SSL_OP_PRIORITIZE_CHACHA = SSL_OP_BIT(21)

const SSL_OP_CIPHER_SERVER_PREFERENCE = SSL_OP_BIT(22)

const SSL_OP_TLS_ROLLBACK_BUG = SSL_OP_BIT(23)

const SSL_OP_NO_ANTI_REPLAY = SSL_OP_BIT(24)

const SSL_OP_NO_SSLv3 = SSL_OP_BIT(25)

const SSL_OP_NO_TLSv1 = SSL_OP_BIT(26)

const SSL_OP_NO_TLSv1_2 = SSL_OP_BIT(27)

const SSL_OP_NO_TLSv1_1 = SSL_OP_BIT(28)

const SSL_OP_NO_TLSv1_3 = SSL_OP_BIT(29)

const SSL_OP_NO_DTLSv1 = SSL_OP_BIT(26)

const SSL_OP_NO_DTLSv1_2 = SSL_OP_BIT(27)

const SSL_OP_NO_RENEGOTIATION = SSL_OP_BIT(30)

const SSL_OP_CRYPTOPRO_TLSEXT_BUG = SSL_OP_BIT(31)

const SSL_OP_NO_SSL_MASK = (((SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1) | SSL_OP_NO_TLSv1_1) | SSL_OP_NO_TLSv1_2) | SSL_OP_NO_TLSv1_3

const SSL_OP_NO_DTLS_MASK = SSL_OP_NO_DTLSv1 | SSL_OP_NO_DTLSv1_2

const SSL_OP_ALL = ((SSL_OP_CRYPTOPRO_TLSEXT_BUG | SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS) | SSL_OP_TLSEXT_PADDING) | SSL_OP_SAFARI_ECDHE_ECDSA_BUG

const SSL_OP_MICROSOFT_SESS_ID_BUG = 0x00

const SSL_OP_NETSCAPE_CHALLENGE_BUG = 0x00

const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 0x00

const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = 0x00

const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = 0x00

const SSL_OP_MSIE_SSLV2_RSA_PADDING = 0x00

const SSL_OP_SSLEAY_080_CLIENT_DH_BUG = 0x00

const SSL_OP_TLS_D5_BUG = 0x00

const SSL_OP_TLS_BLOCK_PADDING_BUG = 0x00

const SSL_OP_SINGLE_ECDH_USE = 0x00

const SSL_OP_SINGLE_DH_USE = 0x00

const SSL_OP_EPHEMERAL_RSA = 0x00

const SSL_OP_NO_SSLv2 = 0x00

const SSL_OP_PKCS1_CHECK_1 = 0x00

const SSL_OP_PKCS1_CHECK_2 = 0x00

const SSL_OP_NETSCAPE_CA_DN_BUG = 0x00

const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 0x00

const SSL_MODE_ENABLE_PARTIAL_WRITE = Cuint(0x00000001)

const SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = Cuint(0x00000002)

const SSL_MODE_AUTO_RETRY = Cuint(0x00000004)

const SSL_MODE_NO_AUTO_CHAIN = Cuint(0x00000008)

const SSL_MODE_RELEASE_BUFFERS = Cuint(0x00000010)

const SSL_MODE_SEND_CLIENTHELLO_TIME = Cuint(0x00000020)

const SSL_MODE_SEND_SERVERHELLO_TIME = Cuint(0x00000040)

const SSL_MODE_SEND_FALLBACK_SCSV = Cuint(0x00000080)

const SSL_MODE_ASYNC = Cuint(0x00000100)

const SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG = Cuint(0x00000400)

const SSL_CERT_FLAG_TLS_STRICT = Cuint(0x00000001)

const SSL_CERT_FLAG_SUITEB_128_LOS_ONLY = 0x00010000

const SSL_CERT_FLAG_SUITEB_192_LOS = 0x00020000

const SSL_CERT_FLAG_SUITEB_128_LOS = 0x00030000

const SSL_CERT_FLAG_BROKEN_PROTOCOL = 0x10000000

const SSL_BUILD_CHAIN_FLAG_UNTRUSTED = 0x01

const SSL_BUILD_CHAIN_FLAG_NO_ROOT = 0x02

const SSL_BUILD_CHAIN_FLAG_CHECK = 0x04

const SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR = 0x08

const SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR = 0x10

const CERT_PKEY_VALID = 0x01

const CERT_PKEY_SIGN = 0x02

const CERT_PKEY_EE_SIGNATURE = 0x10

const CERT_PKEY_CA_SIGNATURE = 0x20

const CERT_PKEY_EE_PARAM = 0x40

const CERT_PKEY_CA_PARAM = 0x80

const CERT_PKEY_EXPLICIT_SIGN = 0x0100

const CERT_PKEY_ISSUER_NAME = 0x0200

const CERT_PKEY_CERT_TYPE = 0x0400

const CERT_PKEY_SUITEB = 0x0800

const SSL_CONF_FLAG_CMDLINE = 0x01

const SSL_CONF_FLAG_FILE = 0x02

const SSL_CONF_FLAG_CLIENT = 0x04

const SSL_CONF_FLAG_SERVER = 0x08

const SSL_CONF_FLAG_SHOW_ERRORS = 0x10

const SSL_CONF_FLAG_CERTIFICATE = 0x20

const SSL_CONF_FLAG_REQUIRE_PRIVATE = 0x40

const SSL_CONF_TYPE_UNKNOWN = 0x00

const SSL_CONF_TYPE_STRING = 0x01

const SSL_CONF_TYPE_FILE = 0x02

const SSL_CONF_TYPE_DIR = 0x03

const SSL_CONF_TYPE_NONE = 0x04

const SSL_CONF_TYPE_STORE = 0x05

const SSL_COOKIE_LENGTH = 4096

const SSL_CTRL_MODE = 33

const SSL_CTRL_CLEAR_MODE = 78

const SSL_CTRL_SET_MTU = 17

const DTLS_CTRL_SET_LINK_MTU = 120

const DTLS_CTRL_GET_LINK_MIN_MTU = 121

const SSL_CTRL_GET_RI_SUPPORT = 76

const SSL_CTRL_CERT_FLAGS = 99

const SSL_CTRL_CLEAR_CERT_FLAGS = 100

const SSL_CTRL_SET_MSG_CALLBACK_ARG = 16

const SSL_CTRL_GET_EXTMS_SUPPORT = 122

const SSL_MAX_CERT_LIST_DEFAULT = 1024 * 100

const SSL_SESSION_CACHE_MAX_SIZE_DEFAULT = 1024 * 20

const SSL_SESS_CACHE_OFF = 0x0000

const SSL_SESS_CACHE_CLIENT = 0x0001

const SSL_SESS_CACHE_SERVER = 0x0002

const SSL_SESS_CACHE_BOTH = SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_SERVER

const SSL_SESS_CACHE_NO_AUTO_CLEAR = 0x0080

const SSL_SESS_CACHE_NO_INTERNAL_LOOKUP = 0x0100

const SSL_SESS_CACHE_NO_INTERNAL_STORE = 0x0200

const SSL_SESS_CACHE_NO_INTERNAL = SSL_SESS_CACHE_NO_INTERNAL_LOOKUP | SSL_SESS_CACHE_NO_INTERNAL_STORE

const SSL_SESS_CACHE_UPDATE_TIME = 0x0400

const SSL_CTRL_SESS_NUMBER = 20

const SSL_CTRL_SESS_CONNECT = 21

const SSL_CTRL_SESS_CONNECT_GOOD = 22

const SSL_CTRL_SESS_CONNECT_RENEGOTIATE = 23

const SSL_CTRL_SESS_ACCEPT = 24

const SSL_CTRL_SESS_ACCEPT_RENEGOTIATE = 26

const SSL_CTRL_SESS_ACCEPT_GOOD = 25

const SSL_CTRL_SESS_HIT = 27

const SSL_CTRL_SESS_CB_HIT = 28

const SSL_CTRL_SESS_MISSES = 29

const SSL_CTRL_SESS_TIMEOUTS = 30

const SSL_CTRL_SESS_CACHE_FULL = 31

const SSL_CTX_set_npn_advertised_cb = SSL_CTX_set_next_protos_advertised_cb

const SSL_CTX_set_npn_select_cb = SSL_CTX_set_next_proto_select_cb

const SSL_get0_npn_negotiated = SSL_get0_next_proto_negotiated

const OPENSSL_NPN_UNSUPPORTED = 0

const OPENSSL_NPN_NEGOTIATED = 1

const OPENSSL_NPN_NO_OVERLAP = 2

const PSK_MAX_IDENTITY_LEN = 256

const PSK_MAX_PSK_LEN = 512

const SSL_NOTHING = 1

const SSL_WRITING = 2

const SSL_READING = 3

const SSL_X509_LOOKUP = 4

const SSL_ASYNC_PAUSED = 5

const SSL_ASYNC_NO_JOBS = 6

const SSL_CLIENT_HELLO_CB = 7

const SSL_RETRY_VERIFY = 8

const SSL_MAC_FLAG_READ_MAC_STREAM = 1

const SSL_MAC_FLAG_WRITE_MAC_STREAM = 2

const SSL_MAC_FLAG_READ_MAC_TLSTREE = 4

const SSL_MAC_FLAG_WRITE_MAC_TLSTREE = 8

const SSL2_VERSION = 0x0002

const SSL2_MT_CLIENT_HELLO = 1

const SSL3_CK_SCSV = 0x030000ff

const SSL3_CK_FALLBACK_SCSV = 0x03005600

const SSL3_CK_RSA_NULL_MD5 = 0x03000001

const SSL3_CK_RSA_NULL_SHA = 0x03000002

const SSL3_CK_RSA_RC4_40_MD5 = 0x03000003

const SSL3_CK_RSA_RC4_128_MD5 = 0x03000004

const SSL3_CK_RSA_RC4_128_SHA = 0x03000005

const SSL3_CK_RSA_RC2_40_MD5 = 0x03000006

const SSL3_CK_RSA_IDEA_128_SHA = 0x03000007

const SSL3_CK_RSA_DES_40_CBC_SHA = 0x03000008

const SSL3_CK_RSA_DES_64_CBC_SHA = 0x03000009

const SSL3_CK_RSA_DES_192_CBC3_SHA = 0x0300000a

const SSL3_CK_DH_DSS_DES_40_CBC_SHA = 0x0300000b

const SSL3_CK_DH_DSS_DES_64_CBC_SHA = 0x0300000c

const SSL3_CK_DH_DSS_DES_192_CBC3_SHA = 0x0300000d

const SSL3_CK_DH_RSA_DES_40_CBC_SHA = 0x0300000e

const SSL3_CK_DH_RSA_DES_64_CBC_SHA = 0x0300000f

const SSL3_CK_DH_RSA_DES_192_CBC3_SHA = 0x03000010

const SSL3_CK_DHE_DSS_DES_40_CBC_SHA = 0x03000011

const SSL3_CK_EDH_DSS_DES_40_CBC_SHA = SSL3_CK_DHE_DSS_DES_40_CBC_SHA

const SSL3_CK_DHE_DSS_DES_64_CBC_SHA = 0x03000012

const SSL3_CK_EDH_DSS_DES_64_CBC_SHA = SSL3_CK_DHE_DSS_DES_64_CBC_SHA

const SSL3_CK_DHE_DSS_DES_192_CBC3_SHA = 0x03000013

const SSL3_CK_EDH_DSS_DES_192_CBC3_SHA = SSL3_CK_DHE_DSS_DES_192_CBC3_SHA

const SSL3_CK_DHE_RSA_DES_40_CBC_SHA = 0x03000014

const SSL3_CK_EDH_RSA_DES_40_CBC_SHA = SSL3_CK_DHE_RSA_DES_40_CBC_SHA

const SSL3_CK_DHE_RSA_DES_64_CBC_SHA = 0x03000015

const SSL3_CK_EDH_RSA_DES_64_CBC_SHA = SSL3_CK_DHE_RSA_DES_64_CBC_SHA

const SSL3_CK_DHE_RSA_DES_192_CBC3_SHA = 0x03000016

const SSL3_CK_EDH_RSA_DES_192_CBC3_SHA = SSL3_CK_DHE_RSA_DES_192_CBC3_SHA

const SSL3_CK_ADH_RC4_40_MD5 = 0x03000017

const SSL3_CK_ADH_RC4_128_MD5 = 0x03000018

const SSL3_CK_ADH_DES_40_CBC_SHA = 0x03000019

const SSL3_CK_ADH_DES_64_CBC_SHA = 0x0300001a

const SSL3_CK_ADH_DES_192_CBC_SHA = 0x0300001b

const SSL3_RFC_RSA_NULL_MD5 = "TLS_RSA_WITH_NULL_MD5"

const SSL3_RFC_RSA_NULL_SHA = "TLS_RSA_WITH_NULL_SHA"

const SSL3_RFC_RSA_DES_192_CBC3_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"

const SSL3_RFC_DHE_DSS_DES_192_CBC3_SHA = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"

const SSL3_RFC_DHE_RSA_DES_192_CBC3_SHA = "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"

const SSL3_RFC_ADH_DES_192_CBC_SHA = "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"

const SSL3_RFC_RSA_IDEA_128_SHA = "TLS_RSA_WITH_IDEA_CBC_SHA"

const SSL3_RFC_RSA_RC4_128_MD5 = "TLS_RSA_WITH_RC4_128_MD5"

const SSL3_RFC_RSA_RC4_128_SHA = "TLS_RSA_WITH_RC4_128_SHA"

const SSL3_RFC_ADH_RC4_128_MD5 = "TLS_DH_anon_WITH_RC4_128_MD5"

const SSL3_TXT_RSA_NULL_MD5 = "NULL-MD5"

const SSL3_TXT_RSA_NULL_SHA = "NULL-SHA"

const SSL3_TXT_RSA_RC4_40_MD5 = "EXP-RC4-MD5"

const SSL3_TXT_RSA_RC4_128_MD5 = "RC4-MD5"

const SSL3_TXT_RSA_RC4_128_SHA = "RC4-SHA"

const SSL3_TXT_RSA_RC2_40_MD5 = "EXP-RC2-CBC-MD5"

const SSL3_TXT_RSA_IDEA_128_SHA = "IDEA-CBC-SHA"

const SSL3_TXT_RSA_DES_40_CBC_SHA = "EXP-DES-CBC-SHA"

const SSL3_TXT_RSA_DES_64_CBC_SHA = "DES-CBC-SHA"

const SSL3_TXT_RSA_DES_192_CBC3_SHA = "DES-CBC3-SHA"

const SSL3_TXT_DH_DSS_DES_40_CBC_SHA = "EXP-DH-DSS-DES-CBC-SHA"

const SSL3_TXT_DH_DSS_DES_64_CBC_SHA = "DH-DSS-DES-CBC-SHA"

const SSL3_TXT_DH_DSS_DES_192_CBC3_SHA = "DH-DSS-DES-CBC3-SHA"

const SSL3_TXT_DH_RSA_DES_40_CBC_SHA = "EXP-DH-RSA-DES-CBC-SHA"

const SSL3_TXT_DH_RSA_DES_64_CBC_SHA = "DH-RSA-DES-CBC-SHA"

const SSL3_TXT_DH_RSA_DES_192_CBC3_SHA = "DH-RSA-DES-CBC3-SHA"

const SSL3_TXT_DHE_DSS_DES_40_CBC_SHA = "EXP-DHE-DSS-DES-CBC-SHA"

const SSL3_TXT_DHE_DSS_DES_64_CBC_SHA = "DHE-DSS-DES-CBC-SHA"

const SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA = "DHE-DSS-DES-CBC3-SHA"

const SSL3_TXT_DHE_RSA_DES_40_CBC_SHA = "EXP-DHE-RSA-DES-CBC-SHA"

const SSL3_TXT_DHE_RSA_DES_64_CBC_SHA = "DHE-RSA-DES-CBC-SHA"

const SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA = "DHE-RSA-DES-CBC3-SHA"

const SSL3_TXT_EDH_DSS_DES_40_CBC_SHA = "EXP-EDH-DSS-DES-CBC-SHA"

const SSL3_TXT_EDH_DSS_DES_64_CBC_SHA = "EDH-DSS-DES-CBC-SHA"

const SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA = "EDH-DSS-DES-CBC3-SHA"

const SSL3_TXT_EDH_RSA_DES_40_CBC_SHA = "EXP-EDH-RSA-DES-CBC-SHA"

const SSL3_TXT_EDH_RSA_DES_64_CBC_SHA = "EDH-RSA-DES-CBC-SHA"

const SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA = "EDH-RSA-DES-CBC3-SHA"

const SSL3_TXT_ADH_RC4_40_MD5 = "EXP-ADH-RC4-MD5"

const SSL3_TXT_ADH_RC4_128_MD5 = "ADH-RC4-MD5"

const SSL3_TXT_ADH_DES_40_CBC_SHA = "EXP-ADH-DES-CBC-SHA"

const SSL3_TXT_ADH_DES_64_CBC_SHA = "ADH-DES-CBC-SHA"

const SSL3_TXT_ADH_DES_192_CBC_SHA = "ADH-DES-CBC3-SHA"

const SSL3_SSL_SESSION_ID_LENGTH = 32

const SSL3_MAX_SSL_SESSION_ID_LENGTH = 32

const SSL3_MASTER_SECRET_SIZE = 48

const SSL3_RANDOM_SIZE = 32

const SSL3_SESSION_ID_SIZE = 32

const SSL3_RT_HEADER_LENGTH = 5

const SSL3_HM_HEADER_LENGTH = 4

const SSL3_ALIGN_PAYLOAD = 8

const SSL3_RT_MAX_MD_SIZE = 64

const SSL_RT_MAX_CIPHER_BLOCK_SIZE = 16

const SSL3_RT_MAX_EXTRA = 16384

const SSL3_RT_MAX_PLAIN_LENGTH = 16384

const SSL3_RT_MAX_COMPRESSED_OVERHEAD = 1024

const SSL3_RT_MAX_ENCRYPTED_OVERHEAD = 256 + SSL3_RT_MAX_MD_SIZE

const SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD = 256

const SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD = SSL_RT_MAX_CIPHER_BLOCK_SIZE + SSL3_RT_MAX_MD_SIZE

const SSL3_RT_MAX_COMPRESSED_LENGTH = SSL3_RT_MAX_PLAIN_LENGTH + SSL3_RT_MAX_COMPRESSED_OVERHEAD

const SSL3_RT_MAX_ENCRYPTED_LENGTH = SSL3_RT_MAX_ENCRYPTED_OVERHEAD + SSL3_RT_MAX_COMPRESSED_LENGTH

const SSL3_RT_MAX_TLS13_ENCRYPTED_LENGTH = SSL3_RT_MAX_PLAIN_LENGTH + SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD

const SSL3_RT_MAX_PACKET_SIZE = SSL3_RT_MAX_ENCRYPTED_LENGTH + SSL3_RT_HEADER_LENGTH

const SSL3_MD_CLIENT_FINISHED_CONST = "CLNT"

const SSL3_MD_SERVER_FINISHED_CONST = "SRVR"

const SSL3_VERSION_MAJOR = 0x03

const SSL3_VERSION_MINOR = 0x00

const SSL3_RT_CHANGE_CIPHER_SPEC = 20

const SSL3_RT_ALERT = 21

const SSL3_RT_HANDSHAKE = 22

const SSL3_RT_APPLICATION_DATA = 23

const TLS1_RT_CRYPTO = 0x1000

const TLS1_RT_CRYPTO_PREMASTER = TLS1_RT_CRYPTO | 0x01

const TLS1_RT_CRYPTO_CLIENT_RANDOM = TLS1_RT_CRYPTO | 0x02

const TLS1_RT_CRYPTO_SERVER_RANDOM = TLS1_RT_CRYPTO | 0x03

const TLS1_RT_CRYPTO_MASTER = TLS1_RT_CRYPTO | 0x04

const TLS1_RT_CRYPTO_READ = 0x0000

const TLS1_RT_CRYPTO_WRITE = 0x0100

const TLS1_RT_CRYPTO_MAC = TLS1_RT_CRYPTO | 0x05

const TLS1_RT_CRYPTO_KEY = TLS1_RT_CRYPTO | 0x06

const TLS1_RT_CRYPTO_IV = TLS1_RT_CRYPTO | 0x07

const TLS1_RT_CRYPTO_FIXED_IV = TLS1_RT_CRYPTO | 0x08

const SSL3_RT_HEADER = 0x0100

const SSL3_RT_INNER_CONTENT_TYPE = 0x0101

const SSL3_AL_WARNING = 1

const SSL3_AL_FATAL = 2

const SSL3_AD_CLOSE_NOTIFY = 0

const SSL3_AD_UNEXPECTED_MESSAGE = 10

const SSL3_AD_BAD_RECORD_MAC = 20

const SSL3_AD_DECOMPRESSION_FAILURE = 30

const SSL3_AD_HANDSHAKE_FAILURE = 40

const SSL3_AD_NO_CERTIFICATE = 41

const SSL3_AD_BAD_CERTIFICATE = 42

const SSL3_AD_UNSUPPORTED_CERTIFICATE = 43

const SSL3_AD_CERTIFICATE_REVOKED = 44

const SSL3_AD_CERTIFICATE_EXPIRED = 45

const SSL3_AD_CERTIFICATE_UNKNOWN = 46

const SSL3_AD_ILLEGAL_PARAMETER = 47

const TLS1_HB_REQUEST = 1

const TLS1_HB_RESPONSE = 2

const SSL3_CT_RSA_SIGN = 1

const SSL3_CT_DSS_SIGN = 2

const SSL3_CT_RSA_FIXED_DH = 3

const SSL3_CT_DSS_FIXED_DH = 4

const SSL3_CT_RSA_EPHEMERAL_DH = 5

const SSL3_CT_DSS_EPHEMERAL_DH = 6

const SSL3_CT_FORTEZZA_DMS = 20

const SSL3_CT_NUMBER = 12

const SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS = 0x0001

const TLS1_FLAGS_TLS_PADDING_BUG = 0x00

const TLS1_FLAGS_SKIP_CERT_VERIFY = 0x0010

const TLS1_FLAGS_ENCRYPT_THEN_MAC_READ = 0x0100

const TLS1_FLAGS_ENCRYPT_THEN_MAC = TLS1_FLAGS_ENCRYPT_THEN_MAC_READ

const TLS1_FLAGS_RECEIVED_EXTMS = 0x0200

const TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE = 0x0400

const TLS1_FLAGS_STATELESS = 0x0800

const TLS1_FLAGS_REQUIRED_EXTMS = 0x1000

const SSL3_MT_HELLO_REQUEST = 0

const SSL3_MT_CLIENT_HELLO = 1

const SSL3_MT_SERVER_HELLO = 2

const SSL3_MT_NEWSESSION_TICKET = 4

const SSL3_MT_END_OF_EARLY_DATA = 5

const SSL3_MT_ENCRYPTED_EXTENSIONS = 8

const SSL3_MT_CERTIFICATE = 11

const SSL3_MT_SERVER_KEY_EXCHANGE = 12

const SSL3_MT_CERTIFICATE_REQUEST = 13

const SSL3_MT_SERVER_DONE = 14

const SSL3_MT_CERTIFICATE_VERIFY = 15

const SSL3_MT_CLIENT_KEY_EXCHANGE = 16

const SSL3_MT_FINISHED = 20

const SSL3_MT_CERTIFICATE_URL = 21

const SSL3_MT_CERTIFICATE_STATUS = 22

const SSL3_MT_SUPPLEMENTAL_DATA = 23

const SSL3_MT_KEY_UPDATE = 24

const SSL3_MT_NEXT_PROTO = 67

const SSL3_MT_MESSAGE_HASH = 254

const DTLS1_MT_HELLO_VERIFY_REQUEST = 3

const SSL3_MT_CHANGE_CIPHER_SPEC = 0x0101

const SSL3_MT_CCS = 1

const SSL3_CC_READ = 0x0001

const SSL3_CC_WRITE = 0x0002

const SSL3_CC_CLIENT = 0x0010

const SSL3_CC_SERVER = 0x0020

const SSL3_CC_EARLY = 0x0040

const SSL3_CC_HANDSHAKE = 0x0080

const SSL3_CC_APPLICATION = 0x0100

const SSL3_CHANGE_CIPHER_CLIENT_WRITE = SSL3_CC_CLIENT | SSL3_CC_WRITE

const SSL3_CHANGE_CIPHER_SERVER_READ = SSL3_CC_SERVER | SSL3_CC_READ

const SSL3_CHANGE_CIPHER_CLIENT_READ = SSL3_CC_CLIENT | SSL3_CC_READ

const SSL3_CHANGE_CIPHER_SERVER_WRITE = SSL3_CC_SERVER | SSL3_CC_WRITE

const OPENSSL_TLS_SECURITY_LEVEL = 1

const TLS_MAX_VERSION = TLS1_3_VERSION

const TLS_ANY_VERSION = 0x00010000

const TLS1_VERSION_MAJOR = 0x03

const TLS1_VERSION_MINOR = 0x01

const TLS1_1_VERSION_MAJOR = 0x03

const TLS1_1_VERSION_MINOR = 0x02

const TLS1_2_VERSION_MAJOR = 0x03

const TLS1_2_VERSION_MINOR = 0x03

const TLS1_AD_DECRYPTION_FAILED = 21

const TLS1_AD_RECORD_OVERFLOW = 22

const TLS1_AD_UNKNOWN_CA = 48

const TLS1_AD_ACCESS_DENIED = 49

const TLS1_AD_DECODE_ERROR = 50

const TLS1_AD_DECRYPT_ERROR = 51

const TLS1_AD_EXPORT_RESTRICTION = 60

const TLS1_AD_PROTOCOL_VERSION = 70

const TLS1_AD_INSUFFICIENT_SECURITY = 71

const TLS1_AD_INTERNAL_ERROR = 80

const TLS1_AD_INAPPROPRIATE_FALLBACK = 86

const TLS1_AD_USER_CANCELLED = 90

const TLS1_AD_NO_RENEGOTIATION = 100

const TLS13_AD_MISSING_EXTENSION = 109

const TLS13_AD_CERTIFICATE_REQUIRED = 116

const TLS1_AD_UNSUPPORTED_EXTENSION = 110

const TLS1_AD_CERTIFICATE_UNOBTAINABLE = 111

const TLS1_AD_UNRECOGNIZED_NAME = 112

const TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 113

const TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = 114

const TLS1_AD_UNKNOWN_PSK_IDENTITY = 115

const TLS1_AD_NO_APPLICATION_PROTOCOL = 120

const TLSEXT_TYPE_server_name = 0

const TLSEXT_TYPE_max_fragment_length = 1

const TLSEXT_TYPE_client_certificate_url = 2

const TLSEXT_TYPE_trusted_ca_keys = 3

const TLSEXT_TYPE_truncated_hmac = 4

const TLSEXT_TYPE_status_request = 5

const TLSEXT_TYPE_user_mapping = 6

const TLSEXT_TYPE_client_authz = 7

const TLSEXT_TYPE_server_authz = 8

const TLSEXT_TYPE_cert_type = 9

const TLSEXT_TYPE_supported_groups = 10

const TLSEXT_TYPE_elliptic_curves = TLSEXT_TYPE_supported_groups

const TLSEXT_TYPE_ec_point_formats = 11

const TLSEXT_TYPE_srp = 12

const TLSEXT_TYPE_signature_algorithms = 13

const TLSEXT_TYPE_use_srtp = 14

const TLSEXT_TYPE_application_layer_protocol_negotiation = 16

const TLSEXT_TYPE_signed_certificate_timestamp = 18

const TLSEXT_TYPE_padding = 21

const TLSEXT_TYPE_encrypt_then_mac = 22

const TLSEXT_TYPE_extended_master_secret = 23

const TLSEXT_TYPE_session_ticket = 35

const TLSEXT_TYPE_psk = 41

const TLSEXT_TYPE_early_data = 42

const TLSEXT_TYPE_supported_versions = 43

const TLSEXT_TYPE_cookie = 44

const TLSEXT_TYPE_psk_kex_modes = 45

const TLSEXT_TYPE_certificate_authorities = 47

const TLSEXT_TYPE_post_handshake_auth = 49

const TLSEXT_TYPE_signature_algorithms_cert = 50

const TLSEXT_TYPE_key_share = 51

const TLSEXT_TYPE_renegotiate = 0xff01

const TLSEXT_TYPE_next_proto_neg = 13172

const TLSEXT_NAMETYPE_host_name = 0

const TLSEXT_STATUSTYPE_ocsp = 1

const TLSEXT_ECPOINTFORMAT_first = 0

const TLSEXT_ECPOINTFORMAT_uncompressed = 0

const TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime = 1

const TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2 = 2

const TLSEXT_ECPOINTFORMAT_last = 2

const TLSEXT_signature_anonymous = 0

const TLSEXT_signature_rsa = 1

const TLSEXT_signature_dsa = 2

const TLSEXT_signature_ecdsa = 3

const TLSEXT_signature_gostr34102001 = 237

const TLSEXT_signature_gostr34102012_256 = 238

const TLSEXT_signature_gostr34102012_512 = 239

const TLSEXT_signature_num = 7

const TLSEXT_hash_none = 0

const TLSEXT_hash_md5 = 1

const TLSEXT_hash_sha1 = 2

const TLSEXT_hash_sha224 = 3

const TLSEXT_hash_sha256 = 4

const TLSEXT_hash_sha384 = 5

const TLSEXT_hash_sha512 = 6

const TLSEXT_hash_gostr3411 = 237

const TLSEXT_hash_gostr34112012_256 = 238

const TLSEXT_hash_gostr34112012_512 = 239

const TLSEXT_hash_num = 10

const TLSEXT_nid_unknown = 0x01000000

const TLSEXT_curve_P_256 = 23

const TLSEXT_curve_P_384 = 24

const TLSEXT_max_fragment_length_DISABLED = 0

const TLSEXT_max_fragment_length_512 = 1

const TLSEXT_max_fragment_length_1024 = 2

const TLSEXT_max_fragment_length_2048 = 3

const TLSEXT_max_fragment_length_4096 = 4

const TLSEXT_max_fragment_length_UNSPECIFIED = 255

const TLSEXT_MAXLEN_host_name = 255

const SSL_CTRL_SET_TLSEXT_HOSTNAME = 55

const SSL_CTRL_SET_TLSEXT_DEBUG_CB = 56

const SSL_CTRL_SET_TLSEXT_DEBUG_ARG = 57

const SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE = 127

const SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE = 65

const SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS = 66

const SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS = 67

const SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS = 68

const SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS = 69

const SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP = 70

const SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP = 71

const SSL_CTRL_SET_TLSEXT_SERVERNAME_CB = 53

const SSL_TLSEXT_ERR_OK = 0

const SSL_TLSEXT_ERR_ALERT_WARNING = 1

const SSL_TLSEXT_ERR_ALERT_FATAL = 2

const SSL_TLSEXT_ERR_NOACK = 3

const SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG = 54

const SSL_CTRL_GET_TLSEXT_TICKET_KEYS = 58

const SSL_CTRL_SET_TLSEXT_TICKET_KEYS = 59

const SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB = 128

const SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB = 63

const SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG = 129

const SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG = 64

const SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB = 72

const TLS1_CK_PSK_WITH_RC4_128_SHA = 0x0300008a

const TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300008b

const TLS1_CK_PSK_WITH_AES_128_CBC_SHA = 0x0300008c

const TLS1_CK_PSK_WITH_AES_256_CBC_SHA = 0x0300008d

const TLS1_CK_DHE_PSK_WITH_RC4_128_SHA = 0x0300008e

const TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300008f

const TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA = 0x03000090

const TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA = 0x03000091

const TLS1_CK_RSA_PSK_WITH_RC4_128_SHA = 0x03000092

const TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 0x03000093

const TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA = 0x03000094

const TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA = 0x03000095

const TLS1_CK_PSK_WITH_AES_128_GCM_SHA256 = 0x030000a8

const TLS1_CK_PSK_WITH_AES_256_GCM_SHA384 = 0x030000a9

const TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256 = 0x030000aa

const TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384 = 0x030000ab

const TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256 = 0x030000ac

const TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384 = 0x030000ad

const TLS1_CK_PSK_WITH_AES_128_CBC_SHA256 = 0x030000ae

const TLS1_CK_PSK_WITH_AES_256_CBC_SHA384 = 0x030000af

const TLS1_CK_PSK_WITH_NULL_SHA256 = 0x030000b0

const TLS1_CK_PSK_WITH_NULL_SHA384 = 0x030000b1

const TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256 = 0x030000b2

const TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384 = 0x030000b3

const TLS1_CK_DHE_PSK_WITH_NULL_SHA256 = 0x030000b4

const TLS1_CK_DHE_PSK_WITH_NULL_SHA384 = 0x030000b5

const TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256 = 0x030000b6

const TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384 = 0x030000b7

const TLS1_CK_RSA_PSK_WITH_NULL_SHA256 = 0x030000b8

const TLS1_CK_RSA_PSK_WITH_NULL_SHA384 = 0x030000b9

const TLS1_CK_PSK_WITH_NULL_SHA = 0x0300002c

const TLS1_CK_DHE_PSK_WITH_NULL_SHA = 0x0300002d

const TLS1_CK_RSA_PSK_WITH_NULL_SHA = 0x0300002e

const TLS1_CK_RSA_WITH_AES_128_SHA = 0x0300002f

const TLS1_CK_DH_DSS_WITH_AES_128_SHA = 0x03000030

const TLS1_CK_DH_RSA_WITH_AES_128_SHA = 0x03000031

const TLS1_CK_DHE_DSS_WITH_AES_128_SHA = 0x03000032

const TLS1_CK_DHE_RSA_WITH_AES_128_SHA = 0x03000033

const TLS1_CK_ADH_WITH_AES_128_SHA = 0x03000034

const TLS1_CK_RSA_WITH_AES_256_SHA = 0x03000035

const TLS1_CK_DH_DSS_WITH_AES_256_SHA = 0x03000036

const TLS1_CK_DH_RSA_WITH_AES_256_SHA = 0x03000037

const TLS1_CK_DHE_DSS_WITH_AES_256_SHA = 0x03000038

const TLS1_CK_DHE_RSA_WITH_AES_256_SHA = 0x03000039

const TLS1_CK_ADH_WITH_AES_256_SHA = 0x0300003a

const TLS1_CK_RSA_WITH_NULL_SHA256 = 0x0300003b

const TLS1_CK_RSA_WITH_AES_128_SHA256 = 0x0300003c

const TLS1_CK_RSA_WITH_AES_256_SHA256 = 0x0300003d

const TLS1_CK_DH_DSS_WITH_AES_128_SHA256 = 0x0300003e

const TLS1_CK_DH_RSA_WITH_AES_128_SHA256 = 0x0300003f

const TLS1_CK_DHE_DSS_WITH_AES_128_SHA256 = 0x03000040

const TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000041

const TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x03000042

const TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000043

const TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x03000044

const TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000045

const TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA = 0x03000046

const TLS1_CK_DHE_RSA_WITH_AES_128_SHA256 = 0x03000067

const TLS1_CK_DH_DSS_WITH_AES_256_SHA256 = 0x03000068

const TLS1_CK_DH_RSA_WITH_AES_256_SHA256 = 0x03000069

const TLS1_CK_DHE_DSS_WITH_AES_256_SHA256 = 0x0300006a

const TLS1_CK_DHE_RSA_WITH_AES_256_SHA256 = 0x0300006b

const TLS1_CK_ADH_WITH_AES_128_SHA256 = 0x0300006c

const TLS1_CK_ADH_WITH_AES_256_SHA256 = 0x0300006d

const TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000084

const TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x03000085

const TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000086

const TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x03000087

const TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000088

const TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA = 0x03000089

const TLS1_CK_RSA_WITH_SEED_SHA = 0x03000096

const TLS1_CK_DH_DSS_WITH_SEED_SHA = 0x03000097

const TLS1_CK_DH_RSA_WITH_SEED_SHA = 0x03000098

const TLS1_CK_DHE_DSS_WITH_SEED_SHA = 0x03000099

const TLS1_CK_DHE_RSA_WITH_SEED_SHA = 0x0300009a

const TLS1_CK_ADH_WITH_SEED_SHA = 0x0300009b

const TLS1_CK_RSA_WITH_AES_128_GCM_SHA256 = 0x0300009c

const TLS1_CK_RSA_WITH_AES_256_GCM_SHA384 = 0x0300009d

const TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x0300009e

const TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x0300009f

const TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256 = 0x030000a0

const TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384 = 0x030000a1

const TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256 = 0x030000a2

const TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384 = 0x030000a3

const TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256 = 0x030000a4

const TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384 = 0x030000a5

const TLS1_CK_ADH_WITH_AES_128_GCM_SHA256 = 0x030000a6

const TLS1_CK_ADH_WITH_AES_256_GCM_SHA384 = 0x030000a7

const TLS1_CK_RSA_WITH_AES_128_CCM = 0x0300c09c

const TLS1_CK_RSA_WITH_AES_256_CCM = 0x0300c09d

const TLS1_CK_DHE_RSA_WITH_AES_128_CCM = 0x0300c09e

const TLS1_CK_DHE_RSA_WITH_AES_256_CCM = 0x0300c09f

const TLS1_CK_RSA_WITH_AES_128_CCM_8 = 0x0300c0a0

const TLS1_CK_RSA_WITH_AES_256_CCM_8 = 0x0300c0a1

const TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8 = 0x0300c0a2

const TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8 = 0x0300c0a3

const TLS1_CK_PSK_WITH_AES_128_CCM = 0x0300c0a4

const TLS1_CK_PSK_WITH_AES_256_CCM = 0x0300c0a5

const TLS1_CK_DHE_PSK_WITH_AES_128_CCM = 0x0300c0a6

const TLS1_CK_DHE_PSK_WITH_AES_256_CCM = 0x0300c0a7

const TLS1_CK_PSK_WITH_AES_128_CCM_8 = 0x0300c0a8

const TLS1_CK_PSK_WITH_AES_256_CCM_8 = 0x0300c0a9

const TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8 = 0x0300c0aa

const TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8 = 0x0300c0ab

const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM = 0x0300c0ac

const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM = 0x0300c0ad

const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 0x0300c0ae

const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 0x0300c0af

const TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000ba

const TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000bb

const TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000bc

const TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000bd

const TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000be

const TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000bf

const TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000c0

const TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000c1

const TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000c2

const TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000c3

const TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000c4

const TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000c5

const TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA = 0x0300c001

const TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA = 0x0300c002

const TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = 0x0300c003

const TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0x0300c004

const TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0x0300c005

const TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA = 0x0300c006

const TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA = 0x0300c007

const TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = 0x0300c008

const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0x0300c009

const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0x0300c00a

const TLS1_CK_ECDH_RSA_WITH_NULL_SHA = 0x0300c00b

const TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA = 0x0300c00c

const TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA = 0x0300c00d

const TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA = 0x0300c00e

const TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA = 0x0300c00f

const TLS1_CK_ECDHE_RSA_WITH_NULL_SHA = 0x0300c010

const TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA = 0x0300c011

const TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA = 0x0300c012

const TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0x0300c013

const TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0x0300c014

const TLS1_CK_ECDH_anon_WITH_NULL_SHA = 0x0300c015

const TLS1_CK_ECDH_anon_WITH_RC4_128_SHA = 0x0300c016

const TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA = 0x0300c017

const TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA = 0x0300c018

const TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA = 0x0300c019

const TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 0x0300c01a

const TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 0x0300c01b

const TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 0x0300c01c

const TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA = 0x0300c01d

const TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 0x0300c01e

const TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 0x0300c01f

const TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA = 0x0300c020

const TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 0x0300c021

const TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 0x0300c022

const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256 = 0x0300c023

const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384 = 0x0300c024

const TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256 = 0x0300c025

const TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384 = 0x0300c026

const TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256 = 0x0300c027

const TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384 = 0x0300c028

const TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256 = 0x0300c029

const TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384 = 0x0300c02a

const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0x0300c02b

const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0x0300c02c

const TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 0x0300c02d

const TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 0x0300c02e

const TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0x0300c02f

const TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0x0300c030

const TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 0x0300c031

const TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 0x0300c032

const TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA = 0x0300c033

const TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300c034

const TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA = 0x0300c035

const TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA = 0x0300c036

const TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 0x0300c037

const TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 0x0300c038

const TLS1_CK_ECDHE_PSK_WITH_NULL_SHA = 0x0300c039

const TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256 = 0x0300c03a

const TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384 = 0x0300c03b

const TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c072

const TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c073

const TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c074

const TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c075

const TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c076

const TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c077

const TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c078

const TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c079

const TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c094

const TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c095

const TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c096

const TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c097

const TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c098

const TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c099

const TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300c09a

const TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300c09b

const TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 0x0300cca8

const TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 0x0300cca9

const TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305 = 0x0300ccaa

const TLS1_CK_PSK_WITH_CHACHA20_POLY1305 = 0x0300ccab

const TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305 = 0x0300ccac

const TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305 = 0x0300ccad

const TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305 = 0x0300ccae

const TLS1_3_CK_AES_128_GCM_SHA256 = 0x03001301

const TLS1_3_CK_AES_256_GCM_SHA384 = 0x03001302

const TLS1_3_CK_CHACHA20_POLY1305_SHA256 = 0x03001303

const TLS1_3_CK_AES_128_CCM_SHA256 = 0x03001304

const TLS1_3_CK_AES_128_CCM_8_SHA256 = 0x03001305

const TLS1_CK_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c050

const TLS1_CK_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c051

const TLS1_CK_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c052

const TLS1_CK_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c053

const TLS1_CK_DH_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c054

const TLS1_CK_DH_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c055

const TLS1_CK_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 0x0300c056

const TLS1_CK_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 0x0300c057

const TLS1_CK_DH_DSS_WITH_ARIA_128_GCM_SHA256 = 0x0300c058

const TLS1_CK_DH_DSS_WITH_ARIA_256_GCM_SHA384 = 0x0300c059

const TLS1_CK_DH_anon_WITH_ARIA_128_GCM_SHA256 = 0x0300c05a

const TLS1_CK_DH_anon_WITH_ARIA_256_GCM_SHA384 = 0x0300c05b

const TLS1_CK_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c05c

const TLS1_CK_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c05d

const TLS1_CK_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c05e

const TLS1_CK_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c05f

const TLS1_CK_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c060

const TLS1_CK_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c061

const TLS1_CK_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300c062

const TLS1_CK_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300c063

const TLS1_CK_PSK_WITH_ARIA_128_GCM_SHA256 = 0x0300c06a

const TLS1_CK_PSK_WITH_ARIA_256_GCM_SHA384 = 0x0300c06b

const TLS1_CK_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = 0x0300c06c

const TLS1_CK_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = 0x0300c06d

const TLS1_CK_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = 0x0300c06e

const TLS1_CK_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = 0x0300c06f

const TLS1_RFC_RSA_WITH_AES_128_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"

const TLS1_RFC_DHE_DSS_WITH_AES_128_SHA = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"

const TLS1_RFC_DHE_RSA_WITH_AES_128_SHA = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"

const TLS1_RFC_ADH_WITH_AES_128_SHA = "TLS_DH_anon_WITH_AES_128_CBC_SHA"

const TLS1_RFC_RSA_WITH_AES_256_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"

const TLS1_RFC_DHE_DSS_WITH_AES_256_SHA = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"

const TLS1_RFC_DHE_RSA_WITH_AES_256_SHA = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"

const TLS1_RFC_ADH_WITH_AES_256_SHA = "TLS_DH_anon_WITH_AES_256_CBC_SHA"

const TLS1_RFC_RSA_WITH_NULL_SHA256 = "TLS_RSA_WITH_NULL_SHA256"

const TLS1_RFC_RSA_WITH_AES_128_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_RSA_WITH_AES_256_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"

const TLS1_RFC_DHE_DSS_WITH_AES_128_SHA256 = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_DHE_RSA_WITH_AES_128_SHA256 = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_DHE_DSS_WITH_AES_256_SHA256 = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"

const TLS1_RFC_DHE_RSA_WITH_AES_256_SHA256 = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"

const TLS1_RFC_ADH_WITH_AES_128_SHA256 = "TLS_DH_anon_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_ADH_WITH_AES_256_SHA256 = "TLS_DH_anon_WITH_AES_256_CBC_SHA256"

const TLS1_RFC_RSA_WITH_AES_128_GCM_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_RSA_WITH_AES_256_GCM_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_DHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_DHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_DHE_DSS_WITH_AES_128_GCM_SHA256 = "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_DHE_DSS_WITH_AES_256_GCM_SHA384 = "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_ADH_WITH_AES_128_GCM_SHA256 = "TLS_DH_anon_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_ADH_WITH_AES_256_GCM_SHA384 = "TLS_DH_anon_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_RSA_WITH_AES_128_CCM = "TLS_RSA_WITH_AES_128_CCM"

const TLS1_RFC_RSA_WITH_AES_256_CCM = "TLS_RSA_WITH_AES_256_CCM"

const TLS1_RFC_DHE_RSA_WITH_AES_128_CCM = "TLS_DHE_RSA_WITH_AES_128_CCM"

const TLS1_RFC_DHE_RSA_WITH_AES_256_CCM = "TLS_DHE_RSA_WITH_AES_256_CCM"

const TLS1_RFC_RSA_WITH_AES_128_CCM_8 = "TLS_RSA_WITH_AES_128_CCM_8"

const TLS1_RFC_RSA_WITH_AES_256_CCM_8 = "TLS_RSA_WITH_AES_256_CCM_8"

const TLS1_RFC_DHE_RSA_WITH_AES_128_CCM_8 = "TLS_DHE_RSA_WITH_AES_128_CCM_8"

const TLS1_RFC_DHE_RSA_WITH_AES_256_CCM_8 = "TLS_DHE_RSA_WITH_AES_256_CCM_8"

const TLS1_RFC_PSK_WITH_AES_128_CCM = "TLS_PSK_WITH_AES_128_CCM"

const TLS1_RFC_PSK_WITH_AES_256_CCM = "TLS_PSK_WITH_AES_256_CCM"

const TLS1_RFC_DHE_PSK_WITH_AES_128_CCM = "TLS_DHE_PSK_WITH_AES_128_CCM"

const TLS1_RFC_DHE_PSK_WITH_AES_256_CCM = "TLS_DHE_PSK_WITH_AES_256_CCM"

const TLS1_RFC_PSK_WITH_AES_128_CCM_8 = "TLS_PSK_WITH_AES_128_CCM_8"

const TLS1_RFC_PSK_WITH_AES_256_CCM_8 = "TLS_PSK_WITH_AES_256_CCM_8"

const TLS1_RFC_DHE_PSK_WITH_AES_128_CCM_8 = "TLS_PSK_DHE_WITH_AES_128_CCM_8"

const TLS1_RFC_DHE_PSK_WITH_AES_256_CCM_8 = "TLS_PSK_DHE_WITH_AES_256_CCM_8"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM = "TLS_ECDHE_ECDSA_WITH_AES_128_CCM"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM = "TLS_ECDHE_ECDSA_WITH_AES_256_CCM"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM_8 = "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM_8 = "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8"

const TLS1_3_RFC_AES_128_GCM_SHA256 = "TLS_AES_128_GCM_SHA256"

const TLS1_3_RFC_AES_256_GCM_SHA384 = "TLS_AES_256_GCM_SHA384"

const TLS1_3_RFC_CHACHA20_POLY1305_SHA256 = "TLS_CHACHA20_POLY1305_SHA256"

const TLS1_3_RFC_AES_128_CCM_SHA256 = "TLS_AES_128_CCM_SHA256"

const TLS1_3_RFC_AES_128_CCM_8_SHA256 = "TLS_AES_128_CCM_8_SHA256"

const TLS1_RFC_ECDHE_ECDSA_WITH_NULL_SHA = "TLS_ECDHE_ECDSA_WITH_NULL_SHA"

const TLS1_RFC_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"

const TLS1_RFC_ECDHE_RSA_WITH_NULL_SHA = "TLS_ECDHE_RSA_WITH_NULL_SHA"

const TLS1_RFC_ECDHE_RSA_WITH_DES_192_CBC3_SHA = "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_ECDHE_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"

const TLS1_RFC_ECDHE_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"

const TLS1_RFC_ECDH_anon_WITH_NULL_SHA = "TLS_ECDH_anon_WITH_NULL_SHA"

const TLS1_RFC_ECDH_anon_WITH_DES_192_CBC3_SHA = "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_ECDH_anon_WITH_AES_128_CBC_SHA = "TLS_ECDH_anon_WITH_AES_128_CBC_SHA"

const TLS1_RFC_ECDH_anon_WITH_AES_256_CBC_SHA = "TLS_ECDH_anon_WITH_AES_256_CBC_SHA"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"

const TLS1_RFC_ECDHE_RSA_WITH_AES_128_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_ECDHE_RSA_WITH_AES_256_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_PSK_WITH_NULL_SHA = "TLS_PSK_WITH_NULL_SHA"

const TLS1_RFC_DHE_PSK_WITH_NULL_SHA = "TLS_DHE_PSK_WITH_NULL_SHA"

const TLS1_RFC_RSA_PSK_WITH_NULL_SHA = "TLS_RSA_PSK_WITH_NULL_SHA"

const TLS1_RFC_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_PSK_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_PSK_WITH_AES_128_CBC_SHA = "TLS_PSK_WITH_AES_128_CBC_SHA"

const TLS1_RFC_PSK_WITH_AES_256_CBC_SHA = "TLS_PSK_WITH_AES_256_CBC_SHA"

const TLS1_RFC_DHE_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA = "TLS_DHE_PSK_WITH_AES_128_CBC_SHA"

const TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA = "TLS_DHE_PSK_WITH_AES_256_CBC_SHA"

const TLS1_RFC_RSA_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA = "TLS_RSA_PSK_WITH_AES_128_CBC_SHA"

const TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA = "TLS_RSA_PSK_WITH_AES_256_CBC_SHA"

const TLS1_RFC_PSK_WITH_AES_128_GCM_SHA256 = "TLS_PSK_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_PSK_WITH_AES_256_GCM_SHA384 = "TLS_PSK_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_DHE_PSK_WITH_AES_128_GCM_SHA256 = "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_DHE_PSK_WITH_AES_256_GCM_SHA384 = "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_RSA_PSK_WITH_AES_128_GCM_SHA256 = "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256"

const TLS1_RFC_RSA_PSK_WITH_AES_256_GCM_SHA384 = "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384"

const TLS1_RFC_PSK_WITH_AES_128_CBC_SHA256 = "TLS_PSK_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_PSK_WITH_AES_256_CBC_SHA384 = "TLS_PSK_WITH_AES_256_CBC_SHA384"

const TLS1_RFC_PSK_WITH_NULL_SHA256 = "TLS_PSK_WITH_NULL_SHA256"

const TLS1_RFC_PSK_WITH_NULL_SHA384 = "TLS_PSK_WITH_NULL_SHA384"

const TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA256 = "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA384 = "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384"

const TLS1_RFC_DHE_PSK_WITH_NULL_SHA256 = "TLS_DHE_PSK_WITH_NULL_SHA256"

const TLS1_RFC_DHE_PSK_WITH_NULL_SHA384 = "TLS_DHE_PSK_WITH_NULL_SHA384"

const TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA256 = "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA384 = "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384"

const TLS1_RFC_RSA_PSK_WITH_NULL_SHA256 = "TLS_RSA_PSK_WITH_NULL_SHA256"

const TLS1_RFC_RSA_PSK_WITH_NULL_SHA384 = "TLS_RSA_PSK_WITH_NULL_SHA384"

const TLS1_RFC_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA = "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA"

const TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA = "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA"

const TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256"

const TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384"

const TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA = "TLS_ECDHE_PSK_WITH_NULL_SHA"

const TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA256 = "TLS_ECDHE_PSK_WITH_NULL_SHA256"

const TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA384 = "TLS_ECDHE_PSK_WITH_NULL_SHA384"

const TLS1_RFC_SRP_SHA_WITH_3DES_EDE_CBC_SHA = "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA"

const TLS1_RFC_SRP_SHA_WITH_AES_128_CBC_SHA = "TLS_SRP_SHA_WITH_AES_128_CBC_SHA"

const TLS1_RFC_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA"

const TLS1_RFC_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA"

const TLS1_RFC_SRP_SHA_WITH_AES_256_CBC_SHA = "TLS_SRP_SHA_WITH_AES_256_CBC_SHA"

const TLS1_RFC_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA"

const TLS1_RFC_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA"

const TLS1_RFC_DHE_RSA_WITH_CHACHA20_POLY1305 = "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_ECDHE_RSA_WITH_CHACHA20_POLY1305 = "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_PSK_WITH_CHACHA20_POLY1305 = "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_ECDHE_PSK_WITH_CHACHA20_POLY1305 = "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_DHE_PSK_WITH_CHACHA20_POLY1305 = "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_RSA_PSK_WITH_CHACHA20_POLY1305 = "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256"

const TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256"

const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256"

const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256"

const TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256"

const TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA = "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA"

const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA"

const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA"

const TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA = "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA"

const TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA = "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA"

const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA"

const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA"

const TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA = "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA"

const TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384"

const TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384"

const TLS1_RFC_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384"

const TLS1_RFC_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"

const TLS1_RFC_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384"

const TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"

const TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"

const TLS1_RFC_RSA_WITH_SEED_SHA = "TLS_RSA_WITH_SEED_CBC_SHA"

const TLS1_RFC_DHE_DSS_WITH_SEED_SHA = "TLS_DHE_DSS_WITH_SEED_CBC_SHA"

const TLS1_RFC_DHE_RSA_WITH_SEED_SHA = "TLS_DHE_RSA_WITH_SEED_CBC_SHA"

const TLS1_RFC_ADH_WITH_SEED_SHA = "TLS_DH_anon_WITH_SEED_CBC_SHA"

const TLS1_RFC_ECDHE_PSK_WITH_RC4_128_SHA = "TLS_ECDHE_PSK_WITH_RC4_128_SHA"

const TLS1_RFC_ECDH_anon_WITH_RC4_128_SHA = "TLS_ECDH_anon_WITH_RC4_128_SHA"

const TLS1_RFC_ECDHE_ECDSA_WITH_RC4_128_SHA = "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"

const TLS1_RFC_ECDHE_RSA_WITH_RC4_128_SHA = "TLS_ECDHE_RSA_WITH_RC4_128_SHA"

const TLS1_RFC_PSK_WITH_RC4_128_SHA = "TLS_PSK_WITH_RC4_128_SHA"

const TLS1_RFC_RSA_PSK_WITH_RC4_128_SHA = "TLS_RSA_PSK_WITH_RC4_128_SHA"

const TLS1_RFC_DHE_PSK_WITH_RC4_128_SHA = "TLS_DHE_PSK_WITH_RC4_128_SHA"

const TLS1_RFC_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_RSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_RSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_DH_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_DH_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_DH_DSS_WITH_ARIA_128_GCM_SHA256 = "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_DH_DSS_WITH_ARIA_256_GCM_SHA384 = "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_DH_anon_WITH_ARIA_128_GCM_SHA256 = "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_DH_anon_WITH_ARIA_256_GCM_SHA384 = "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_PSK_WITH_ARIA_128_GCM_SHA256 = "TLS_PSK_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_PSK_WITH_ARIA_256_GCM_SHA384 = "TLS_PSK_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384"

const TLS1_RFC_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256"

const TLS1_RFC_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384"

const TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA = "DHE-DSS-RC4-SHA"

const TLS1_TXT_PSK_WITH_NULL_SHA = "PSK-NULL-SHA"

const TLS1_TXT_DHE_PSK_WITH_NULL_SHA = "DHE-PSK-NULL-SHA"

const TLS1_TXT_RSA_PSK_WITH_NULL_SHA = "RSA-PSK-NULL-SHA"

const TLS1_TXT_RSA_WITH_AES_128_SHA = "AES128-SHA"

const TLS1_TXT_DH_DSS_WITH_AES_128_SHA = "DH-DSS-AES128-SHA"

const TLS1_TXT_DH_RSA_WITH_AES_128_SHA = "DH-RSA-AES128-SHA"

const TLS1_TXT_DHE_DSS_WITH_AES_128_SHA = "DHE-DSS-AES128-SHA"

const TLS1_TXT_DHE_RSA_WITH_AES_128_SHA = "DHE-RSA-AES128-SHA"

const TLS1_TXT_ADH_WITH_AES_128_SHA = "ADH-AES128-SHA"

const TLS1_TXT_RSA_WITH_AES_256_SHA = "AES256-SHA"

const TLS1_TXT_DH_DSS_WITH_AES_256_SHA = "DH-DSS-AES256-SHA"

const TLS1_TXT_DH_RSA_WITH_AES_256_SHA = "DH-RSA-AES256-SHA"

const TLS1_TXT_DHE_DSS_WITH_AES_256_SHA = "DHE-DSS-AES256-SHA"

const TLS1_TXT_DHE_RSA_WITH_AES_256_SHA = "DHE-RSA-AES256-SHA"

const TLS1_TXT_ADH_WITH_AES_256_SHA = "ADH-AES256-SHA"

const TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA = "ECDH-ECDSA-NULL-SHA"

const TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA = "ECDH-ECDSA-RC4-SHA"

const TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = "ECDH-ECDSA-DES-CBC3-SHA"

const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "ECDH-ECDSA-AES128-SHA"

const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "ECDH-ECDSA-AES256-SHA"

const TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA = "ECDHE-ECDSA-NULL-SHA"

const TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA = "ECDHE-ECDSA-RC4-SHA"

const TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = "ECDHE-ECDSA-DES-CBC3-SHA"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "ECDHE-ECDSA-AES128-SHA"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "ECDHE-ECDSA-AES256-SHA"

const TLS1_TXT_ECDH_RSA_WITH_NULL_SHA = "ECDH-RSA-NULL-SHA"

const TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA = "ECDH-RSA-RC4-SHA"

const TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA = "ECDH-RSA-DES-CBC3-SHA"

const TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA = "ECDH-RSA-AES128-SHA"

const TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA = "ECDH-RSA-AES256-SHA"

const TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA = "ECDHE-RSA-NULL-SHA"

const TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA = "ECDHE-RSA-RC4-SHA"

const TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA = "ECDHE-RSA-DES-CBC3-SHA"

const TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA = "ECDHE-RSA-AES128-SHA"

const TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA = "ECDHE-RSA-AES256-SHA"

const TLS1_TXT_ECDH_anon_WITH_NULL_SHA = "AECDH-NULL-SHA"

const TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA = "AECDH-RC4-SHA"

const TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA = "AECDH-DES-CBC3-SHA"

const TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA = "AECDH-AES128-SHA"

const TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA = "AECDH-AES256-SHA"

const TLS1_TXT_PSK_WITH_RC4_128_SHA = "PSK-RC4-SHA"

const TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA = "PSK-3DES-EDE-CBC-SHA"

const TLS1_TXT_PSK_WITH_AES_128_CBC_SHA = "PSK-AES128-CBC-SHA"

const TLS1_TXT_PSK_WITH_AES_256_CBC_SHA = "PSK-AES256-CBC-SHA"

const TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA = "DHE-PSK-RC4-SHA"

const TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA = "DHE-PSK-3DES-EDE-CBC-SHA"

const TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA = "DHE-PSK-AES128-CBC-SHA"

const TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA = "DHE-PSK-AES256-CBC-SHA"

const TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA = "RSA-PSK-RC4-SHA"

const TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA = "RSA-PSK-3DES-EDE-CBC-SHA"

const TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA = "RSA-PSK-AES128-CBC-SHA"

const TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA = "RSA-PSK-AES256-CBC-SHA"

const TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256 = "PSK-AES128-GCM-SHA256"

const TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384 = "PSK-AES256-GCM-SHA384"

const TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256 = "DHE-PSK-AES128-GCM-SHA256"

const TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384 = "DHE-PSK-AES256-GCM-SHA384"

const TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256 = "RSA-PSK-AES128-GCM-SHA256"

const TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384 = "RSA-PSK-AES256-GCM-SHA384"

const TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256 = "PSK-AES128-CBC-SHA256"

const TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384 = "PSK-AES256-CBC-SHA384"

const TLS1_TXT_PSK_WITH_NULL_SHA256 = "PSK-NULL-SHA256"

const TLS1_TXT_PSK_WITH_NULL_SHA384 = "PSK-NULL-SHA384"

const TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256 = "DHE-PSK-AES128-CBC-SHA256"

const TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384 = "DHE-PSK-AES256-CBC-SHA384"

const TLS1_TXT_DHE_PSK_WITH_NULL_SHA256 = "DHE-PSK-NULL-SHA256"

const TLS1_TXT_DHE_PSK_WITH_NULL_SHA384 = "DHE-PSK-NULL-SHA384"

const TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256 = "RSA-PSK-AES128-CBC-SHA256"

const TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384 = "RSA-PSK-AES256-CBC-SHA384"

const TLS1_TXT_RSA_PSK_WITH_NULL_SHA256 = "RSA-PSK-NULL-SHA256"

const TLS1_TXT_RSA_PSK_WITH_NULL_SHA384 = "RSA-PSK-NULL-SHA384"

const TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA = "SRP-3DES-EDE-CBC-SHA"

const TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = "SRP-RSA-3DES-EDE-CBC-SHA"

const TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = "SRP-DSS-3DES-EDE-CBC-SHA"

const TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA = "SRP-AES-128-CBC-SHA"

const TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = "SRP-RSA-AES-128-CBC-SHA"

const TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = "SRP-DSS-AES-128-CBC-SHA"

const TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA = "SRP-AES-256-CBC-SHA"

const TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = "SRP-RSA-AES-256-CBC-SHA"

const TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = "SRP-DSS-AES-256-CBC-SHA"

const TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA = "CAMELLIA128-SHA"

const TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = "DH-DSS-CAMELLIA128-SHA"

const TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = "DH-RSA-CAMELLIA128-SHA"

const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = "DHE-DSS-CAMELLIA128-SHA"

const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = "DHE-RSA-CAMELLIA128-SHA"

const TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA = "ADH-CAMELLIA128-SHA"

const TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA = "CAMELLIA256-SHA"

const TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = "DH-DSS-CAMELLIA256-SHA"

const TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = "DH-RSA-CAMELLIA256-SHA"

const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = "DHE-DSS-CAMELLIA256-SHA"

const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = "DHE-RSA-CAMELLIA256-SHA"

const TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA = "ADH-CAMELLIA256-SHA"

const TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "CAMELLIA128-SHA256"

const TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "DH-DSS-CAMELLIA128-SHA256"

const TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "DH-RSA-CAMELLIA128-SHA256"

const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-DSS-CAMELLIA128-SHA256"

const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-RSA-CAMELLIA128-SHA256"

const TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256 = "ADH-CAMELLIA128-SHA256"

const TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "CAMELLIA256-SHA256"

const TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "DH-DSS-CAMELLIA256-SHA256"

const TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "DH-RSA-CAMELLIA256-SHA256"

const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "DHE-DSS-CAMELLIA256-SHA256"

const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "DHE-RSA-CAMELLIA256-SHA256"

const TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256 = "ADH-CAMELLIA256-SHA256"

const TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "PSK-CAMELLIA128-SHA256"

const TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "PSK-CAMELLIA256-SHA384"

const TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-PSK-CAMELLIA128-SHA256"

const TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "DHE-PSK-CAMELLIA256-SHA384"

const TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "RSA-PSK-CAMELLIA128-SHA256"

const TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "RSA-PSK-CAMELLIA256-SHA384"

const TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-PSK-CAMELLIA128-SHA256"

const TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-PSK-CAMELLIA256-SHA384"

const TLS1_TXT_RSA_WITH_SEED_SHA = "SEED-SHA"

const TLS1_TXT_DH_DSS_WITH_SEED_SHA = "DH-DSS-SEED-SHA"

const TLS1_TXT_DH_RSA_WITH_SEED_SHA = "DH-RSA-SEED-SHA"

const TLS1_TXT_DHE_DSS_WITH_SEED_SHA = "DHE-DSS-SEED-SHA"

const TLS1_TXT_DHE_RSA_WITH_SEED_SHA = "DHE-RSA-SEED-SHA"

const TLS1_TXT_ADH_WITH_SEED_SHA = "ADH-SEED-SHA"

const TLS1_TXT_RSA_WITH_NULL_SHA256 = "NULL-SHA256"

const TLS1_TXT_RSA_WITH_AES_128_SHA256 = "AES128-SHA256"

const TLS1_TXT_RSA_WITH_AES_256_SHA256 = "AES256-SHA256"

const TLS1_TXT_DH_DSS_WITH_AES_128_SHA256 = "DH-DSS-AES128-SHA256"

const TLS1_TXT_DH_RSA_WITH_AES_128_SHA256 = "DH-RSA-AES128-SHA256"

const TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256 = "DHE-DSS-AES128-SHA256"

const TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256 = "DHE-RSA-AES128-SHA256"

const TLS1_TXT_DH_DSS_WITH_AES_256_SHA256 = "DH-DSS-AES256-SHA256"

const TLS1_TXT_DH_RSA_WITH_AES_256_SHA256 = "DH-RSA-AES256-SHA256"

const TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256 = "DHE-DSS-AES256-SHA256"

const TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256 = "DHE-RSA-AES256-SHA256"

const TLS1_TXT_ADH_WITH_AES_128_SHA256 = "ADH-AES128-SHA256"

const TLS1_TXT_ADH_WITH_AES_256_SHA256 = "ADH-AES256-SHA256"

const TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256 = "AES128-GCM-SHA256"

const TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384 = "AES256-GCM-SHA384"

const TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256 = "DHE-RSA-AES128-GCM-SHA256"

const TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384 = "DHE-RSA-AES256-GCM-SHA384"

const TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256 = "DH-RSA-AES128-GCM-SHA256"

const TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384 = "DH-RSA-AES256-GCM-SHA384"

const TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256 = "DHE-DSS-AES128-GCM-SHA256"

const TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384 = "DHE-DSS-AES256-GCM-SHA384"

const TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256 = "DH-DSS-AES128-GCM-SHA256"

const TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384 = "DH-DSS-AES256-GCM-SHA384"

const TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256 = "ADH-AES128-GCM-SHA256"

const TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384 = "ADH-AES256-GCM-SHA384"

const TLS1_TXT_RSA_WITH_AES_128_CCM = "AES128-CCM"

const TLS1_TXT_RSA_WITH_AES_256_CCM = "AES256-CCM"

const TLS1_TXT_DHE_RSA_WITH_AES_128_CCM = "DHE-RSA-AES128-CCM"

const TLS1_TXT_DHE_RSA_WITH_AES_256_CCM = "DHE-RSA-AES256-CCM"

const TLS1_TXT_RSA_WITH_AES_128_CCM_8 = "AES128-CCM8"

const TLS1_TXT_RSA_WITH_AES_256_CCM_8 = "AES256-CCM8"

const TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8 = "DHE-RSA-AES128-CCM8"

const TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8 = "DHE-RSA-AES256-CCM8"

const TLS1_TXT_PSK_WITH_AES_128_CCM = "PSK-AES128-CCM"

const TLS1_TXT_PSK_WITH_AES_256_CCM = "PSK-AES256-CCM"

const TLS1_TXT_DHE_PSK_WITH_AES_128_CCM = "DHE-PSK-AES128-CCM"

const TLS1_TXT_DHE_PSK_WITH_AES_256_CCM = "DHE-PSK-AES256-CCM"

const TLS1_TXT_PSK_WITH_AES_128_CCM_8 = "PSK-AES128-CCM8"

const TLS1_TXT_PSK_WITH_AES_256_CCM_8 = "PSK-AES256-CCM8"

const TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8 = "DHE-PSK-AES128-CCM8"

const TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8 = "DHE-PSK-AES256-CCM8"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM = "ECDHE-ECDSA-AES128-CCM"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM = "ECDHE-ECDSA-AES256-CCM"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8 = "ECDHE-ECDSA-AES128-CCM8"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8 = "ECDHE-ECDSA-AES256-CCM8"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256 = "ECDHE-ECDSA-AES128-SHA256"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384 = "ECDHE-ECDSA-AES256-SHA384"

const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256 = "ECDH-ECDSA-AES128-SHA256"

const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384 = "ECDH-ECDSA-AES256-SHA384"

const TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256 = "ECDHE-RSA-AES128-SHA256"

const TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384 = "ECDHE-RSA-AES256-SHA384"

const TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256 = "ECDH-RSA-AES128-SHA256"

const TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384 = "ECDH-RSA-AES256-SHA384"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "ECDHE-ECDSA-AES128-GCM-SHA256"

const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "ECDHE-ECDSA-AES256-GCM-SHA384"

const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "ECDH-ECDSA-AES128-GCM-SHA256"

const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "ECDH-ECDSA-AES256-GCM-SHA384"

const TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "ECDHE-RSA-AES128-GCM-SHA256"

const TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "ECDHE-RSA-AES256-GCM-SHA384"

const TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "ECDH-RSA-AES128-GCM-SHA256"

const TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "ECDH-RSA-AES256-GCM-SHA384"

const TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA = "ECDHE-PSK-RC4-SHA"

const TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = "ECDHE-PSK-3DES-EDE-CBC-SHA"

const TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA = "ECDHE-PSK-AES128-CBC-SHA"

const TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA = "ECDHE-PSK-AES256-CBC-SHA"

const TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = "ECDHE-PSK-AES128-CBC-SHA256"

const TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = "ECDHE-PSK-AES256-CBC-SHA384"

const TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA = "ECDHE-PSK-NULL-SHA"

const TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256 = "ECDHE-PSK-NULL-SHA256"

const TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384 = "ECDHE-PSK-NULL-SHA384"

const TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-ECDSA-CAMELLIA128-SHA256"

const TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-ECDSA-CAMELLIA256-SHA384"

const TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDH-ECDSA-CAMELLIA128-SHA256"

const TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDH-ECDSA-CAMELLIA256-SHA384"

const TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-RSA-CAMELLIA128-SHA256"

const TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-RSA-CAMELLIA256-SHA384"

const TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDH-RSA-CAMELLIA128-SHA256"

const TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDH-RSA-CAMELLIA256-SHA384"

const TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305 = "ECDHE-RSA-CHACHA20-POLY1305"

const TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = "ECDHE-ECDSA-CHACHA20-POLY1305"

const TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305 = "DHE-RSA-CHACHA20-POLY1305"

const TLS1_TXT_PSK_WITH_CHACHA20_POLY1305 = "PSK-CHACHA20-POLY1305"

const TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305 = "ECDHE-PSK-CHACHA20-POLY1305"

const TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305 = "DHE-PSK-CHACHA20-POLY1305"

const TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305 = "RSA-PSK-CHACHA20-POLY1305"

const TLS1_TXT_RSA_WITH_ARIA_128_GCM_SHA256 = "ARIA128-GCM-SHA256"

const TLS1_TXT_RSA_WITH_ARIA_256_GCM_SHA384 = "ARIA256-GCM-SHA384"

const TLS1_TXT_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = "DHE-RSA-ARIA128-GCM-SHA256"

const TLS1_TXT_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = "DHE-RSA-ARIA256-GCM-SHA384"

const TLS1_TXT_DH_RSA_WITH_ARIA_128_GCM_SHA256 = "DH-RSA-ARIA128-GCM-SHA256"

const TLS1_TXT_DH_RSA_WITH_ARIA_256_GCM_SHA384 = "DH-RSA-ARIA256-GCM-SHA384"

const TLS1_TXT_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = "DHE-DSS-ARIA128-GCM-SHA256"

const TLS1_TXT_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = "DHE-DSS-ARIA256-GCM-SHA384"

const TLS1_TXT_DH_DSS_WITH_ARIA_128_GCM_SHA256 = "DH-DSS-ARIA128-GCM-SHA256"

const TLS1_TXT_DH_DSS_WITH_ARIA_256_GCM_SHA384 = "DH-DSS-ARIA256-GCM-SHA384"

const TLS1_TXT_DH_anon_WITH_ARIA_128_GCM_SHA256 = "ADH-ARIA128-GCM-SHA256"

const TLS1_TXT_DH_anon_WITH_ARIA_256_GCM_SHA384 = "ADH-ARIA256-GCM-SHA384"

const TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = "ECDHE-ECDSA-ARIA128-GCM-SHA256"

const TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = "ECDHE-ECDSA-ARIA256-GCM-SHA384"

const TLS1_TXT_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = "ECDH-ECDSA-ARIA128-GCM-SHA256"

const TLS1_TXT_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = "ECDH-ECDSA-ARIA256-GCM-SHA384"

const TLS1_TXT_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = "ECDHE-ARIA128-GCM-SHA256"

const TLS1_TXT_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = "ECDHE-ARIA256-GCM-SHA384"

const TLS1_TXT_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = "ECDH-ARIA128-GCM-SHA256"

const TLS1_TXT_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = "ECDH-ARIA256-GCM-SHA384"

const TLS1_TXT_PSK_WITH_ARIA_128_GCM_SHA256 = "PSK-ARIA128-GCM-SHA256"

const TLS1_TXT_PSK_WITH_ARIA_256_GCM_SHA384 = "PSK-ARIA256-GCM-SHA384"

const TLS1_TXT_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = "DHE-PSK-ARIA128-GCM-SHA256"

const TLS1_TXT_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = "DHE-PSK-ARIA256-GCM-SHA384"

const TLS1_TXT_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = "RSA-PSK-ARIA128-GCM-SHA256"

const TLS1_TXT_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = "RSA-PSK-ARIA256-GCM-SHA384"

const TLS_CT_RSA_SIGN = 1

const TLS_CT_DSS_SIGN = 2

const TLS_CT_RSA_FIXED_DH = 3

const TLS_CT_DSS_FIXED_DH = 4

const TLS_CT_ECDSA_SIGN = 64

const TLS_CT_RSA_FIXED_ECDH = 65

const TLS_CT_ECDSA_FIXED_ECDH = 66

const TLS_CT_GOST01_SIGN = 22

const TLS_CT_GOST12_IANA_SIGN = 67

const TLS_CT_GOST12_IANA_512_SIGN = 68

const TLS_CT_GOST12_LEGACY_SIGN = 238

const TLS_CT_GOST12_LEGACY_512_SIGN = 239

const TLS_CT_GOST12_SIGN = TLS_CT_GOST12_LEGACY_SIGN

const TLS_CT_GOST12_512_SIGN = TLS_CT_GOST12_LEGACY_512_SIGN

const TLS_CT_NUMBER = 12

const TLS1_FINISH_MAC_LENGTH = 12

const TLS_MD_MAX_CONST_SIZE = 22

const TLS_MD_CLIENT_FINISH_CONST = "client finished"

const TLS_MD_CLIENT_FINISH_CONST_SIZE = 15

const TLS_MD_SERVER_FINISH_CONST = "server finished"

const TLS_MD_SERVER_FINISH_CONST_SIZE = 15

const TLS_MD_KEY_EXPANSION_CONST = "key expansion"

const TLS_MD_KEY_EXPANSION_CONST_SIZE = 13

const TLS_MD_CLIENT_WRITE_KEY_CONST = "client write key"

const TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE = 16

const TLS_MD_SERVER_WRITE_KEY_CONST = "server write key"

const TLS_MD_SERVER_WRITE_KEY_CONST_SIZE = 16

const TLS_MD_IV_BLOCK_CONST = "IV block"

const TLS_MD_IV_BLOCK_CONST_SIZE = 8

const TLS_MD_MASTER_SECRET_CONST = "master secret"

const TLS_MD_MASTER_SECRET_CONST_SIZE = 13

const TLS_MD_EXTENDED_MASTER_SECRET_CONST = "extended master secret"

const TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE = 22

const DTLS_MIN_VERSION = DTLS1_VERSION

const DTLS_MAX_VERSION = DTLS1_2_VERSION

const DTLS1_VERSION_MAJOR = 0xfe

const DTLS_ANY_VERSION = 0x0001ffff

const DTLS1_COOKIE_LENGTH = 255

const DTLS1_RT_HEADER_LENGTH = 13

const DTLS1_HM_HEADER_LENGTH = 12

const DTLS1_HM_BAD_FRAGMENT = -2

const DTLS1_HM_FRAGMENT_RETRY = -3

const DTLS1_CCS_HEADER_LENGTH = 1

const DTLS1_AL_HEADER_LENGTH = 2

const DTLS1_TMO_ALERT_COUNT = 12

const SRTP_AES128_CM_SHA1_80 = 0x0001

const SRTP_AES128_CM_SHA1_32 = 0x0002

const SRTP_AES128_F8_SHA1_80 = 0x0003

const SRTP_AES128_F8_SHA1_32 = 0x0004

const SRTP_NULL_SHA1_80 = 0x0005

const SRTP_NULL_SHA1_32 = 0x0006

const SRTP_AEAD_AES_128_GCM = 0x0007

const SRTP_AEAD_AES_256_GCM = 0x0008

const SSL_KEY_UPDATE_NONE = -1

const SSL_KEY_UPDATE_NOT_REQUESTED = 0

const SSL_KEY_UPDATE_REQUESTED = 1

const SSL_ST_CONNECT = 0x1000

const SSL_ST_ACCEPT = 0x2000

const SSL_ST_MASK = 0x0fff

const SSL_CB_LOOP = 0x01

const SSL_CB_EXIT = 0x02

const SSL_CB_READ = 0x04

const SSL_CB_WRITE = 0x08

const SSL_CB_ALERT = 0x4000

const SSL_CB_READ_ALERT = SSL_CB_ALERT | SSL_CB_READ

const SSL_CB_WRITE_ALERT = SSL_CB_ALERT | SSL_CB_WRITE

const SSL_CB_ACCEPT_LOOP = SSL_ST_ACCEPT | SSL_CB_LOOP

const SSL_CB_ACCEPT_EXIT = SSL_ST_ACCEPT | SSL_CB_EXIT

const SSL_CB_CONNECT_LOOP = SSL_ST_CONNECT | SSL_CB_LOOP

const SSL_CB_CONNECT_EXIT = SSL_ST_CONNECT | SSL_CB_EXIT

const SSL_CB_HANDSHAKE_START = 0x10

const SSL_CB_HANDSHAKE_DONE = 0x20

const SSL_ST_READ_HEADER = 0xf0

const SSL_ST_READ_BODY = 0xf1

const SSL_ST_READ_DONE = 0xf2

const SSL_VERIFY_NONE = 0x00

const SSL_VERIFY_PEER = 0x01

const SSL_VERIFY_FAIL_IF_NO_PEER_CERT = 0x02

const SSL_VERIFY_CLIENT_ONCE = 0x04

const SSL_VERIFY_POST_HANDSHAKE = 0x08

const SSL_AD_REASON_OFFSET = 1000

const SSL_AD_CLOSE_NOTIFY = SSL3_AD_CLOSE_NOTIFY

const SSL_AD_UNEXPECTED_MESSAGE = SSL3_AD_UNEXPECTED_MESSAGE

const SSL_AD_BAD_RECORD_MAC = SSL3_AD_BAD_RECORD_MAC

const SSL_AD_DECRYPTION_FAILED = TLS1_AD_DECRYPTION_FAILED

const SSL_AD_RECORD_OVERFLOW = TLS1_AD_RECORD_OVERFLOW

const SSL_AD_DECOMPRESSION_FAILURE = SSL3_AD_DECOMPRESSION_FAILURE

const SSL_AD_HANDSHAKE_FAILURE = SSL3_AD_HANDSHAKE_FAILURE

const SSL_AD_NO_CERTIFICATE = SSL3_AD_NO_CERTIFICATE

const SSL_AD_BAD_CERTIFICATE = SSL3_AD_BAD_CERTIFICATE

const SSL_AD_UNSUPPORTED_CERTIFICATE = SSL3_AD_UNSUPPORTED_CERTIFICATE

const SSL_AD_CERTIFICATE_REVOKED = SSL3_AD_CERTIFICATE_REVOKED

const SSL_AD_CERTIFICATE_EXPIRED = SSL3_AD_CERTIFICATE_EXPIRED

const SSL_AD_CERTIFICATE_UNKNOWN = SSL3_AD_CERTIFICATE_UNKNOWN

const SSL_AD_ILLEGAL_PARAMETER = SSL3_AD_ILLEGAL_PARAMETER

const SSL_AD_UNKNOWN_CA = TLS1_AD_UNKNOWN_CA

const SSL_AD_ACCESS_DENIED = TLS1_AD_ACCESS_DENIED

const SSL_AD_DECODE_ERROR = TLS1_AD_DECODE_ERROR

const SSL_AD_DECRYPT_ERROR = TLS1_AD_DECRYPT_ERROR

const SSL_AD_EXPORT_RESTRICTION = TLS1_AD_EXPORT_RESTRICTION

const SSL_AD_PROTOCOL_VERSION = TLS1_AD_PROTOCOL_VERSION

const SSL_AD_INSUFFICIENT_SECURITY = TLS1_AD_INSUFFICIENT_SECURITY

const SSL_AD_INTERNAL_ERROR = TLS1_AD_INTERNAL_ERROR

const SSL_AD_USER_CANCELLED = TLS1_AD_USER_CANCELLED

const SSL_AD_NO_RENEGOTIATION = TLS1_AD_NO_RENEGOTIATION

const SSL_AD_MISSING_EXTENSION = TLS13_AD_MISSING_EXTENSION

const SSL_AD_CERTIFICATE_REQUIRED = TLS13_AD_CERTIFICATE_REQUIRED

const SSL_AD_UNSUPPORTED_EXTENSION = TLS1_AD_UNSUPPORTED_EXTENSION

const SSL_AD_CERTIFICATE_UNOBTAINABLE = TLS1_AD_CERTIFICATE_UNOBTAINABLE

const SSL_AD_UNRECOGNIZED_NAME = TLS1_AD_UNRECOGNIZED_NAME

const SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE = TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE

const SSL_AD_BAD_CERTIFICATE_HASH_VALUE = TLS1_AD_BAD_CERTIFICATE_HASH_VALUE

const SSL_AD_UNKNOWN_PSK_IDENTITY = TLS1_AD_UNKNOWN_PSK_IDENTITY

const SSL_AD_INAPPROPRIATE_FALLBACK = TLS1_AD_INAPPROPRIATE_FALLBACK

const SSL_AD_NO_APPLICATION_PROTOCOL = TLS1_AD_NO_APPLICATION_PROTOCOL

const SSL_ERROR_NONE = 0

const SSL_ERROR_SSL = 1

const SSL_ERROR_WANT_READ = 2

const SSL_ERROR_WANT_WRITE = 3

const SSL_ERROR_WANT_X509_LOOKUP = 4

const SSL_ERROR_SYSCALL = 5

const SSL_ERROR_ZERO_RETURN = 6

const SSL_ERROR_WANT_CONNECT = 7

const SSL_ERROR_WANT_ACCEPT = 8

const SSL_ERROR_WANT_ASYNC = 9

const SSL_ERROR_WANT_ASYNC_JOB = 10

const SSL_ERROR_WANT_CLIENT_HELLO_CB = 11

const SSL_ERROR_WANT_RETRY_VERIFY = 12

const SSL_CTRL_SET_TMP_DH = 3

const SSL_CTRL_SET_TMP_ECDH = 4

const SSL_CTRL_SET_TMP_DH_CB = 6

const SSL_CTRL_GET_CLIENT_CERT_REQUEST = 9

const SSL_CTRL_GET_NUM_RENEGOTIATIONS = 10

const SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS = 11

const SSL_CTRL_GET_TOTAL_RENEGOTIATIONS = 12

const SSL_CTRL_GET_FLAGS = 13

const SSL_CTRL_EXTRA_CHAIN_CERT = 14

const SSL_CTRL_SET_MSG_CALLBACK = 15

const SSL_CTRL_GET_READ_AHEAD = 40

const SSL_CTRL_SET_READ_AHEAD = 41

const SSL_CTRL_SET_SESS_CACHE_SIZE = 42

const SSL_CTRL_GET_SESS_CACHE_SIZE = 43

const SSL_CTRL_SET_SESS_CACHE_MODE = 44

const SSL_CTRL_GET_SESS_CACHE_MODE = 45

const SSL_CTRL_GET_MAX_CERT_LIST = 50

const SSL_CTRL_SET_MAX_CERT_LIST = 51

const SSL_CTRL_SET_MAX_SEND_FRAGMENT = 52

const SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB = 75

const SSL_CTRL_SET_SRP_VERIFY_PARAM_CB = 76

const SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB = 77

const SSL_CTRL_SET_SRP_ARG = 78

const SSL_CTRL_SET_TLS_EXT_SRP_USERNAME = 79

const SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH = 80

const SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD = 81

const DTLS_CTRL_GET_TIMEOUT = 73

const DTLS_CTRL_HANDLE_TIMEOUT = 74

const SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB = 79

const SSL_CTRL_GET_EXTRA_CHAIN_CERTS = 82

const SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS = 83

const SSL_CTRL_CHAIN = 88

const SSL_CTRL_CHAIN_CERT = 89

const SSL_CTRL_GET_GROUPS = 90

const SSL_CTRL_SET_GROUPS = 91

const SSL_CTRL_SET_GROUPS_LIST = 92

const SSL_CTRL_GET_SHARED_GROUP = 93

const SSL_CTRL_SET_SIGALGS = 97

const SSL_CTRL_SET_SIGALGS_LIST = 98

const SSL_CTRL_SET_CLIENT_SIGALGS = 101

const SSL_CTRL_SET_CLIENT_SIGALGS_LIST = 102

const SSL_CTRL_GET_CLIENT_CERT_TYPES = 103

const SSL_CTRL_SET_CLIENT_CERT_TYPES = 104

const SSL_CTRL_BUILD_CERT_CHAIN = 105

const SSL_CTRL_SET_VERIFY_CERT_STORE = 106

const SSL_CTRL_SET_CHAIN_CERT_STORE = 107

const SSL_CTRL_GET_PEER_SIGNATURE_NID = 108

const SSL_CTRL_GET_PEER_TMP_KEY = 109

const SSL_CTRL_GET_RAW_CIPHERLIST = 110

const SSL_CTRL_GET_EC_POINT_FORMATS = 111

const SSL_CTRL_GET_CHAIN_CERTS = 115

const SSL_CTRL_SELECT_CURRENT_CERT = 116

const SSL_CTRL_SET_CURRENT_CERT = 117

const SSL_CTRL_SET_DH_AUTO = 118

const SSL_CTRL_SET_MIN_PROTO_VERSION = 123

const SSL_CTRL_SET_MAX_PROTO_VERSION = 124

const SSL_CTRL_SET_SPLIT_SEND_FRAGMENT = 125

const SSL_CTRL_SET_MAX_PIPELINES = 126

const SSL_CTRL_GET_MIN_PROTO_VERSION = 130

const SSL_CTRL_GET_MAX_PROTO_VERSION = 131

const SSL_CTRL_GET_SIGNATURE_NID = 132

const SSL_CTRL_GET_TMP_KEY = 133

const SSL_CTRL_GET_NEGOTIATED_GROUP = 134

const SSL_CTRL_SET_RETRY_VERIFY = 136

const SSL_CTRL_GET_VERIFY_CERT_STORE = 137

const SSL_CTRL_GET_CHAIN_CERT_STORE = 138

const SSL_CERT_SET_FIRST = 1

const SSL_CERT_SET_NEXT = 2

const SSL_CERT_SET_SERVER = 3

const SSL_CTRL_GET_SERVER_TMP_KEY = SSL_CTRL_GET_PEER_TMP_KEY

const SSL_CTRL_GET_CURVES = SSL_CTRL_GET_GROUPS

const SSL_CTRL_SET_CURVES = SSL_CTRL_SET_GROUPS

const SSL_CTRL_SET_CURVES_LIST = SSL_CTRL_SET_GROUPS_LIST

const SSL_CTRL_GET_SHARED_CURVE = SSL_CTRL_GET_SHARED_GROUP

const SSL_get1_curves = SSL_get1_groups

const SSL_CTX_set1_curves = SSL_CTX_set1_groups

const SSL_CTX_set1_curves_list = SSL_CTX_set1_groups_list

const SSL_set1_curves = SSL_set1_groups

const SSL_set1_curves_list = SSL_set1_groups_list

const SSL_get_shared_curve = SSL_get_shared_group

const SSL_SERVERINFOV1 = 1

const SSL_SERVERINFOV2 = 2

const OPENSSL_INIT_LOAD_SSL_STRINGS = Clong(0x00200000)

const SSL_get_peer_certificate = SSL_get1_peer_certificate

const SSL_CLIENT_HELLO_SUCCESS = 1

const SSL_CLIENT_HELLO_ERROR = 0

const SSL_CLIENT_HELLO_RETRY = -1

const SSL_READ_EARLY_DATA_ERROR = 0

const SSL_READ_EARLY_DATA_SUCCESS = 1

const SSL_READ_EARLY_DATA_FINISH = 2

const SSL_EARLY_DATA_NOT_SENT = 0

const SSL_EARLY_DATA_REJECTED = 1

const SSL_EARLY_DATA_ACCEPTED = 2

const SSLv23_method = TLS_method

const SSLv23_server_method = TLS_server_method

const SSLv23_client_method = TLS_client_method

const SSL_get0_session = SSL_get_session

const SSL_SECOP_OTHER_TYPE = 0xffff0000

const SSL_SECOP_OTHER_NONE = 0

const SSL_SECOP_OTHER_CIPHER = 1 << 16

const SSL_SECOP_OTHER_CURVE = 2 << 16

const SSL_SECOP_OTHER_DH = 3 << 16

const SSL_SECOP_OTHER_PKEY = 4 << 16

const SSL_SECOP_OTHER_SIGALG = 5 << 16

const SSL_SECOP_OTHER_CERT = 6 << 16

const SSL_SECOP_PEER = 0x1000

const SSL_SECOP_CIPHER_SUPPORTED = 1 | SSL_SECOP_OTHER_CIPHER

const SSL_SECOP_CIPHER_SHARED = 2 | SSL_SECOP_OTHER_CIPHER

const SSL_SECOP_CIPHER_CHECK = 3 | SSL_SECOP_OTHER_CIPHER

const SSL_SECOP_CURVE_SUPPORTED = 4 | SSL_SECOP_OTHER_CURVE

const SSL_SECOP_CURVE_SHARED = 5 | SSL_SECOP_OTHER_CURVE

const SSL_SECOP_CURVE_CHECK = 6 | SSL_SECOP_OTHER_CURVE

const SSL_SECOP_TMP_DH = 7 | SSL_SECOP_OTHER_PKEY

const SSL_SECOP_VERSION = 9 | SSL_SECOP_OTHER_NONE

const SSL_SECOP_TICKET = 10 | SSL_SECOP_OTHER_NONE

const SSL_SECOP_SIGALG_SUPPORTED = 11 | SSL_SECOP_OTHER_SIGALG

const SSL_SECOP_SIGALG_SHARED = 12 | SSL_SECOP_OTHER_SIGALG

const SSL_SECOP_SIGALG_CHECK = 13 | SSL_SECOP_OTHER_SIGALG

const SSL_SECOP_SIGALG_MASK = 14 | SSL_SECOP_OTHER_SIGALG

const SSL_SECOP_COMPRESSION = 15 | SSL_SECOP_OTHER_NONE

const SSL_SECOP_EE_KEY = 16 | SSL_SECOP_OTHER_CERT

const SSL_SECOP_CA_KEY = 17 | SSL_SECOP_OTHER_CERT

const SSL_SECOP_CA_MD = 18 | SSL_SECOP_OTHER_CERT

const SSL_SECOP_PEER_EE_KEY = SSL_SECOP_EE_KEY | SSL_SECOP_PEER

const SSL_SECOP_PEER_CA_KEY = SSL_SECOP_CA_KEY | SSL_SECOP_PEER

const SSL_SECOP_PEER_CA_MD = SSL_SECOP_CA_MD | SSL_SECOP_PEER

const OPENSSL_INIT_NO_LOAD_SSL_STRINGS = Clong(0x00100000)

const OPENSSL_INIT_SSL_DEFAULT = OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS

const SSL_TICKET_FATAL_ERR_MALLOC = 0

const SSL_TICKET_FATAL_ERR_OTHER = 1

const SSL_TICKET_NONE = 2

const SSL_TICKET_EMPTY = 3

const SSL_TICKET_NO_DECRYPT = 4

const SSL_TICKET_SUCCESS = 5

const SSL_TICKET_SUCCESS_RENEW = 6

const SSL_TICKET_RETURN_ABORT = 0

const SSL_TICKET_RETURN_IGNORE = 1

const SSL_TICKET_RETURN_IGNORE_RENEW = 2

const SSL_TICKET_RETURN_USE = 3

const SSL_TICKET_RETURN_USE_RENEW = 4

const ERR_TXT_MALLOCED = 0x01

const ERR_TXT_STRING = 0x02

const ERR_FLAG_MARK = 0x01

const ERR_FLAG_CLEAR = 0x02

const ERR_NUM_ERRORS = 16

const ERR_LIB_NONE = 1

const ERR_LIB_SYS = 2

const ERR_LIB_BN = 3

const ERR_LIB_RSA = 4

const ERR_LIB_DH = 5

const ERR_LIB_EVP = 6

const ERR_LIB_BUF = 7

const ERR_LIB_OBJ = 8

const ERR_LIB_PEM = 9

const ERR_LIB_DSA = 10

const ERR_LIB_X509 = 11

const ERR_LIB_ASN1 = 13

const ERR_LIB_CONF = 14

const ERR_LIB_CRYPTO = 15

const ERR_LIB_EC = 16

const ERR_LIB_SSL = 20

const ERR_LIB_BIO = 32

const ERR_LIB_PKCS7 = 33

const ERR_LIB_X509V3 = 34

const ERR_LIB_PKCS12 = 35

const ERR_LIB_RAND = 36

const ERR_LIB_DSO = 37

const ERR_LIB_ENGINE = 38

const ERR_LIB_OCSP = 39

const ERR_LIB_UI = 40

const ERR_LIB_COMP = 41

const ERR_LIB_ECDSA = 42

const ERR_LIB_ECDH = 43

const ERR_LIB_OSSL_STORE = 44

const ERR_LIB_FIPS = 45

const ERR_LIB_CMS = 46

const ERR_LIB_TS = 47

const ERR_LIB_HMAC = 48

const ERR_LIB_CT = 50

const ERR_LIB_ASYNC = 51

const ERR_LIB_KDF = 52

const ERR_LIB_SM2 = 53

const ERR_LIB_ESS = 54

const ERR_LIB_PROP = 55

const ERR_LIB_CRMF = 56

const ERR_LIB_PROV = 57

const ERR_LIB_CMP = 58

const ERR_LIB_OSSL_ENCODER = 59

const ERR_LIB_OSSL_DECODER = 60

const ERR_LIB_HTTP = 61

const ERR_LIB_USER = 128

const ERR_raise_data = (ERR_new(), ERR_set_debug(OPENSSL_FILE, OPENSSL_LINE, OPENSSL_FUNC), ERR_set_error)

const ERR_SYSTEM_FLAG = Cuint(INT_MAX) + 1

const ERR_SYSTEM_MASK = Cuint(INT_MAX)

const ERR_LIB_OFFSET = Clong(23)

const ERR_LIB_MASK = 0xff

const ERR_RFLAGS_OFFSET = Clong(18)

const ERR_RFLAGS_MASK = 0x1f

const ERR_REASON_MASK = 0X7FFFFF

const ERR_RFLAG_FATAL = 0x01 << ERR_RFLAGS_OFFSET

const ERR_RFLAG_COMMON = 0x02 << ERR_RFLAGS_OFFSET

const SYS_F_FOPEN = 0

const SYS_F_CONNECT = 0

const SYS_F_GETSERVBYNAME = 0

const SYS_F_SOCKET = 0

const SYS_F_IOCTLSOCKET = 0

const SYS_F_BIND = 0

const SYS_F_LISTEN = 0

const SYS_F_ACCEPT = 0

const SYS_F_WSASTARTUP = 0

const SYS_F_OPENDIR = 0

const SYS_F_FREAD = 0

const SYS_F_GETADDRINFO = 0

const SYS_F_GETNAMEINFO = 0

const SYS_F_SETSOCKOPT = 0

const SYS_F_GETSOCKOPT = 0

const SYS_F_GETSOCKNAME = 0

const SYS_F_GETHOSTBYNAME = 0

const SYS_F_FFLUSH = 0

const SYS_F_OPEN = 0

const SYS_F_CLOSE = 0

const SYS_F_IOCTL = 0

const SYS_F_STAT = 0

const SYS_F_FCNTL = 0

const SYS_F_FSTAT = 0

const SYS_F_SENDFILE = 0

# Skipping MacroDefinition: ERR_R_SYS_LIB ( ERR_LIB_SYS /* 2 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_BN_LIB ( ERR_LIB_BN /* 3 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_RSA_LIB ( ERR_LIB_RSA /* 4 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_DH_LIB ( ERR_LIB_DH /* 5 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_EVP_LIB ( ERR_LIB_EVP /* 6 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_BUF_LIB ( ERR_LIB_BUF /* 7 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_OBJ_LIB ( ERR_LIB_OBJ /* 8 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_PEM_LIB ( ERR_LIB_PEM /* 9 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_DSA_LIB ( ERR_LIB_DSA /* 10 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_X509_LIB ( ERR_LIB_X509 /* 11 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_ASN1_LIB ( ERR_LIB_ASN1 /* 13 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_CONF_LIB ( ERR_LIB_CONF /* 14 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_CRYPTO_LIB ( ERR_LIB_CRYPTO /* 15 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_EC_LIB ( ERR_LIB_EC /* 16 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_SSL_LIB ( ERR_LIB_SSL /* 20 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_BIO_LIB ( ERR_LIB_BIO /* 32 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_PKCS7_LIB ( ERR_LIB_PKCS7 /* 33 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_X509V3_LIB ( ERR_LIB_X509V3 /* 34 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_PKCS12_LIB ( ERR_LIB_PKCS12 /* 35 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_RAND_LIB ( ERR_LIB_RAND /* 36 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_DSO_LIB ( ERR_LIB_DSO /* 37 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_ENGINE_LIB ( ERR_LIB_ENGINE /* 38 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_UI_LIB ( ERR_LIB_UI /* 40 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_ECDSA_LIB ( ERR_LIB_ECDSA /* 42 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_OSSL_STORE_LIB ( ERR_LIB_OSSL_STORE /* 44 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_CMS_LIB ( ERR_LIB_CMS /* 46 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_TS_LIB ( ERR_LIB_TS /* 47 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_CT_LIB ( ERR_LIB_CT /* 50 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_PROV_LIB ( ERR_LIB_PROV /* 57 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_ESS_LIB ( ERR_LIB_ESS /* 54 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_CMP_LIB ( ERR_LIB_CMP /* 58 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_OSSL_ENCODER_LIB ( ERR_LIB_OSSL_ENCODER /* 59 */ | ERR_RFLAG_COMMON )

# Skipping MacroDefinition: ERR_R_OSSL_DECODER_LIB ( ERR_LIB_OSSL_DECODER /* 60 */ | ERR_RFLAG_COMMON )

const ERR_R_FATAL = ERR_RFLAG_FATAL | ERR_RFLAG_COMMON

const ERR_R_MALLOC_FAILURE = 256 | ERR_R_FATAL

const ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = 257 | ERR_R_FATAL

const ERR_R_PASSED_NULL_PARAMETER = 258 | ERR_R_FATAL

const ERR_R_INTERNAL_ERROR = 259 | ERR_R_FATAL

const ERR_R_DISABLED = 260 | ERR_R_FATAL

const ERR_R_INIT_FAIL = 261 | ERR_R_FATAL

const ERR_R_PASSED_INVALID_ARGUMENT = 262 | ERR_RFLAG_COMMON

const ERR_R_OPERATION_FAIL = 263 | ERR_R_FATAL

const ERR_R_INVALID_PROVIDER_FUNCTIONS = 264 | ERR_R_FATAL

const ERR_R_INTERRUPTED_OR_CANCELLED = 265 | ERR_RFLAG_COMMON

const ERR_R_NESTED_ASN1_ERROR = 266 | ERR_RFLAG_COMMON

const ERR_R_MISSING_ASN1_EOS = 267 | ERR_RFLAG_COMMON

const ERR_R_UNSUPPORTED = 268 | ERR_RFLAG_COMMON

const ERR_R_FETCH_FAILED = 269 | ERR_RFLAG_COMMON

const ERR_R_INVALID_PROPERTY_DEFINITION = 270 | ERR_RFLAG_COMMON

const ERR_R_UNABLE_TO_GET_READ_LOCK = 271 | ERR_R_FATAL

const ERR_R_UNABLE_TO_GET_WRITE_LOCK = 272 | ERR_R_FATAL

const ERR_MAX_DATA_SIZE = 1024

const CONTEXT_PORT_NO_LISTEN = -1

const CONTEXT_PORT_NO_LISTEN_SERVER = -2

const LLL_ERR = 1 << 0

const LLL_WARN = 1 << 1

const LLL_NOTICE = 1 << 2

const LLL_INFO = 1 << 3

const LLL_DEBUG = 1 << 4

const LLL_PARSER = 1 << 5

const LLL_HEADER = 1 << 6

const LLL_EXT = 1 << 7

const LLL_CLIENT = 1 << 8

const LLL_LATENCY = 1 << 9

const LLL_USER = 1 << 10

const LLL_THREAD = 1 << 11

const LLL_COUNT = 12

const LLLF_SECRECY_PII = 1 << 16

const LLLF_SECRECY_BEARER = 1 << 17

const LLLF_LOG_TIMESTAMP = 1 << 18

const LLLF_LOG_CONTEXT_AWARE = 1 << 30

const _LWS_LINIT = 1 << LLL_COUNT - 1

const _LWS_LBS = LWS_LOGGING_BITFIELD_SET

const _LWS_LBC = LWS_LOGGING_BITFIELD_CLEAR

const _LWS_ENABLED_LOGS = (_LWS_LINIT | _LWS_LBS) & ~_LWS_LBC

const lws_pollfd = pollfd

const LWS_POLLHUP = POLLHUP | POLLERR

const LWS_POLLIN = POLLIN

const LWS_POLLOUT = POLLOUT

const lws_time_in_microseconds = lws_now_usecs

const LWS_TO_KILL_ASYNC = -1

const LWS_TO_KILL_SYNC = -2

const LWS_SET_TIMER_USEC_CANCEL = lws_usec_t(Clonglong(-1))

const LWS_USEC_PER_SEC = lws_usec_t(1000000)

const LWS_COUNT_PT_SUL_OWNERS = 2

const LWSSULLI_MISS_IF_SUSPENDED = 0

const LWSSULLI_WAKE_IF_SUSPENDED = 1

const LWS_SMD_MAX_PAYLOAD = 384

const LWS_SMD_CLASS_BITFIELD_BYTES = 4

const LWS_SMD_STREAMTYPENAME = "_lws_smd"

const LWS_SMD_SS_RX_HEADER_LEN = 16

const LWSSMDREG_FLAG_PROXIED_SS = 1 << 0

const LWS_RETRY_CONCEAL_ALWAYS = 0xffff

const LWS_CAUDP_BIND = 1 << 0

const LWS_CAUDP_BROADCAST = 1 << 1

const LWS_CAUDP_PF_PACKET = 1 << 2

const LWS_ITOSA_USABLE = 0

const LWS_ITOSA_NOT_EXIST = -1

const LWS_ITOSA_NOT_USABLE = -2

const LWS_ITOSA_BUSY = -3

const METRES_GO = 0

const METRES_NOGO = 1

const LWSSYSGAUTH_HEX = 1 << 0

const LWS_CB_REASON_AUX_BF__CGI = 1

const LWS_CB_REASON_AUX_BF__PROXY = 2

const LWS_CB_REASON_AUX_BF__CGI_CHUNK_END = 4

const LWS_CB_REASON_AUX_BF__CGI_HEADERS = 8

const LWS_CB_REASON_AUX_BF__PROXY_TRANS_END = 16

const LWS_CB_REASON_AUX_BF__PROXY_HEADERS = 32

const LWS_PROTOCOL_LIST_TERM = {NULL, NULL, 0, 0, 0, NULL, 0}

const LWS_PLUGIN_API_MAGIC = 191

const LWS_SERVER_OPTION_REQUIRE_VALID_OPENSSL_CLIENT_CERT = Clonglong(1) << 1 | Clonglong(1) << 12

const LWS_SERVER_OPTION_SKIP_SERVER_CANONICAL_NAME = Clonglong(1) << 2

const LWS_SERVER_OPTION_ALLOW_NON_SSL_ON_SSL_PORT = Clonglong(1) << 3 | Clonglong(1) << 12

const LWS_SERVER_OPTION_LIBEV = Clonglong(1) << 4

const LWS_SERVER_OPTION_DISABLE_IPV6 = Clonglong(1) << 5

const LWS_SERVER_OPTION_DISABLE_OS_CA_CERTS = Clonglong(1) << 6

const LWS_SERVER_OPTION_PEER_CERT_NOT_REQUIRED = Clonglong(1) << 7

const LWS_SERVER_OPTION_VALIDATE_UTF8 = Clonglong(1) << 8

const LWS_SERVER_OPTION_SSL_ECDH = Clonglong(1) << 9 | Clonglong(1) << 12

const LWS_SERVER_OPTION_LIBUV = Clonglong(1) << 10

const LWS_SERVER_OPTION_REDIRECT_HTTP_TO_HTTPS = Clonglong(1) << 11 | Clonglong(1) << 12

const LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT = Clonglong(1) << 12

const LWS_SERVER_OPTION_EXPLICIT_VHOSTS = Clonglong(1) << 13

const LWS_SERVER_OPTION_UNIX_SOCK = Clonglong(1) << 14

const LWS_SERVER_OPTION_STS = Clonglong(1) << 15

const LWS_SERVER_OPTION_IPV6_V6ONLY_MODIFY = Clonglong(1) << 16

const LWS_SERVER_OPTION_IPV6_V6ONLY_VALUE = Clonglong(1) << 17

const LWS_SERVER_OPTION_UV_NO_SIGSEGV_SIGFPE_SPIN = Clonglong(1) << 18

const LWS_SERVER_OPTION_JUST_USE_RAW_ORIGIN = Clonglong(1) << 19

# Skipping MacroDefinition: LWS_SERVER_OPTION_FALLBACK_TO_RAW /* use below name */ ( 1ll << 20 )

const LWS_SERVER_OPTION_FALLBACK_TO_APPLY_LISTEN_ACCEPT_CONFIG = Clonglong(1) << 20

const LWS_SERVER_OPTION_LIBEVENT = Clonglong(1) << 21

# Skipping MacroDefinition: LWS_SERVER_OPTION_ONLY_RAW /* Use below name instead */ ( 1ll << 22 )

const LWS_SERVER_OPTION_ADOPT_APPLY_LISTEN_ACCEPT_CONFIG = Clonglong(1) << 22

const LWS_SERVER_OPTION_ALLOW_LISTEN_SHARE = Clonglong(1) << 23

const LWS_SERVER_OPTION_CREATE_VHOST_SSL_CTX = Clonglong(1) << 24

const LWS_SERVER_OPTION_SKIP_PROTOCOL_INIT = Clonglong(1) << 25

const LWS_SERVER_OPTION_IGNORE_MISSING_CERT = Clonglong(1) << 26

const LWS_SERVER_OPTION_VHOST_UPG_STRICT_HOST_CHECK = Clonglong(1) << 27

const LWS_SERVER_OPTION_HTTP_HEADERS_SECURITY_BEST_PRACTICES_ENFORCE = Clonglong(1) << 28

const LWS_SERVER_OPTION_ALLOW_HTTP_ON_HTTPS_LISTENER = Clonglong(1) << 29

const LWS_SERVER_OPTION_FAIL_UPON_UNABLE_TO_BIND = Clonglong(1) << 30

const LWS_SERVER_OPTION_H2_JUST_FIX_WINDOW_UPDATE_OVERFLOW = Clonglong(1) << 31

const LWS_SERVER_OPTION_VH_H2_HALF_CLOSED_LONG_POLL = Clonglong(1) << 32

const LWS_SERVER_OPTION_GLIB = Clonglong(1) << 33

const LWS_SERVER_OPTION_H2_PRIOR_KNOWLEDGE = Clonglong(1) << 34

const LWS_SERVER_OPTION_NO_LWS_SYSTEM_STATES = Clonglong(1) << 35

const LWS_SERVER_OPTION_SS_PROXY = Clonglong(1) << 36

const LWS_SERVER_OPTION_SDEVENT = Clonglong(1) << 37

const LWS_SERVER_OPTION_ULOOP = Clonglong(1) << 38

const LWS_SERVER_OPTION_DISABLE_TLS_SESSION_CACHE = Clonglong(1) << 39

const AUTH_MODE_MASK = 0xf0000000

const LWS_RECOMMENDED_MIN_HEADER_SPACE = 2048

const LWSAHH_CODE_MASK = 1 << 16 - 1

const LWSAHH_FLAG_NO_SERVER_NAME = 1 << 30

const LWS_ILLEGAL_HTTP_CONTENT_LEN = lws_filepos_t(Clonglong(-1))

const LWS_H2_STREAM_SID = -1

const lws_plat_service_tsi = lws_service_tsi

# Skipping MacroDefinition: LWS_SIZEOFPTR ( ( int ) sizeof ( void * ) )

const _LWS_PAD_SIZE = LWS_SIZEOFPTR

const LWS_PRE = _LWS_PAD(4 + 10 + 2)

const LWS_SEND_BUFFER_PRE_PADDING = LWS_PRE

const LWS_SEND_BUFFER_POST_PADDING = 0

const LWS_WRITE_RAW = LWS_WRITE_HTTP

const LWSTXCR_US_TO_PEER = 0

const LWSTXCR_PEER_TO_US = 1

const LWS_FOP_OPEN = open

const LWS_FOP_CLOSE = close

const LWS_FOP_SEEK_CUR = seek_cur

const LWS_FOP_READ = read

const LWS_FOP_WRITE = write

const LWS_FOP_FLAGS_MASK = 1 << 23 - 1

const LWS_FOP_FLAG_COMPR_ACCEPTABLE_GZIP = 1 << 24

const LWS_FOP_FLAG_COMPR_IS_GZIP = 1 << 25

const LWS_FOP_FLAG_MOD_TIME_VALID = 1 << 26

const LWS_FOP_FLAG_VIRTUAL = 1 << 27

const LWS_GENCRYPTO_MAX_KEYEL_COUNT = LWS_GENCRYPTO_RSA_KEYEL_COUNT

const LEJP_FLAG_WS_KEEP = 64

const LEJP_FLAG_WS_COMMENTLINE = 32

const LEJP_FLAG_CB_IS_VALUE = 64

const LEJP_MAX_PARSING_STACK_DEPTH = 5

const LEJP_MAX_DEPTH = 12

const LEJP_MAX_INDEX_DEPTH = 8

const LEJP_MAX_PATH = 128

const LEJP_STRING_CHUNK = 254

const LECP_MAX_PARSING_STACK_DEPTH = 5

const LECP_MAX_DEPTH = 12

const LECP_MAX_INDEX_DEPTH = 8

const LECP_MAX_PATH = 128

const LECP_STRING_CHUNK = 254

const LECP_FLAG_CB_IS_VALUE = 64

const LCSC_FL_ADD_CBOR_TAG = 1 << 0

const LCSC_FL_ADD_CBOR_PREFER_MAC0 = 1 << 1

const LWS_TOKENIZE_F_MINUS_NONTERM = 1 << 0

const LWS_TOKENIZE_F_AGG_COLON = 1 << 1

const LWS_TOKENIZE_F_COMMA_SEP_LIST = 1 << 2

const LWS_TOKENIZE_F_RFC7230_DELIMS = 1 << 3

const LWS_TOKENIZE_F_DOT_NONTERM = 1 << 4

const LWS_TOKENIZE_F_NO_FLOATS = 1 << 5

const LWS_TOKENIZE_F_NO_INTEGERS = 1 << 6

const LWS_TOKENIZE_F_HASH_COMMENT = 1 << 7

const LWS_TOKENIZE_F_SLASH_NONTERM = 1 << 8

const LWS_TOKENIZE_F_ASTERISK_NONTERM = 1 << 9

const LWS_TOKENIZE_F_EQUALS_NONTERM = 1 << 10

const lwsac_use_zeroed = lwsac_use_zero

const LWSFTS_F_QUERY_AUTOCOMPLETE = 1 << 0

const LWSFTS_F_QUERY_FILES = 1 << 1

const LWSFTS_F_QUERY_FILE_LINES = 1 << 2

const LWSFTS_F_QUERY_QUOTE_LINE = 1 << 3

const LWS_DISKCACHE_QUERY_NO_CACHE = 0

const LWS_DISKCACHE_QUERY_EXISTS = 1

const LWS_DISKCACHE_QUERY_CREATING = 2

const LWS_DISKCACHE_QUERY_ONGOING = 3

const LWSSEQTO_NONE = 0

const LWS_SS_MTU = 1540

const LWSSS_TIMEOUT_FROM_POLICY = 0

const LWS_SESSION_TAG_LEN = 96

const LWS_GENHASH_LARGEST = 64

const LWS_AES_BLOCKSIZE = 128

const LWS_AES_CBC_BLOCKLEN = 16

const LWSJWKF_EXPORT_PRIVATE = 1 << 0

const LWSJWKF_EXPORT_NOCRLF = 1 << 1

const LWS_JWS_MAX_RECIPIENTS = 3

const LWS_JWS_MAX_SIGS = 3

const LWS_JWE_RFC3394_OVERHEAD_BYTES = 8

const LWS_JWE_AES_IV_BYTES = 16

const LWS_JWE_LIMIT_RSA_KEY_BITS = 4096

const LWS_JWE_LIMIT_AES_KEY_BITS = 512 + 64

const LWS_JWE_LIMIT_EC_KEY_BITS = 528

const LWS_JWE_LIMIT_HASH_BITS = LWS_GENHASH_LARGEST * 8

const LWS_JWE_LIMIT_KEY_ELEMENT_BYTES = LWS_JWE_LIMIT_RSA_KEY_BITS ÷ 8

# Skipping MacroDefinition: lws_bb_i2c_ops { . init = lws_bb_i2c_init , . start = lws_bb_i2c_start , . stop = lws_bb_i2c_stop , . write = lws_bb_i2c_write , . read = lws_bb_i2c_read , . set_ack = lws_bb_i2c_set_ack , }

const LWSBBSPI_FLAG_USE_NCMD3 = 1 << 7

const LWSBBSPI_FLAG_USE_NCMD2 = 1 << 6

const LWSBBSPI_FLAG_USE_NCMD1 = 1 << 5

const LWSBBSPI_FLAG_USE_NCMD0 = 1 << 4

const LWSBBSPI_FLAG_USE_NCS3 = 1 << 3

const LWSBBSPI_FLAG_USE_NCS2 = 1 << 2

const LWSBBSPI_FLAG_USE_NCS1 = 1 << 1

const LWSBBSPI_FLAG_USE_NCS0 = 1 << 0

const LWS_SPI_BB_MAX_CH = 4

# Skipping MacroDefinition: lws_bb_spi_ops . init = lws_bb_spi_init , . queue = lws_bb_spi_queue

const LWS_BUTTON_MON_TIMER_MS = 5

const LWS_LED_MAX_INTENSITY = 0xffff

const LWS_LED_FUNC_PHASE = 65536

const LWS_SEQ_LEDPHASE_TOTAL_ENDLESS = -1

const LWS_LED_SEQUENCER_UPDATE_INTERVAL_MS = 33

# Skipping MacroDefinition: lws_led_gpio_ops { . create = lws_led_gpio_create , . destroy = lws_led_gpio_destroy , . intensity = lws_led_gpio_intensity , }

# Skipping MacroDefinition: lws_pwm_plat_ops . init = lws_pwm_plat_init , . intensity = lws_pwm_plat_intensity

const SSD1306_I2C7_ADS1 = 0x3c

const SSD1306_I2C7_ADS2 = 0x3d

# Skipping MacroDefinition: lws_display_ssd1306_ops . init = lws_display_ssd1306_i2c_init , . contrast = lws_display_ssd1306_i2c_contrast , . blit = lws_display_ssd1306_i2c_blit , . power = lws_display_ssd1306_i2c_power

# Skipping MacroDefinition: lws_display_ili9341_ops . init = lws_display_ili9341_spi_init , . blit = lws_display_ili9341_spi_blit , . power = lws_display_ili9341_spi_power

const LSOOPEN_FLAG_WRITEABLE = 1 << 0

# Skipping MacroDefinition: lws_settings_ops_plat . get = lws_settings_plat_get , . set = lws_settings_plat_set ,

const LWS_WIFI_MAX_SCAN_TRACK = 16

const LWS_ETH_ALEN = 6

# Skipping MacroDefinition: lws_netdev_wifi_plat_ops . create = lws_netdev_wifi_create_plat , . configure = lws_netdev_wifi_configure_plat , . event = lws_netdev_wifi_event_plat , . up = lws_netdev_wifi_up_plat , . down = lws_netdev_wifi_down_plat , . connect = lws_netdev_wifi_connect_plat , . scan = lws_netdev_wifi_scan_plat , . destroy = lws_netdev_wifi_destroy_plat

